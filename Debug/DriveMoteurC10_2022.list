
DriveMoteurC10_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005380  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005544  08005544  00006544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005568  08005568  0000703c  2**0
                  CONTENTS
  4 .ARM          00000008  08005568  08005568  00006568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005570  08005570  0000703c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005570  08005570  00006570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005574  08005574  00006574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08005578  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000003c  080055b4  0000703c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080055b4  00007248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001045c  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d6  00000000  00000000  000174c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00019ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b71  00000000  00000000  0001ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dcc  00000000  00000000  0001b8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011759  00000000  00000000  0003e6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3dee  00000000  00000000  0004fe0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123bfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd4  00000000  00000000  00123c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00127a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000003c 	.word	0x2000003c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800552c 	.word	0x0800552c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000040 	.word	0x20000040
 8000200:	0800552c 	.word	0x0800552c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ProcessCanMessage>:
uint8_t flag_can_direction = 0;
uint8_t flag_can_speed = 0;
uint32_t can_motor_pitch_speed = 0; //0-100%
uint32_t can_motor_pitch_direction = MOTOR_DIRECTION_STOP;

void ProcessCanMessage() {
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
	//	return;
	//}

	// Technically CAN data can be 8 bytes but we only send 4-bytes data to the motor driver
	// uint32_t upper_can_data = rxData[4] | (rxData[5] << 8) | (rxData[6] << 16) | (rxData[7] << 24);
	uint32_t can_data = rxData[0] | (rxData[1] << 8) | (rxData[2] << 16)
 80004fa:	4b18      	ldr	r3, [pc, #96]	@ (800055c <ProcessCanMessage+0x68>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	461a      	mov	r2, r3
 8000500:	4b16      	ldr	r3, [pc, #88]	@ (800055c <ProcessCanMessage+0x68>)
 8000502:	785b      	ldrb	r3, [r3, #1]
 8000504:	021b      	lsls	r3, r3, #8
 8000506:	431a      	orrs	r2, r3
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <ProcessCanMessage+0x68>)
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	041b      	lsls	r3, r3, #16
 800050e:	431a      	orrs	r2, r3
			| (rxData[3] << 24);
 8000510:	4b12      	ldr	r3, [pc, #72]	@ (800055c <ProcessCanMessage+0x68>)
 8000512:	78db      	ldrb	r3, [r3, #3]
 8000514:	061b      	lsls	r3, r3, #24
 8000516:	4313      	orrs	r3, r2
	uint32_t can_data = rxData[0] | (rxData[1] << 8) | (rxData[2] << 16)
 8000518:	607b      	str	r3, [r7, #4]

	if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_DIRECTION) {
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <ProcessCanMessage+0x6c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b13      	cmp	r3, #19
 8000520:	d109      	bne.n	8000536 <ProcessCanMessage+0x42>
		flag_can_direction = 1;
 8000522:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <ProcessCanMessage+0x70>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
		can_data = (can_data & 0xFF); //SUPER IMPORTANT
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	607b      	str	r3, [r7, #4]

		can_motor_pitch_direction = can_data;
 800052e:	4a0e      	ldr	r2, [pc, #56]	@ (8000568 <ProcessCanMessage+0x74>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6013      	str	r3, [r2, #0]
		//can_motor_pitch_speed = 100;
		can_motor_pitch_speed = can_data;
	} else {
		// Unknown CAN ID
	}
}
 8000534:	e00c      	b.n	8000550 <ProcessCanMessage+0x5c>
	} else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_SPEED) {
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <ProcessCanMessage+0x6c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b15      	cmp	r3, #21
 800053c:	d108      	bne.n	8000550 <ProcessCanMessage+0x5c>
		flag_can_speed = 1;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <ProcessCanMessage+0x78>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
		can_data = (can_data & 0xFF); //SUPER IMPORTANT
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	607b      	str	r3, [r7, #4]
		can_motor_pitch_speed = can_data;
 800054a:	4a09      	ldr	r2, [pc, #36]	@ (8000570 <ProcessCanMessage+0x7c>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	2000021c 	.word	0x2000021c
 8000560:	20000200 	.word	0x20000200
 8000564:	20000058 	.word	0x20000058
 8000568:	20000000 	.word	0x20000000
 800056c:	20000059 	.word	0x20000059
 8000570:	2000005c 	.word	0x2000005c

08000574 <TransmitCAN>:

HAL_StatusTypeDef TransmitCAN(uint32_t id, uint8_t *buf, uint8_t size,
		uint8_t with_priority) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	4611      	mov	r1, r2
 8000580:	461a      	mov	r2, r3
 8000582:	460b      	mov	r3, r1
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	4613      	mov	r3, r2
 8000588:	71bb      	strb	r3, [r7, #6]
	// CAN_TxHeaderTypeDef msg;
	pTxHeader.StdId = id;
 800058a:	4a27      	ldr	r2, [pc, #156]	@ (8000628 <TransmitCAN+0xb4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	6013      	str	r3, [r2, #0]
	pTxHeader.IDE = CAN_ID_STD;
 8000590:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <TransmitCAN+0xb4>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR = CAN_RTR_DATA;
 8000596:	4b24      	ldr	r3, [pc, #144]	@ (8000628 <TransmitCAN+0xb4>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
	pTxHeader.DLC = size; // Number of bytes to send
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4a22      	ldr	r2, [pc, #136]	@ (8000628 <TransmitCAN+0xb4>)
 80005a0:	6113      	str	r3, [r2, #16]
	pTxHeader.TransmitGlobalTime = DISABLE;
 80005a2:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <TransmitCAN+0xb4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	751a      	strb	r2, [r3, #20]

	uint8_t found_mailbox = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 10; ++i) {
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
 80005b0:	e00b      	b.n	80005ca <TransmitCAN+0x56>
		// Check that mailbox is available for tx
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0) {
 80005b2:	481e      	ldr	r0, [pc, #120]	@ (800062c <TransmitCAN+0xb8>)
 80005b4:	f002 f824 	bl	8002600 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <TransmitCAN+0x50>
			found_mailbox = 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	75fb      	strb	r3, [r7, #23]
			break;
 80005c2:	e005      	b.n	80005d0 <TransmitCAN+0x5c>
	for (int i = 0; i < 10; ++i) {
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	3301      	adds	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2b09      	cmp	r3, #9
 80005ce:	ddf0      	ble.n	80005b2 <TransmitCAN+0x3e>
	if (!found_mailbox) {
		// TODO: (Marc) Should really be the error led once it's been soldered
		//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
	}

	if (with_priority) {
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d010      	beq.n	80005f8 <TransmitCAN+0x84>
		// If message is important, make sure no other messages are queud to ensure it will be sent after any other
		// values that could override it.
		for (int i = 0; i < 10; ++i) {
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	e008      	b.n	80005ee <TransmitCAN+0x7a>
			// Check that all 3 mailboxes are empty
			if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 3)
 80005dc:	4813      	ldr	r0, [pc, #76]	@ (800062c <TransmitCAN+0xb8>)
 80005de:	f002 f80f 	bl	8002600 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d006      	beq.n	80005f6 <TransmitCAN+0x82>
		for (int i = 0; i < 10; ++i) {
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	3301      	adds	r3, #1
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	2b09      	cmp	r3, #9
 80005f2:	ddf3      	ble.n	80005dc <TransmitCAN+0x68>
 80005f4:	e000      	b.n	80005f8 <TransmitCAN+0x84>
				break;
 80005f6:	bf00      	nop
			//delay_us(50);
		}
	}

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, buf, &mb);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	490a      	ldr	r1, [pc, #40]	@ (8000628 <TransmitCAN+0xb4>)
 8000600:	480a      	ldr	r0, [pc, #40]	@ (800062c <TransmitCAN+0xb8>)
 8000602:	f001 ff2d 	bl	8002460 <HAL_CAN_AddTxMessage>
 8000606:	4603      	mov	r3, r0
 8000608:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK) {
 800060a:	7dbb      	ldrb	r3, [r7, #22]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <TransmitCAN+0xa0>
		return ret;
 8000610:	7dbb      	ldrb	r3, [r7, #22]
 8000612:	e005      	b.n	8000620 <TransmitCAN+0xac>
	}

	// Update the CAN led
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2102      	movs	r1, #2
 8000618:	4805      	ldr	r0, [pc, #20]	@ (8000630 <TransmitCAN+0xbc>)
 800061a:	f002 fe5b 	bl	80032d4 <HAL_GPIO_WritePin>
	// ToggleLed(LED_CAN);
	return ret;
 800061e:	7dbb      	ldrb	r3, [r7, #22]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200001e8 	.word	0x200001e8
 800062c:	20000090 	.word	0x20000090
 8000630:	40020c00 	.word	0x40020c00

08000634 <InitRegValuesStepper>:
STEP2_Pin,
DIR2_Pin } };

DRV8711_REGS drive_regs[DRIVE_MOTOR_NUM];

void InitRegValuesStepper(DRIVE_MOTOR drive_index) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
//
// ───── CTRL REGISTER (0x00) ─────────────────────────────────────────────
// Contrôle principal du moteur (activation, direction, step, mode de microstep)
//
	drive_regs[drive_index].ctrl_reg.enbl = 0;
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a6b      	ldr	r2, [pc, #428]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	441a      	add	r2, r3
 8000646:	7813      	ldrb	r3, [r2, #0]
 8000648:	f36f 0300 	bfc	r3, #0, #1
 800064c:	7013      	strb	r3, [r2, #0]
// ENBL : Active la sortie du driver
// 0 = désactivé (sorties en haute impédance), 1 = activé
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.rdir = 0;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4a67      	ldr	r2, [pc, #412]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	441a      	add	r2, r3
 8000656:	7813      	ldrb	r3, [r2, #0]
 8000658:	f36f 0341 	bfc	r3, #1, #1
 800065c:	7013      	strb	r3, [r2, #0]
// RDIR : Direction contrôlée par pin DIR si = 0, sinon inversée
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.rstep = 0;
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4a63      	ldr	r2, [pc, #396]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	441a      	add	r2, r3
 8000666:	7813      	ldrb	r3, [r2, #0]
 8000668:	f36f 0382 	bfc	r3, #2, #1
 800066c:	7013      	strb	r3, [r2, #0]
// RSTEP : 1: Indexer will advance one step; automatically cleared after write
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.mode = 0b0000;
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4a5f      	ldr	r2, [pc, #380]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	441a      	add	r2, r3
 8000676:	7813      	ldrb	r3, [r2, #0]
 8000678:	f36f 03c6 	bfc	r3, #3, #4
 800067c:	7013      	strb	r3, [r2, #0]
// MODE : Réglage du microstepping (0 = full step, jusqu’à 0b1000 = 1/256)
// Par défaut DRV8711 : 0b0000 (full step)

	drive_regs[drive_index].ctrl_reg.extstall = 0;
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4a5b      	ldr	r2, [pc, #364]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	441a      	add	r2, r3
 8000686:	7813      	ldrb	r3, [r2, #0]
 8000688:	f36f 13c7 	bfc	r3, #7, #1
 800068c:	7013      	strb	r3, [r2, #0]
// EXTSTALL : 0 = Stall détecté en interne, 1 = via pin externe
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.isgain = 0b00;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4a57      	ldr	r2, [pc, #348]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	441a      	add	r2, r3
 8000696:	7853      	ldrb	r3, [r2, #1]
 8000698:	f36f 0301 	bfc	r3, #0, #2
 800069c:	7053      	strb	r3, [r2, #1]
// ISGAIN : Gain du senseur de courant (00 = 5, 01 = 10, 10 = 20, 11 = 40)
// Par défaut DRV8711 : 0b00 (gain de 5)

	drive_regs[drive_index].ctrl_reg.dtime = 0b00;
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4a53      	ldr	r2, [pc, #332]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	441a      	add	r2, r3
 80006a6:	7853      	ldrb	r3, [r2, #1]
 80006a8:	f36f 0383 	bfc	r3, #2, #2
 80006ac:	7053      	strb	r3, [r2, #1]

//
// ───── TORQUE REGISTER (0x01) ───────────────────────────────────────────
// Détermine le courant de phase appliqué
//
	drive_regs[drive_index].torque_reg.torque = 8; // 100% de puissance avec isgain à 20
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4a4f      	ldr	r2, [pc, #316]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80006b2:	011b      	lsls	r3, r3, #4
 80006b4:	4413      	add	r3, r2
 80006b6:	3302      	adds	r3, #2
 80006b8:	2208      	movs	r2, #8
 80006ba:	701a      	strb	r2, [r3, #0]
// TORQUE : Niveau de couple (0–255), proportionnel au courant de sortie
// Par défaut DRV8711 : 0xFF (255)

	drive_regs[drive_index].torque_reg.smplth = 0b000;
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4a4c      	ldr	r2, [pc, #304]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80006c0:	011b      	lsls	r3, r3, #4
 80006c2:	441a      	add	r2, r3
 80006c4:	78d3      	ldrb	r3, [r2, #3]
 80006c6:	f36f 0302 	bfc	r3, #0, #3
 80006ca:	70d3      	strb	r3, [r2, #3]

//
// ───── OFF REGISTER (0x02) ──────────────────────────────────────────────
// Temps d’arrêt de PWM et mode PWM
//
	drive_regs[drive_index].off_reg.toff = 0x00;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4a48      	ldr	r2, [pc, #288]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4413      	add	r3, r2
 80006d4:	3304      	adds	r3, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
// TOFF : Temps mort (0 = désactivé, >0 = en pas de 500ns)
// Par défaut DRV8711 : 0x30 (24 = 12 µs)

	drive_regs[drive_index].off_reg.pwmmode = 0;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4a44      	ldr	r2, [pc, #272]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	441a      	add	r2, r3
 80006e2:	7953      	ldrb	r3, [r2, #5]
 80006e4:	f36f 0300 	bfc	r3, #0, #1
 80006e8:	7153      	strb	r3, [r2, #5]
// Par défaut DRV8711 : 0

//// ───── BLANK REGISTER (0x03) ────────────────────────────────────────────
// Temps de masquage de détection de courant après une commutation
//
	drive_regs[drive_index].blank_reg.tblank = 0x00;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	4413      	add	r3, r2
 80006f2:	3306      	adds	r3, #6
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
// TBLANK : Masque de courant (en pas de 20ns) - — 0x80 = 2.56 µs
// Par défaut DRV8711 : 0x80

	drive_regs[drive_index].blank_reg.abt = 1;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4a3d      	ldr	r2, [pc, #244]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	441a      	add	r2, r3
 8000700:	79d3      	ldrb	r3, [r2, #7]
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	71d3      	strb	r3, [r2, #7]

//
// ───── DECAY REGISTER (0x04) ────────────────────────────────────────────
// Contrôle le mode de "décroissance" du courant moteur
//
	drive_regs[drive_index].decay_reg.tdecay = 0x10;
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4a39      	ldr	r2, [pc, #228]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	4413      	add	r3, r2
 8000710:	3308      	adds	r3, #8
 8000712:	2210      	movs	r2, #16
 8000714:	701a      	strb	r2, [r3, #0]
// TDECAY : temps avant transition entre fast et slow decay (500ns steps)
// Par défaut DRV8711 : 0x10 (8 µs)

	drive_regs[drive_index].decay_reg.decmod = 0b101;
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4a35      	ldr	r2, [pc, #212]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 800071a:	011b      	lsls	r3, r3, #4
 800071c:	4413      	add	r3, r2
 800071e:	f103 0208 	add.w	r2, r3, #8
 8000722:	7853      	ldrb	r3, [r2, #1]
 8000724:	2105      	movs	r1, #5
 8000726:	f361 0302 	bfi	r3, r1, #0, #3
 800072a:	7053      	strb	r3, [r2, #1]

//
// ───── STALL REGISTER (0x05) ────────────────────────────────────────────
// Détection de blocage moteur (optionnel)
//
	drive_regs[drive_index].stall_reg.sdthr = 0x3F; //0xFF
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4a30      	ldr	r2, [pc, #192]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	4413      	add	r3, r2
 8000734:	330a      	adds	r3, #10
 8000736:	223f      	movs	r2, #63	@ 0x3f
 8000738:	701a      	strb	r2, [r3, #0]
// SDTHR : Seuil de BEMF pour détecter un blocage
// Par défaut DRV8711 : 0x40

	drive_regs[drive_index].stall_reg.sdcnt = 0b00; //0b11
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	4a2c      	ldr	r2, [pc, #176]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 800073e:	011b      	lsls	r3, r3, #4
 8000740:	4413      	add	r3, r2
 8000742:	f103 0208 	add.w	r2, r3, #8
 8000746:	78d3      	ldrb	r3, [r2, #3]
 8000748:	f36f 0301 	bfc	r3, #0, #2
 800074c:	70d3      	strb	r3, [r2, #3]
// SDCNT : nombre de pas requis avant détection (00 = 2, ..., 11 = 8 pas)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].stall_reg.vdiv = 0b10;
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4a27      	ldr	r2, [pc, #156]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	4413      	add	r3, r2
 8000756:	f103 0208 	add.w	r2, r3, #8
 800075a:	78d3      	ldrb	r3, [r2, #3]
 800075c:	2102      	movs	r1, #2
 800075e:	f361 0383 	bfi	r3, r1, #2, #2
 8000762:	70d3      	strb	r3, [r2, #3]

//
// ───── DRIVE REGISTER (0x06) ────────────────────────────────────────────
// Réglage de la puissance des transistors MOSFET (gate drive)
//
	drive_regs[drive_index].drive_reg.ocpth = 0b00; //00
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	f103 0208 	add.w	r2, r3, #8
 8000770:	7913      	ldrb	r3, [r2, #4]
 8000772:	f36f 0301 	bfc	r3, #0, #2
 8000776:	7113      	strb	r3, [r2, #4]
// OCPTH : OCP threshold (00 = 250mV, 01 = 500mV, 10 = 750mV, 11 = 1000mV)
// Par défaut DRV8711 : 0b01

	drive_regs[drive_index].drive_reg.ocpdeg = 0b10; //10
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	4413      	add	r3, r2
 8000780:	f103 0208 	add.w	r2, r3, #8
 8000784:	7913      	ldrb	r3, [r2, #4]
 8000786:	2102      	movs	r1, #2
 8000788:	f361 0383 	bfi	r3, r1, #2, #2
 800078c:	7113      	strb	r3, [r2, #4]
// OCPDEG : OCP deglitch time (00 = 1 µs, 01 = 2 µs, 10 = 4 µs, 11 = 8 µs)
// Par défaut DRV8711 : 0b10

	drive_regs[drive_index].drive_reg.tdriven = 0b10; //10
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	4413      	add	r3, r2
 8000796:	f103 0208 	add.w	r2, r3, #8
 800079a:	7913      	ldrb	r3, [r2, #4]
 800079c:	2102      	movs	r1, #2
 800079e:	f361 1305 	bfi	r3, r1, #4, #2
 80007a2:	7113      	strb	r3, [r2, #4]
// TDRIVEN : Low-side gate drive time (00 = 250ns, 01 = 500ns, 10 = 1us, 11 = 2us)
// Par défaut DRV8711 : 0b01

	drive_regs[drive_index].drive_reg.tdrivep = 0b10; //10
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	4413      	add	r3, r2
 80007ac:	f103 0208 	add.w	r2, r3, #8
 80007b0:	7913      	ldrb	r3, [r2, #4]
 80007b2:	2102      	movs	r1, #2
 80007b4:	f361 1387 	bfi	r3, r1, #6, #2
 80007b8:	7113      	strb	r3, [r2, #4]
// TDRIVEP : High-side gate drive time (00 = 250ns, 01 = 500ns, 10 = 1us, 11 = 2us)
// Par défaut DRV8711 : 0b01

	drive_regs[drive_index].drive_reg.idriven = 0b00; //11
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a0c      	ldr	r2, [pc, #48]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	4413      	add	r3, r2
 80007c2:	f103 0208 	add.w	r2, r3, #8
 80007c6:	7953      	ldrb	r3, [r2, #5]
 80007c8:	f36f 0301 	bfc	r3, #0, #2
 80007cc:	7153      	strb	r3, [r2, #5]
// IDRIVEP : Low-side gate drive peak current peak (sink) (00 = 100mA, 01 = 200mA, 10 = 300mA, 11 = 400mA)
// Par défaut DRV8711 : 0b10

	drive_regs[drive_index].drive_reg.idrivep = 0b00; //11
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <InitRegValuesStepper+0x1bc>)
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	4413      	add	r3, r2
 80007d6:	f103 0208 	add.w	r2, r3, #8
 80007da:	7953      	ldrb	r3, [r2, #5]
 80007dc:	f36f 0383 	bfc	r3, #2, #2
 80007e0:	7153      	strb	r3, [r2, #5]
// IDRIVEP : High-side gate drive peak current peak (source) (00 = 50mA, 01 = 100mA, 10 = 150mA, 11 = 200mA)
// Par défaut DRV8711 : 0b10
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	2000006c 	.word	0x2000006c

080007f4 <ReadRegConfig>:

uint16_t ReadRegConfig(DRIVE_MOTOR drive_index, uint8_t reg) {
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
	uint16_t reg_data = -1;
 8000804:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000808:	81fb      	strh	r3, [r7, #14]

	switch (reg) {
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	2b07      	cmp	r3, #7
 800080e:	d852      	bhi.n	80008b6 <ReadRegConfig+0xc2>
 8000810:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <ReadRegConfig+0x24>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000839 	.word	0x08000839
 800081c:	08000847 	.word	0x08000847
 8000820:	08000857 	.word	0x08000857
 8000824:	08000867 	.word	0x08000867
 8000828:	08000877 	.word	0x08000877
 800082c:	08000887 	.word	0x08000887
 8000830:	08000897 	.word	0x08000897
 8000834:	080008a7 	.word	0x080008a7
	case 0:
		reg_data = drive_regs[drive_index].ctrl_reg.reg;
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4a24      	ldr	r2, [pc, #144]	@ (80008cc <ReadRegConfig+0xd8>)
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4413      	add	r3, r2
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	81fb      	strh	r3, [r7, #14]
		break;
 8000844:	e03a      	b.n	80008bc <ReadRegConfig+0xc8>
	case 1:
		reg_data = drive_regs[drive_index].torque_reg.reg;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	4a20      	ldr	r2, [pc, #128]	@ (80008cc <ReadRegConfig+0xd8>)
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	4413      	add	r3, r2
 800084e:	3302      	adds	r3, #2
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	81fb      	strh	r3, [r7, #14]
		break;
 8000854:	e032      	b.n	80008bc <ReadRegConfig+0xc8>
	case 2:
		reg_data = drive_regs[drive_index].off_reg.reg;
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <ReadRegConfig+0xd8>)
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	4413      	add	r3, r2
 800085e:	3304      	adds	r3, #4
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	81fb      	strh	r3, [r7, #14]
		break;
 8000864:	e02a      	b.n	80008bc <ReadRegConfig+0xc8>
	case 3:
		reg_data = drive_regs[drive_index].blank_reg.reg;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <ReadRegConfig+0xd8>)
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	4413      	add	r3, r2
 800086e:	3306      	adds	r3, #6
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	81fb      	strh	r3, [r7, #14]
		break;
 8000874:	e022      	b.n	80008bc <ReadRegConfig+0xc8>
	case 4:
		reg_data = drive_regs[drive_index].decay_reg.reg;
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4a14      	ldr	r2, [pc, #80]	@ (80008cc <ReadRegConfig+0xd8>)
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	4413      	add	r3, r2
 800087e:	3308      	adds	r3, #8
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	81fb      	strh	r3, [r7, #14]
		break;
 8000884:	e01a      	b.n	80008bc <ReadRegConfig+0xc8>
	case 5:
		reg_data = drive_regs[drive_index].stall_reg.reg;
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4a10      	ldr	r2, [pc, #64]	@ (80008cc <ReadRegConfig+0xd8>)
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	4413      	add	r3, r2
 800088e:	330a      	adds	r3, #10
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	81fb      	strh	r3, [r7, #14]
		break;
 8000894:	e012      	b.n	80008bc <ReadRegConfig+0xc8>
	case 6:
		reg_data = drive_regs[drive_index].drive_reg.reg;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <ReadRegConfig+0xd8>)
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	4413      	add	r3, r2
 800089e:	330c      	adds	r3, #12
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	81fb      	strh	r3, [r7, #14]
		break;
 80008a4:	e00a      	b.n	80008bc <ReadRegConfig+0xc8>
	case 7:
		reg_data = drive_regs[drive_index].status_reg.reg;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <ReadRegConfig+0xd8>)
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	4413      	add	r3, r2
 80008ae:	330e      	adds	r3, #14
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	81fb      	strh	r3, [r7, #14]
		break;
 80008b4:	e002      	b.n	80008bc <ReadRegConfig+0xc8>
	default:
		reg_data = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	81fb      	strh	r3, [r7, #14]
		break;
 80008ba:	bf00      	nop
	}
	return reg_data;
 80008bc:	89fb      	ldrh	r3, [r7, #14]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	2000006c 	.word	0x2000006c

080008d0 <SelectDriveCS>:

void SelectDriveCS(DRIVE_MOTOR drive_index) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	e037      	b.n	8000950 <SelectDriveCS+0x80>
		if (num != drive_index) {
 80008e0:	7bfa      	ldrb	r2, [r7, #15]
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d016      	beq.n	8000916 <SelectDriveCS+0x46>
			// Désélectionner la puce (CS à LOW après la transmission)
			HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS], drive_pins[num][DRIVE_CS],
 80008e8:	7bfa      	ldrb	r2, [r7, #15]
 80008ea:	491d      	ldr	r1, [pc, #116]	@ (8000960 <SelectDriveCS+0x90>)
 80008ec:	4613      	mov	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	440b      	add	r3, r1
 80008f6:	3308      	adds	r3, #8
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	7bfa      	ldrb	r2, [r7, #15]
 80008fc:	4919      	ldr	r1, [pc, #100]	@ (8000964 <SelectDriveCS+0x94>)
 80008fe:	4613      	mov	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	440b      	add	r3, r1
 8000908:	3304      	adds	r3, #4
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	f002 fce0 	bl	80032d4 <HAL_GPIO_WritePin>
 8000914:	e019      	b.n	800094a <SelectDriveCS+0x7a>
					GPIO_PIN_RESET);
		} else if (num == drive_index) {
 8000916:	7bfa      	ldrb	r2, [r7, #15]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	429a      	cmp	r2, r3
 800091c:	d115      	bne.n	800094a <SelectDriveCS+0x7a>
			// Sélectionner la puce (CS à HIGH avant la transmission)
			HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS], drive_pins[num][DRIVE_CS],
 800091e:	7bfa      	ldrb	r2, [r7, #15]
 8000920:	490f      	ldr	r1, [pc, #60]	@ (8000960 <SelectDriveCS+0x90>)
 8000922:	4613      	mov	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	440b      	add	r3, r1
 800092c:	3308      	adds	r3, #8
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	7bfa      	ldrb	r2, [r7, #15]
 8000932:	490c      	ldr	r1, [pc, #48]	@ (8000964 <SelectDriveCS+0x94>)
 8000934:	4613      	mov	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4413      	add	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	440b      	add	r3, r1
 800093e:	3304      	adds	r3, #4
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	2201      	movs	r2, #1
 8000944:	4619      	mov	r1, r3
 8000946:	f002 fcc5 	bl	80032d4 <HAL_GPIO_WritePin>
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3301      	adds	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d9c4      	bls.n	80008e0 <SelectDriveCS+0x10>
					GPIO_PIN_SET);
		}
	}
}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000008 	.word	0x20000008
 8000964:	08005544 	.word	0x08005544

08000968 <UnselectDriveCS>:

void UnselectDriveCS() {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 800096e:	2300      	movs	r3, #0
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	e018      	b.n	80009a6 <UnselectDriveCS+0x3e>
		// Désélectionner la puce (CS à LOW après la transmission)
		HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS], drive_pins[num][DRIVE_CS],
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	4910      	ldr	r1, [pc, #64]	@ (80009b8 <UnselectDriveCS+0x50>)
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	3308      	adds	r3, #8
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	490c      	ldr	r1, [pc, #48]	@ (80009bc <UnselectDriveCS+0x54>)
 800098a:	4613      	mov	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	440b      	add	r3, r1
 8000994:	3304      	adds	r3, #4
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	2200      	movs	r2, #0
 800099a:	4619      	mov	r1, r3
 800099c:	f002 fc9a 	bl	80032d4 <HAL_GPIO_WritePin>
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	3301      	adds	r3, #1
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d9e3      	bls.n	8000974 <UnselectDriveCS+0xc>
				GPIO_PIN_RESET);
	}
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008
 80009bc:	08005544 	.word	0x08005544

080009c0 <TransmitReceiveSPI>:

uint16_t TransmitReceiveSPI(DRIVE_MOTOR drive_index, uint16_t data) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	80bb      	strh	r3, [r7, #4]
	// Convertir en 2 octets MSB-first
	uint8_t tx_data[2] = { (data >> 8) & 0xFF, data & 0xFF };
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	743b      	strb	r3, [r7, #16]
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	747b      	strb	r3, [r7, #17]

	uint8_t rx_data[2] = { 0 };
 80009e0:	2300      	movs	r3, #0
 80009e2:	81bb      	strh	r3, [r7, #12]

	// Sélectionner la puce (CS à HIGH avant la transmission)
	SelectDriveCS(drive_index);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff72 	bl	80008d0 <SelectDriveCS>

	// Transmettre le message
	uint8_t err = HAL_SPI_TransmitReceive(hspi, tx_data, rx_data, 2,
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <TransmitReceiveSPI+0x88>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	f107 020c 	add.w	r2, r7, #12
 80009f4:	f107 0110 	add.w	r1, r7, #16
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2302      	movs	r3, #2
 8000a00:	f003 fbbb 	bl	800417a <HAL_SPI_TransmitReceive>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]
	HAL_MAX_DELAY);

	if (err != HAL_OK) {
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d009      	beq.n	8000a22 <TransmitReceiveSPI+0x62>
		// SPI erreur → allumer LED de diagnostic
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	480e      	ldr	r0, [pc, #56]	@ (8000a4c <TransmitReceiveSPI+0x8c>)
 8000a14:	f002 fc5e 	bl	80032d4 <HAL_GPIO_WritePin>
		hal_spi_transmitreceive_error++;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <TransmitReceiveSPI+0x90>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a50 <TransmitReceiveSPI+0x90>)
 8000a20:	6013      	str	r3, [r2, #0]
	}

	// Désélectionner les puces (CS à LOW après la transmission)
	UnselectDriveCS();
 8000a22:	f7ff ffa1 	bl	8000968 <UnselectDriveCS>

	// Reconstruire la valeur lue
	uint16_t received_data = ((uint16_t) rx_data[0] << 8) | rx_data[1];
 8000a26:	7b3b      	ldrb	r3, [r7, #12]
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	b21a      	sxth	r2, r3
 8000a2c:	7b7b      	ldrb	r3, [r7, #13]
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	82bb      	strh	r3, [r7, #20]
	 //HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
	 //flag_drive_fault = 1;
	 }*/

	// Extraire seulement les 12 bits de data
	return received_data & 0x0FFF;
 8000a36:	8abb      	ldrh	r3, [r7, #20]
 8000a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a3c:	b29b      	uxth	r3, r3

}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	20000068 	.word	0x20000068

08000a54 <ReadSPI>:

uint16_t ReadSPI(DRIVE_MOTOR drive_index, uint8_t reg) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	4613      	mov	r3, r2
 8000a62:	71bb      	strb	r3, [r7, #6]
	// Construire la commande de lecture : bit 15 = 1, reg sur bits 14–12
	uint16_t read_cmd = (1 << 15) | (reg << 12);
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	031b      	lsls	r3, r3, #12
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	81bb      	strh	r3, [r7, #12]

	uint16_t received_data = TransmitReceiveSPI(drive_index, read_cmd);
 8000a76:	89ba      	ldrh	r2, [r7, #12]
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff9f 	bl	80009c0 <TransmitReceiveSPI>
 8000a82:	4603      	mov	r3, r0
 8000a84:	81fb      	strh	r3, [r7, #14]

	if ((reg == DRV8711_TORQUE_REG)
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d10e      	bne.n	8000aaa <ReadSPI+0x56>
			&& (ReadRegConfig(drive_index, reg) & 0b010000000000)) { // datasheet bit 10 on register 1 always return 0
 8000a8c:	79ba      	ldrb	r2, [r7, #6]
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff feae 	bl	80007f4 <ReadRegConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <ReadSPI+0x56>
		received_data = received_data | 0b010000000000;
 8000aa2:	89fb      	ldrh	r3, [r7, #14]
 8000aa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aa8:	81fb      	strh	r3, [r7, #14]
	}
	if ((reg == DRV8711_CTRL_REG) && (received_data & 0b000000000100)) { // datasheet bit 2 on register 0 clear after write
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10a      	bne.n	8000ac6 <ReadSPI+0x72>
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d005      	beq.n	8000ac6 <ReadSPI+0x72>
		received_data = received_data & 0b111111111011;
 8000aba:	89fb      	ldrh	r3, [r7, #14]
 8000abc:	f023 0304 	bic.w	r3, r3, #4
 8000ac0:	051b      	lsls	r3, r3, #20
 8000ac2:	0d1b      	lsrs	r3, r3, #20
 8000ac4:	81fb      	strh	r3, [r7, #14]
	}

	return received_data;
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <TransmitSPI>:

void TransmitSPI(DRIVE_MOTOR drive_index, uint16_t data) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	80bb      	strh	r3, [r7, #4]
	// Convertir en 2 octets MSB-first
	uint8_t tx_data[2] = { (data >> 8) & 0xFF, data & 0xFF };
 8000ae0:	88bb      	ldrh	r3, [r7, #4]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	733b      	strb	r3, [r7, #12]
 8000aea:	88bb      	ldrh	r3, [r7, #4]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	737b      	strb	r3, [r7, #13]

	//On écrie sur la puce :
	tx_data[0] = tx_data[0] & 0x7F;
 8000af0:	7b3b      	ldrb	r3, [r7, #12]
 8000af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	733b      	strb	r3, [r7, #12]

	// Sélectionner la puce (CS à HIGH avant la transmission)
	SelectDriveCS(drive_index);
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fee7 	bl	80008d0 <SelectDriveCS>

	// Transmettre le message
	uint8_t err = HAL_SPI_Transmit(hspi, tx_data, 2, HAL_MAX_DELAY);
 8000b02:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <TransmitSPI+0x70>)
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	f107 010c 	add.w	r1, r7, #12
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	2202      	movs	r2, #2
 8000b10:	f003 f9ef 	bl	8003ef2 <HAL_SPI_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
	if (err != HAL_OK) {
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d009      	beq.n	8000b32 <TransmitSPI+0x62>
		// SPI erreur → allumer LED de diagnostic
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2110      	movs	r1, #16
 8000b22:	4808      	ldr	r0, [pc, #32]	@ (8000b44 <TransmitSPI+0x74>)
 8000b24:	f002 fbd6 	bl	80032d4 <HAL_GPIO_WritePin>
		hal_spi_transmit_error++;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <TransmitSPI+0x78>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a06      	ldr	r2, [pc, #24]	@ (8000b48 <TransmitSPI+0x78>)
 8000b30:	6013      	str	r3, [r2, #0]
	}

	// Désélectionner les puces (CS à LOW après la transmission)
	UnselectDriveCS();
 8000b32:	f7ff ff19 	bl	8000968 <UnselectDriveCS>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000004 	.word	0x20000004
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	20000064 	.word	0x20000064

08000b4c <WriteSPI>:

uint32_t WriteSPI(DRIVE_MOTOR drive_index, uint8_t reg, uint16_t reg_config) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	460b      	mov	r3, r1
 8000b58:	71bb      	strb	r3, [r7, #6]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	80bb      	strh	r3, [r7, #4]
	uint16_t data = (reg << 12) & 0x7000; //registre
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	031b      	lsls	r3, r3, #12
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000b68:	81fb      	strh	r3, [r7, #14]
	data = data | (reg_config & 0x0FFF); //config
 8000b6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	81fb      	strh	r3, [r7, #14]
	data = data & 0x7FFF; //écriture
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b84:	81fb      	strh	r3, [r7, #14]
	uint16_t expected_data = data & 0x0FFF;
 8000b86:	89fb      	ldrh	r3, [r7, #14]
 8000b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b8c:	81bb      	strh	r3, [r7, #12]

	TransmitSPI(drive_index, data);
 8000b8e:	89fa      	ldrh	r2, [r7, #14]
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff9b 	bl	8000ad0 <TransmitSPI>
	uint16_t received_data = ReadSPI(drive_index, reg);
 8000b9a:	79ba      	ldrb	r2, [r7, #6]
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff57 	bl	8000a54 <ReadSPI>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	817b      	strh	r3, [r7, #10]

	if (received_data != expected_data) {
 8000baa:	897a      	ldrh	r2, [r7, #10]
 8000bac:	89bb      	ldrh	r3, [r7, #12]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d019      	beq.n	8000be6 <WriteSPI+0x9a>
		TransmitSPI(drive_index, data);
 8000bb2:	89fa      	ldrh	r2, [r7, #14]
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff89 	bl	8000ad0 <TransmitSPI>
		received_data = ReadSPI(drive_index, reg);
 8000bbe:	79ba      	ldrb	r2, [r7, #6]
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff45 	bl	8000a54 <ReadSPI>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	817b      	strh	r3, [r7, #10]
		if (received_data != expected_data) {
 8000bce:	897a      	ldrh	r2, [r7, #10]
 8000bd0:	89bb      	ldrh	r3, [r7, #12]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d007      	beq.n	8000be6 <WriteSPI+0x9a>
			//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
			spi_error++;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <WriteSPI+0xa4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <WriteSPI+0xa4>)
 8000bde:	6013      	str	r3, [r2, #0]
			return spi_error;
 8000be0:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <WriteSPI+0xa4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	e000      	b.n	8000be8 <WriteSPI+0x9c>
		}
	}
	return 0;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000060 	.word	0x20000060

08000bf4 <SendDriveRegisters>:

void SendDriveRegisters(DRIVE_MOTOR drive_index) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	// Écrire tous les registres sauf STATUS (registre 0x07)
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) {
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e010      	b.n	8000c26 <SendDriveRegisters+0x32>
		uint16_t reg_config = ReadRegConfig(drive_index, reg);
 8000c04:	7bfa      	ldrb	r2, [r7, #15]
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fdf2 	bl	80007f4 <ReadRegConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	81bb      	strh	r3, [r7, #12]
		WriteSPI(drive_index, reg, reg_config);
 8000c14:	89ba      	ldrh	r2, [r7, #12]
 8000c16:	7bf9      	ldrb	r1, [r7, #15]
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff96 	bl	8000b4c <WriteSPI>
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) {
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	3301      	adds	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	d9eb      	bls.n	8000c04 <SendDriveRegisters+0x10>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <ReadAndVerifyDriveRegisters>:

void ReadAndVerifyDriveRegisters(DRIVE_MOTOR drive_index) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	uint8_t error_detected = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]

	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) { // Skip STATUS (0x07)
 8000c44:	2300      	movs	r3, #0
 8000c46:	73bb      	strb	r3, [r7, #14]
 8000c48:	e019      	b.n	8000c7e <ReadAndVerifyDriveRegisters+0x48>
		uint16_t received_data = ReadSPI(drive_index, reg);
 8000c4a:	7bba      	ldrb	r2, [r7, #14]
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff feff 	bl	8000a54 <ReadSPI>
 8000c56:	4603      	mov	r3, r0
 8000c58:	81bb      	strh	r3, [r7, #12]
		uint16_t expected_data = ReadRegConfig(drive_index, reg);
 8000c5a:	7bba      	ldrb	r2, [r7, #14]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fdc7 	bl	80007f4 <ReadRegConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	817b      	strh	r3, [r7, #10]

		if (received_data != expected_data) {
 8000c6a:	89ba      	ldrh	r2, [r7, #12]
 8000c6c:	897b      	ldrh	r3, [r7, #10]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d002      	beq.n	8000c78 <ReadAndVerifyDriveRegisters+0x42>
			//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
			error_detected += 1;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	3301      	adds	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) { // Skip STATUS (0x07)
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	73bb      	strb	r3, [r7, #14]
 8000c7e:	7bbb      	ldrb	r3, [r7, #14]
 8000c80:	2b06      	cmp	r3, #6
 8000c82:	d9e2      	bls.n	8000c4a <ReadAndVerifyDriveRegisters+0x14>
		}
	}
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <CheckDriveStatusRegister>:
 * Bit 8 - STDLAT  (Stall Detect Latch)
 *           → Latch du blocage moteur ; reste à 1 tant que non réinitialisé.
 */
static uint16_t last_status = 0;
uint8_t flag_drive_fault = 0;
uint8_t CheckDriveStatusRegister(DRIVE_MOTOR drive_index) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	uint16_t status = ReadSPI(drive_index, DRV8711_STATUS_REG);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2107      	movs	r1, #7
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fed8 	bl	8000a54 <ReadSPI>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	81fb      	strh	r3, [r7, #14]

	//ResetDriveStatusRegister(drive_index);

	if (status != 0x0000) {
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00b      	beq.n	8000cc6 <CheckDriveStatusRegister+0x36>
		// Une ou plusieurs erreurs détectées → flag drive en faute
		HAL_GPIO_TogglePin(LED_WARNING_GPIO_Port, LED_WARNING_Pin);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <CheckDriveStatusRegister+0x48>)
 8000cb2:	f002 fb28 	bl	8003306 <HAL_GPIO_TogglePin>
		last_status = status;
 8000cb6:	4a09      	ldr	r2, [pc, #36]	@ (8000cdc <CheckDriveStatusRegister+0x4c>)
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	8013      	strh	r3, [r2, #0]
		flag_drive_fault = 1;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <CheckDriveStatusRegister+0x50>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
		return 1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e003      	b.n	8000cce <CheckDriveStatusRegister+0x3e>
	} else {
		// Pas d'erreur
		flag_drive_fault = 0;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <CheckDriveStatusRegister+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
		return 0;
 8000ccc:	2300      	movs	r3, #0
	}

}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40020c00 	.word	0x40020c00
 8000cdc:	2000008c 	.word	0x2000008c
 8000ce0:	2000008e 	.word	0x2000008e

08000ce4 <ResetDriveStatusRegister>:

void ResetDriveStatusRegister(DRIVE_MOTOR drive_index) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	WriteSPI(drive_index, DRV8711_STATUS_REG, 0);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2107      	movs	r1, #7
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff29 	bl	8000b4c <WriteSPI>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f001 f8f7 	bl	8001ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f80f 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 fa5f 	bl	80011d0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d12:	f000 f879 	bl	8000e08 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000d16:	f000 f901 	bl	8000f1c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000d1a:	f000 fa09 	bl	8001130 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d1e:	f000 f9b7 	bl	8001090 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000d22:	f000 f931 	bl	8000f88 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ExecuteStateMachine();
 8000d26:	f000 fd21 	bl	800176c <ExecuteStateMachine>
 8000d2a:	e7fc      	b.n	8000d26 <main+0x24>

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b094      	sub	sp, #80	@ 0x50
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	2234      	movs	r2, #52	@ 0x34
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f004 fbca 	bl	80054d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <SystemClock_Config+0xd4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	4a29      	ldr	r2, [pc, #164]	@ (8000e00 <SystemClock_Config+0xd4>)
 8000d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <SystemClock_Config+0xd4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <SystemClock_Config+0xd8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d78:	4a22      	ldr	r2, [pc, #136]	@ (8000e04 <SystemClock_Config+0xd8>)
 8000d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <SystemClock_Config+0xd8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d90:	2301      	movs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d94:	2310      	movs	r3, #16
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da0:	2308      	movs	r3, #8
 8000da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 fd73 	bl	80038a4 <HAL_RCC_OscConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000dc4:	f000 fb4c 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc8:	230f      	movs	r3, #15
 8000dca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dde:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	2104      	movs	r1, #4
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 facc 	bl	8003384 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000df2:	f000 fb35 	bl	8001460 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3750      	adds	r7, #80	@ 0x50
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	@ 0x50
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e0e:	4b41      	ldr	r3, [pc, #260]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e10:	4a41      	ldr	r2, [pc, #260]	@ (8000f18 <MX_CAN1_Init+0x110>)
 8000e12:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000e14:	4b3f      	ldr	r3, [pc, #252]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e16:	2208      	movs	r2, #8
 8000e18:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8000e20:	4b3c      	ldr	r3, [pc, #240]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000e28:	4b3a      	ldr	r3, [pc, #232]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e2a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000e2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000e30:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e32:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000e36:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e38:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e3e:	4b35      	ldr	r3, [pc, #212]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e44:	4b33      	ldr	r3, [pc, #204]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e4a:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e50:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e5c:	482d      	ldr	r0, [pc, #180]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e5e:	f001 f8e1 	bl	8002024 <HAL_CAN_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000e68:	f000 fafa 	bl	8001460 <Error_Handler>



	CAN_FilterTypeDef sf_fifo0;
	// All common bits go into the ID register
	sf_fifo0.FilterIdHigh = DRIVEMOTOR_FIFO0_RX_FILTER_ID_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sf_fifo0.FilterIdLow = DRIVEMOTOR_FIFO0_RX_FILTER_ID_LOW;
 8000e70:	2360      	movs	r3, #96	@ 0x60
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Which bits to compare for filter
	sf_fifo0.FilterMaskIdHigh = 0x0000;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
	sf_fifo0.FilterMaskIdLow = (FIFO0_RX_FILTER_MASK_LOW & 0x07FF);
 8000e78:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34

	sf_fifo0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
	sf_fifo0.FilterBank = 0; // Which filter to use from the assigned ones
 8000e82:	2300      	movs	r3, #0
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sf_fifo0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	643b      	str	r3, [r7, #64]	@ 0x40
	sf_fifo0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
	sf_fifo0.FilterActivation = CAN_FILTER_ENABLE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	64bb      	str	r3, [r7, #72]	@ 0x48
	sf_fifo0.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8000e92:	230e      	movs	r3, #14
 8000e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo0) != HAL_OK)
 8000e96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481d      	ldr	r0, [pc, #116]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000e9e:	f001 f9bd 	bl	800221c <HAL_CAN_ConfigFilter>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_CAN1_Init+0xa4>
	{
	  Error_Handler();
 8000ea8:	f000 fada 	bl	8001460 <Error_Handler>
	// All common bits go into the ID register
	//sf_fifo1.FilterIdHigh = 0x0000;
	//sf_fifo1.FilterIdLow = 0x0000;
	//sf_fifo1.FilterMaskIdHigh = 0x0000;
	//sf_fifo1.FilterMaskIdLow = 0x0000;
	sf_fifo1.FilterIdHigh = DRIVEMOTOR_FIFO1_RX_FILTER_ID_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]
	sf_fifo1.FilterIdLow = DRIVEMOTOR_FIFO1_RX_FILTER_ID_LOW;
 8000eb0:	2370      	movs	r3, #112	@ 0x70
 8000eb2:	607b      	str	r3, [r7, #4]

	// Which bits to compare for filter
	sf_fifo1.FilterMaskIdHigh = 0x0000;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
	sf_fifo1.FilterMaskIdLow = (FIFO1_RX_FILTER_MASK_LOW & 0x7FF);
 8000eb8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ebc:	60fb      	str	r3, [r7, #12]

	sf_fifo1.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
	sf_fifo1.FilterBank = 1; // Which filter to use from the assigned ones
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
	sf_fifo1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
	sf_fifo1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61fb      	str	r3, [r7, #28]
	sf_fifo1.FilterActivation = CAN_FILTER_ENABLE;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
	sf_fifo1.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8000ed2:	230e      	movs	r3, #14
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo1) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000edc:	f001 f99e 	bl	800221c <HAL_CAN_ConfigFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_CAN1_Init+0xe2>
	{
	  Error_Handler();
 8000ee6:	f000 fabb 	bl	8001460 <Error_Handler>

	//if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
	//{
	//	  Error_Handler();
	//}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000eea:	480a      	ldr	r0, [pc, #40]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000eec:	f001 fa74 	bl	80023d8 <HAL_CAN_Start>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_CAN1_Init+0xf2>
	{
		Error_Handler();
 8000ef6:	f000 fab3 	bl	8001460 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000efa:	2112      	movs	r1, #18
 8000efc:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_CAN1_Init+0x10c>)
 8000efe:	f001 fcfe 	bl	80028fe <HAL_CAN_ActivateNotification>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_CAN1_Init+0x104>
	{
		Error_Handler();
 8000f08:	f000 faaa 	bl	8001460 <Error_Handler>
	*/


  /* USER CODE END CAN1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3750      	adds	r7, #80	@ 0x50
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000090 	.word	0x20000090
 8000f18:	40006400 	.word	0x40006400

08000f1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f22:	4a18      	ldr	r2, [pc, #96]	@ (8000f84 <MX_SPI1_Init+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f50:	2220      	movs	r2, #32
 8000f52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f68:	220a      	movs	r2, #10
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f6e:	f002 ff37 	bl	8003de0 <HAL_SPI_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f78:	f000 fa72 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000b8 	.word	0x200000b8
 8000f84:	40013000 	.word	0x40013000

08000f88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b092      	sub	sp, #72	@ 0x48
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2220      	movs	r2, #32
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fa8e 	bl	80054d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	@ (8001088 <MX_TIM1_Init+0x100>)
 8000fba:	4a34      	ldr	r2, [pc, #208]	@ (800108c <MX_TIM1_Init+0x104>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	@ (8001088 <MX_TIM1_Init+0x100>)
 8000fc0:	227f      	movs	r2, #127	@ 0x7f
 8000fc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <MX_TIM1_Init+0x100>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	@ (8001088 <MX_TIM1_Init+0x100>)
 8000fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001088 <MX_TIM1_Init+0x100>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <MX_TIM1_Init+0x100>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <MX_TIM1_Init+0x100>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000fe4:	4828      	ldr	r0, [pc, #160]	@ (8001088 <MX_TIM1_Init+0x100>)
 8000fe6:	f003 fc0d 	bl	8004804 <HAL_TIM_OC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ff0:	f000 fa36 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001000:	4619      	mov	r1, r3
 8001002:	4821      	ldr	r0, [pc, #132]	@ (8001088 <MX_TIM1_Init+0x100>)
 8001004:	f004 f984 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800100e:	f000 fa27 	bl	8001460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	@ (8001088 <MX_TIM1_Init+0x100>)
 8001038:	f003 fd24 	bl	8004a84 <HAL_TIM_OC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001042:	f000 fa0d 	bl	8001460 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800105a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800105e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4807      	ldr	r0, [pc, #28]	@ (8001088 <MX_TIM1_Init+0x100>)
 800106a:	f004 f9cd 	bl	8005408 <HAL_TIMEx_ConfigBreakDeadTime>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001074:	f000 f9f4 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001078:	4803      	ldr	r0, [pc, #12]	@ (8001088 <MX_TIM1_Init+0x100>)
 800107a:	f000 fdc3 	bl	8001c04 <HAL_TIM_MspPostInit>

}
 800107e:	bf00      	nop
 8001080:	3748      	adds	r7, #72	@ 0x48
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000110 	.word	0x20000110
 800108c:	40010000 	.word	0x40010000

08001090 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_TIM2_Init+0x9c>)
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_TIM2_Init+0x9c>)
 80010b6:	223f      	movs	r2, #63	@ 0x3f
 80010b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_TIM2_Init+0x9c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_TIM2_Init+0x9c>)
 80010c2:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80010c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b18      	ldr	r3, [pc, #96]	@ (800112c <MX_TIM2_Init+0x9c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_TIM2_Init+0x9c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d4:	4815      	ldr	r0, [pc, #84]	@ (800112c <MX_TIM2_Init+0x9c>)
 80010d6:	f003 fad5 	bl	8004684 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010e0:	f000 f9be 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4619      	mov	r1, r3
 80010f0:	480e      	ldr	r0, [pc, #56]	@ (800112c <MX_TIM2_Init+0x9c>)
 80010f2:	f003 fd23 	bl	8004b3c <HAL_TIM_ConfigClockSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010fc:	f000 f9b0 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	@ (800112c <MX_TIM2_Init+0x9c>)
 800110e:	f004 f8ff 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001118:	f000 f9a2 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800111c:	4803      	ldr	r0, [pc, #12]	@ (800112c <MX_TIM2_Init+0x9c>)
 800111e:	f003 fb01 	bl	8004724 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM2_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000158 	.word	0x20000158

08001130 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_TIM3_Init+0x98>)
 800114e:	4a1f      	ldr	r2, [pc, #124]	@ (80011cc <MX_TIM3_Init+0x9c>)
 8001150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <MX_TIM3_Init+0x98>)
 8001154:	223f      	movs	r2, #63	@ 0x3f
 8001156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <MX_TIM3_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800115e:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_TIM3_Init+0x98>)
 8001160:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001164:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001166:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_TIM3_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <MX_TIM3_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001172:	4815      	ldr	r0, [pc, #84]	@ (80011c8 <MX_TIM3_Init+0x98>)
 8001174:	f003 fa86 	bl	8004684 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800117e:	f000 f96f 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001186:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	4619      	mov	r1, r3
 800118e:	480e      	ldr	r0, [pc, #56]	@ (80011c8 <MX_TIM3_Init+0x98>)
 8001190:	f003 fcd4 	bl	8004b3c <HAL_TIM_ConfigClockSource>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800119a:	f000 f961 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	4807      	ldr	r0, [pc, #28]	@ (80011c8 <MX_TIM3_Init+0x98>)
 80011ac:	f004 f8b0 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011b6:	f000 f953 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

	HAL_TIM_Base_Start_IT(&htim3);
 80011ba:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <MX_TIM3_Init+0x98>)
 80011bc:	f003 fab2 	bl	8004724 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM3_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200001a0 	.word	0x200001a0
 80011cc:	40000400 	.word	0x40000400

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b67      	ldr	r3, [pc, #412]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a66      	ldr	r2, [pc, #408]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b64      	ldr	r3, [pc, #400]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b60      	ldr	r3, [pc, #384]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a5f      	ldr	r2, [pc, #380]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b5d      	ldr	r3, [pc, #372]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b59      	ldr	r3, [pc, #356]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a58      	ldr	r2, [pc, #352]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b56      	ldr	r3, [pc, #344]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b52      	ldr	r3, [pc, #328]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a51      	ldr	r2, [pc, #324]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b4f      	ldr	r3, [pc, #316]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b4b      	ldr	r3, [pc, #300]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a4a      	ldr	r2, [pc, #296]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b48      	ldr	r3, [pc, #288]	@ (8001388 <MX_GPIO_Init+0x1b8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FT_RESET_Pin|SPI_CS2_Pin|SPI_CS1_Pin|BIN2_1_Pin
 8001272:	2200      	movs	r2, #0
 8001274:	f64f 41e2 	movw	r1, #64738	@ 0xfce2
 8001278:	4844      	ldr	r0, [pc, #272]	@ (800138c <MX_GPIO_Init+0x1bc>)
 800127a:	f002 f82b 	bl	80032d4 <HAL_GPIO_WritePin>
                          |BIN1_1_Pin|DIR1_Pin|STEP1_Pin|RESET1_Pin
                          |nSLEEP1_Pin|STEP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 800127e:	2200      	movs	r2, #0
 8001280:	2137      	movs	r1, #55	@ 0x37
 8001282:	4843      	ldr	r0, [pc, #268]	@ (8001390 <MX_GPIO_Init+0x1c0>)
 8001284:	f002 f826 	bl	80032d4 <HAL_GPIO_WritePin>
                          |RESET2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 8001288:	2200      	movs	r2, #0
 800128a:	21ff      	movs	r1, #255	@ 0xff
 800128c:	4841      	ldr	r0, [pc, #260]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 800128e:	f002 f821 	bl	80032d4 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nSTALL2_Pin nFAULT2_Pin */
  GPIO_InitStruct.Pin = nSTALL2_Pin|nFAULT2_Pin;
 8001292:	2318      	movs	r3, #24
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4839      	ldr	r0, [pc, #228]	@ (800138c <MX_GPIO_Init+0x1bc>)
 80012a6:	f001 fe69 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : FT_RESET_Pin BIN2_1_Pin BIN1_1_Pin DIR1_Pin
                           STEP1_Pin RESET1_Pin nSLEEP1_Pin STEP2_Pin */
  GPIO_InitStruct.Pin = FT_RESET_Pin|BIN2_1_Pin|BIN1_1_Pin|DIR1_Pin
 80012aa:	f64f 4322 	movw	r3, #64546	@ 0xfc22
 80012ae:	617b      	str	r3, [r7, #20]
                          |STEP1_Pin|RESET1_Pin|nSLEEP1_Pin|STEP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4832      	ldr	r0, [pc, #200]	@ (800138c <MX_GPIO_Init+0x1bc>)
 80012c4:	f001 fe5a 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS2_Pin SPI_CS1_Pin */
  GPIO_InitStruct.Pin = SPI_CS2_Pin|SPI_CS1_Pin;
 80012c8:	23c0      	movs	r3, #192	@ 0xc0
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	482b      	ldr	r0, [pc, #172]	@ (800138c <MX_GPIO_Init+0x1bc>)
 80012e0:	f001 fe4c 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_2_Pin BIN1_2_Pin DIR2_Pin nSLEEP2_Pin
                           RESET2_Pin */
  GPIO_InitStruct.Pin = BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 80012e4:	2337      	movs	r3, #55	@ 0x37
 80012e6:	617b      	str	r3, [r7, #20]
                          |RESET2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4825      	ldr	r0, [pc, #148]	@ (8001390 <MX_GPIO_Init+0x1c0>)
 80012fc:	f001 fe3e 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8001310:	230f      	movs	r3, #15
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	481f      	ldr	r0, [pc, #124]	@ (8001398 <MX_GPIO_Init+0x1c8>)
 800131c:	f001 fe2e 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : nSTALL1_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nSTALL1_Pin|nFAULT1_Pin;
 8001320:	2306      	movs	r3, #6
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001328:	2301      	movs	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	481a      	ldr	r0, [pc, #104]	@ (800139c <MX_GPIO_Init+0x1cc>)
 8001334:	f001 fe22 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin;
 8001338:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800133e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	480f      	ldr	r0, [pc, #60]	@ (800138c <MX_GPIO_Init+0x1bc>)
 8001350:	f001 fe14 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_WARNING_Pin LED_ERROR_Pin LED_CANB_Pin LED_CANA_Pin
                           LED1_Pin LED2_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 8001354:	23ff      	movs	r3, #255	@ 0xff
 8001356:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480a      	ldr	r0, [pc, #40]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 800136c:	f001 fe06 	bl	8002f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2101      	movs	r1, #1
 8001374:	2017      	movs	r0, #23
 8001376:	f001 fdca 	bl	8002f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800137a:	2017      	movs	r0, #23
 800137c:	f001 fde3 	bl	8002f46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	@ 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40021000 	.word	0x40021000
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400

080013a0 <CAN_ReceiveFifoCallback>:

//uint8_t txData[8];
uint8_t rxData[8];

void CAN_ReceiveFifoCallback(CAN_HandleTypeDef* hcan, uint32_t fifo)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]

	uint32_t num_messages = HAL_CAN_GetRxFifoFillLevel(hcan, fifo);
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f001 fa7e 	bl	80028ae <HAL_CAN_GetRxFifoFillLevel>
 80013b2:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < num_messages; ++i)
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e00f      	b.n	80013da <CAN_ReceiveFifoCallback+0x3a>
	{
		if (HAL_CAN_GetRxMessage(hcan, fifo, &pRxHeader, rxData) != HAL_OK)
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <CAN_ReceiveFifoCallback+0x4c>)
 80013bc:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <CAN_ReceiveFifoCallback+0x50>)
 80013be:	6839      	ldr	r1, [r7, #0]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f001 f952 	bl	800266a <HAL_CAN_GetRxMessage>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <CAN_ReceiveFifoCallback+0x30>
		{
			Error_Handler();
 80013cc:	f000 f848 	bl	8001460 <Error_Handler>
		}

		ProcessCanMessage();
 80013d0:	f7ff f890 	bl	80004f4 <ProcessCanMessage>
	for (int i = 0; i < num_messages; ++i)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d8eb      	bhi.n	80013ba <CAN_ReceiveFifoCallback+0x1a>
	}
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000021c 	.word	0x2000021c
 80013f0:	20000200 	.word	0x20000200

080013f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffce 	bl	80013a0 <CAN_ReceiveFifoCallback>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO1);
 8001414:	2101      	movs	r1, #1
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffc2 	bl	80013a0 <CAN_ReceiveFifoCallback>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_CAN_RxFifo0FullCallback>:


// CAN error callbacks
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef* hcan)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_CAN_RxFifo1FullCallback>:

void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef* hcan)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <Error_Handler+0x8>

0800146c <InitAndConfigDrive>:
#include "drv8711_lib.h"
#include "chinook_can_ids.h"

uint8_t motor_pitch_on = 0;

void InitAndConfigDrive(DRIVE_MOTOR drive_index) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	// Reset drive
	DisableDrive(drive_index);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f819 	bl	80014b0 <DisableDrive>

	// init register for a stepper motor
	InitRegValuesStepper(drive_index);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f8d7 	bl	8000634 <InitRegValuesStepper>

	//seulement pour debug SPI : ne pas utiliser pour tester un moteur
	//InitRegValuesStepperDefault(drive_index); //WARNING : TORQUE IS SET TO MAXIMUM

	// Send regs over SPI
	SendDriveRegisters(drive_index);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fbb3 	bl	8000bf4 <SendDriveRegisters>

	// Verify if chip setup is good
	ReadAndVerifyDriveRegisters(drive_index);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fbd0 	bl	8000c36 <ReadAndVerifyDriveRegisters>

	CheckDriveStatusRegister(drive_index);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fbf9 	bl	8000c90 <CheckDriveStatusRegister>

	ResetDriveStatusRegister(drive_index);
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fc1f 	bl	8000ce4 <ResetDriveStatusRegister>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <DisableDrive>:

void DisableDrive(DRIVE_MOTOR drive_index) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	DisableMotor(drive_index);
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f897 	bl	80015f0 <DisableMotor>

	if (drive_regs[drive_index].ctrl_reg.enbl == 0) {
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4a33      	ldr	r2, [pc, #204]	@ (8001594 <DisableDrive+0xe4>)
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d159      	bne.n	800158a <DisableDrive+0xda>
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 80014d6:	79fa      	ldrb	r2, [r7, #7]
 80014d8:	492f      	ldr	r1, [pc, #188]	@ (8001598 <DisableDrive+0xe8>)
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	79fa      	ldrb	r2, [r7, #7]
				drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_SET);
 80014e8:	492c      	ldr	r1, [pc, #176]	@ (800159c <DisableDrive+0xec>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	881b      	ldrh	r3, [r3, #0]
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 80014f6:	2201      	movs	r2, #1
 80014f8:	4619      	mov	r1, r3
 80014fa:	f001 feeb 	bl	80032d4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80014fe:	2001      	movs	r0, #1
 8001500:	f000 fd6c 	bl	8001fdc <HAL_Delay>
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	4924      	ldr	r1, [pc, #144]	@ (8001598 <DisableDrive+0xe8>)
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	79fa      	ldrb	r2, [r7, #7]
				drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_RESET);
 8001516:	4921      	ldr	r1, [pc, #132]	@ (800159c <DisableDrive+0xec>)
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	440b      	add	r3, r1
 8001522:	881b      	ldrh	r3, [r3, #0]
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	f001 fed4 	bl	80032d4 <HAL_GPIO_WritePin>
		// Disable sleeping
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_SLEEP],
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	491a      	ldr	r1, [pc, #104]	@ (8001598 <DisableDrive+0xe8>)
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	3304      	adds	r3, #4
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	79fa      	ldrb	r2, [r7, #7]
				drive_pins[drive_index][DRIVE_SLEEP], GPIO_PIN_SET);
 8001540:	4916      	ldr	r1, [pc, #88]	@ (800159c <DisableDrive+0xec>)
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	440b      	add	r3, r1
 800154c:	3302      	adds	r3, #2
 800154e:	881b      	ldrh	r3, [r3, #0]
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_SLEEP],
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	f001 febe 	bl	80032d4 <HAL_GPIO_WritePin>
		// CS à LOW
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001558:	79fa      	ldrb	r2, [r7, #7]
 800155a:	490f      	ldr	r1, [pc, #60]	@ (8001598 <DisableDrive+0xe8>)
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3308      	adds	r3, #8
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	79fa      	ldrb	r2, [r7, #7]
				drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
 800156c:	490b      	ldr	r1, [pc, #44]	@ (800159c <DisableDrive+0xec>)
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	440b      	add	r3, r1
 8001578:	3304      	adds	r3, #4
 800157a:	881b      	ldrh	r3, [r3, #0]
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	f001 fea8 	bl	80032d4 <HAL_GPIO_WritePin>

		HAL_Delay(5); //wait for everything to setup : DRV8711 recommend 1ms
 8001584:	2005      	movs	r0, #5
 8001586:	f000 fd29 	bl	8001fdc <HAL_Delay>
	}

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000006c 	.word	0x2000006c
 8001598:	20000008 	.word	0x20000008
 800159c:	08005544 	.word	0x08005544

080015a0 <EnableMotor>:

void EnableMotor(DRIVE_MOTOR drive_index) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
	/*
	 if (CheckDriveStatusRegister(drive_index) != 0) {
	 return;
	 }
	 */
	uint16_t reg_config = ReadRegConfig(drive_index, 0);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f920 	bl	80007f4 <ReadRegConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	81fb      	strh	r3, [r7, #14]
	reg_config = reg_config | 0x0001;
 80015b8:	89fb      	ldrh	r3, [r7, #14]
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	81fb      	strh	r3, [r7, #14]

	uint32_t err = WriteSPI(drive_index, DRV8711_CTRL_REG, reg_config);
 80015c0:	89fa      	ldrh	r2, [r7, #14]
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fac0 	bl	8000b4c <WriteSPI>
 80015cc:	60b8      	str	r0, [r7, #8]

	if (err == 0) {
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d107      	bne.n	80015e4 <EnableMotor+0x44>
		drive_regs[drive_index].ctrl_reg.enbl = 1;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <EnableMotor+0x4c>)
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	441a      	add	r2, r3
 80015dc:	7813      	ldrb	r3, [r2, #0]
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	7013      	strb	r3, [r2, #0]
	}

	//ReadAndVerifyDriveRegisters(drive_index);
	//CheckDriveStatusRegister(drive_index);
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000006c 	.word	0x2000006c

080015f0 <DisableMotor>:

void DisableMotor(DRIVE_MOTOR drive_index) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	 if (CheckDriveStatusRegister(drive_index) != 0) {
	 return;
	 }
	 */

	uint16_t reg_config = ReadRegConfig(drive_index, 0);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f8f8 	bl	80007f4 <ReadRegConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	81fb      	strh	r3, [r7, #14]
	reg_config = reg_config & 0xFFFD;
 8001608:	89fb      	ldrh	r3, [r7, #14]
 800160a:	f023 0302 	bic.w	r3, r3, #2
 800160e:	81fb      	strh	r3, [r7, #14]

	uint32_t err = WriteSPI(drive_index, DRV8711_CTRL_REG, reg_config);
 8001610:	89fa      	ldrh	r2, [r7, #14]
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fa98 	bl	8000b4c <WriteSPI>
 800161c:	60b8      	str	r0, [r7, #8]

	if (err == 0) {
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d107      	bne.n	8001634 <DisableMotor+0x44>
		drive_regs[drive_index].ctrl_reg.enbl = 0;
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <DisableMotor+0x4c>)
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	441a      	add	r2, r3
 800162c:	7813      	ldrb	r3, [r2, #0]
 800162e:	f36f 0300 	bfc	r3, #0, #1
 8001632:	7013      	strb	r3, [r2, #0]
	}

	//ReadAndVerifyDriveRegisters(drive_index);
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000006c 	.word	0x2000006c

08001640 <DirectionMotor>:
	 drive_pins[drive_index][DRIVE_STEP], GPIO_PIN_RESET);
	 }*/

}

void DirectionMotor(DRIVE_MOTOR drive_index, uint8_t dir) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	460a      	mov	r2, r1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	4613      	mov	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
	 reg_config = ReadRegConfig(drive_index, 0);
	 WriteSPI(drive_index, DRV8711_CTRL_REG, reg_config);
	 ReadAndVerifyDriveRegisters(drive_index);
	 }
	 */
	if (dir == MOTOR_DIRECTION_LEFT) {
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <DirectionMotor+0x44>
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_DIR],
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4919      	ldr	r1, [pc, #100]	@ (80016c0 <DirectionMotor+0x80>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3310      	adds	r3, #16
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	79fa      	ldrb	r2, [r7, #7]
				drive_pins[drive_index][DRIVE_DIR], GPIO_PIN_RESET);
 800166a:	4916      	ldr	r1, [pc, #88]	@ (80016c4 <DirectionMotor+0x84>)
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	440b      	add	r3, r1
 8001676:	3308      	adds	r3, #8
 8001678:	881b      	ldrh	r3, [r3, #0]
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_DIR],
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	f001 fe29 	bl	80032d4 <HAL_GPIO_WritePin>
 8001682:	e01a      	b.n	80016ba <DirectionMotor+0x7a>
	} else if (dir == MOTOR_DIRECTION_RIGHT) {
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	2b04      	cmp	r3, #4
 8001688:	d116      	bne.n	80016b8 <DirectionMotor+0x78>
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_DIR],
 800168a:	79fa      	ldrb	r2, [r7, #7]
 800168c:	490c      	ldr	r1, [pc, #48]	@ (80016c0 <DirectionMotor+0x80>)
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	3310      	adds	r3, #16
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	79fa      	ldrb	r2, [r7, #7]
				drive_pins[drive_index][DRIVE_DIR], GPIO_PIN_SET);
 800169e:	4909      	ldr	r1, [pc, #36]	@ (80016c4 <DirectionMotor+0x84>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	3308      	adds	r3, #8
 80016ac:	881b      	ldrh	r3, [r3, #0]
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_DIR],
 80016ae:	2201      	movs	r2, #1
 80016b0:	4619      	mov	r1, r3
 80016b2:	f001 fe0f 	bl	80032d4 <HAL_GPIO_WritePin>
 80016b6:	e000      	b.n	80016ba <DirectionMotor+0x7a>
	} else {
		return;
 80016b8:	bf00      	nop
	}

	//CheckDriveStatusRegister(drive_index);
}
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000008 	.word	0x20000008
 80016c4:	08005544 	.word	0x08005544

080016c8 <DoStateInit>:
uint8_t flag_buttons = 0;

uint8_t flag_send_drive_pitch_config = 0;
uint8_t flag_send_drive_mast_config = 0;

uint32_t DoStateInit() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	b_rops = 0;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <DoStateInit+0x34>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
	b_emergency_stop = 0;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <DoStateInit+0x38>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]

	flag_can_tx_send = 0;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <DoStateInit+0x3c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]

	flag_send_drive_pitch_config = 0;
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <DoStateInit+0x40>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
	flag_send_drive_mast_config = 0;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <DoStateInit+0x44>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]

	//memset(&can_tx_data, 0, sizeof(CAN_TX_Data));

	InitAndConfigDrive(DRIVE1);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff febe 	bl	800146c <InitAndConfigDrive>
	EnableMotor(DRIVE1);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff ff55 	bl	80015a0 <EnableMotor>

	return STATE_ASSESS_PUSH_BUTTONS;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000225 	.word	0x20000225
 8001700:	20000226 	.word	0x20000226
 8001704:	20000227 	.word	0x20000227
 8001708:	20000229 	.word	0x20000229
 800170c:	2000022a 	.word	0x2000022a

08001710 <DoStateCAN>:

	}
	return STATE_CAN;
}

uint32_t DoStateCAN() {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	if (flag_can_tx_send) // Sent every 50ms
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <DoStateCAN+0x50>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01d      	beq.n	8001758 <DoStateCAN+0x48>
	{
		flag_can_tx_send = 0;
 800171c:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <DoStateCAN+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
		//		(mast_mode == MODE_MANUAL) ? MOTOR_MODE_MANUAL : MOTOR_MODE_AUTOMATIC);
		//TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_MAST_MODE, (uint8_t*) &mast_mode_msg, 4, 0);

		static float test = 0;
		static float debug_log_4_value = 0;
		debug_log_4_value = debug_log_4_value + test;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <DoStateCAN+0x54>)
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <DoStateCAN+0x58>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <DoStateCAN+0x54>)
 8001734:	edc3 7a00 	vstr	s15, [r3]
		TransmitCAN(CAN_ID_MARIO_VAL_DEBUG_LOG_4, (uint8_t*) &debug_log_4_value, 4, 0);
 8001738:	2300      	movs	r3, #0
 800173a:	2204      	movs	r2, #4
 800173c:	4909      	ldr	r1, [pc, #36]	@ (8001764 <DoStateCAN+0x54>)
 800173e:	204f      	movs	r0, #79	@ 0x4f
 8001740:	f7fe ff18 	bl	8000574 <TransmitCAN>
		test++;
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <DoStateCAN+0x58>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800174e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001752:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <DoStateCAN+0x58>)
 8001754:	edc3 7a00 	vstr	s15, [r3]
		 */

	}

	// return STATE_PITCH_CONTROL;
	return STATE_ASSESS_PUSH_BUTTONS;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000227 	.word	0x20000227
 8001764:	2000022c 	.word	0x2000022c
 8001768:	20000230 	.word	0x20000230

0800176c <ExecuteStateMachine>:
void DoStateError() {
	Error_Handler();
}

uint8_t motor_direction_pitch = 0;
void ExecuteStateMachine() {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	DoStateInit();
 8001770:	f7ff ffaa 	bl	80016c8 <DoStateInit>
	ResetDriveStatusRegister(DRIVE1);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fab5 	bl	8000ce4 <ResetDriveStatusRegister>
	EnableMotor(DRIVE1);
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff ff10 	bl	80015a0 <EnableMotor>
		 StepDrive(DRIVE1);
		 }
		 }
		 */

		if (timer_50ms_flag) {
 8001780:	4b4e      	ldr	r3, [pc, #312]	@ (80018bc <ExecuteStateMachine+0x150>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00a      	beq.n	800179e <ExecuteStateMachine+0x32>
			timer_50ms_flag = 0;
 8001788:	4b4c      	ldr	r3, [pc, #304]	@ (80018bc <ExecuteStateMachine+0x150>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]

			flag_buttons = 1;
 800178e:	4b4c      	ldr	r3, [pc, #304]	@ (80018c0 <ExecuteStateMachine+0x154>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
			flag_can_tx_send = 1;
 8001794:	4b4b      	ldr	r3, [pc, #300]	@ (80018c4 <ExecuteStateMachine+0x158>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
			DoStateCAN();
 800179a:	f7ff ffb9 	bl	8001710 <DoStateCAN>
		 timer_250ms_flag = 0;

		 }
		 */

		if (timer_500ms_flag) {
 800179e:	4b4a      	ldr	r3, [pc, #296]	@ (80018c8 <ExecuteStateMachine+0x15c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <ExecuteStateMachine+0x48>
			timer_500ms_flag = 0;
 80017a6:	4b48      	ldr	r3, [pc, #288]	@ (80018c8 <ExecuteStateMachine+0x15c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]

			//if (flag_drive_fault == 0) {
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 80017ac:	2108      	movs	r1, #8
 80017ae:	4847      	ldr	r0, [pc, #284]	@ (80018cc <ExecuteStateMachine+0x160>)
 80017b0:	f001 fda9 	bl	8003306 <HAL_GPIO_TogglePin>
			//}
		}

		if (motor_pitch_on == 1) {
 80017b4:	4b46      	ldr	r3, [pc, #280]	@ (80018d0 <ExecuteStateMachine+0x164>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <ExecuteStateMachine+0x5c>
			HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2104      	movs	r1, #4
 80017c0:	4842      	ldr	r0, [pc, #264]	@ (80018cc <ExecuteStateMachine+0x160>)
 80017c2:	f001 fd87 	bl	80032d4 <HAL_GPIO_WritePin>
 80017c6:	e004      	b.n	80017d2 <ExecuteStateMachine+0x66>
		} else {
			HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2104      	movs	r1, #4
 80017cc:	483f      	ldr	r0, [pc, #252]	@ (80018cc <ExecuteStateMachine+0x160>)
 80017ce:	f001 fd81 	bl	80032d4 <HAL_GPIO_WritePin>
		}

		if (drive_regs[DRIVE1].ctrl_reg.enbl == 1) {
 80017d2:	4b40      	ldr	r3, [pc, #256]	@ (80018d4 <ExecuteStateMachine+0x168>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <ExecuteStateMachine+0x80>
			HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2102      	movs	r1, #2
 80017e4:	4839      	ldr	r0, [pc, #228]	@ (80018cc <ExecuteStateMachine+0x160>)
 80017e6:	f001 fd75 	bl	80032d4 <HAL_GPIO_WritePin>
 80017ea:	e004      	b.n	80017f6 <ExecuteStateMachine+0x8a>
		} else {
			HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2102      	movs	r1, #2
 80017f0:	4836      	ldr	r0, [pc, #216]	@ (80018cc <ExecuteStateMachine+0x160>)
 80017f2:	f001 fd6f 	bl	80032d4 <HAL_GPIO_WritePin>
		}

		if (flag_buttons) {
 80017f6:	4b32      	ldr	r3, [pc, #200]	@ (80018c0 <ExecuteStateMachine+0x154>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0c0      	beq.n	8001780 <ExecuteStateMachine+0x14>
			flag_buttons = 0;
 80017fe:	4b30      	ldr	r3, [pc, #192]	@ (80018c0 <ExecuteStateMachine+0x154>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]

			motor_direction_pitch = MOTOR_DIRECTION_STOP;
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <ExecuteStateMachine+0x16c>)
 8001806:	2202      	movs	r2, #2
 8001808:	701a      	strb	r2, [r3, #0]
			motor_pitch_on = 0;
 800180a:	4b31      	ldr	r3, [pc, #196]	@ (80018d0 <ExecuteStateMachine+0x164>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]

			if (flag_can_speed) {
 8001810:	4b32      	ldr	r3, [pc, #200]	@ (80018dc <ExecuteStateMachine+0x170>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d009      	beq.n	800182c <ExecuteStateMachine+0xc0>
				flag_can_speed = 0;
 8001818:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <ExecuteStateMachine+0x170>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]

				if (can_motor_pitch_speed > 0) {
 800181e:	4b30      	ldr	r3, [pc, #192]	@ (80018e0 <ExecuteStateMachine+0x174>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <ExecuteStateMachine+0xc0>
					motor_pitch_on = 1;
 8001826:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <ExecuteStateMachine+0x164>)
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
				}
			}
			if (flag_can_direction) {
 800182c:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <ExecuteStateMachine+0x178>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d011      	beq.n	8001858 <ExecuteStateMachine+0xec>
				flag_can_direction = 0;
 8001834:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <ExecuteStateMachine+0x178>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]

				if (can_motor_pitch_direction == MOTOR_DIRECTION_LEFT) {
 800183a:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <ExecuteStateMachine+0x17c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <ExecuteStateMachine+0xde>
					motor_direction_pitch = MOTOR_DIRECTION_LEFT;
 8001842:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <ExecuteStateMachine+0x16c>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e006      	b.n	8001858 <ExecuteStateMachine+0xec>
				} else if (can_motor_pitch_direction == MOTOR_DIRECTION_RIGHT) {
 800184a:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <ExecuteStateMachine+0x17c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b04      	cmp	r3, #4
 8001850:	d102      	bne.n	8001858 <ExecuteStateMachine+0xec>
					motor_direction_pitch = MOTOR_DIRECTION_RIGHT;
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <ExecuteStateMachine+0x16c>)
 8001854:	2204      	movs	r2, #4
 8001856:	701a      	strb	r2, [r3, #0]
				}
			}

			if (pb1_value) {
 8001858:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <ExecuteStateMachine+0x180>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <ExecuteStateMachine+0x102>
				motor_direction_pitch = MOTOR_DIRECTION_LEFT;
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <ExecuteStateMachine+0x16c>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
				motor_pitch_on = 1;
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <ExecuteStateMachine+0x164>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e009      	b.n	8001882 <ExecuteStateMachine+0x116>
			} else if (pb2_value) {
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <ExecuteStateMachine+0x184>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <ExecuteStateMachine+0x116>
				motor_direction_pitch = MOTOR_DIRECTION_RIGHT;
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <ExecuteStateMachine+0x16c>)
 8001878:	2204      	movs	r2, #4
 800187a:	701a      	strb	r2, [r3, #0]
				motor_pitch_on = 1;
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <ExecuteStateMachine+0x164>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
			}

			if (motor_pitch_on == 1) {
 8001882:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <ExecuteStateMachine+0x164>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d109      	bne.n	800189e <ExecuteStateMachine+0x132>
				DirectionMotor(DRIVE1, motor_direction_pitch);
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <ExecuteStateMachine+0x16c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fed5 	bl	8001640 <DirectionMotor>
				EnableMotor(DRIVE1);
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff fe82 	bl	80015a0 <EnableMotor>
 800189c:	e002      	b.n	80018a4 <ExecuteStateMachine+0x138>

			} else {
				DisableMotor(DRIVE1);
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff fea6 	bl	80015f0 <DisableMotor>
			}

			if (CheckDriveStatusRegister(DRIVE1)) {
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff f9f3 	bl	8000c90 <CheckDriveStatusRegister>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f43f af67 	beq.w	8001780 <ExecuteStateMachine+0x14>
				ResetDriveStatusRegister(DRIVE1);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff fa16 	bl	8000ce4 <ResetDriveStatusRegister>
		if (timer_50ms_flag) {
 80018b8:	e762      	b.n	8001780 <ExecuteStateMachine+0x14>
 80018ba:	bf00      	nop
 80018bc:	20000234 	.word	0x20000234
 80018c0:	20000228 	.word	0x20000228
 80018c4:	20000227 	.word	0x20000227
 80018c8:	20000237 	.word	0x20000237
 80018cc:	40020c00 	.word	0x40020c00
 80018d0:	20000224 	.word	0x20000224
 80018d4:	2000006c 	.word	0x2000006c
 80018d8:	2000022b 	.word	0x2000022b
 80018dc:	20000059 	.word	0x20000059
 80018e0:	2000005c 	.word	0x2000005c
 80018e4:	20000058 	.word	0x20000058
 80018e8:	20000000 	.word	0x20000000
 80018ec:	2000023e 	.word	0x2000023e
 80018f0:	2000023f 	.word	0x2000023f

080018f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <HAL_MspInit+0x90>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a20      	ldr	r2, [pc, #128]	@ (8001984 <HAL_MspInit+0x90>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
 800190a:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <HAL_MspInit+0x90>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <HAL_MspInit+0x90>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a19      	ldr	r2, [pc, #100]	@ (8001984 <HAL_MspInit+0x90>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <HAL_MspInit+0x90>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2101      	movs	r1, #1
 8001936:	f06f 000b 	mvn.w	r0, #11
 800193a:	f001 fae8 	bl	8002f0e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2101      	movs	r1, #1
 8001942:	f06f 000a 	mvn.w	r0, #10
 8001946:	f001 fae2 	bl	8002f0e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2101      	movs	r1, #1
 800194e:	f06f 0009 	mvn.w	r0, #9
 8001952:	f001 fadc 	bl	8002f0e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2101      	movs	r1, #1
 800195a:	f06f 0004 	mvn.w	r0, #4
 800195e:	f001 fad6 	bl	8002f0e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2101      	movs	r1, #1
 8001966:	f06f 0003 	mvn.w	r0, #3
 800196a:	f001 fad0 	bl	8002f0e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2102      	movs	r1, #2
 8001972:	f06f 0001 	mvn.w	r0, #1
 8001976:	f001 faca 	bl	8002f0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a21      	ldr	r2, [pc, #132]	@ (8001a2c <HAL_CAN_MspInit+0xa4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d13c      	bne.n	8001a24 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_CAN_MspInit+0xa8>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a30 <HAL_CAN_MspInit+0xa8>)
 80019b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <HAL_CAN_MspInit+0xa8>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_CAN_MspInit+0xa8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a18      	ldr	r2, [pc, #96]	@ (8001a30 <HAL_CAN_MspInit+0xa8>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <HAL_CAN_MspInit+0xa8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019f4:	2309      	movs	r3, #9
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <HAL_CAN_MspInit+0xac>)
 8001a00:	f001 fabc 	bl	8002f7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2101      	movs	r1, #1
 8001a08:	2014      	movs	r0, #20
 8001a0a:	f001 fa80 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a0e:	2014      	movs	r0, #20
 8001a10:	f001 fa99 	bl	8002f46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2101      	movs	r1, #1
 8001a18:	2015      	movs	r0, #21
 8001a1a:	f001 fa78 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001a1e:	2015      	movs	r0, #21
 8001a20:	f001 fa91 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	@ 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40006400 	.word	0x40006400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000

08001a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a21      	ldr	r2, [pc, #132]	@ (8001adc <HAL_SPI_MspInit+0xa4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d13b      	bne.n	8001ad2 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ae0 <HAL_SPI_MspInit+0xa8>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae0 <HAL_SPI_MspInit+0xa8>)
 8001a64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <HAL_SPI_MspInit+0xa8>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_SPI_MspInit+0xa8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ae0 <HAL_SPI_MspInit+0xa8>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <HAL_SPI_MspInit+0xa8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a92:	23a0      	movs	r3, #160	@ 0xa0
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <HAL_SPI_MspInit+0xac>)
 8001aae:	f001 fa65 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab2:	2340      	movs	r3, #64	@ 0x40
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <HAL_SPI_MspInit+0xac>)
 8001ace:	f001 fa55 	bl	8002f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	@ 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40013000 	.word	0x40013000
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <HAL_TIM_OC_MspInit+0x3c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10d      	bne.n	8001b16 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_TIM_OC_MspInit+0x40>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <HAL_TIM_OC_MspInit+0x40>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <HAL_TIM_OC_MspInit+0x40>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b4c:	d135      	bne.n	8001bba <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a28      	ldr	r2, [pc, #160]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b26      	ldr	r3, [pc, #152]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a21      	ldr	r2, [pc, #132]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4816      	ldr	r0, [pc, #88]	@ (8001bfc <HAL_TIM_Base_MspInit+0xd0>)
 8001ba4:	f001 f9ea 	bl	8002f7c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	201c      	movs	r0, #28
 8001bae:	f001 f9ae 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bb2:	201c      	movs	r0, #28
 8001bb4:	f001 f9c7 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bb8:	e01a      	b.n	8001bf0 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM3)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a10      	ldr	r2, [pc, #64]	@ (8001c00 <HAL_TIM_Base_MspInit+0xd4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d115      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xcc>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xcc>)
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xcc>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	201d      	movs	r0, #29
 8001be6:	f001 f992 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bea:	201d      	movs	r0, #29
 8001bec:	f001 f9ab 	bl	8002f46 <HAL_NVIC_EnableIRQ>
}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	@ 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40000400 	.word	0x40000400

08001c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <HAL_TIM_MspPostInit+0x68>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d11e      	bne.n	8001c64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <HAL_TIM_MspPostInit+0x6c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a10      	ldr	r2, [pc, #64]	@ (8001c70 <HAL_TIM_MspPostInit+0x6c>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_TIM_MspPostInit+0x6c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <HAL_TIM_MspPostInit+0x70>)
 8001c60:	f001 f98c 	bl	8002f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c64:	bf00      	nop
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <NMI_Handler+0x4>

08001c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <MemManage_Handler+0x4>

08001c90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <BusFault_Handler+0x4>

08001c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <UsageFault_Handler+0x4>

08001ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cce:	f000 f965 	bl	8001f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <CAN1_RX0_IRQHandler+0x10>)
 8001cde:	f000 fe34 	bl	800294a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000090 	.word	0x20000090

08001cec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <CAN1_RX1_IRQHandler+0x10>)
 8001cf2:	f000 fe2a 	bl	800294a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000090 	.word	0x20000090

08001d00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_Pin);
 8001d04:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d08:	f001 fb18 	bl	800333c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_Pin);
 8001d0c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d10:	f001 fb14 	bl	800333c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

	if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) == GPIO_PIN_SET) {
 8001d14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d18:	480e      	ldr	r0, [pc, #56]	@ (8001d54 <EXTI9_5_IRQHandler+0x54>)
 8001d1a:	f001 fac3 	bl	80032a4 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d103      	bne.n	8001d2c <EXTI9_5_IRQHandler+0x2c>
		pb1_value = 0; //bouton NO
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <EXTI9_5_IRQHandler+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e002      	b.n	8001d32 <EXTI9_5_IRQHandler+0x32>
	} else {
		pb1_value = 1; //bouton NO
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <EXTI9_5_IRQHandler+0x58>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin) == GPIO_PIN_SET) {
 8001d32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d36:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <EXTI9_5_IRQHandler+0x54>)
 8001d38:	f001 fab4 	bl	80032a4 <HAL_GPIO_ReadPin>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d103      	bne.n	8001d4a <EXTI9_5_IRQHandler+0x4a>
		pb2_value = 0; //bouton NO
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <EXTI9_5_IRQHandler+0x5c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
	} else {
		pb2_value = 1; //bouton NO
	}

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d48:	e002      	b.n	8001d50 <EXTI9_5_IRQHandler+0x50>
		pb2_value = 1; //bouton NO
 8001d4a:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <EXTI9_5_IRQHandler+0x5c>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	2000023e 	.word	0x2000023e
 8001d5c:	2000023f 	.word	0x2000023f

08001d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d64:	4812      	ldr	r0, [pc, #72]	@ (8001db0 <TIM2_IRQHandler+0x50>)
 8001d66:	f002 fd9c 	bl	80048a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  if (sub_step) {
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <TIM2_IRQHandler+0x54>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00f      	beq.n	8001d94 <TIM2_IRQHandler+0x34>
	  sub_step = 0;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <TIM2_IRQHandler+0x54>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
	  if (motor_pitch_on) {
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <TIM2_IRQHandler+0x58>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d013      	beq.n	8001daa <TIM2_IRQHandler+0x4a>
		  HAL_GPIO_WritePin(drive_ports[DRIVE1][DRIVE_STEP],
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <TIM2_IRQHandler+0x5c>)
 8001d84:	68db      	ldr	r3, [r3, #12]
		  					drive_pins[DRIVE1][DRIVE_STEP], GPIO_PIN_SET);
 8001d86:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc0 <TIM2_IRQHandler+0x60>)
 8001d88:	88d1      	ldrh	r1, [r2, #6]
		  HAL_GPIO_WritePin(drive_ports[DRIVE1][DRIVE_STEP],
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 faa1 	bl	80032d4 <HAL_GPIO_WritePin>
	  				drive_pins[DRIVE1][DRIVE_STEP], GPIO_PIN_RESET);
  }


  /* USER CODE END TIM2_IRQn 1 */
}
 8001d92:	e00a      	b.n	8001daa <TIM2_IRQHandler+0x4a>
	  sub_step = 1;
 8001d94:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <TIM2_IRQHandler+0x54>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(drive_ports[DRIVE1][DRIVE_STEP],
 8001d9a:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <TIM2_IRQHandler+0x5c>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
	  				drive_pins[DRIVE1][DRIVE_STEP], GPIO_PIN_RESET);
 8001d9e:	4a08      	ldr	r2, [pc, #32]	@ (8001dc0 <TIM2_IRQHandler+0x60>)
 8001da0:	88d1      	ldrh	r1, [r2, #6]
	  HAL_GPIO_WritePin(drive_ports[DRIVE1][DRIVE_STEP],
 8001da2:	2200      	movs	r2, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 fa95 	bl	80032d4 <HAL_GPIO_WritePin>
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000158 	.word	0x20000158
 8001db4:	20000240 	.word	0x20000240
 8001db8:	20000224 	.word	0x20000224
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	08005544 	.word	0x08005544

08001dc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dc8:	4824      	ldr	r0, [pc, #144]	@ (8001e5c <TIM3_IRQHandler+0x98>)
 8001dca:	f002 fd6a 	bl	80048a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

	if (timer_50ms_counter > 50) {
 8001dce:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <TIM3_IRQHandler+0x9c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b32      	cmp	r3, #50	@ 0x32
 8001dd4:	d906      	bls.n	8001de4 <TIM3_IRQHandler+0x20>
		timer_50ms_counter = 0;
 8001dd6:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <TIM3_IRQHandler+0x9c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
		timer_50ms_flag = 1;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <TIM3_IRQHandler+0xa0>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	e005      	b.n	8001df0 <TIM3_IRQHandler+0x2c>
	} else {
		timer_50ms_counter++;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <TIM3_IRQHandler+0x9c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <TIM3_IRQHandler+0x9c>)
 8001dee:	701a      	strb	r2, [r3, #0]
	}

	if (timer_100ms_counter > 100) {
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <TIM3_IRQHandler+0xa4>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b64      	cmp	r3, #100	@ 0x64
 8001df6:	d906      	bls.n	8001e06 <TIM3_IRQHandler+0x42>
		timer_100ms_counter = 0;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <TIM3_IRQHandler+0xa4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
		timer_100ms_flag = 1;
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <TIM3_IRQHandler+0xa8>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e005      	b.n	8001e12 <TIM3_IRQHandler+0x4e>
	} else {
		timer_100ms_counter++;
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <TIM3_IRQHandler+0xa4>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <TIM3_IRQHandler+0xa4>)
 8001e10:	701a      	strb	r2, [r3, #0]
	}

	if (timer_250ms_counter > 250) {
 8001e12:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <TIM3_IRQHandler+0xac>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2bfa      	cmp	r3, #250	@ 0xfa
 8001e18:	d906      	bls.n	8001e28 <TIM3_IRQHandler+0x64>
		timer_250ms_counter = 0;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <TIM3_IRQHandler+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
		timer_250ms_flag = 1;
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <TIM3_IRQHandler+0xb0>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e005      	b.n	8001e34 <TIM3_IRQHandler+0x70>
	} else {
		timer_250ms_counter++;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <TIM3_IRQHandler+0xac>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <TIM3_IRQHandler+0xac>)
 8001e32:	701a      	strb	r2, [r3, #0]
	}

	if (timer_500ms_counter > 500) {
 8001e34:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <TIM3_IRQHandler+0xb4>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e3c:	d906      	bls.n	8001e4c <TIM3_IRQHandler+0x88>
		timer_500ms_counter = 0;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <TIM3_IRQHandler+0xb4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	801a      	strh	r2, [r3, #0]
		timer_500ms_flag = 1;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <TIM3_IRQHandler+0xb8>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
	} else {
		timer_500ms_counter++;
	}

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e4a:	e005      	b.n	8001e58 <TIM3_IRQHandler+0x94>
		timer_500ms_counter++;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <TIM3_IRQHandler+0xb4>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <TIM3_IRQHandler+0xb4>)
 8001e56:	801a      	strh	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200001a0 	.word	0x200001a0
 8001e60:	20000238 	.word	0x20000238
 8001e64:	20000234 	.word	0x20000234
 8001e68:	20000239 	.word	0x20000239
 8001e6c:	20000235 	.word	0x20000235
 8001e70:	2000023a 	.word	0x2000023a
 8001e74:	20000236 	.word	0x20000236
 8001e78:	2000023c 	.word	0x2000023c
 8001e7c:	20000237 	.word	0x20000237

08001e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <SystemInit+0x20>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ea0 <SystemInit+0x20>)
 8001e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ea4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea8:	480d      	ldr	r0, [pc, #52]	@ (8001ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eaa:	490e      	ldr	r1, [pc, #56]	@ (8001ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eac:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8001eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec0:	4c0b      	ldr	r4, [pc, #44]	@ (8001ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ece:	f7ff ffd7 	bl	8001e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f003 fb07 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed6:	f7fe ff14 	bl	8000d02 <main>
  bx  lr    
 8001eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001ee8:	08005578 	.word	0x08005578
  ldr r2, =_sbss
 8001eec:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001ef0:	20000248 	.word	0x20000248

08001ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef4:	e7fe      	b.n	8001ef4 <ADC_IRQHandler>
	...

08001ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001efc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <HAL_Init+0x40>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <HAL_Init+0x40>)
 8001f0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	@ (8001f38 <HAL_Init+0x40>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 ffe9 	bl	8002ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f26:	200f      	movs	r0, #15
 8001f28:	f000 f808 	bl	8001f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2c:	f7ff fce2 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <HAL_InitTick+0x54>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_InitTick+0x58>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 f801 	bl	8002f62 <HAL_SYSTICK_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00e      	b.n	8001f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d80a      	bhi.n	8001f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f000 ffc9 	bl	8002f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f7c:	4a06      	ldr	r2, [pc, #24]	@ (8001f98 <HAL_InitTick+0x5c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000030 	.word	0x20000030
 8001f94:	20000038 	.word	0x20000038
 8001f98:	20000034 	.word	0x20000034

08001f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_IncTick+0x20>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_IncTick+0x24>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <HAL_IncTick+0x24>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000038 	.word	0x20000038
 8001fc0:	20000244 	.word	0x20000244

08001fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	@ (8001fd8 <HAL_GetTick+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000244 	.word	0x20000244

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff ffee 	bl	8001fc4 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d005      	beq.n	8002002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_Delay+0x44>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002002:	bf00      	nop
 8002004:	f7ff ffde 	bl	8001fc4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d8f7      	bhi.n	8002004 <HAL_Delay+0x28>
  {
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000038 	.word	0x20000038

08002024 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0ed      	b.n	8002212 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fca0 	bl	8001988 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002058:	f7ff ffb4 	bl	8001fc4 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800205e:	e012      	b.n	8002086 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002060:	f7ff ffb0 	bl	8001fc4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b0a      	cmp	r3, #10
 800206c:	d90b      	bls.n	8002086 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2205      	movs	r2, #5
 800207e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0c5      	b.n	8002212 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0e5      	beq.n	8002060 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0202 	bic.w	r2, r2, #2
 80020a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020a4:	f7ff ff8e 	bl	8001fc4 <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020aa:	e012      	b.n	80020d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020ac:	f7ff ff8a 	bl	8001fc4 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b0a      	cmp	r3, #10
 80020b8:	d90b      	bls.n	80020d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2205      	movs	r2, #5
 80020ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e09f      	b.n	8002212 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e5      	bne.n	80020ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7e1b      	ldrb	r3, [r3, #24]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d108      	bne.n	80020fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e007      	b.n	800210a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7e5b      	ldrb	r3, [r3, #25]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e007      	b.n	8002134 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7e9b      	ldrb	r3, [r3, #26]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0220 	orr.w	r2, r2, #32
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e007      	b.n	800215e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0220 	bic.w	r2, r2, #32
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7edb      	ldrb	r3, [r3, #27]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0210 	bic.w	r2, r2, #16
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e007      	b.n	8002188 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0210 	orr.w	r2, r2, #16
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7f1b      	ldrb	r3, [r3, #28]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d108      	bne.n	80021a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0208 	orr.w	r2, r2, #8
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e007      	b.n	80021b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0208 	bic.w	r2, r2, #8
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7f5b      	ldrb	r3, [r3, #29]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0204 	orr.w	r2, r2, #4
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e007      	b.n	80021dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0204 	bic.w	r2, r2, #4
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	ea42 0103 	orr.w	r1, r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	1e5a      	subs	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d003      	beq.n	800223c <HAL_CAN_ConfigFilter+0x20>
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	2b02      	cmp	r3, #2
 8002238:	f040 80be 	bne.w	80023b8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800223c:	4b65      	ldr	r3, [pc, #404]	@ (80023d4 <HAL_CAN_ConfigFilter+0x1b8>)
 800223e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002256:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	431a      	orrs	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2201      	movs	r2, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	43db      	mvns	r3, r3
 800228e:	401a      	ands	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d123      	bne.n	80022e6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	3248      	adds	r2, #72	@ 0x48
 80022c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022dc:	6939      	ldr	r1, [r7, #16]
 80022de:	3348      	adds	r3, #72	@ 0x48
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d122      	bne.n	8002334 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800230e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	3248      	adds	r2, #72	@ 0x48
 8002314:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002328:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800232a:	6939      	ldr	r1, [r7, #16]
 800232c:	3348      	adds	r3, #72	@ 0x48
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43db      	mvns	r3, r3
 8002346:	401a      	ands	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800234e:	e007      	b.n	8002360 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	431a      	orrs	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800237a:	e007      	b.n	800238c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	431a      	orrs	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	431a      	orrs	r2, r3
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023aa:	f023 0201 	bic.w	r2, r3, #1
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e006      	b.n	80023c6 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40006400 	.word	0x40006400

080023d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d12e      	bne.n	800244a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002404:	f7ff fdde 	bl	8001fc4 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800240a:	e012      	b.n	8002432 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800240c:	f7ff fdda 	bl	8001fc4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b0a      	cmp	r3, #10
 8002418:	d90b      	bls.n	8002432 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2205      	movs	r2, #5
 800242a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e012      	b.n	8002458 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e006      	b.n	8002458 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	@ 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002474:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800247e:	7ffb      	ldrb	r3, [r7, #31]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d003      	beq.n	800248c <HAL_CAN_AddTxMessage+0x2c>
 8002484:	7ffb      	ldrb	r3, [r7, #31]
 8002486:	2b02      	cmp	r3, #2
 8002488:	f040 80ad 	bne.w	80025e6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8095 	beq.w	80025d6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	0e1b      	lsrs	r3, r3, #24
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024b6:	2201      	movs	r2, #1
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	6809      	ldr	r1, [r1, #0]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3318      	adds	r3, #24
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	440b      	add	r3, r1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e00f      	b.n	8002504 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024ee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024f8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3318      	adds	r3, #24
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	440b      	add	r3, r1
 8002502:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3318      	adds	r3, #24
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	440b      	add	r3, r1
 8002514:	3304      	adds	r3, #4
 8002516:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	7d1b      	ldrb	r3, [r3, #20]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d111      	bne.n	8002544 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3318      	adds	r3, #24
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	4413      	add	r3, r2
 800252c:	3304      	adds	r3, #4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	6811      	ldr	r1, [r2, #0]
 8002534:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3318      	adds	r3, #24
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	440b      	add	r3, r1
 8002540:	3304      	adds	r3, #4
 8002542:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3307      	adds	r3, #7
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	061a      	lsls	r2, r3, #24
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3306      	adds	r3, #6
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	041b      	lsls	r3, r3, #16
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3305      	adds	r3, #5
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	4313      	orrs	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	3204      	adds	r2, #4
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	4610      	mov	r0, r2
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	6811      	ldr	r1, [r2, #0]
 800256c:	ea43 0200 	orr.w	r2, r3, r0
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	440b      	add	r3, r1
 8002576:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800257a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3303      	adds	r3, #3
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	061a      	lsls	r2, r3, #24
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3302      	adds	r3, #2
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3301      	adds	r3, #1
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	4313      	orrs	r3, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	7812      	ldrb	r2, [r2, #0]
 800259c:	4610      	mov	r0, r2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	6811      	ldr	r1, [r2, #0]
 80025a2:	ea43 0200 	orr.w	r2, r3, r0
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	440b      	add	r3, r1
 80025ac:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80025b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3318      	adds	r3, #24
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	4413      	add	r3, r2
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	6811      	ldr	r1, [r2, #0]
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	3318      	adds	r3, #24
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	440b      	add	r3, r1
 80025d0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e00e      	b.n	80025f4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e006      	b.n	80025f4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
  }
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3724      	adds	r7, #36	@ 0x24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002612:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d002      	beq.n	8002620 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d11d      	bne.n	800265c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3301      	adds	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3301      	adds	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3301      	adds	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800265c:	68fb      	ldr	r3, [r7, #12]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800266a:	b480      	push	{r7}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d003      	beq.n	800268e <HAL_CAN_GetRxMessage+0x24>
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b02      	cmp	r3, #2
 800268a:	f040 8103 	bne.w	8002894 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10e      	bne.n	80026b2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0f7      	b.n	80028a2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0e8      	b.n	80028a2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	331b      	adds	r3, #27
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	4413      	add	r3, r2
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0204 	and.w	r2, r3, #4
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	331b      	adds	r3, #27
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0d5b      	lsrs	r3, r3, #21
 80026fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e00b      	b.n	8002720 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	331b      	adds	r3, #27
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	4413      	add	r3, r2
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	08db      	lsrs	r3, r3, #3
 8002718:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	331b      	adds	r3, #27
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	4413      	add	r3, r2
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0202 	and.w	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	331b      	adds	r3, #27
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4413      	add	r3, r2
 8002742:	3304      	adds	r3, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2208      	movs	r2, #8
 8002752:	611a      	str	r2, [r3, #16]
 8002754:	e00b      	b.n	800276e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	331b      	adds	r3, #27
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	4413      	add	r3, r2
 8002762:	3304      	adds	r3, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 020f 	and.w	r2, r3, #15
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	331b      	adds	r3, #27
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	3304      	adds	r3, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	b2da      	uxtb	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	331b      	adds	r3, #27
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4413      	add	r3, r2
 8002792:	3304      	adds	r3, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4413      	add	r3, r2
 80027be:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0a1a      	lsrs	r2, r3, #8
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0c1a      	lsrs	r2, r3, #16
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	3302      	adds	r3, #2
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e1a      	lsrs	r2, r3, #24
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	3303      	adds	r3, #3
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	4413      	add	r3, r2
 800280c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	3304      	adds	r3, #4
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0a1a      	lsrs	r2, r3, #8
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	3305      	adds	r3, #5
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0c1a      	lsrs	r2, r3, #16
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	3306      	adds	r3, #6
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	4413      	add	r3, r2
 8002858:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e1a      	lsrs	r2, r3, #24
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	3307      	adds	r3, #7
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	e007      	b.n	8002890 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0220 	orr.w	r2, r2, #32
 800288e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e006      	b.n	80028a2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
  }
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028c4:	7afb      	ldrb	r3, [r7, #11]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d002      	beq.n	80028d0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80028ca:	7afb      	ldrb	r3, [r7, #11]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d10f      	bne.n	80028f0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	e005      	b.n	80028f0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80028f0:	68fb      	ldr	r3, [r7, #12]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800290e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d002      	beq.n	800291c <HAL_CAN_ActivateNotification+0x1e>
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d109      	bne.n	8002930 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6959      	ldr	r1, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e006      	b.n	800293e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b08a      	sub	sp, #40	@ 0x28
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d07c      	beq.n	8002a8a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d023      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2201      	movs	r2, #1
 80029a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f983 	bl	8002cb8 <HAL_CAN_TxMailbox0CompleteCallback>
 80029b2:	e016      	b.n	80029e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c6:	e00c      	b.n	80029e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029da:	e002      	b.n	80029e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f989 	bl	8002cf4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d024      	beq.n	8002a36 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f963 	bl	8002ccc <HAL_CAN_TxMailbox1CompleteCallback>
 8002a06:	e016      	b.n	8002a36 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a1a:	e00c      	b.n	8002a36 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2e:	e002      	b.n	8002a36 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f969 	bl	8002d08 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d024      	beq.n	8002a8a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f943 	bl	8002ce0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002a5a:	e016      	b.n	8002a8a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6e:	e00c      	b.n	8002a8a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a82:	e002      	b.n	8002a8a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f949 	bl	8002d1c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00c      	beq.n	8002aae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2210      	movs	r2, #16
 8002aac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fcaa 	bl	8001424 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7fe fc83 	bl	80013f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00c      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2210      	movs	r2, #16
 8002b10:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe fc82 	bl	8001438 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7fe fc5d 	bl	800140c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00b      	beq.n	8002b74 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8de 	bl	8002d30 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f8d7 	bl	8002d44 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d07b      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d072      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d043      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d03e      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c18:	2b60      	cmp	r3, #96	@ 0x60
 8002c1a:	d02b      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x32a>
 8002c1c:	2b60      	cmp	r3, #96	@ 0x60
 8002c1e:	d82e      	bhi.n	8002c7e <HAL_CAN_IRQHandler+0x334>
 8002c20:	2b50      	cmp	r3, #80	@ 0x50
 8002c22:	d022      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x320>
 8002c24:	2b50      	cmp	r3, #80	@ 0x50
 8002c26:	d82a      	bhi.n	8002c7e <HAL_CAN_IRQHandler+0x334>
 8002c28:	2b40      	cmp	r3, #64	@ 0x40
 8002c2a:	d019      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x316>
 8002c2c:	2b40      	cmp	r3, #64	@ 0x40
 8002c2e:	d826      	bhi.n	8002c7e <HAL_CAN_IRQHandler+0x334>
 8002c30:	2b30      	cmp	r3, #48	@ 0x30
 8002c32:	d010      	beq.n	8002c56 <HAL_CAN_IRQHandler+0x30c>
 8002c34:	2b30      	cmp	r3, #48	@ 0x30
 8002c36:	d822      	bhi.n	8002c7e <HAL_CAN_IRQHandler+0x334>
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d002      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x2f8>
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d005      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c40:	e01d      	b.n	8002c7e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	f043 0308 	orr.w	r3, r3, #8
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c4a:	e019      	b.n	8002c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	f043 0310 	orr.w	r3, r3, #16
 8002c52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c54:	e014      	b.n	8002c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	f043 0320 	orr.w	r3, r3, #32
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c5e:	e00f      	b.n	8002c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c68:	e00a      	b.n	8002c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c72:	e005      	b.n	8002c80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c7c:	e000      	b.n	8002c80 <HAL_CAN_IRQHandler+0x336>
            break;
 8002c7e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002c8e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2204      	movs	r2, #4
 8002c96:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fbce 	bl	800144c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3728      	adds	r7, #40	@ 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8a:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	60d3      	str	r3, [r2, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db0b      	blt.n	8002de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4907      	ldr	r1, [pc, #28]	@ (8002df4 <__NVIC_EnableIRQ+0x38>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fa00 f202 	lsl.w	r2, r0, r2
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000e100 	.word	0xe000e100

08002df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	db0a      	blt.n	8002e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	490c      	ldr	r1, [pc, #48]	@ (8002e44 <__NVIC_SetPriority+0x4c>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e20:	e00a      	b.n	8002e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4908      	ldr	r1, [pc, #32]	@ (8002e48 <__NVIC_SetPriority+0x50>)
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	3b04      	subs	r3, #4
 8002e30:	0112      	lsls	r2, r2, #4
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	440b      	add	r3, r1
 8002e36:	761a      	strb	r2, [r3, #24]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000e100 	.word	0xe000e100
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	@ 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f1c3 0307 	rsb	r3, r3, #7
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	bf28      	it	cs
 8002e6a:	2304      	movcs	r3, #4
 8002e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d902      	bls.n	8002e7c <NVIC_EncodePriority+0x30>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3b03      	subs	r3, #3
 8002e7a:	e000      	b.n	8002e7e <NVIC_EncodePriority+0x32>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	401a      	ands	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e94:	f04f 31ff 	mov.w	r1, #4294967295
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43d9      	mvns	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea4:	4313      	orrs	r3, r2
         );
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3724      	adds	r7, #36	@ 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ec4:	d301      	bcc.n	8002eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00f      	b.n	8002eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <SysTick_Config+0x40>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed2:	210f      	movs	r1, #15
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	f7ff ff8e 	bl	8002df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <SysTick_Config+0x40>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee2:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <SysTick_Config+0x40>)
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	e000e010 	.word	0xe000e010

08002ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff29 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f20:	f7ff ff3e 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	6978      	ldr	r0, [r7, #20]
 8002f2c:	f7ff ff8e 	bl	8002e4c <NVIC_EncodePriority>
 8002f30:	4602      	mov	r2, r0
 8002f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff5d 	bl	8002df8 <__NVIC_SetPriority>
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff31 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ffa2 	bl	8002eb4 <SysTick_Config>
 8002f70:	4603      	mov	r3, r0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e165      	b.n	8003264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 8154 	bne.w	800325e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d005      	beq.n	8002fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d130      	bne.n	8003030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 0201 	and.w	r2, r3, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d017      	beq.n	800306c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d123      	bne.n	80030c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3208      	adds	r2, #8
 8003080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	220f      	movs	r2, #15
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	08da      	lsrs	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3208      	adds	r2, #8
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80ae 	beq.w	800325e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b5d      	ldr	r3, [pc, #372]	@ (800327c <HAL_GPIO_Init+0x300>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	4a5c      	ldr	r2, [pc, #368]	@ (800327c <HAL_GPIO_Init+0x300>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003110:	6453      	str	r3, [r2, #68]	@ 0x44
 8003112:	4b5a      	ldr	r3, [pc, #360]	@ (800327c <HAL_GPIO_Init+0x300>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311e:	4a58      	ldr	r2, [pc, #352]	@ (8003280 <HAL_GPIO_Init+0x304>)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4f      	ldr	r2, [pc, #316]	@ (8003284 <HAL_GPIO_Init+0x308>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d025      	beq.n	8003196 <HAL_GPIO_Init+0x21a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4e      	ldr	r2, [pc, #312]	@ (8003288 <HAL_GPIO_Init+0x30c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01f      	beq.n	8003192 <HAL_GPIO_Init+0x216>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4d      	ldr	r2, [pc, #308]	@ (800328c <HAL_GPIO_Init+0x310>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d019      	beq.n	800318e <HAL_GPIO_Init+0x212>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4c      	ldr	r2, [pc, #304]	@ (8003290 <HAL_GPIO_Init+0x314>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_GPIO_Init+0x20e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4b      	ldr	r2, [pc, #300]	@ (8003294 <HAL_GPIO_Init+0x318>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00d      	beq.n	8003186 <HAL_GPIO_Init+0x20a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4a      	ldr	r2, [pc, #296]	@ (8003298 <HAL_GPIO_Init+0x31c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <HAL_GPIO_Init+0x206>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a49      	ldr	r2, [pc, #292]	@ (800329c <HAL_GPIO_Init+0x320>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_GPIO_Init+0x202>
 800317a:	2306      	movs	r3, #6
 800317c:	e00c      	b.n	8003198 <HAL_GPIO_Init+0x21c>
 800317e:	2307      	movs	r3, #7
 8003180:	e00a      	b.n	8003198 <HAL_GPIO_Init+0x21c>
 8003182:	2305      	movs	r3, #5
 8003184:	e008      	b.n	8003198 <HAL_GPIO_Init+0x21c>
 8003186:	2304      	movs	r3, #4
 8003188:	e006      	b.n	8003198 <HAL_GPIO_Init+0x21c>
 800318a:	2303      	movs	r3, #3
 800318c:	e004      	b.n	8003198 <HAL_GPIO_Init+0x21c>
 800318e:	2302      	movs	r3, #2
 8003190:	e002      	b.n	8003198 <HAL_GPIO_Init+0x21c>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x21c>
 8003196:	2300      	movs	r3, #0
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f002 0203 	and.w	r2, r2, #3
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	4093      	lsls	r3, r2
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a8:	4935      	ldr	r1, [pc, #212]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3302      	adds	r3, #2
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031b6:	4b3a      	ldr	r3, [pc, #232]	@ (80032a0 <HAL_GPIO_Init+0x324>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031da:	4a31      	ldr	r2, [pc, #196]	@ (80032a0 <HAL_GPIO_Init+0x324>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e0:	4b2f      	ldr	r3, [pc, #188]	@ (80032a0 <HAL_GPIO_Init+0x324>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003204:	4a26      	ldr	r2, [pc, #152]	@ (80032a0 <HAL_GPIO_Init+0x324>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800320a:	4b25      	ldr	r3, [pc, #148]	@ (80032a0 <HAL_GPIO_Init+0x324>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800322e:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <HAL_GPIO_Init+0x324>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003234:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <HAL_GPIO_Init+0x324>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003258:	4a11      	ldr	r2, [pc, #68]	@ (80032a0 <HAL_GPIO_Init+0x324>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3301      	adds	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	f67f ae96 	bls.w	8002f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	3724      	adds	r7, #36	@ 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40013800 	.word	0x40013800
 8003284:	40020000 	.word	0x40020000
 8003288:	40020400 	.word	0x40020400
 800328c:	40020800 	.word	0x40020800
 8003290:	40020c00 	.word	0x40020c00
 8003294:	40021000 	.word	0x40021000
 8003298:	40021400 	.word	0x40021400
 800329c:	40021800 	.word	0x40021800
 80032a0:	40013c00 	.word	0x40013c00

080032a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e001      	b.n	80032c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
 80032e0:	4613      	mov	r3, r2
 80032e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e4:	787b      	ldrb	r3, [r7, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f0:	e003      	b.n	80032fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	041a      	lsls	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	460b      	mov	r3, r1
 8003310:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003318:	887a      	ldrh	r2, [r7, #2]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4013      	ands	r3, r2
 800331e:	041a      	lsls	r2, r3, #16
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	43d9      	mvns	r1, r3
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	400b      	ands	r3, r1
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	619a      	str	r2, [r3, #24]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003346:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d006      	beq.n	8003360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003352:	4a05      	ldr	r2, [pc, #20]	@ (8003368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f806 	bl	800336c <HAL_GPIO_EXTI_Callback>
  }
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40013c00 	.word	0x40013c00

0800336c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0cc      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	4b68      	ldr	r3, [pc, #416]	@ (800353c <HAL_RCC_ClockConfig+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d90c      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b65      	ldr	r3, [pc, #404]	@ (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b63      	ldr	r3, [pc, #396]	@ (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b8      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d8:	4b59      	ldr	r3, [pc, #356]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a58      	ldr	r2, [pc, #352]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f0:	4b53      	ldr	r3, [pc, #332]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a52      	ldr	r2, [pc, #328]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b50      	ldr	r3, [pc, #320]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	494d      	ldr	r1, [pc, #308]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d044      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b47      	ldr	r3, [pc, #284]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d119      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d003      	beq.n	8003442 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343e:	2b03      	cmp	r3, #3
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	4b3f      	ldr	r3, [pc, #252]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e067      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4b37      	ldr	r3, [pc, #220]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 0203 	bic.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4934      	ldr	r1, [pc, #208]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003474:	f7fe fda6 	bl	8001fc4 <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	e00a      	b.n	8003492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fe fda2 	bl	8001fc4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e04f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 020c 	and.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1eb      	bne.n	800347c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b25      	ldr	r3, [pc, #148]	@ (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20c      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b22      	ldr	r3, [pc, #136]	@ (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b20      	ldr	r3, [pc, #128]	@ (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e032      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b19      	ldr	r3, [pc, #100]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4916      	ldr	r1, [pc, #88]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f6:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490e      	ldr	r1, [pc, #56]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800350a:	f000 f821 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490a      	ldr	r1, [pc, #40]	@ (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a09      	ldr	r2, [pc, #36]	@ (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003526:	4b09      	ldr	r3, [pc, #36]	@ (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fd06 	bl	8001f3c <HAL_InitTick>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023c00 	.word	0x40023c00
 8003540:	40023800 	.word	0x40023800
 8003544:	08005558 	.word	0x08005558
 8003548:	20000030 	.word	0x20000030
 800354c:	20000034 	.word	0x20000034

08003550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003554:	b0a6      	sub	sp, #152	@ 0x98
 8003556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003576:	4bc8      	ldr	r3, [pc, #800]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b0c      	cmp	r3, #12
 8003580:	f200 817e 	bhi.w	8003880 <HAL_RCC_GetSysClockFreq+0x330>
 8003584:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035c1 	.word	0x080035c1
 8003590:	08003881 	.word	0x08003881
 8003594:	08003881 	.word	0x08003881
 8003598:	08003881 	.word	0x08003881
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	08003881 	.word	0x08003881
 80035a4:	08003881 	.word	0x08003881
 80035a8:	08003881 	.word	0x08003881
 80035ac:	080035d1 	.word	0x080035d1
 80035b0:	08003881 	.word	0x08003881
 80035b4:	08003881 	.word	0x08003881
 80035b8:	08003881 	.word	0x08003881
 80035bc:	0800373b 	.word	0x0800373b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4bb6      	ldr	r3, [pc, #728]	@ (800389c <HAL_RCC_GetSysClockFreq+0x34c>)
 80035c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035c6:	e15f      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c8:	4bb5      	ldr	r3, [pc, #724]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 80035ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035ce:	e15b      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d0:	4bb1      	ldr	r3, [pc, #708]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035dc:	4bae      	ldr	r3, [pc, #696]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d031      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e8:	4bab      	ldr	r3, [pc, #684]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	2200      	movs	r2, #0
 80035f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80035fc:	2300      	movs	r3, #0
 80035fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003600:	4ba7      	ldr	r3, [pc, #668]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003602:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003606:	462a      	mov	r2, r5
 8003608:	fb03 f202 	mul.w	r2, r3, r2
 800360c:	2300      	movs	r3, #0
 800360e:	4621      	mov	r1, r4
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	4aa2      	ldr	r2, [pc, #648]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003618:	4621      	mov	r1, r4
 800361a:	fba1 1202 	umull	r1, r2, r1, r2
 800361e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003620:	460a      	mov	r2, r1
 8003622:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003624:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003626:	4413      	add	r3, r2
 8003628:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800362a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362e:	2200      	movs	r2, #0
 8003630:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003632:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003634:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003638:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800363c:	f7fc fde2 	bl	8000204 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800364a:	e064      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364c:	4b92      	ldr	r3, [pc, #584]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	2200      	movs	r2, #0
 8003654:	653b      	str	r3, [r7, #80]	@ 0x50
 8003656:	657a      	str	r2, [r7, #84]	@ 0x54
 8003658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003660:	2300      	movs	r3, #0
 8003662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003664:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003668:	4622      	mov	r2, r4
 800366a:	462b      	mov	r3, r5
 800366c:	f04f 0000 	mov.w	r0, #0
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	0159      	lsls	r1, r3, #5
 8003676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367a:	0150      	lsls	r0, r2, #5
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4621      	mov	r1, r4
 8003682:	1a51      	subs	r1, r2, r1
 8003684:	6139      	str	r1, [r7, #16]
 8003686:	4629      	mov	r1, r5
 8003688:	eb63 0301 	sbc.w	r3, r3, r1
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800369a:	4659      	mov	r1, fp
 800369c:	018b      	lsls	r3, r1, #6
 800369e:	4651      	mov	r1, sl
 80036a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a4:	4651      	mov	r1, sl
 80036a6:	018a      	lsls	r2, r1, #6
 80036a8:	4651      	mov	r1, sl
 80036aa:	ebb2 0801 	subs.w	r8, r2, r1
 80036ae:	4659      	mov	r1, fp
 80036b0:	eb63 0901 	sbc.w	r9, r3, r1
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c8:	4690      	mov	r8, r2
 80036ca:	4699      	mov	r9, r3
 80036cc:	4623      	mov	r3, r4
 80036ce:	eb18 0303 	adds.w	r3, r8, r3
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	462b      	mov	r3, r5
 80036d6:	eb49 0303 	adc.w	r3, r9, r3
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036e8:	4629      	mov	r1, r5
 80036ea:	028b      	lsls	r3, r1, #10
 80036ec:	4621      	mov	r1, r4
 80036ee:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f2:	4621      	mov	r1, r4
 80036f4:	028a      	lsls	r2, r1, #10
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036fe:	2200      	movs	r2, #0
 8003700:	643b      	str	r3, [r7, #64]	@ 0x40
 8003702:	647a      	str	r2, [r7, #68]	@ 0x44
 8003704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003708:	f7fc fd7c 	bl	8000204 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003716:	4b60      	ldr	r3, [pc, #384]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	0c1b      	lsrs	r3, r3, #16
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	3301      	adds	r3, #1
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003728:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800372c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003738:	e0a6      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373a:	4b57      	ldr	r3, [pc, #348]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003742:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003746:	4b54      	ldr	r3, [pc, #336]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02a      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b51      	ldr	r3, [pc, #324]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800375c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003764:	2100      	movs	r1, #0
 8003766:	4b4e      	ldr	r3, [pc, #312]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003768:	fb03 f201 	mul.w	r2, r3, r1
 800376c:	2300      	movs	r3, #0
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	4413      	add	r3, r2
 8003774:	4a4a      	ldr	r2, [pc, #296]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003776:	fba0 1202 	umull	r1, r2, r0, r2
 800377a:	677a      	str	r2, [r7, #116]	@ 0x74
 800377c:	460a      	mov	r2, r1
 800377e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003780:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003782:	4413      	add	r3, r2
 8003784:	677b      	str	r3, [r7, #116]	@ 0x74
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800378a:	2200      	movs	r2, #0
 800378c:	633b      	str	r3, [r7, #48]	@ 0x30
 800378e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003790:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003794:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003798:	f7fc fd34 	bl	8000204 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037a6:	e05b      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	2200      	movs	r2, #0
 80037b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c4:	4642      	mov	r2, r8
 80037c6:	464b      	mov	r3, r9
 80037c8:	f04f 0000 	mov.w	r0, #0
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	0159      	lsls	r1, r3, #5
 80037d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d6:	0150      	lsls	r0, r2, #5
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4641      	mov	r1, r8
 80037de:	ebb2 0a01 	subs.w	sl, r2, r1
 80037e2:	4649      	mov	r1, r9
 80037e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003800:	eb63 050b 	sbc.w	r5, r3, fp
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	00eb      	lsls	r3, r5, #3
 800380e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003812:	00e2      	lsls	r2, r4, #3
 8003814:	4614      	mov	r4, r2
 8003816:	461d      	mov	r5, r3
 8003818:	4643      	mov	r3, r8
 800381a:	18e3      	adds	r3, r4, r3
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	464b      	mov	r3, r9
 8003820:	eb45 0303 	adc.w	r3, r5, r3
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003832:	4629      	mov	r1, r5
 8003834:	028b      	lsls	r3, r1, #10
 8003836:	4621      	mov	r1, r4
 8003838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800383c:	4621      	mov	r1, r4
 800383e:	028a      	lsls	r2, r1, #10
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003848:	2200      	movs	r2, #0
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	61fa      	str	r2, [r7, #28]
 800384e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003852:	f7fc fcd7 	bl	8000204 <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4613      	mov	r3, r2
 800385c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003860:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0f1b      	lsrs	r3, r3, #28
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800386e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003876:	fbb2 f3f3 	udiv	r3, r2, r3
 800387a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800387e:	e003      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003886:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003888:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800388c:	4618      	mov	r0, r3
 800388e:	3798      	adds	r7, #152	@ 0x98
 8003890:	46bd      	mov	sp, r7
 8003892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	017d7840 	.word	0x017d7840

080038a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e28d      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8083 	beq.w	80039ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038c4:	4b94      	ldr	r3, [pc, #592]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d019      	beq.n	8003904 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038d0:	4b91      	ldr	r3, [pc, #580]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038e8:	d00c      	beq.n	8003904 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d112      	bne.n	800391c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4b88      	ldr	r3, [pc, #544]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003902:	d10b      	bne.n	800391c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	4b84      	ldr	r3, [pc, #528]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d05b      	beq.n	80039c8 <HAL_RCC_OscConfig+0x124>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d157      	bne.n	80039c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e25a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003924:	d106      	bne.n	8003934 <HAL_RCC_OscConfig+0x90>
 8003926:	4b7c      	ldr	r3, [pc, #496]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a7b      	ldr	r2, [pc, #492]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e01d      	b.n	8003970 <HAL_RCC_OscConfig+0xcc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0xb4>
 800393e:	4b76      	ldr	r3, [pc, #472]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a75      	ldr	r2, [pc, #468]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b73      	ldr	r3, [pc, #460]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a72      	ldr	r2, [pc, #456]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0xcc>
 8003958:	4b6f      	ldr	r3, [pc, #444]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b6c      	ldr	r3, [pc, #432]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6b      	ldr	r2, [pc, #428]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800396e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fb24 	bl	8001fc4 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe fb20 	bl	8001fc4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e21f      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b61      	ldr	r3, [pc, #388]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0xdc>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fe fb10 	bl	8001fc4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fe fb0c 	bl	8001fc4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e20b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	4b57      	ldr	r3, [pc, #348]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x104>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d06f      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039d6:	4b50      	ldr	r3, [pc, #320]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d017      	beq.n	8003a12 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
        || \
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d105      	bne.n	80039fa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b47      	ldr	r3, [pc, #284]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d11c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a06:	4b44      	ldr	r3, [pc, #272]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d116      	bne.n	8003a40 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	4b41      	ldr	r3, [pc, #260]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_RCC_OscConfig+0x186>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e1d3      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4937      	ldr	r1, [pc, #220]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3e:	e03a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a48:	4b34      	ldr	r3, [pc, #208]	@ (8003b1c <HAL_RCC_OscConfig+0x278>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fe fab9 	bl	8001fc4 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a56:	f7fe fab5 	bl	8001fc4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e1b4      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	4b2b      	ldr	r3, [pc, #172]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b28      	ldr	r3, [pc, #160]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4925      	ldr	r1, [pc, #148]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
 8003a88:	e015      	b.n	8003ab6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8a:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <HAL_RCC_OscConfig+0x278>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe fa98 	bl	8001fc4 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a98:	f7fe fa94 	bl	8001fc4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e193      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d036      	beq.n	8003b30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d016      	beq.n	8003af8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aca:	4b15      	ldr	r3, [pc, #84]	@ (8003b20 <HAL_RCC_OscConfig+0x27c>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fe fa78 	bl	8001fc4 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fe fa74 	bl	8001fc4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e173      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x234>
 8003af6:	e01b      	b.n	8003b30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af8:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <HAL_RCC_OscConfig+0x27c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fe fa61 	bl	8001fc4 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	e00e      	b.n	8003b24 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b06:	f7fe fa5d 	bl	8001fc4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d907      	bls.n	8003b24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e15c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	42470000 	.word	0x42470000
 8003b20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	4b8a      	ldr	r3, [pc, #552]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ea      	bne.n	8003b06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8097 	beq.w	8003c6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b42:	4b83      	ldr	r3, [pc, #524]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	4b7f      	ldr	r3, [pc, #508]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	4a7e      	ldr	r2, [pc, #504]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b79      	ldr	r3, [pc, #484]	@ (8003d54 <HAL_RCC_OscConfig+0x4b0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d118      	bne.n	8003bac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7a:	4b76      	ldr	r3, [pc, #472]	@ (8003d54 <HAL_RCC_OscConfig+0x4b0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a75      	ldr	r2, [pc, #468]	@ (8003d54 <HAL_RCC_OscConfig+0x4b0>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b86:	f7fe fa1d 	bl	8001fc4 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8e:	f7fe fa19 	bl	8001fc4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e118      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8003d54 <HAL_RCC_OscConfig+0x4b0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x31e>
 8003bb4:	4b66      	ldr	r3, [pc, #408]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb8:	4a65      	ldr	r2, [pc, #404]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc0:	e01c      	b.n	8003bfc <HAL_RCC_OscConfig+0x358>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x340>
 8003bca:	4b61      	ldr	r3, [pc, #388]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	4a60      	ldr	r2, [pc, #384]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	4a5d      	ldr	r2, [pc, #372]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be2:	e00b      	b.n	8003bfc <HAL_RCC_OscConfig+0x358>
 8003be4:	4b5a      	ldr	r3, [pc, #360]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	4a59      	ldr	r2, [pc, #356]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf0:	4b57      	ldr	r3, [pc, #348]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf4:	4a56      	ldr	r2, [pc, #344]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bf6:	f023 0304 	bic.w	r3, r3, #4
 8003bfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fe f9de 	bl	8001fc4 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7fe f9da 	bl	8001fc4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0d7      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c22:	4b4b      	ldr	r3, [pc, #300]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0ee      	beq.n	8003c0c <HAL_RCC_OscConfig+0x368>
 8003c2e:	e014      	b.n	8003c5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fe f9c8 	bl	8001fc4 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fe f9c4 	bl	8001fc4 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0c1      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4e:	4b40      	ldr	r3, [pc, #256]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1ee      	bne.n	8003c38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d105      	bne.n	8003c6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c60:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	4a3a      	ldr	r2, [pc, #232]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80ad 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c76:	4b36      	ldr	r3, [pc, #216]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d060      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d145      	bne.n	8003d16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8a:	4b33      	ldr	r3, [pc, #204]	@ (8003d58 <HAL_RCC_OscConfig+0x4b4>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fe f998 	bl	8001fc4 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fe f994 	bl	8001fc4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e093      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	4b29      	ldr	r3, [pc, #164]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69da      	ldr	r2, [r3, #28]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	019b      	lsls	r3, r3, #6
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	061b      	lsls	r3, r3, #24
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	071b      	lsls	r3, r3, #28
 8003ce2:	491b      	ldr	r1, [pc, #108]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <HAL_RCC_OscConfig+0x4b4>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fe f969 	bl	8001fc4 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fe f965 	bl	8001fc4 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e064      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d08:	4b11      	ldr	r3, [pc, #68]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x452>
 8003d14:	e05c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <HAL_RCC_OscConfig+0x4b4>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f952 	bl	8001fc4 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fe f94e 	bl	8001fc4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e04d      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x480>
 8003d42:	e045      	b.n	8003dd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e040      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40007000 	.word	0x40007000
 8003d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ddc <HAL_RCC_OscConfig+0x538>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d030      	beq.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d129      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d122      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d119      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	3b01      	subs	r3, #1
 8003da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d10f      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e07b      	b.n	8003eea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e02:	d009      	beq.n	8003e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	61da      	str	r2, [r3, #28]
 8003e0a:	e005      	b.n	8003e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd fe00 	bl	8001a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9c:	ea42 0103 	orr.w	r1, r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0104 	and.w	r1, r3, #4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	f003 0210 	and.w	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b088      	sub	sp, #32
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f02:	f7fe f85f 	bl	8001fc4 <HAL_GetTick>
 8003f06:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d001      	beq.n	8003f1c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e12a      	b.n	8004172 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_SPI_Transmit+0x36>
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e122      	b.n	8004172 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_SPI_Transmit+0x48>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e11b      	b.n	8004172 <HAL_SPI_Transmit+0x280>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2203      	movs	r2, #3
 8003f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f88:	d10f      	bne.n	8003faa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b40      	cmp	r3, #64	@ 0x40
 8003fb6:	d007      	beq.n	8003fc8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fd0:	d152      	bne.n	8004078 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Transmit+0xee>
 8003fda:	8b7b      	ldrh	r3, [r7, #26]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d145      	bne.n	800406c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe4:	881a      	ldrh	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	1c9a      	adds	r2, r3, #2
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004004:	e032      	b.n	800406c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d112      	bne.n	800403a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004038:	e018      	b.n	800406c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403a:	f7fd ffc3 	bl	8001fc4 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d803      	bhi.n	8004052 <HAL_SPI_Transmit+0x160>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d102      	bne.n	8004058 <HAL_SPI_Transmit+0x166>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e082      	b.n	8004172 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1c7      	bne.n	8004006 <HAL_SPI_Transmit+0x114>
 8004076:	e053      	b.n	8004120 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_SPI_Transmit+0x194>
 8004080:	8b7b      	ldrh	r3, [r7, #26]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d147      	bne.n	8004116 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	7812      	ldrb	r2, [r2, #0]
 8004092:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040ac:	e033      	b.n	8004116 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d113      	bne.n	80040e4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040e2:	e018      	b.n	8004116 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040e4:	f7fd ff6e 	bl	8001fc4 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d803      	bhi.n	80040fc <HAL_SPI_Transmit+0x20a>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d102      	bne.n	8004102 <HAL_SPI_Transmit+0x210>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e02d      	b.n	8004172 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1c6      	bne.n	80040ae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	6839      	ldr	r1, [r7, #0]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fa59 	bl	80045dc <SPI_EndRxTxTransaction>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004170:	2300      	movs	r3, #0
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b08a      	sub	sp, #40	@ 0x28
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004188:	2301      	movs	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800418c:	f7fd ff1a 	bl	8001fc4 <HAL_GetTick>
 8004190:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004198:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d00c      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x4a>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041b0:	d106      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x46>
 80041ba:	7ffb      	ldrb	r3, [r7, #31]
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d001      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
 80041c2:	e17f      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x5c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x5c>
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e174      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x6e>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e16d      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x34a>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d003      	beq.n	8004204 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2205      	movs	r2, #5
 8004200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	887a      	ldrh	r2, [r7, #2]
 8004214:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	887a      	ldrh	r2, [r7, #2]
 800421a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	887a      	ldrh	r2, [r7, #2]
 8004226:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d007      	beq.n	8004258 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004260:	d17e      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_SPI_TransmitReceive+0xf6>
 800426a:	8afb      	ldrh	r3, [r7, #22]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d16c      	bne.n	800434a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004274:	881a      	ldrh	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004294:	e059      	b.n	800434a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d11b      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x162>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HAL_SPI_TransmitReceive+0x162>
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d113      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	1c9a      	adds	r2, r3, #2
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d119      	bne.n	800431e <HAL_SPI_TransmitReceive+0x1a4>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d014      	beq.n	800431e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fe:	b292      	uxth	r2, r2
 8004300:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004306:	1c9a      	adds	r2, r3, #2
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800431a:	2301      	movs	r3, #1
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800431e:	f7fd fe51 	bl	8001fc4 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800432a:	429a      	cmp	r2, r3
 800432c:	d80d      	bhi.n	800434a <HAL_SPI_TransmitReceive+0x1d0>
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d009      	beq.n	800434a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0bc      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1a0      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x11c>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d19b      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x11c>
 800435e:	e082      	b.n	8004466 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_SPI_TransmitReceive+0x1f4>
 8004368:	8afb      	ldrh	r3, [r7, #22]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d171      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	7812      	ldrb	r2, [r2, #0]
 800437a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004394:	e05d      	b.n	8004452 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d11c      	bne.n	80043de <HAL_SPI_TransmitReceive+0x264>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d017      	beq.n	80043de <HAL_SPI_TransmitReceive+0x264>
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d114      	bne.n	80043de <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	7812      	ldrb	r2, [r2, #0]
 80043c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d119      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x2a6>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d014      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800441c:	2301      	movs	r3, #1
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004420:	f7fd fdd0 	bl	8001fc4 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442c:	429a      	cmp	r2, r3
 800442e:	d803      	bhi.n	8004438 <HAL_SPI_TransmitReceive+0x2be>
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d102      	bne.n	800443e <HAL_SPI_TransmitReceive+0x2c4>
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e038      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d19c      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x21c>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d197      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f8b6 	bl	80045dc <SPI_EndRxTxTransaction>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e01d      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
  }
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3728      	adds	r7, #40	@ 0x28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044dc:	f7fd fd72 	bl	8001fc4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044ec:	f7fd fd6a 	bl	8001fc4 <HAL_GetTick>
 80044f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044f2:	4b39      	ldr	r3, [pc, #228]	@ (80045d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	015b      	lsls	r3, r3, #5
 80044f8:	0d1b      	lsrs	r3, r3, #20
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	fb02 f303 	mul.w	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004502:	e055      	b.n	80045b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	d051      	beq.n	80045b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800450c:	f7fd fd5a 	bl	8001fc4 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	429a      	cmp	r2, r3
 800451a:	d902      	bls.n	8004522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d13d      	bne.n	800459e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800453a:	d111      	bne.n	8004560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004544:	d004      	beq.n	8004550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800454e:	d107      	bne.n	8004560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800455e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004568:	d10f      	bne.n	800458a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e018      	b.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	e002      	b.n	80045b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d19a      	bne.n	8004504 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000030 	.word	0x20000030

080045dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2201      	movs	r2, #1
 80045f0:	2102      	movs	r1, #2
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ff6a 	bl	80044cc <SPI_WaitFlagStateUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e032      	b.n	8004674 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800460e:	4b1b      	ldr	r3, [pc, #108]	@ (800467c <SPI_EndRxTxTransaction+0xa0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <SPI_EndRxTxTransaction+0xa4>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	0d5b      	lsrs	r3, r3, #21
 800461a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800462c:	d112      	bne.n	8004654 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2200      	movs	r2, #0
 8004636:	2180      	movs	r1, #128	@ 0x80
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7ff ff47 	bl	80044cc <SPI_WaitFlagStateUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d016      	beq.n	8004672 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e00f      	b.n	8004674 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	3b01      	subs	r3, #1
 800465e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466a:	2b80      	cmp	r3, #128	@ 0x80
 800466c:	d0f2      	beq.n	8004654 <SPI_EndRxTxTransaction+0x78>
 800466e:	e000      	b.n	8004672 <SPI_EndRxTxTransaction+0x96>
        break;
 8004670:	bf00      	nop
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000030 	.word	0x20000030
 8004680:	165e9f81 	.word	0x165e9f81

08004684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e041      	b.n	800471a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd fa3e 	bl	8001b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f000 fb34 	bl	8004d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e04e      	b.n	80047da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a23      	ldr	r2, [pc, #140]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d022      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d01d      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1f      	ldr	r2, [pc, #124]	@ (80047ec <HAL_TIM_Base_Start_IT+0xc8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d018      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1e      	ldr	r2, [pc, #120]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1b      	ldr	r2, [pc, #108]	@ (80047f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a19      	ldr	r2, [pc, #100]	@ (80047fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a18      	ldr	r2, [pc, #96]	@ (8004800 <HAL_TIM_Base_Start_IT+0xdc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d111      	bne.n	80047c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d010      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c6:	e007      	b.n	80047d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40010000 	.word	0x40010000
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40010400 	.word	0x40010400
 80047fc:	40014000 	.word	0x40014000
 8004800:	40001800 	.word	0x40001800

08004804 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e041      	b.n	800489a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd f95c 	bl	8001ae8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f000 fa74 	bl	8004d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d020      	beq.n	8004906 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f06f 0202 	mvn.w	r2, #2
 80048d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fa00 	bl	8004cf2 <HAL_TIM_IC_CaptureCallback>
 80048f2:	e005      	b.n	8004900 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f9f2 	bl	8004cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa03 	bl	8004d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d020      	beq.n	8004952 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d01b      	beq.n	8004952 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f06f 0204 	mvn.w	r2, #4
 8004922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f9da 	bl	8004cf2 <HAL_TIM_IC_CaptureCallback>
 800493e:	e005      	b.n	800494c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f9cc 	bl	8004cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f9dd 	bl	8004d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f06f 0208 	mvn.w	r2, #8
 800496e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2204      	movs	r2, #4
 8004974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f9b4 	bl	8004cf2 <HAL_TIM_IC_CaptureCallback>
 800498a:	e005      	b.n	8004998 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f9a6 	bl	8004cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f9b7 	bl	8004d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01b      	beq.n	80049ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f06f 0210 	mvn.w	r2, #16
 80049ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2208      	movs	r2, #8
 80049c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f98e 	bl	8004cf2 <HAL_TIM_IC_CaptureCallback>
 80049d6:	e005      	b.n	80049e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f980 	bl	8004cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f991 	bl	8004d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00c      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0201 	mvn.w	r2, #1
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f95e 	bl	8004cca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00c      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fd47 	bl	80054c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00c      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f962 	bl	8004d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00c      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0220 	mvn.w	r2, #32
 8004a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fd19 	bl	80054ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e048      	b.n	8004b34 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	d839      	bhi.n	8004b24 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004b25 	.word	0x08004b25
 8004ac0:	08004b25 	.word	0x08004b25
 8004ac4:	08004b25 	.word	0x08004b25
 8004ac8:	08004afb 	.word	0x08004afb
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004b25 	.word	0x08004b25
 8004ad8:	08004b09 	.word	0x08004b09
 8004adc:	08004b25 	.word	0x08004b25
 8004ae0:	08004b25 	.word	0x08004b25
 8004ae4:	08004b25 	.word	0x08004b25
 8004ae8:	08004b17 	.word	0x08004b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f9c2 	bl	8004e7c <TIM_OC1_SetConfig>
      break;
 8004af8:	e017      	b.n	8004b2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fa2b 	bl	8004f5c <TIM_OC2_SetConfig>
      break;
 8004b06:	e010      	b.n	8004b2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fa9a 	bl	8005048 <TIM_OC3_SetConfig>
      break;
 8004b14:	e009      	b.n	8004b2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fb07 	bl	8005130 <TIM_OC4_SetConfig>
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
      break;
 8004b28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_TIM_ConfigClockSource+0x1c>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e0b4      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x186>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b90:	d03e      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0xd4>
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b96:	f200 8087 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9e:	f000 8086 	beq.w	8004cae <HAL_TIM_ConfigClockSource+0x172>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba6:	d87f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b70      	cmp	r3, #112	@ 0x70
 8004baa:	d01a      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0xa6>
 8004bac:	2b70      	cmp	r3, #112	@ 0x70
 8004bae:	d87b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b60      	cmp	r3, #96	@ 0x60
 8004bb2:	d050      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x11a>
 8004bb4:	2b60      	cmp	r3, #96	@ 0x60
 8004bb6:	d877      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b50      	cmp	r3, #80	@ 0x50
 8004bba:	d03c      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xfa>
 8004bbc:	2b50      	cmp	r3, #80	@ 0x50
 8004bbe:	d873      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b40      	cmp	r3, #64	@ 0x40
 8004bc2:	d058      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x13a>
 8004bc4:	2b40      	cmp	r3, #64	@ 0x40
 8004bc6:	d86f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b30      	cmp	r3, #48	@ 0x30
 8004bca:	d064      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004bcc:	2b30      	cmp	r3, #48	@ 0x30
 8004bce:	d86b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d060      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d867      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05c      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d05a      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004be0:	e062      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf2:	f000 fb6d 	bl	80052d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	609a      	str	r2, [r3, #8]
      break;
 8004c0e:	e04f      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c20:	f000 fb56 	bl	80052d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c32:	609a      	str	r2, [r3, #8]
      break;
 8004c34:	e03c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 faca 	bl	80051dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2150      	movs	r1, #80	@ 0x50
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fb23 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004c54:	e02c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 fae9 	bl	800523a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2160      	movs	r1, #96	@ 0x60
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fb13 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004c74:	e01c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 faaa 	bl	80051dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2140      	movs	r1, #64	@ 0x40
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fb03 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004c94:	e00c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f000 fafa 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004ca6:	e003      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a43      	ldr	r2, [pc, #268]	@ (8004e50 <TIM_Base_SetConfig+0x120>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4e:	d00f      	beq.n	8004d70 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a40      	ldr	r2, [pc, #256]	@ (8004e54 <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004e58 <TIM_Base_SetConfig+0x128>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d007      	beq.n	8004d70 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3e      	ldr	r2, [pc, #248]	@ (8004e5c <TIM_Base_SetConfig+0x12c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8004e60 <TIM_Base_SetConfig+0x130>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d108      	bne.n	8004d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a32      	ldr	r2, [pc, #200]	@ (8004e50 <TIM_Base_SetConfig+0x120>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d02b      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d90:	d027      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2f      	ldr	r2, [pc, #188]	@ (8004e54 <TIM_Base_SetConfig+0x124>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d023      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e58 <TIM_Base_SetConfig+0x128>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d01f      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2d      	ldr	r2, [pc, #180]	@ (8004e5c <TIM_Base_SetConfig+0x12c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01b      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2c      	ldr	r2, [pc, #176]	@ (8004e60 <TIM_Base_SetConfig+0x130>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d017      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e64 <TIM_Base_SetConfig+0x134>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8004e68 <TIM_Base_SetConfig+0x138>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00f      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	@ (8004e6c <TIM_Base_SetConfig+0x13c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00b      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a28      	ldr	r2, [pc, #160]	@ (8004e70 <TIM_Base_SetConfig+0x140>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d007      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a27      	ldr	r2, [pc, #156]	@ (8004e74 <TIM_Base_SetConfig+0x144>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d003      	beq.n	8004de2 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a26      	ldr	r2, [pc, #152]	@ (8004e78 <TIM_Base_SetConfig+0x148>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d108      	bne.n	8004df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a0e      	ldr	r2, [pc, #56]	@ (8004e50 <TIM_Base_SetConfig+0x120>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_Base_SetConfig+0xf2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a10      	ldr	r2, [pc, #64]	@ (8004e60 <TIM_Base_SetConfig+0x130>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d103      	bne.n	8004e2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f043 0204 	orr.w	r2, r3, #4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	601a      	str	r2, [r3, #0]
}
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800
 8004e70:	40001800 	.word	0x40001800
 8004e74:	40001c00 	.word	0x40001c00
 8004e78:	40002000 	.word	0x40002000

08004e7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f023 0201 	bic.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 0302 	bic.w	r3, r3, #2
 8004ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a20      	ldr	r2, [pc, #128]	@ (8004f54 <TIM_OC1_SetConfig+0xd8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x64>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1f      	ldr	r2, [pc, #124]	@ (8004f58 <TIM_OC1_SetConfig+0xdc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <TIM_OC1_SetConfig+0xd8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_OC1_SetConfig+0x8e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a14      	ldr	r2, [pc, #80]	@ (8004f58 <TIM_OC1_SetConfig+0xdc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d111      	bne.n	8004f2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40010400 	.word	0x40010400

08004f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f023 0210 	bic.w	r2, r3, #16
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0320 	bic.w	r3, r3, #32
 8004fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <TIM_OC2_SetConfig+0xe4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_OC2_SetConfig+0x68>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	@ (8005044 <TIM_OC2_SetConfig+0xe8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10d      	bne.n	8004fe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <TIM_OC2_SetConfig+0xe4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC2_SetConfig+0x94>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a16      	ldr	r2, [pc, #88]	@ (8005044 <TIM_OC2_SetConfig+0xe8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d113      	bne.n	8005018 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40010000 	.word	0x40010000
 8005044:	40010400 	.word	0x40010400

08005048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a21      	ldr	r2, [pc, #132]	@ (8005128 <TIM_OC3_SetConfig+0xe0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_OC3_SetConfig+0x66>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a20      	ldr	r2, [pc, #128]	@ (800512c <TIM_OC3_SetConfig+0xe4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10d      	bne.n	80050ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a16      	ldr	r2, [pc, #88]	@ (8005128 <TIM_OC3_SetConfig+0xe0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_OC3_SetConfig+0x92>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a15      	ldr	r2, [pc, #84]	@ (800512c <TIM_OC3_SetConfig+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d113      	bne.n	8005102 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40010000 	.word	0x40010000
 800512c:	40010400 	.word	0x40010400

08005130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800517a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a12      	ldr	r2, [pc, #72]	@ (80051d4 <TIM_OC4_SetConfig+0xa4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC4_SetConfig+0x68>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a11      	ldr	r2, [pc, #68]	@ (80051d8 <TIM_OC4_SetConfig+0xa8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d109      	bne.n	80051ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800519e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 030a 	bic.w	r3, r3, #10
 8005218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523a:	b480      	push	{r7}
 800523c:	b087      	sub	sp, #28
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f023 0210 	bic.w	r2, r3, #16
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	031b      	lsls	r3, r3, #12
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005276:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f043 0307 	orr.w	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	609a      	str	r2, [r3, #8]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005324:	2302      	movs	r3, #2
 8005326:	e05a      	b.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a21      	ldr	r2, [pc, #132]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d022      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d01d      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1d      	ldr	r2, [pc, #116]	@ (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d018      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1b      	ldr	r2, [pc, #108]	@ (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1a      	ldr	r2, [pc, #104]	@ (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00e      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a18      	ldr	r2, [pc, #96]	@ (80053fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d009      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a17      	ldr	r2, [pc, #92]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d004      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a15      	ldr	r2, [pc, #84]	@ (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d10c      	bne.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40010400 	.word	0x40010400
 8005400:	40014000 	.word	0x40014000
 8005404:	40001800 	.word	0x40001800

08005408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005420:	2302      	movs	r3, #2
 8005422:	e03d      	b.n	80054a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <memset>:
 80054d4:	4402      	add	r2, r0
 80054d6:	4603      	mov	r3, r0
 80054d8:	4293      	cmp	r3, r2
 80054da:	d100      	bne.n	80054de <memset+0xa>
 80054dc:	4770      	bx	lr
 80054de:	f803 1b01 	strb.w	r1, [r3], #1
 80054e2:	e7f9      	b.n	80054d8 <memset+0x4>

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4d0d      	ldr	r5, [pc, #52]	@ (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005520 <__libc_init_array+0x3c>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2600      	movs	r6, #0
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4d0b      	ldr	r5, [pc, #44]	@ (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005528 <__libc_init_array+0x44>)
 80054f8:	f000 f818 	bl	800552c <_init>
 80054fc:	1b64      	subs	r4, r4, r5
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2600      	movs	r6, #0
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	08005570 	.word	0x08005570
 8005520:	08005570 	.word	0x08005570
 8005524:	08005570 	.word	0x08005570
 8005528:	08005574 	.word	0x08005574

0800552c <_init>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr

08005538 <_fini>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr
