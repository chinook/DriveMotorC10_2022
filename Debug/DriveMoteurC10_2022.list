
DriveMoteurC10_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b74  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006d38  08006d38  00007d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d50  08006d50  0000804c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d50  08006d50  00007d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d58  08006d58  0000804c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d58  08006d58  00007d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08006d60  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  2000004c  08006dac  0000804c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08006dac  000084d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155bd  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028de  00000000  00000000  0001d639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0001ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd8  00000000  00000000  000212e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023323  00000000  00000000  000222c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170e2  00000000  00000000  000455e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8625  00000000  00000000  0005c6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134cea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e8  00000000  00000000  00134d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0013a318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000004c 	.word	0x2000004c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006d20 	.word	0x08006d20

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000050 	.word	0x20000050
 8000200:	08006d20 	.word	0x08006d20

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <delay_us>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_us(uint16_t delay16_us)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
	htim5.Instance->CNT = 0;
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <delay_us+0x30>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
	while (htim5.Instance->CNT < delay16_us);
 8000506:	bf00      	nop
 8000508:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <delay_us+0x30>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	429a      	cmp	r2, r3
 8000512:	d3f9      	bcc.n	8000508 <delay_us+0x14>
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200002b0 	.word	0x200002b0

08000528 <ExecuteStateMachine>:
uint8_t timer50ms_flag = 0;
uint8_t timer250ms_counter = 0;
uint8_t timer500ms_counter = 0;

void ExecuteStateMachine()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	// Check timers
	if (timer500ms_counter >= 10)
 800052c:	4b4c      	ldr	r3, [pc, #304]	@ (8000660 <ExecuteStateMachine+0x138>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b09      	cmp	r3, #9
 8000532:	d906      	bls.n	8000542 <ExecuteStateMachine+0x1a>
	{
		timer500ms_counter = 0;
 8000534:	4b4a      	ldr	r3, [pc, #296]	@ (8000660 <ExecuteStateMachine+0x138>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 800053a:	2108      	movs	r1, #8
 800053c:	4849      	ldr	r0, [pc, #292]	@ (8000664 <ExecuteStateMachine+0x13c>)
 800053e:	f003 fe28 	bl	8004192 <HAL_GPIO_TogglePin>
	}
	if (timer50ms_flag)
 8000542:	4b49      	ldr	r3, [pc, #292]	@ (8000668 <ExecuteStateMachine+0x140>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d01a      	beq.n	8000580 <ExecuteStateMachine+0x58>
	{
		timer50ms_flag = 0;
 800054a:	4b47      	ldr	r3, [pc, #284]	@ (8000668 <ExecuteStateMachine+0x140>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
		timer250ms_counter++;
 8000550:	4b46      	ldr	r3, [pc, #280]	@ (800066c <ExecuteStateMachine+0x144>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b44      	ldr	r3, [pc, #272]	@ (800066c <ExecuteStateMachine+0x144>)
 800055a:	701a      	strb	r2, [r3, #0]
		timer500ms_counter++;
 800055c:	4b40      	ldr	r3, [pc, #256]	@ (8000660 <ExecuteStateMachine+0x138>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b3e      	ldr	r3, [pc, #248]	@ (8000660 <ExecuteStateMachine+0x138>)
 8000566:	701a      	strb	r2, [r3, #0]

		flag_buttons = 1;
 8000568:	4b41      	ldr	r3, [pc, #260]	@ (8000670 <ExecuteStateMachine+0x148>)
 800056a:	2201      	movs	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]
		flag_can_tx_send = 1;
 800056e:	4b41      	ldr	r3, [pc, #260]	@ (8000674 <ExecuteStateMachine+0x14c>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
		flag_pitch_control = 1;
 8000574:	4b40      	ldr	r3, [pc, #256]	@ (8000678 <ExecuteStateMachine+0x150>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
		flag_mast_control = 1;
 800057a:	4b40      	ldr	r3, [pc, #256]	@ (800067c <ExecuteStateMachine+0x154>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}
	if (timer250ms_counter >= 5)
 8000580:	4b3a      	ldr	r3, [pc, #232]	@ (800066c <ExecuteStateMachine+0x144>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b04      	cmp	r3, #4
 8000586:	d908      	bls.n	800059a <ExecuteStateMachine+0x72>
	{
		timer250ms_counter = 0;
 8000588:	4b38      	ldr	r3, [pc, #224]	@ (800066c <ExecuteStateMachine+0x144>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]

		//flag_can_tx_send = 1;

		flag_send_drive_pitch_config = 1;
 800058e:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <ExecuteStateMachine+0x158>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
		flag_send_drive_mast_config = 1;
 8000594:	4b3b      	ldr	r3, [pc, #236]	@ (8000684 <ExecuteStateMachine+0x15c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
	}

	// Check for ROPS or emergency stop flags
	if (b_rops)
 800059a:	4b3b      	ldr	r3, [pc, #236]	@ (8000688 <ExecuteStateMachine+0x160>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <ExecuteStateMachine+0x80>
	{
		current_state = STATE_ROPS;
 80005a2:	4b3a      	ldr	r3, [pc, #232]	@ (800068c <ExecuteStateMachine+0x164>)
 80005a4:	2205      	movs	r2, #5
 80005a6:	601a      	str	r2, [r3, #0]
	}
	if (b_emergency_stop)
 80005a8:	4b39      	ldr	r3, [pc, #228]	@ (8000690 <ExecuteStateMachine+0x168>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <ExecuteStateMachine+0x8e>
	{
		current_state = STATE_EMERGENCY_STOP;
 80005b0:	4b36      	ldr	r3, [pc, #216]	@ (800068c <ExecuteStateMachine+0x164>)
 80005b2:	2206      	movs	r2, #6
 80005b4:	601a      	str	r2, [r3, #0]
	}

	switch (current_state)
 80005b6:	4b35      	ldr	r3, [pc, #212]	@ (800068c <ExecuteStateMachine+0x164>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b06      	cmp	r3, #6
 80005bc:	d812      	bhi.n	80005e4 <ExecuteStateMachine+0xbc>
 80005be:	2b06      	cmp	r3, #6
 80005c0:	d845      	bhi.n	800064e <ExecuteStateMachine+0x126>
 80005c2:	a201      	add	r2, pc, #4	@ (adr r2, 80005c8 <ExecuteStateMachine+0xa0>)
 80005c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c8:	080005eb 	.word	0x080005eb
 80005cc:	080005f7 	.word	0x080005f7
 80005d0:	08000603 	.word	0x08000603
 80005d4:	0800060f 	.word	0x0800060f
 80005d8:	0800061b 	.word	0x0800061b
 80005dc:	08000627 	.word	0x08000627
 80005e0:	08000633 	.word	0x08000633
 80005e4:	2bff      	cmp	r3, #255	@ 0xff
 80005e6:	d02a      	beq.n	800063e <ExecuteStateMachine+0x116>
 80005e8:	e031      	b.n	800064e <ExecuteStateMachine+0x126>
	{
	case STATE_INIT:
		current_state = DoStateInit();
 80005ea:	f000 f853 	bl	8000694 <DoStateInit>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a26      	ldr	r2, [pc, #152]	@ (800068c <ExecuteStateMachine+0x164>)
 80005f2:	6013      	str	r3, [r2, #0]
		break;
 80005f4:	e031      	b.n	800065a <ExecuteStateMachine+0x132>

	case STATE_ASSESS_PUSH_BUTTONS:
		current_state = DoStateAssessPushButtons();
 80005f6:	f000 f8f5 	bl	80007e4 <DoStateAssessPushButtons>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a23      	ldr	r2, [pc, #140]	@ (800068c <ExecuteStateMachine+0x164>)
 80005fe:	6013      	str	r3, [r2, #0]
		break;
 8000600:	e02b      	b.n	800065a <ExecuteStateMachine+0x132>

	case STATE_PITCH_CONTROL:
		current_state = DoStatePitchControl();
 8000602:	f000 f9a5 	bl	8000950 <DoStatePitchControl>
 8000606:	4603      	mov	r3, r0
 8000608:	4a20      	ldr	r2, [pc, #128]	@ (800068c <ExecuteStateMachine+0x164>)
 800060a:	6013      	str	r3, [r2, #0]
		break;
 800060c:	e025      	b.n	800065a <ExecuteStateMachine+0x132>

	case STATE_MAST_CONTROL:
		current_state = DoStateMastControl();
 800060e:	f000 f9f5 	bl	80009fc <DoStateMastControl>
 8000612:	4603      	mov	r3, r0
 8000614:	4a1d      	ldr	r2, [pc, #116]	@ (800068c <ExecuteStateMachine+0x164>)
 8000616:	6013      	str	r3, [r2, #0]
		break;
 8000618:	e01f      	b.n	800065a <ExecuteStateMachine+0x132>

	case STATE_CAN:
		current_state = DoStateCAN();
 800061a:	f000 fa73 	bl	8000b04 <DoStateCAN>
 800061e:	4603      	mov	r3, r0
 8000620:	4a1a      	ldr	r2, [pc, #104]	@ (800068c <ExecuteStateMachine+0x164>)
 8000622:	6013      	str	r3, [r2, #0]
		break;
 8000624:	e019      	b.n	800065a <ExecuteStateMachine+0x132>

	case STATE_ROPS:
		current_state = DoStateROPS();
 8000626:	f000 faa1 	bl	8000b6c <DoStateROPS>
 800062a:	4603      	mov	r3, r0
 800062c:	4a17      	ldr	r2, [pc, #92]	@ (800068c <ExecuteStateMachine+0x164>)
 800062e:	6013      	str	r3, [r2, #0]
		break;
 8000630:	e013      	b.n	800065a <ExecuteStateMachine+0x132>

	case STATE_EMERGENCY_STOP:
		current_state = DoStateEmergencyStop();
 8000632:	f000 fadf 	bl	8000bf4 <DoStateEmergencyStop>
 8000636:	4603      	mov	r3, r0
 8000638:	4a14      	ldr	r2, [pc, #80]	@ (800068c <ExecuteStateMachine+0x164>)
 800063a:	6013      	str	r3, [r2, #0]
		break;
 800063c:	e00d      	b.n	800065a <ExecuteStateMachine+0x132>

	case STATE_ERROR:
		DoStateError();
 800063e:	f000 fae9 	bl	8000c14 <DoStateError>
		// In case we exit error handler, restart the state machine
		current_state = DoStateInit();
 8000642:	f000 f827 	bl	8000694 <DoStateInit>
 8000646:	4603      	mov	r3, r0
 8000648:	4a10      	ldr	r2, [pc, #64]	@ (800068c <ExecuteStateMachine+0x164>)
 800064a:	6013      	str	r3, [r2, #0]
		break;
 800064c:	e005      	b.n	800065a <ExecuteStateMachine+0x132>

	default:
		current_state = DoStateInit();
 800064e:	f000 f821 	bl	8000694 <DoStateInit>
 8000652:	4603      	mov	r3, r0
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <ExecuteStateMachine+0x164>)
 8000656:	6013      	str	r3, [r2, #0]
		break;
 8000658:	bf00      	nop
	};
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000463 	.word	0x20000463
 8000664:	40020c00 	.word	0x40020c00
 8000668:	20000461 	.word	0x20000461
 800066c:	20000462 	.word	0x20000462
 8000670:	20000460 	.word	0x20000460
 8000674:	200003d1 	.word	0x200003d1
 8000678:	200003d2 	.word	0x200003d2
 800067c:	200003d3 	.word	0x200003d3
 8000680:	200003d4 	.word	0x200003d4
 8000684:	200003d5 	.word	0x200003d5
 8000688:	200003cc 	.word	0x200003cc
 800068c:	2000041c 	.word	0x2000041c
 8000690:	200003cd 	.word	0x200003cd

08000694 <DoStateInit>:

uint32_t DoStateInit()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af02      	add	r7, sp, #8
	b_rops = 0;
 800069a:	4b44      	ldr	r3, [pc, #272]	@ (80007ac <DoStateInit+0x118>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	b_emergency_stop = 0;
 80006a0:	4b43      	ldr	r3, [pc, #268]	@ (80007b0 <DoStateInit+0x11c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]

	b_timer500ms_flag = 0;
 80006a6:	4b43      	ldr	r3, [pc, #268]	@ (80007b4 <DoStateInit+0x120>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	b_timer50ms_flag = 0;
 80006ac:	4b42      	ldr	r3, [pc, #264]	@ (80007b8 <DoStateInit+0x124>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
	flag_can_tx_send = 0;
 80006b2:	4b42      	ldr	r3, [pc, #264]	@ (80007bc <DoStateInit+0x128>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]

	can1_recv_flag = 0;
 80006b8:	4b41      	ldr	r3, [pc, #260]	@ (80007c0 <DoStateInit+0x12c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	flag_can_tx_send = 0;
 80006be:	4b3f      	ldr	r3, [pc, #252]	@ (80007bc <DoStateInit+0x128>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]

	flag_send_drive_pitch_config = 0;
 80006c4:	4b3f      	ldr	r3, [pc, #252]	@ (80007c4 <DoStateInit+0x130>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	flag_send_drive_mast_config = 0;
 80006ca:	4b3f      	ldr	r3, [pc, #252]	@ (80007c8 <DoStateInit+0x134>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]

	memset(&can_tx_data, 0, sizeof(CAN_TX_Data));
 80006d0:	221c      	movs	r2, #28
 80006d2:	2100      	movs	r1, #0
 80006d4:	483d      	ldr	r0, [pc, #244]	@ (80007cc <DoStateInit+0x138>)
 80006d6:	f006 faf7 	bl	8006cc8 <memset>

	InitDrives(&hspi1, &htim1, TIM_CHANNEL_2, &htim3, TIM_CHANNEL_3);
 80006da:	2308      	movs	r3, #8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	4b3c      	ldr	r3, [pc, #240]	@ (80007d0 <DoStateInit+0x13c>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	493c      	ldr	r1, [pc, #240]	@ (80007d4 <DoStateInit+0x140>)
 80006e4:	483c      	ldr	r0, [pc, #240]	@ (80007d8 <DoStateInit+0x144>)
 80006e6:	f001 f9b7 	bl	8001a58 <InitDrives>

	// Initialize the motor control values
	motorss.motors[DRIVE_PITCH].enabled = 0;
 80006ea:	4b3c      	ldr	r3, [pc, #240]	@ (80007dc <DoStateInit+0x148>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	741a      	strb	r2, [r3, #16]
	motorss.motors[DRIVE_PITCH].request_enable = 0;
 80006f0:	4b3a      	ldr	r3, [pc, #232]	@ (80007dc <DoStateInit+0x148>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	745a      	strb	r2, [r3, #17]
	motorss.motors[DRIVE_PITCH].request_disable = 0;
 80006f6:	4b39      	ldr	r3, [pc, #228]	@ (80007dc <DoStateInit+0x148>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	749a      	strb	r2, [r3, #18]
	motorss.motors[DRIVE_PITCH].mode = MODE_MANUAL;
 80006fc:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <DoStateInit+0x148>)
 80006fe:	2200      	movs	r2, #0
 8000700:	74da      	strb	r2, [r3, #19]
	motorss.motors[DRIVE_PITCH].auto_command = 0;
 8000702:	4b36      	ldr	r3, [pc, #216]	@ (80007dc <DoStateInit+0x148>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
	motorss.motors[DRIVE_PITCH].manual_command = 0;
 8000708:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <DoStateInit+0x148>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
	motorss.motors[DRIVE_PITCH].direction = DIR_STOP;
 800070e:	4b33      	ldr	r3, [pc, #204]	@ (80007dc <DoStateInit+0x148>)
 8000710:	2200      	movs	r2, #0
 8000712:	751a      	strb	r2, [r3, #20]
	motorss.motors[DRIVE_PITCH].prev_direction = DIR_STOP;
 8000714:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <DoStateInit+0x148>)
 8000716:	2200      	movs	r2, #0
 8000718:	755a      	strb	r2, [r3, #21]

	motorss.motors[DRIVE_MAST].enabled = 0;
 800071a:	4b30      	ldr	r3, [pc, #192]	@ (80007dc <DoStateInit+0x148>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
	motorss.motors[DRIVE_MAST].request_enable = 0;
 8000720:	4b2e      	ldr	r3, [pc, #184]	@ (80007dc <DoStateInit+0x148>)
 8000722:	2200      	movs	r2, #0
 8000724:	705a      	strb	r2, [r3, #1]
	motorss.motors[DRIVE_MAST].request_disable = 0;
 8000726:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <DoStateInit+0x148>)
 8000728:	2200      	movs	r2, #0
 800072a:	709a      	strb	r2, [r3, #2]
	motorss.motors[DRIVE_MAST].mode = MODE_MANUAL;
 800072c:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <DoStateInit+0x148>)
 800072e:	2200      	movs	r2, #0
 8000730:	70da      	strb	r2, [r3, #3]
	motorss.motors[DRIVE_MAST].auto_command = 0;
 8000732:	4b2a      	ldr	r3, [pc, #168]	@ (80007dc <DoStateInit+0x148>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	motorss.motors[DRIVE_MAST].manual_command = 0;
 8000738:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <DoStateInit+0x148>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
	motorss.motors[DRIVE_MAST].direction = DIR_STOP;
 800073e:	4b27      	ldr	r3, [pc, #156]	@ (80007dc <DoStateInit+0x148>)
 8000740:	2200      	movs	r2, #0
 8000742:	711a      	strb	r2, [r3, #4]
	motorss.motors[DRIVE_MAST].prev_direction = DIR_STOP;
 8000744:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <DoStateInit+0x148>)
 8000746:	2200      	movs	r2, #0
 8000748:	715a      	strb	r2, [r3, #5]


	HAL_GPIO_WritePin(LED_CANA_GPIO_Port, LED_CANA_Pin, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	4824      	ldr	r0, [pc, #144]	@ (80007e0 <DoStateInit+0x14c>)
 8000750:	f003 fd06 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2104      	movs	r1, #4
 8000758:	4821      	ldr	r0, [pc, #132]	@ (80007e0 <DoStateInit+0x14c>)
 800075a:	f003 fd01 	bl	8004160 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800075e:	200a      	movs	r0, #10
 8000760:	f002 fb84 	bl	8002e6c <HAL_Delay>
	EnableDriveExternalPWM(DRIVE_MAST);
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fdf3 	bl	8002350 <EnableDriveExternalPWM>
	HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f002 fb7e 	bl	8002e6c <HAL_Delay>
	//SetDirection(DRIVE_MAST, DIR_FORWARD);

	// HAL_GPIO_WritePin(TEST_BIN1_GPIO_Port, TEST_BIN1_Pin, GPIO_PIN_SET);
	// HAL_GPIO_WritePin(TEST_BIN2_GPIO_Port, TEST_BIN2_Pin, GPIO_PIN_SET);

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000770:	2104      	movs	r1, #4
 8000772:	4818      	ldr	r0, [pc, #96]	@ (80007d4 <DoStateInit+0x140>)
 8000774:	f005 f8c0 	bl	80058f8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000778:	2108      	movs	r1, #8
 800077a:	4815      	ldr	r0, [pc, #84]	@ (80007d0 <DoStateInit+0x13c>)
 800077c:	f005 f8bc 	bl	80058f8 <HAL_TIM_PWM_Stop>

	motorss.motors[DRIVE_PITCH].enabled = 0;
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <DoStateInit+0x148>)
 8000782:	2200      	movs	r2, #0
 8000784:	741a      	strb	r2, [r3, #16]

	//SetDirection(DRIVE_PITCH, motors.pitch_motor.manual_direction);
	//delay_us(10);
	DisableDrive(DRIVE_PITCH);
 8000786:	2001      	movs	r0, #1
 8000788:	f001 fcde 	bl	8002148 <DisableDrive>
	//delay_us(10);
	DisableDrive(DRIVE_MAST);
 800078c:	2000      	movs	r0, #0
 800078e:	f001 fcdb 	bl	8002148 <DisableDrive>

	delay_us(10);
 8000792:	200a      	movs	r0, #10
 8000794:	f7ff feae 	bl	80004f4 <delay_us>
	ResetStatusRegisters(DRIVE_PITCH);
 8000798:	2001      	movs	r0, #1
 800079a:	f001 fd1d 	bl	80021d8 <ResetStatusRegisters>
	delay_us(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f7ff fea8 	bl	80004f4 <delay_us>

	return STATE_ASSESS_PUSH_BUTTONS;
 80007a4:	2301      	movs	r3, #1
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200003cc 	.word	0x200003cc
 80007b0:	200003cd 	.word	0x200003cd
 80007b4:	200003ce 	.word	0x200003ce
 80007b8:	200003cf 	.word	0x200003cf
 80007bc:	200003d1 	.word	0x200003d1
 80007c0:	200003e4 	.word	0x200003e4
 80007c4:	200003d4 	.word	0x200003d4
 80007c8:	200003d5 	.word	0x200003d5
 80007cc:	20000420 	.word	0x20000420
 80007d0:	20000220 	.word	0x20000220
 80007d4:	20000190 	.word	0x20000190
 80007d8:	20000138 	.word	0x20000138
 80007dc:	2000043c 	.word	0x2000043c
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <DoStateAssessPushButtons>:

uint32_t DoStateAssessPushButtons()
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	if (flag_buttons == 1) {
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <DoStateAssessPushButtons+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <DoStateAssessPushButtons+0x12>
		flag_buttons = 0;
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <DoStateAssessPushButtons+0x20>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
				speed_stepper_motor_pitch--;
			}
		}*/
	}

	return STATE_PITCH_CONTROL;
 80007f6:	2302      	movs	r3, #2
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000460 	.word	0x20000460

08000808 <CheckEnableDisableMotor>:

uint8_t CheckEnableDisableMotor(DRIVE_MOTOR motor)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	if (motor != DRIVE_PITCH && motor != DRIVE_MAST)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d004      	beq.n	8000822 <CheckEnableDisableMotor+0x1a>
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <CheckEnableDisableMotor+0x1a>
		return 0;
 800081e:	2300      	movs	r3, #0
 8000820:	e052      	b.n	80008c8 <CheckEnableDisableMotor+0xc0>

	// Check if requested disable of drive
	if (motorss.motors[motor].request_disable)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4a2a      	ldr	r2, [pc, #168]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	4413      	add	r3, r2
 800082a:	3302      	adds	r3, #2
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d02e      	beq.n	8000890 <CheckEnableDisableMotor+0x88>
	{
		DisableDrive(motor);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fc87 	bl	8002148 <DisableDrive>
		//delay_us(20);

		// On disable, we reset the commands
		motorss.motors[motor].manual_command = 0;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4a24      	ldr	r2, [pc, #144]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	4413      	add	r3, r2
 8000842:	330c      	adds	r3, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
		motorss.motors[motor].auto_command = 0;
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4a21      	ldr	r2, [pc, #132]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	4413      	add	r3, r2
 8000850:	3308      	adds	r3, #8
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
		motorss.motors[motor].prev_direction = DIR_INVALID;
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4a1d      	ldr	r2, [pc, #116]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	4413      	add	r3, r2
 800085e:	3305      	adds	r3, #5
 8000860:	2203      	movs	r2, #3
 8000862:	701a      	strb	r2, [r3, #0]

		motorss.motors[motor].request_disable = 0;
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4a1a      	ldr	r2, [pc, #104]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	4413      	add	r3, r2
 800086c:	3302      	adds	r3, #2
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
		// Make sure we do not reactive drive right after
		motorss.motors[motor].request_enable = 0;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4a16      	ldr	r2, [pc, #88]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	4413      	add	r3, r2
 800087a:	3301      	adds	r3, #1
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]

		motorss.motors[motor].enabled = 0;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4a13      	ldr	r2, [pc, #76]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	4413      	add	r3, r2
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]

		return 1; // Indicates enable/disable status changed
 800088c:	2301      	movs	r3, #1
 800088e:	e01b      	b.n	80008c8 <CheckEnableDisableMotor+0xc0>
	}
	// Check if requested enable of drive
	else if (motorss.motors[motor].request_enable)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 8000894:	011b      	lsls	r3, r3, #4
 8000896:	4413      	add	r3, r2
 8000898:	3301      	adds	r3, #1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d012      	beq.n	80008c6 <CheckEnableDisableMotor+0xbe>
	{
		EnableDrive(motor);
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fc08 	bl	80020b8 <EnableDrive>
		//delay_us(20);

		motorss.motors[motor].request_enable = 0;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4a09      	ldr	r2, [pc, #36]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 80008ac:	011b      	lsls	r3, r3, #4
 80008ae:	4413      	add	r3, r2
 80008b0:	3301      	adds	r3, #1
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]

		motorss.motors[motor].enabled = 1;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <CheckEnableDisableMotor+0xc8>)
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	4413      	add	r3, r2
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]

		return 1; //Indicates enable/disable status changed
 80008c2:	2301      	movs	r3, #1
 80008c4:	e000      	b.n	80008c8 <CheckEnableDisableMotor+0xc0>
	}

	return 0; // Indicates nothing changed
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000043c 	.word	0x2000043c

080008d4 <CheckChangeDirectionMotor>:

uint8_t CheckChangeDirectionMotor(DRIVE_MOTOR motor)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	if (motor != DRIVE_PITCH && motor != DRIVE_MAST)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d004      	beq.n	80008ee <CheckChangeDirectionMotor+0x1a>
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <CheckChangeDirectionMotor+0x1a>
		return 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e029      	b.n	8000942 <CheckChangeDirectionMotor+0x6e>


	// Check for change of direction
	if (motorss.motors[motor].direction != motorss.motors[motor].prev_direction)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4a16      	ldr	r2, [pc, #88]	@ (800094c <CheckChangeDirectionMotor+0x78>)
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4413      	add	r3, r2
 80008f6:	3304      	adds	r3, #4
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4913      	ldr	r1, [pc, #76]	@ (800094c <CheckChangeDirectionMotor+0x78>)
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	440b      	add	r3, r1
 8000902:	3305      	adds	r3, #5
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d01a      	beq.n	8000940 <CheckChangeDirectionMotor+0x6c>
	{
		SetDirection(motor, motorss.motors[motor].direction);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <CheckChangeDirectionMotor+0x78>)
 800090e:	011b      	lsls	r3, r3, #4
 8000910:	4413      	add	r3, r2
 8000912:	3304      	adds	r3, #4
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fceb 	bl	80022f8 <SetDirection>
		//delay_us(20);

		motorss.motors[motor].prev_direction = motorss.motors[motor].direction;
 8000922:	79fa      	ldrb	r2, [r7, #7]
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	4909      	ldr	r1, [pc, #36]	@ (800094c <CheckChangeDirectionMotor+0x78>)
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	440a      	add	r2, r1
 800092c:	3204      	adds	r2, #4
 800092e:	7811      	ldrb	r1, [r2, #0]
 8000930:	4a06      	ldr	r2, [pc, #24]	@ (800094c <CheckChangeDirectionMotor+0x78>)
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	4413      	add	r3, r2
 8000936:	3305      	adds	r3, #5
 8000938:	460a      	mov	r2, r1
 800093a:	701a      	strb	r2, [r3, #0]

		return 1; // Indicates direction changed
 800093c:	2301      	movs	r3, #1
 800093e:	e000      	b.n	8000942 <CheckChangeDirectionMotor+0x6e>
	}

	return 0; // Indicates direction did not change
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000043c 	.word	0x2000043c

08000950 <DoStatePitchControl>:


uint8_t motor_pitch_on = 0;
uint32_t DoStatePitchControl()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	else {
		return STATE_MAST_CONTROL;
	}*/

	// Periodically re-send the config registers to make sure drive has correct values
	if (flag_send_drive_pitch_config)
 8000956:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <DoStatePitchControl+0x98>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d005      	beq.n	800096a <DoStatePitchControl+0x1a>
	{
		flag_send_drive_pitch_config = 0;
 800095e:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <DoStatePitchControl+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
		SendConfigRegisters(DRIVE_PITCH);
 8000964:	2001      	movs	r0, #1
 8000966:	f001 fc83 	bl	8002270 <SendConfigRegisters>

	// Check if requested disable of drive
	//if (motorss.motors[DRIVE_PITCH].enabled == 1) {
		//motorss.motors[DRIVE_PITCH].request_disable = 1;
	//}
	if (motorss.motors[DRIVE_PITCH].enabled != 1) {
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <DoStatePitchControl+0x9c>)
 800096c:	7c1b      	ldrb	r3, [r3, #16]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d002      	beq.n	8000978 <DoStatePitchControl+0x28>
		motorss.motors[DRIVE_PITCH].request_enable = 1;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <DoStatePitchControl+0x9c>)
 8000974:	2201      	movs	r2, #1
 8000976:	745a      	strb	r2, [r3, #17]
	}
	CheckEnableDisableMotor(DRIVE_PITCH);
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff ff45 	bl	8000808 <CheckEnableDisableMotor>



	if (motorss.motors[DRIVE_PITCH].enabled)
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <DoStatePitchControl+0x9c>)
 8000980:	7c1b      	ldrb	r3, [r3, #16]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d102      	bne.n	800098c <DoStatePitchControl+0x3c>
					//motors.pitch_motor.prev_auto_direction = DIR_INVALID;
				//}
			//}
		//}
	} else {
		motor_pitch_on = 0;
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <DoStatePitchControl+0xa0>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
	}



	can_tx_data.pitch_motor_mode_feedback = motorss.motors[DRIVE_PITCH].mode;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <DoStatePitchControl+0x9c>)
 800098e:	7cdb      	ldrb	r3, [r3, #19]
 8000990:	461a      	mov	r2, r3
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <DoStatePitchControl+0xa4>)
 8000994:	611a      	str	r2, [r3, #16]

	// Check for faults or stall errors
	uint8_t stall = !HAL_GPIO_ReadPin(nSTALL2_GPIO_Port, nSTALL2_Pin);
 8000996:	2108      	movs	r1, #8
 8000998:	4817      	ldr	r0, [pc, #92]	@ (80009f8 <DoStatePitchControl+0xa8>)
 800099a:	f003 fbc9 	bl	8004130 <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf0c      	ite	eq
 80009a4:	2301      	moveq	r3, #1
 80009a6:	2300      	movne	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	71fb      	strb	r3, [r7, #7]
	uint8_t fault = !HAL_GPIO_ReadPin(nFAULT2_GPIO_Port, nFAULT2_Pin);
 80009ac:	2110      	movs	r1, #16
 80009ae:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <DoStatePitchControl+0xa8>)
 80009b0:	f003 fbbe 	bl	8004130 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf0c      	ite	eq
 80009ba:	2301      	moveq	r3, #1
 80009bc:	2300      	movne	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	71bb      	strb	r3, [r7, #6]
	can_tx_data.pitch_motor_fault_stall = (fault + (stall << 1));
 80009c2:	79ba      	ldrb	r2, [r7, #6]
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <DoStatePitchControl+0xa4>)
 80009ce:	609a      	str	r2, [r3, #8]

	if (fault)
 80009d0:	79bb      	ldrb	r3, [r7, #6]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <DoStatePitchControl+0x8c>
	{
		ResetStatusRegisters(DRIVE_PITCH);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f001 fbfe 	bl	80021d8 <ResetStatusRegisters>
	}

	return STATE_MAST_CONTROL;
 80009dc:	2303      	movs	r3, #3
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200003d4 	.word	0x200003d4
 80009ec:	2000043c 	.word	0x2000043c
 80009f0:	20000464 	.word	0x20000464
 80009f4:	20000420 	.word	0x20000420
 80009f8:	40021000 	.word	0x40021000

080009fc <DoStateMastControl>:

uint32_t DoStateMastControl()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	if (flag_mast_control == 1) {
 8000a02:	4b3b      	ldr	r3, [pc, #236]	@ (8000af0 <DoStateMastControl+0xf4>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d107      	bne.n	8000a1a <DoStateMastControl+0x1e>
		flag_mast_control = 0;
 8000a0a:	4b39      	ldr	r3, [pc, #228]	@ (8000af0 <DoStateMastControl+0xf4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	}
	else {
		return STATE_CAN;
	}
	// Periodically re-send the config registers to make sure drive has correct values
	if (flag_send_drive_mast_config)
 8000a10:	4b38      	ldr	r3, [pc, #224]	@ (8000af4 <DoStateMastControl+0xf8>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d008      	beq.n	8000a2a <DoStateMastControl+0x2e>
 8000a18:	e001      	b.n	8000a1e <DoStateMastControl+0x22>
		return STATE_CAN;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e063      	b.n	8000ae6 <DoStateMastControl+0xea>
	{
		flag_send_drive_mast_config = 0;
 8000a1e:	4b35      	ldr	r3, [pc, #212]	@ (8000af4 <DoStateMastControl+0xf8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]

		SendConfigRegisters(DRIVE_MAST);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f001 fc23 	bl	8002270 <SendConfigRegisters>
	}

	// Check if requested disable of drive
	if (motorss.motors[DRIVE_MAST].enabled != 1) {
 8000a2a:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <DoStateMastControl+0xfc>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d002      	beq.n	8000a38 <DoStateMastControl+0x3c>
		motorss.motors[DRIVE_MAST].request_enable = 1;
 8000a32:	4b31      	ldr	r3, [pc, #196]	@ (8000af8 <DoStateMastControl+0xfc>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	705a      	strb	r2, [r3, #1]
	}
	CheckEnableDisableMotor(DRIVE_MAST);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fee5 	bl	8000808 <CheckEnableDisableMotor>

	uint8_t enableChanged = CheckEnableDisableMotor(DRIVE_MAST);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fee2 	bl	8000808 <CheckEnableDisableMotor>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	if (enableChanged)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d005      	beq.n	8000a5a <DoStateMastControl+0x5e>
	{
		// Make sure to disable the PWMs if drive was disabled
		if (motorss.motors[DRIVE_MAST].enabled == 0)
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <DoStateMastControl+0xfc>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <DoStateMastControl+0x5e>
		{
			DriveMastStop();
 8000a56:	f001 fdab 	bl	80025b0 <DriveMastStop>
			//delay_us(20);
		}
	}

	//Check change of direction
	uint8_t directionChanged = CheckChangeDirectionMotor(DRIVE_MAST);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff ff3a 	bl	80008d4 <CheckChangeDirectionMotor>
 8000a60:	4603      	mov	r3, r0
 8000a62:	71bb      	strb	r3, [r7, #6]

	if (motorss.motors[DRIVE_MAST].enabled)
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <DoStateMastControl+0xfc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d013      	beq.n	8000a94 <DoStateMastControl+0x98>
	{
		if (motorss.motors[DRIVE_MAST].direction == DIR_STOP)
 8000a6c:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <DoStateMastControl+0xfc>)
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <DoStateMastControl+0x7e>
		{
			DriveMastStop();
 8000a74:	f001 fd9c 	bl	80025b0 <DriveMastStop>
 8000a78:	e00c      	b.n	8000a94 <DoStateMastControl+0x98>
			//delay_us(20);
		}
		else if (motorss.motors[DRIVE_MAST].direction == DIR_LEFT)
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <DoStateMastControl+0xfc>)
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d102      	bne.n	8000a88 <DoStateMastControl+0x8c>
		{
			DriveMastLeft();
 8000a82:	f001 fd6f 	bl	8002564 <DriveMastLeft>
 8000a86:	e005      	b.n	8000a94 <DoStateMastControl+0x98>
			//delay_us(20);
		}
		else if (motorss.motors[DRIVE_MAST].direction == DIR_RIGHT)
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <DoStateMastControl+0xfc>)
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d101      	bne.n	8000a94 <DoStateMastControl+0x98>
		{
			DriveMastRight();
 8000a90:	f001 fd42 	bl	8002518 <DriveMastRight>
			}
		}
	}
	*/

	can_tx_data.mast_motor_mode_feedback = motorss.motors[DRIVE_MAST].mode;
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <DoStateMastControl+0xfc>)
 8000a96:	78db      	ldrb	r3, [r3, #3]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <DoStateMastControl+0x100>)
 8000a9c:	615a      	str	r2, [r3, #20]

	// Check for faults or stall errors
	uint8_t stall = !HAL_GPIO_ReadPin(nSTALL1_GPIO_Port, nSTALL1_Pin);
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4817      	ldr	r0, [pc, #92]	@ (8000b00 <DoStateMastControl+0x104>)
 8000aa2:	f003 fb45 	bl	8004130 <HAL_GPIO_ReadPin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	717b      	strb	r3, [r7, #5]
	uint8_t fault = !HAL_GPIO_ReadPin(nFAULT1_GPIO_Port, nFAULT1_Pin);
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4812      	ldr	r0, [pc, #72]	@ (8000b00 <DoStateMastControl+0x104>)
 8000ab8:	f003 fb3a 	bl	8004130 <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2301      	moveq	r3, #1
 8000ac4:	2300      	movne	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	713b      	strb	r3, [r7, #4]
	can_tx_data.mast_motor_fault_stall = (fault + (stall << 1));
 8000aca:	793a      	ldrb	r2, [r7, #4]
 8000acc:	797b      	ldrb	r3, [r7, #5]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <DoStateMastControl+0x100>)
 8000ad6:	60da      	str	r2, [r3, #12]

	if (fault)
 8000ad8:	793b      	ldrb	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <DoStateMastControl+0xe8>
	{
		ResetStatusRegisters(DRIVE_MAST);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f001 fb7a 	bl	80021d8 <ResetStatusRegisters>
	}

	return STATE_CAN;
 8000ae4:	2304      	movs	r3, #4
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200003d3 	.word	0x200003d3
 8000af4:	200003d5 	.word	0x200003d5
 8000af8:	2000043c 	.word	0x2000043c
 8000afc:	20000420 	.word	0x20000420
 8000b00:	40020400 	.word	0x40020400

08000b04 <DoStateCAN>:

uint32_t DoStateCAN()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
	if (flag_can_tx_send) // Sent every 50ms
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <DoStateCAN+0x60>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d022      	beq.n	8000b58 <DoStateCAN+0x54>
	{
		flag_can_tx_send = 0;
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <DoStateCAN+0x60>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]


		uint32_t pitch_mode = can_tx_data.pitch_motor_mode_feedback;
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <DoStateCAN+0x64>)
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	60fb      	str	r3, [r7, #12]
		uint32_t pitch_mode_msg = ((pitch_mode == MODE_MANUAL) ? MOTOR_MODE_MANUAL : MOTOR_MODE_AUTOMATIC);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <DoStateCAN+0x24>
 8000b24:	2300      	movs	r3, #0
 8000b26:	e000      	b.n	8000b2a <DoStateCAN+0x26>
 8000b28:	2302      	movs	r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_PITCH_MODE, (uint8_t*)&pitch_mode_msg, 4, 0);
 8000b2c:	1d39      	adds	r1, r7, #4
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2204      	movs	r2, #4
 8000b32:	2021      	movs	r0, #33	@ 0x21
 8000b34:	f000 f9ae 	bl	8000e94 <TransmitCAN>

		uint32_t mast_mode = can_tx_data.mast_motor_mode_feedback;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <DoStateCAN+0x64>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	60bb      	str	r3, [r7, #8]
		uint32_t mast_mode_msg = ((mast_mode == MODE_MANUAL) ? MOTOR_MODE_MANUAL : MOTOR_MODE_AUTOMATIC);
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <DoStateCAN+0x44>
 8000b44:	2300      	movs	r3, #0
 8000b46:	e000      	b.n	8000b4a <DoStateCAN+0x46>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	603b      	str	r3, [r7, #0]
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_MAST_MODE, (uint8_t*)&mast_mode_msg, 4, 0);
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2204      	movs	r2, #4
 8000b52:	2022      	movs	r0, #34	@ 0x22
 8000b54:	f000 f99e 	bl	8000e94 <TransmitCAN>
		*/

	}

	// return STATE_PITCH_CONTROL;
	return STATE_ASSESS_PUSH_BUTTONS;
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200003d1 	.word	0x200003d1
 8000b68:	20000420 	.word	0x20000420

08000b6c <DoStateROPS>:

uint32_t DoStateROPS()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	while (b_rops)
 8000b70:	e029      	b.n	8000bc6 <DoStateROPS+0x5a>
	{
		//delay_us(10);

		// Check timers
		if (b_timer500ms_flag)
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <DoStateROPS+0x68>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d006      	beq.n	8000b88 <DoStateROPS+0x1c>
		{
			b_timer500ms_flag = 0;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <DoStateROPS+0x68>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 8000b80:	2108      	movs	r1, #8
 8000b82:	4815      	ldr	r0, [pc, #84]	@ (8000bd8 <DoStateROPS+0x6c>)
 8000b84:	f003 fb05 	bl	8004192 <HAL_GPIO_TogglePin>
		}
		if (b_timer50ms_flag)
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <DoStateROPS+0x70>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d008      	beq.n	8000ba2 <DoStateROPS+0x36>
		{
			b_timer50ms_flag = 0;
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <DoStateROPS+0x70>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
			flag_pitch_control = 1;
 8000b96:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <DoStateROPS+0x74>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
			flag_mast_control = 1;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <DoStateROPS+0x78>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
			// flag_can_tx_send = 1;
		}
		if (b_timer250ms_flag)
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <DoStateROPS+0x7c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d005      	beq.n	8000bb6 <DoStateROPS+0x4a>
		{
			b_timer250ms_flag = 0;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <DoStateROPS+0x7c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

			flag_can_tx_send = 1;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <DoStateROPS+0x80>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
		// Safety check, if we have a command from MARIO, make sure drive is enabled
		//if (motors.motors[DRIVE_PITCH].auto_command && !motors.motors[DRIVE_PITCH].enabled)
		//	motors.motors[DRIVE_PITCH].request_enable = 1;
		//motors.motors[DRIVE_PITCH].mode = MODE_AUTOMATIC;

		DoStateAssessPushButtons();
 8000bb6:	f7ff fe15 	bl	80007e4 <DoStateAssessPushButtons>
		DoStatePitchControl();
 8000bba:	f7ff fec9 	bl	8000950 <DoStatePitchControl>
		DoStateMastControl();
 8000bbe:	f7ff ff1d 	bl	80009fc <DoStateMastControl>
		DoStateCAN();
 8000bc2:	f7ff ff9f 	bl	8000b04 <DoStateCAN>
	while (b_rops)
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <DoStateROPS+0x84>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1d1      	bne.n	8000b72 <DoStateROPS+0x6>
	}

	return STATE_PITCH_CONTROL;
 8000bce:	2302      	movs	r3, #2
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200003ce 	.word	0x200003ce
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	200003cf 	.word	0x200003cf
 8000be0:	200003d2 	.word	0x200003d2
 8000be4:	200003d3 	.word	0x200003d3
 8000be8:	200003d0 	.word	0x200003d0
 8000bec:	200003d1 	.word	0x200003d1
 8000bf0:	200003cc 	.word	0x200003cc

08000bf4 <DoStateEmergencyStop>:

uint32_t DoStateEmergencyStop()
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	while (b_emergency_stop)
 8000bf8:	bf00      	nop
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <DoStateEmergencyStop+0x1c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1fb      	bne.n	8000bfa <DoStateEmergencyStop+0x6>
	{

	}

	return STATE_PITCH_CONTROL;
 8000c02:	2302      	movs	r3, #2
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	200003cd 	.word	0x200003cd

08000c14 <DoStateError>:

void DoStateError()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	Error_Handler();
 8000c18:	f000 ff18 	bl	8001a4c <Error_Handler>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SetMotorMode>:

//uint16_t test_debug_log_can_message[200] = {0};
//uint8_t test_debug_log_can_message_counter = 0;
void SetMotorMode(DRIVE_MOTOR motor, uint32_t can_value)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	603b      	str	r3, [r7, #0]
	} else {
		test_debug_log_can_message_counter++;
	}
	test_debug_log_can_message[test_debug_log_can_message_counter] = can_value; */

	uint32_t motor_mode = MODE_MANUAL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_MODE_MANUAL) {
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <SetMotorMode+0x22>
		motor_mode = MODE_MANUAL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	e004      	b.n	8000c4c <SetMotorMode+0x2c>
	}
	else if (can_value == MOTOR_MODE_AUTOMATIC) {
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d10b      	bne.n	8000c60 <SetMotorMode+0x40>
		motor_mode = MODE_AUTOMATIC;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
	}
	else {
		return; // Do not set motor mode if mode value from CAN is invalid
	}

	motorss.motors[motor].mode = motor_mode;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	b2d1      	uxtb	r1, r2
 8000c52:	4a06      	ldr	r2, [pc, #24]	@ (8000c6c <SetMotorMode+0x4c>)
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	4413      	add	r3, r2
 8000c58:	3303      	adds	r3, #3
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e000      	b.n	8000c62 <SetMotorMode+0x42>
		return; // Do not set motor mode if mode value from CAN is invalid
 8000c60:	bf00      	nop
}
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	2000043c 	.word	0x2000043c

08000c70 <SetMotorDirection>:


void SetMotorDirection(DRIVE_MOTOR motor, int32_t can_value)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	603b      	str	r3, [r7, #0]
	} else {
		test_debug_log_can_message_counter++;
	}
	test_debug_log_can_message[test_debug_log_can_message_counter] = can_value;*/

	uint32_t motor_direction = DIR_INVALID;
 8000c82:	2303      	movs	r3, #3
 8000c84:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_DIRECTION_STOP)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d102      	bne.n	8000c92 <SetMotorDirection+0x22>
		motor_direction = DIR_STOP;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e00a      	b.n	8000ca8 <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_LEFT)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <SetMotorDirection+0x2e>
		motor_direction = DIR_LEFT;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	e004      	b.n	8000ca8 <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_RIGHT)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d10f      	bne.n	8000cc4 <SetMotorDirection+0x54>
		motor_direction = DIR_RIGHT;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	60fb      	str	r3, [r7, #12]
	else
		return;

	motorss.motors[motor].direction = motor_direction;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	b2d1      	uxtb	r1, r2
 8000cae:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <SetMotorDirection+0x5c>)
 8000cb0:	011b      	lsls	r3, r3, #4
 8000cb2:	4413      	add	r3, r2
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	460a      	mov	r2, r1
 8000cb8:	701a      	strb	r2, [r3, #0]

	// Check change of direction
	CheckChangeDirectionMotor(motor);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe09 	bl	80008d4 <CheckChangeDirectionMotor>
 8000cc2:	e000      	b.n	8000cc6 <SetMotorDirection+0x56>
		return;
 8000cc4:	bf00      	nop
}
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2000043c 	.word	0x2000043c

08000cd0 <ProcessCanMessage>:

void ProcessCanMessage()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	} BytesToType;
	static BytesToType bytesToType;

	// Technically CAN data can be 8 bytes but we only send 4-bytes data to the motor driver
	// uint32_t upper_can_data = rxData[4] | (rxData[5] << 8) | (rxData[6] << 16) | (rxData[7] << 24);
	uint32_t can_data = rxData[0] | (rxData[1] << 8) | (rxData[2] << 16) | (rxData[3] << 24);
 8000cd6:	4b33      	ldr	r3, [pc, #204]	@ (8000da4 <ProcessCanMessage+0xd4>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <ProcessCanMessage+0xd4>)
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <ProcessCanMessage+0xd4>)
 8000ce6:	789b      	ldrb	r3, [r3, #2]
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	431a      	orrs	r2, r3
 8000cec:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <ProcessCanMessage+0xd4>)
 8000cee:	78db      	ldrb	r3, [r3, #3]
 8000cf0:	061b      	lsls	r3, r3, #24
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	607b      	str	r3, [r7, #4]

	//
	// Motor Modes
	//
	// TODO: (Marc) Should one have precedence over the other ? What if steering wheel sets mode that is then overwritten by mario ?
	if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_MODE)
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <ProcessCanMessage+0xd8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b11      	cmp	r3, #17
 8000cfc:	d104      	bne.n	8000d08 <ProcessCanMessage+0x38>
	{
		SetMotorMode(DRIVE_PITCH, can_data);
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	2001      	movs	r0, #1
 8000d02:	f7ff ff8d 	bl	8000c20 <SetMotorMode>
	}
	else
	{
		// Unknown CAN ID
	}
}
 8000d06:	e049      	b.n	8000d9c <ProcessCanMessage+0xcc>
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_MODE)
 8000d08:	4b27      	ldr	r3, [pc, #156]	@ (8000da8 <ProcessCanMessage+0xd8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b12      	cmp	r3, #18
 8000d0e:	d104      	bne.n	8000d1a <ProcessCanMessage+0x4a>
		SetMotorMode(DRIVE_MAST, can_data);
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff ff84 	bl	8000c20 <SetMotorMode>
}
 8000d18:	e040      	b.n	8000d9c <ProcessCanMessage+0xcc>
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_DIRECTION)
 8000d1a:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <ProcessCanMessage+0xd8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b13      	cmp	r3, #19
 8000d20:	d110      	bne.n	8000d44 <ProcessCanMessage+0x74>
		SetMotorDirection(DRIVE_PITCH, can_data);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4619      	mov	r1, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	f7ff ffa2 	bl	8000c70 <SetMotorDirection>
		if (motorss.motors[DRIVE_PITCH].direction != DIR_STOP) {
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <ProcessCanMessage+0xdc>)
 8000d2e:	7d1b      	ldrb	r3, [r3, #20]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <ProcessCanMessage+0x6c>
			motor_pitch_on = 1;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <ProcessCanMessage+0xe0>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
}
 8000d3a:	e02f      	b.n	8000d9c <ProcessCanMessage+0xcc>
			motor_pitch_on = 0;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <ProcessCanMessage+0xe0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
}
 8000d42:	e02b      	b.n	8000d9c <ProcessCanMessage+0xcc>
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_DIRECTION)
 8000d44:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <ProcessCanMessage+0xd8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b14      	cmp	r3, #20
 8000d4a:	d105      	bne.n	8000d58 <ProcessCanMessage+0x88>
		SetMotorDirection(DRIVE_MAST, can_data);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff ff8d 	bl	8000c70 <SetMotorDirection>
}
 8000d56:	e021      	b.n	8000d9c <ProcessCanMessage+0xcc>
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_SPEED)
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <ProcessCanMessage+0xd8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b15      	cmp	r3, #21
 8000d5e:	d106      	bne.n	8000d6e <ProcessCanMessage+0x9e>
		can_data = (can_data & 0xFF); //SUPER IMPORTANT
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	607b      	str	r3, [r7, #4]
		speed_stepper_motor_pitch = can_data;
 8000d66:	4a13      	ldr	r2, [pc, #76]	@ (8000db4 <ProcessCanMessage+0xe4>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	e016      	b.n	8000d9c <ProcessCanMessage+0xcc>
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_ROPS)
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <ProcessCanMessage+0xd8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d112      	bne.n	8000d9c <ProcessCanMessage+0xcc>
		uint8_t rops_data = (can_data & 0xFF);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	70fb      	strb	r3, [r7, #3]
		if (rops_data == ROPS_ENABLE)
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d103      	bne.n	8000d88 <ProcessCanMessage+0xb8>
			b_rops = 1;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <ProcessCanMessage+0xe8>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
}
 8000d86:	e009      	b.n	8000d9c <ProcessCanMessage+0xcc>
		else if (rops_data == ROPS_DISABLE)
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d103      	bne.n	8000d96 <ProcessCanMessage+0xc6>
			b_rops = 0;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <ProcessCanMessage+0xe8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
}
 8000d94:	e002      	b.n	8000d9c <ProcessCanMessage+0xcc>
			b_rops = 1;
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <ProcessCanMessage+0xe8>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200003dc 	.word	0x200003dc
 8000da8:	20000400 	.word	0x20000400
 8000dac:	2000043c 	.word	0x2000043c
 8000db0:	20000464 	.word	0x20000464
 8000db4:	200003d8 	.word	0x200003d8
 8000db8:	200003cc 	.word	0x200003cc

08000dbc <CAN_ReceiveFifoCallback>:

void CAN_ReceiveFifoCallback(CAN_HandleTypeDef* hcan, uint32_t fifo)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]

	uint32_t num_messages = HAL_CAN_GetRxFifoFillLevel(hcan, fifo);
 8000dc6:	6839      	ldr	r1, [r7, #0]
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f002 fcb5 	bl	8003738 <HAL_CAN_GetRxFifoFillLevel>
 8000dce:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < num_messages; ++i)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e00f      	b.n	8000df6 <CAN_ReceiveFifoCallback+0x3a>
	{
		if (HAL_CAN_GetRxMessage(hcan, fifo, &pRxHeader, rxData) != HAL_OK)
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <CAN_ReceiveFifoCallback+0x4c>)
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e0c <CAN_ReceiveFifoCallback+0x50>)
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f002 fb99 	bl	8003514 <HAL_CAN_GetRxMessage>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <CAN_ReceiveFifoCallback+0x30>
		{
			Error_Handler();
 8000de8:	f000 fe30 	bl	8001a4c <Error_Handler>
		}

		ProcessCanMessage();
 8000dec:	f7ff ff70 	bl	8000cd0 <ProcessCanMessage>
	for (int i = 0; i < num_messages; ++i)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d8eb      	bhi.n	8000dd6 <CAN_ReceiveFifoCallback+0x1a>
	}
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200003dc 	.word	0x200003dc
 8000e0c:	20000400 	.word	0x20000400

08000e10 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
 8000e18:	2104      	movs	r1, #4
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000e1c:	f003 f9b9 	bl	8004192 <HAL_GPIO_TogglePin>
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffca 	bl	8000dbc <CAN_ReceiveFifoCallback>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40020c00 	.word	0x40020c00

08000e34 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8000e40:	f003 f9a7 	bl	8004192 <HAL_GPIO_TogglePin>
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO1);
 8000e44:	2101      	movs	r1, #1
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffb8 	bl	8000dbc <CAN_ReceiveFifoCallback>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <HAL_CAN_RxFifo0FullCallback>:


// CAN error callbacks
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef* hcan)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_CAN_RxFifo1FullCallback>:

void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef* hcan)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <TransmitCAN>:


HAL_StatusTypeDef TransmitCAN(uint32_t id, uint8_t* buf, uint8_t size, uint8_t with_priority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	71bb      	strb	r3, [r7, #6]
	// CAN_TxHeaderTypeDef msg;
	pTxHeader.StdId = id;
 8000eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8000f60 <TransmitCAN+0xcc>)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6013      	str	r3, [r2, #0]
	pTxHeader.IDE = CAN_ID_STD;
 8000eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f60 <TransmitCAN+0xcc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR = CAN_RTR_DATA;
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <TransmitCAN+0xcc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
	pTxHeader.DLC = size; // Number of bytes to send
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4a28      	ldr	r2, [pc, #160]	@ (8000f60 <TransmitCAN+0xcc>)
 8000ec0:	6113      	str	r3, [r2, #16]
	pTxHeader.TransmitGlobalTime = DISABLE;
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <TransmitCAN+0xcc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	751a      	strb	r2, [r3, #20]

	uint8_t found_mailbox = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	for (int i = 0; i < 10; ++i)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
 8000ed2:	e00c      	b.n	8000eee <TransmitCAN+0x5a>
	{
		// Check that mailbox is available for tx
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)
 8000ed4:	4823      	ldr	r0, [pc, #140]	@ (8000f64 <TransmitCAN+0xd0>)
 8000ed6:	f002 fae8 	bl	80034aa <HAL_CAN_GetTxMailboxesFreeLevel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <TransmitCAN+0x54>
		{
			found_mailbox = 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ee6:	e005      	b.n	8000ef4 <TransmitCAN+0x60>
	for (int i = 0; i < 10; ++i)
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	3301      	adds	r3, #1
 8000eec:	623b      	str	r3, [r7, #32]
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	2b09      	cmp	r3, #9
 8000ef2:	ddef      	ble.n	8000ed4 <TransmitCAN+0x40>
		}
		// Otherwise wait until free mailbox
		// for (int j = 0; j < 500; ++j) {}
		//delay_us(50);
	}
	if (!found_mailbox)
 8000ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d104      	bne.n	8000f06 <TransmitCAN+0x72>
	{
		// TODO: (Marc) Should really be the error led once it's been soldered
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2104      	movs	r1, #4
 8000f00:	4819      	ldr	r0, [pc, #100]	@ (8000f68 <TransmitCAN+0xd4>)
 8000f02:	f003 f92d 	bl	8004160 <HAL_GPIO_WritePin>
	}

	if (with_priority)
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d010      	beq.n	8000f2e <TransmitCAN+0x9a>
	{
		// If message is important, make sure no other messages are queud to ensure it will be sent after any other
		// values that could override it.
		for (int i = 0; i < 10; ++i)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	e008      	b.n	8000f24 <TransmitCAN+0x90>
		{
			// Check that all 3 mailboxes are empty
			if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 3)
 8000f12:	4814      	ldr	r0, [pc, #80]	@ (8000f64 <TransmitCAN+0xd0>)
 8000f14:	f002 fac9 	bl	80034aa <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d006      	beq.n	8000f2c <TransmitCAN+0x98>
		for (int i = 0; i < 10; ++i)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3301      	adds	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	2b09      	cmp	r3, #9
 8000f28:	ddf3      	ble.n	8000f12 <TransmitCAN+0x7e>
 8000f2a:	e000      	b.n	8000f2e <TransmitCAN+0x9a>
				break;
 8000f2c:	bf00      	nop
			//delay_us(50);
		}
	}

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, buf, &mb);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	490a      	ldr	r1, [pc, #40]	@ (8000f60 <TransmitCAN+0xcc>)
 8000f36:	480b      	ldr	r0, [pc, #44]	@ (8000f64 <TransmitCAN+0xd0>)
 8000f38:	f002 f9dc 	bl	80032f4 <HAL_CAN_AddTxMessage>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	76fb      	strb	r3, [r7, #27]
	if (ret != HAL_OK)
 8000f40:	7efb      	ldrb	r3, [r7, #27]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <TransmitCAN+0xb6>
	{
		return ret;
 8000f46:	7efb      	ldrb	r3, [r7, #27]
 8000f48:	e005      	b.n	8000f56 <TransmitCAN+0xc2>
	}

	// Update the CAN led
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <TransmitCAN+0xd4>)
 8000f50:	f003 f906 	bl	8004160 <HAL_GPIO_WritePin>
	// ToggleLed(LED_CAN);
	return ret;
 8000f54:	7efb      	ldrb	r3, [r7, #27]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3728      	adds	r7, #40	@ 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200003e8 	.word	0x200003e8
 8000f64:	20000068 	.word	0x20000068
 8000f68:	40020c00 	.word	0x40020c00

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f001 ff0a 	bl	8002d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 f832 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f78:	f000 fc78 	bl	800186c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000f7c:	f000 f89c 	bl	80010b8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000f80:	f000 f924 	bl	80011cc <MX_I2C1_Init>
  MX_I2C3_Init();
 8000f84:	f000 f950 	bl	8001228 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000f88:	f000 f97c 	bl	8001284 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f8c:	f000 fc44 	bl	8001818 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f90:	f000 f9ae 	bl	80012f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f94:	f000 fa4c 	bl	8001430 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f98:	f000 fb36 	bl	8001608 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f9c:	f000 fb82 	bl	80016a4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000fa0:	f000 fabc 	bl	800151c <MX_TIM3_Init>
  MX_TIM6_Init();
 8000fa4:	f000 fbce 	bl	8001744 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000fa8:	f000 fc00 	bl	80017ac <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000fac:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <main+0x60>)
 8000fae:	f004 fb11 	bl	80055d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000fb2:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <main+0x64>)
 8000fb4:	f004 fb0e 	bl	80055d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <main+0x68>)
 8000fba:	f004 fb0b 	bl	80055d4 <HAL_TIM_Base_Start_IT>

  current_state = STATE_INIT;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <main+0x6c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ExecuteStateMachine();
 8000fc4:	f7ff fab0 	bl	8000528 <ExecuteStateMachine>
 8000fc8:	e7fc      	b.n	8000fc4 <main+0x58>
 8000fca:	bf00      	nop
 8000fcc:	200002f8 	.word	0x200002f8
 8000fd0:	20000268 	.word	0x20000268
 8000fd4:	20000340 	.word	0x20000340
 8000fd8:	2000041c 	.word	0x2000041c

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	@ 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	2234      	movs	r2, #52	@ 0x34
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fe6c 	bl	8006cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	4b2a      	ldr	r3, [pc, #168]	@ (80010b0 <SystemClock_Config+0xd4>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a29      	ldr	r2, [pc, #164]	@ (80010b0 <SystemClock_Config+0xd4>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001010:	4b27      	ldr	r3, [pc, #156]	@ (80010b0 <SystemClock_Config+0xd4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800101c:	2300      	movs	r3, #0
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <SystemClock_Config+0xd8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001028:	4a22      	ldr	r2, [pc, #136]	@ (80010b4 <SystemClock_Config+0xd8>)
 800102a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <SystemClock_Config+0xd8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	2310      	movs	r3, #16
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104c:	2300      	movs	r3, #0
 800104e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001050:	2308      	movs	r3, #8
 8001052:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800105c:	2302      	movs	r3, #2
 800105e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fccd 	bl	8004a08 <HAL_RCC_OscConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001074:	f000 fcea 	bl	8001a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	230f      	movs	r3, #15
 800107a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2302      	movs	r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001084:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800108a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f003 f9f2 	bl	8004480 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010a2:	f000 fcd3 	bl	8001a4c <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	@ 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010be:	4b41      	ldr	r3, [pc, #260]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010c0:	4a41      	ldr	r2, [pc, #260]	@ (80011c8 <MX_CAN1_Init+0x110>)
 80010c2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80010c4:	4b3f      	ldr	r3, [pc, #252]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010c6:	2208      	movs	r2, #8
 80010c8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010ca:	4b3e      	ldr	r3, [pc, #248]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80010d0:	4b3c      	ldr	r3, [pc, #240]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010d8:	4b3a      	ldr	r3, [pc, #232]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010da:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80010de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80010e0:	4b38      	ldr	r3, [pc, #224]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010e2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80010e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010e8:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010ee:	4b35      	ldr	r3, [pc, #212]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010f4:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010fa:	4b32      	ldr	r3, [pc, #200]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001100:	4b30      	ldr	r3, [pc, #192]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 8001102:	2200      	movs	r2, #0
 8001104:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001106:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 8001108:	2200      	movs	r2, #0
 800110a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800110c:	482d      	ldr	r0, [pc, #180]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 800110e:	f001 fed1 	bl	8002eb4 <HAL_CAN_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8001118:	f000 fc98 	bl	8001a4c <Error_Handler>
*/


	CAN_FilterTypeDef sf_fifo0;
	// All common bits go into the ID register
	sf_fifo0.FilterIdHigh = DRIVEMOTOR_FIFO0_RX_FILTER_ID_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sf_fifo0.FilterIdLow = DRIVEMOTOR_FIFO0_RX_FILTER_ID_LOW;
 8001120:	2360      	movs	r3, #96	@ 0x60
 8001122:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Which bits to compare for filter
	sf_fifo0.FilterMaskIdHigh = 0x0000;
 8001124:	2300      	movs	r3, #0
 8001126:	633b      	str	r3, [r7, #48]	@ 0x30
	sf_fifo0.FilterMaskIdLow = (FIFO0_RX_FILTER_MASK_LOW & 0x07FF);
 8001128:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34

	sf_fifo0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
	sf_fifo0.FilterBank = 0; // Which filter to use from the assigned ones
 8001132:	2300      	movs	r3, #0
 8001134:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sf_fifo0.FilterMode = CAN_FILTERMODE_IDMASK;
 8001136:	2300      	movs	r3, #0
 8001138:	643b      	str	r3, [r7, #64]	@ 0x40
	sf_fifo0.FilterScale = CAN_FILTERSCALE_32BIT;
 800113a:	2301      	movs	r3, #1
 800113c:	647b      	str	r3, [r7, #68]	@ 0x44
	sf_fifo0.FilterActivation = CAN_FILTER_ENABLE;
 800113e:	2301      	movs	r3, #1
 8001140:	64bb      	str	r3, [r7, #72]	@ 0x48
	sf_fifo0.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8001142:	230e      	movs	r3, #14
 8001144:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo0) != HAL_OK)
 8001146:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114a:	4619      	mov	r1, r3
 800114c:	481d      	ldr	r0, [pc, #116]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 800114e:	f001 ffad 	bl	80030ac <HAL_CAN_ConfigFilter>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_CAN1_Init+0xa4>
	{
	  Error_Handler();
 8001158:	f000 fc78 	bl	8001a4c <Error_Handler>
	// All common bits go into the ID register
	//sf_fifo1.FilterIdHigh = 0x0000;
	//sf_fifo1.FilterIdLow = 0x0000;
	//sf_fifo1.FilterMaskIdHigh = 0x0000;
	//sf_fifo1.FilterMaskIdLow = 0x0000;
	sf_fifo1.FilterIdHigh = DRIVEMOTOR_FIFO1_RX_FILTER_ID_HIGH;
 800115c:	2300      	movs	r3, #0
 800115e:	603b      	str	r3, [r7, #0]
	sf_fifo1.FilterIdLow = DRIVEMOTOR_FIFO1_RX_FILTER_ID_LOW;
 8001160:	2370      	movs	r3, #112	@ 0x70
 8001162:	607b      	str	r3, [r7, #4]

	// Which bits to compare for filter
	sf_fifo1.FilterMaskIdHigh = 0x0000;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
	sf_fifo1.FilterMaskIdLow = (FIFO1_RX_FILTER_MASK_LOW & 0x7FF);
 8001168:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800116c:	60fb      	str	r3, [r7, #12]

	sf_fifo1.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800116e:	2301      	movs	r3, #1
 8001170:	613b      	str	r3, [r7, #16]
	sf_fifo1.FilterBank = 1; // Which filter to use from the assigned ones
 8001172:	2301      	movs	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
	sf_fifo1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
	sf_fifo1.FilterScale = CAN_FILTERSCALE_32BIT;
 800117a:	2301      	movs	r3, #1
 800117c:	61fb      	str	r3, [r7, #28]
	sf_fifo1.FilterActivation = CAN_FILTER_ENABLE;
 800117e:	2301      	movs	r3, #1
 8001180:	623b      	str	r3, [r7, #32]
	sf_fifo1.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8001182:	230e      	movs	r3, #14
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo1) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	480e      	ldr	r0, [pc, #56]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 800118c:	f001 ff8e 	bl	80030ac <HAL_CAN_ConfigFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_CAN1_Init+0xe2>
	{
	  Error_Handler();
 8001196:	f000 fc59 	bl	8001a4c <Error_Handler>

	//if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
	//{
	//	  Error_Handler();
	//}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800119a:	480a      	ldr	r0, [pc, #40]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 800119c:	f002 f866 	bl	800326c <HAL_CAN_Start>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_CAN1_Init+0xf2>
	{
		Error_Handler();
 80011a6:	f000 fc51 	bl	8001a4c <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80011aa:	2112      	movs	r1, #18
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_CAN1_Init+0x10c>)
 80011ae:	f002 faeb 	bl	8003788 <HAL_CAN_ActivateNotification>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_CAN1_Init+0x104>
	{
		Error_Handler();
 80011b8:	f000 fc48 	bl	8001a4c <Error_Handler>
	}
	*/

  /* USER CODE END CAN1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3750      	adds	r7, #80	@ 0x50
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000068 	.word	0x20000068
 80011c8:	40006400 	.word	0x40006400

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_I2C1_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <MX_I2C1_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_I2C1_Init+0x50>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <MX_I2C1_Init+0x58>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_I2C1_Init+0x50>)
 80011ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_I2C1_Init+0x50>)
 800120a:	f002 fff5 	bl	80041f8 <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001214:	f000 fc1a 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000090 	.word	0x20000090
 8001220:	40005400 	.word	0x40005400
 8001224:	000186a0 	.word	0x000186a0

08001228 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <MX_I2C3_Init+0x50>)
 800122e:	4a13      	ldr	r2, [pc, #76]	@ (800127c <MX_I2C3_Init+0x54>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_I2C3_Init+0x50>)
 8001234:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <MX_I2C3_Init+0x58>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_I2C3_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_I2C3_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_I2C3_Init+0x50>)
 8001246:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800124a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <MX_I2C3_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_I2C3_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <MX_I2C3_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_I2C3_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	@ (8001278 <MX_I2C3_Init+0x50>)
 8001266:	f002 ffc7 	bl	80041f8 <HAL_I2C_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001270:	f000 fbec 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200000e4 	.word	0x200000e4
 800127c:	40005c00 	.word	0x40005c00
 8001280:	000186a0 	.word	0x000186a0

08001284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_SPI1_Init+0x64>)
 800128a:	4a18      	ldr	r2, [pc, #96]	@ (80012ec <MX_SPI1_Init+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_SPI1_Init+0x64>)
 8001290:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_SPI1_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_SPI1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012b8:	2230      	movs	r2, #48	@ 0x30
 80012ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012d0:	220a      	movs	r2, #10
 80012d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012d6:	f003 fe35 	bl	8004f44 <HAL_SPI_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e0:	f000 fbb4 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000138 	.word	0x20000138
 80012ec:	40013000 	.word	0x40013000

080012f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b096      	sub	sp, #88	@ 0x58
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2220      	movs	r2, #32
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f005 fccd 	bl	8006cc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800132e:	4b3e      	ldr	r3, [pc, #248]	@ (8001428 <MX_TIM1_Init+0x138>)
 8001330:	4a3e      	ldr	r2, [pc, #248]	@ (800142c <MX_TIM1_Init+0x13c>)
 8001332:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 8001334:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <MX_TIM1_Init+0x138>)
 8001336:	2230      	movs	r2, #48	@ 0x30
 8001338:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b3b      	ldr	r3, [pc, #236]	@ (8001428 <MX_TIM1_Init+0x138>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8001340:	4b39      	ldr	r3, [pc, #228]	@ (8001428 <MX_TIM1_Init+0x138>)
 8001342:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001346:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b37      	ldr	r3, [pc, #220]	@ (8001428 <MX_TIM1_Init+0x138>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800134e:	4b36      	ldr	r3, [pc, #216]	@ (8001428 <MX_TIM1_Init+0x138>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001354:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <MX_TIM1_Init+0x138>)
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800135a:	4833      	ldr	r0, [pc, #204]	@ (8001428 <MX_TIM1_Init+0x138>)
 800135c:	f004 f882 	bl	8005464 <HAL_TIM_Base_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001366:	f000 fb71 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001370:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001374:	4619      	mov	r1, r3
 8001376:	482c      	ldr	r0, [pc, #176]	@ (8001428 <MX_TIM1_Init+0x138>)
 8001378:	f004 fcf8 	bl	8005d6c <HAL_TIM_ConfigClockSource>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001382:	f000 fb63 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001386:	4828      	ldr	r0, [pc, #160]	@ (8001428 <MX_TIM1_Init+0x138>)
 8001388:	f004 f994 	bl	80056b4 <HAL_TIM_PWM_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001392:	f000 fb5b 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800139e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013a2:	4619      	mov	r1, r3
 80013a4:	4820      	ldr	r0, [pc, #128]	@ (8001428 <MX_TIM1_Init+0x138>)
 80013a6:	f005 f8eb 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013b0:	f000 fb4c 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b4:	2360      	movs	r3, #96	@ 0x60
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d4:	2204      	movs	r2, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4813      	ldr	r0, [pc, #76]	@ (8001428 <MX_TIM1_Init+0x138>)
 80013da:	f004 fc05 	bl	8005be8 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80013e4:	f000 fb32 	bl	8001a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001400:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4807      	ldr	r0, [pc, #28]	@ (8001428 <MX_TIM1_Init+0x138>)
 800140c:	f005 f934 	bl	8006678 <HAL_TIMEx_ConfigBreakDeadTime>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001416:	f000 fb19 	bl	8001a4c <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */

  // HAL_TIM_PWM_Start(&htim1, channel);

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800141a:	4803      	ldr	r0, [pc, #12]	@ (8001428 <MX_TIM1_Init+0x138>)
 800141c:	f001 fb30 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 8001420:	bf00      	nop
 8001422:	3758      	adds	r7, #88	@ 0x58
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000190 	.word	0x20000190
 800142c:	40010000 	.word	0x40010000

08001430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	@ 0x38
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001460:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <MX_TIM2_Init+0xe8>)
 8001462:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8001468:	4b2b      	ldr	r3, [pc, #172]	@ (8001518 <MX_TIM2_Init+0xe8>)
 800146a:	2230      	movs	r2, #48	@ 0x30
 800146c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <MX_TIM2_Init+0xe8>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <MX_TIM2_Init+0xe8>)
 8001476:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800147a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <MX_TIM2_Init+0xe8>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <MX_TIM2_Init+0xe8>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001488:	4823      	ldr	r0, [pc, #140]	@ (8001518 <MX_TIM2_Init+0xe8>)
 800148a:	f003 ffeb 	bl	8005464 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001494:	f000 fada 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a2:	4619      	mov	r1, r3
 80014a4:	481c      	ldr	r0, [pc, #112]	@ (8001518 <MX_TIM2_Init+0xe8>)
 80014a6:	f004 fc61 	bl	8005d6c <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014b0:	f000 facc 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014b4:	4818      	ldr	r0, [pc, #96]	@ (8001518 <MX_TIM2_Init+0xe8>)
 80014b6:	f004 f8fd 	bl	80056b4 <HAL_TIM_PWM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014c0:	f000 fac4 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4619      	mov	r1, r3
 80014d2:	4811      	ldr	r0, [pc, #68]	@ (8001518 <MX_TIM2_Init+0xe8>)
 80014d4:	f005 f854 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014de:	f000 fab5 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	@ 0x60
 80014e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2208      	movs	r2, #8
 80014f6:	4619      	mov	r1, r3
 80014f8:	4807      	ldr	r0, [pc, #28]	@ (8001518 <MX_TIM2_Init+0xe8>)
 80014fa:	f004 fb75 	bl	8005be8 <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001504:	f000 faa2 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <MX_TIM2_Init+0xe8>)
 800150a:	f001 fab9 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 800150e:	bf00      	nop
 8001510:	3738      	adds	r7, #56	@ 0x38
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200001d8 	.word	0x200001d8

0800151c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	@ 0x38
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800154c:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <MX_TIM3_Init+0xe4>)
 800154e:	4a2d      	ldr	r2, [pc, #180]	@ (8001604 <MX_TIM3_Init+0xe8>)
 8001550:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001552:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <MX_TIM3_Init+0xe4>)
 8001554:	2230      	movs	r2, #48	@ 0x30
 8001556:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <MX_TIM3_Init+0xe4>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 800155e:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <MX_TIM3_Init+0xe4>)
 8001560:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001564:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <MX_TIM3_Init+0xe4>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <MX_TIM3_Init+0xe4>)
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001572:	4823      	ldr	r0, [pc, #140]	@ (8001600 <MX_TIM3_Init+0xe4>)
 8001574:	f003 ff76 	bl	8005464 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800157e:	f000 fa65 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158c:	4619      	mov	r1, r3
 800158e:	481c      	ldr	r0, [pc, #112]	@ (8001600 <MX_TIM3_Init+0xe4>)
 8001590:	f004 fbec 	bl	8005d6c <HAL_TIM_ConfigClockSource>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800159a:	f000 fa57 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800159e:	4818      	ldr	r0, [pc, #96]	@ (8001600 <MX_TIM3_Init+0xe4>)
 80015a0:	f004 f888 	bl	80056b4 <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015aa:	f000 fa4f 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4619      	mov	r1, r3
 80015bc:	4810      	ldr	r0, [pc, #64]	@ (8001600 <MX_TIM3_Init+0xe4>)
 80015be:	f004 ffdf 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015c8:	f000 fa40 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	2360      	movs	r3, #96	@ 0x60
 80015ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2208      	movs	r2, #8
 80015e0:	4619      	mov	r1, r3
 80015e2:	4807      	ldr	r0, [pc, #28]	@ (8001600 <MX_TIM3_Init+0xe4>)
 80015e4:	f004 fb00 	bl	8005be8 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015ee:	f000 fa2d 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015f2:	4803      	ldr	r0, [pc, #12]	@ (8001600 <MX_TIM3_Init+0xe4>)
 80015f4:	f001 fa44 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	@ 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000220 	.word	0x20000220
 8001604:	40000400 	.word	0x40000400

08001608 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <MX_TIM4_Init+0x94>)
 8001626:	4a1e      	ldr	r2, [pc, #120]	@ (80016a0 <MX_TIM4_Init+0x98>)
 8001628:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_TIM4_Init+0x94>)
 800162c:	f240 227f 	movw	r2, #639	@ 0x27f
 8001630:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_TIM4_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MX_TIM4_Init+0x94>)
 800163a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800163e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_TIM4_Init+0x94>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MX_TIM4_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164c:	4813      	ldr	r0, [pc, #76]	@ (800169c <MX_TIM4_Init+0x94>)
 800164e:	f003 ff09 	bl	8005464 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001658:	f000 f9f8 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <MX_TIM4_Init+0x94>)
 800166a:	f004 fb7f 	bl	8005d6c <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001674:	f000 f9ea 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	@ (800169c <MX_TIM4_Init+0x94>)
 8001686:	f004 ff7b 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001690:	f000 f9dc 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000268 	.word	0x20000268
 80016a0:	40000800 	.word	0x40000800

080016a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <MX_TIM5_Init+0x98>)
 80016c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001740 <MX_TIM5_Init+0x9c>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_TIM5_Init+0x98>)
 80016c8:	222f      	movs	r2, #47	@ 0x2f
 80016ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <MX_TIM5_Init+0x98>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65000;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_TIM5_Init+0x98>)
 80016d4:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80016d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b18      	ldr	r3, [pc, #96]	@ (800173c <MX_TIM5_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e0:	4b16      	ldr	r3, [pc, #88]	@ (800173c <MX_TIM5_Init+0x98>)
 80016e2:	2280      	movs	r2, #128	@ 0x80
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016e6:	4815      	ldr	r0, [pc, #84]	@ (800173c <MX_TIM5_Init+0x98>)
 80016e8:	f003 febc 	bl	8005464 <HAL_TIM_Base_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80016f2:	f000 f9ab 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4619      	mov	r1, r3
 8001702:	480e      	ldr	r0, [pc, #56]	@ (800173c <MX_TIM5_Init+0x98>)
 8001704:	f004 fb32 	bl	8005d6c <HAL_TIM_ConfigClockSource>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800170e:	f000 f99d 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800171a:	463b      	mov	r3, r7
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM5_Init+0x98>)
 8001720:	f004 ff2e 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800172a:	f000 f98f 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  HAL_TIM_Base_Start(&htim5);
 800172e:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM5_Init+0x98>)
 8001730:	f003 fee8 	bl	8005504 <HAL_TIM_Base_Start>

  /* USER CODE END TIM5_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200002b0 	.word	0x200002b0
 8001740:	40000c00 	.word	0x40000c00

08001744 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_TIM6_Init+0x60>)
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <MX_TIM6_Init+0x64>)
 8001756:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <MX_TIM6_Init+0x60>)
 800175a:	2263      	movs	r2, #99	@ 0x63
 800175c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_TIM6_Init+0x60>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 31;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <MX_TIM6_Init+0x60>)
 8001766:	221f      	movs	r2, #31
 8001768:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <MX_TIM6_Init+0x60>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <MX_TIM6_Init+0x60>)
 8001772:	f003 fe77 	bl	8005464 <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800177c:	f000 f966 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_TIM6_Init+0x60>)
 800178e:	f004 fef7 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001798:	f000 f958 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200002f8 	.word	0x200002f8
 80017a8:	40001000 	.word	0x40001000

080017ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <MX_TIM7_Init+0x64>)
 80017bc:	4a15      	ldr	r2, [pc, #84]	@ (8001814 <MX_TIM7_Init+0x68>)
 80017be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 480;
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <MX_TIM7_Init+0x64>)
 80017c2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80017c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_TIM7_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <MX_TIM7_Init+0x64>)
 80017d0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80017d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <MX_TIM7_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <MX_TIM7_Init+0x64>)
 80017de:	f003 fe41 	bl	8005464 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017e8:	f000 f930 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	@ (8001810 <MX_TIM7_Init+0x64>)
 80017fa:	f004 fec1 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001804:	f000 f922 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000340 	.word	0x20000340
 8001814:	40001400 	.word	0x40001400

08001818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 800181e:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <MX_USART2_UART_Init+0x50>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001850:	f004 ff78 	bl	8006744 <HAL_UART_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185a:	f000 f8f7 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000388 	.word	0x20000388
 8001868:	40004400 	.word	0x40004400

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b58      	ldr	r3, [pc, #352]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a57      	ldr	r2, [pc, #348]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b55      	ldr	r3, [pc, #340]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b51      	ldr	r3, [pc, #324]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a50      	ldr	r2, [pc, #320]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b4e      	ldr	r3, [pc, #312]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b4a      	ldr	r3, [pc, #296]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a49      	ldr	r2, [pc, #292]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b47      	ldr	r3, [pc, #284]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b43      	ldr	r3, [pc, #268]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a42      	ldr	r2, [pc, #264]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b40      	ldr	r3, [pc, #256]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b3c      	ldr	r3, [pc, #240]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a3b      	ldr	r2, [pc, #236]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 80018fc:	f043 0308 	orr.w	r3, r3, #8
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b39      	ldr	r3, [pc, #228]	@ (80019e8 <MX_GPIO_Init+0x17c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FT_RESET_Pin|SPI_CS2_Pin|SPI_CS1_Pin|DIR1_Pin
 800190e:	2200      	movs	r2, #0
 8001910:	f24f 01e2 	movw	r1, #61666	@ 0xf0e2
 8001914:	4835      	ldr	r0, [pc, #212]	@ (80019ec <MX_GPIO_Init+0x180>)
 8001916:	f002 fc23 	bl	8004160 <HAL_GPIO_WritePin>
                          |STEP1_Pin|RESET1_Pin|nSLEEP1_Pin|STEP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 800191a:	2200      	movs	r2, #0
 800191c:	2137      	movs	r1, #55	@ 0x37
 800191e:	4834      	ldr	r0, [pc, #208]	@ (80019f0 <MX_GPIO_Init+0x184>)
 8001920:	f002 fc1e 	bl	8004160 <HAL_GPIO_WritePin>
                          |RESET2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 8001924:	2200      	movs	r2, #0
 8001926:	21ff      	movs	r1, #255	@ 0xff
 8001928:	4832      	ldr	r0, [pc, #200]	@ (80019f4 <MX_GPIO_Init+0x188>)
 800192a:	f002 fc19 	bl	8004160 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nSTALL2_Pin nFAULT2_Pin */
  GPIO_InitStruct.Pin = nSTALL2_Pin|nFAULT2_Pin;
 800192e:	2318      	movs	r3, #24
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	482a      	ldr	r0, [pc, #168]	@ (80019ec <MX_GPIO_Init+0x180>)
 8001942:	f002 fa61 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : FT_RESET_Pin SPI_CS2_Pin SPI_CS1_Pin DIR1_Pin
                           STEP1_Pin RESET1_Pin nSLEEP1_Pin STEP2_Pin */
  GPIO_InitStruct.Pin = FT_RESET_Pin|SPI_CS2_Pin|SPI_CS1_Pin|DIR1_Pin
 8001946:	f24f 03e2 	movw	r3, #61666	@ 0xf0e2
 800194a:	617b      	str	r3, [r7, #20]
                          |STEP1_Pin|RESET1_Pin|nSLEEP1_Pin|STEP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	4823      	ldr	r0, [pc, #140]	@ (80019ec <MX_GPIO_Init+0x180>)
 8001960:	f002 fa52 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_2_Pin BIN1_2_Pin DIR2_Pin nSLEEP2_Pin
                           RESET2_Pin */
  GPIO_InitStruct.Pin = BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 8001964:	2337      	movs	r3, #55	@ 0x37
 8001966:	617b      	str	r3, [r7, #20]
                          |RESET2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	481d      	ldr	r0, [pc, #116]	@ (80019f0 <MX_GPIO_Init+0x184>)
 800197c:	f002 fa44 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : nSTALL1_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nSTALL1_Pin|nFAULT1_Pin;
 8001980:	2306      	movs	r3, #6
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4819      	ldr	r0, [pc, #100]	@ (80019f8 <MX_GPIO_Init+0x18c>)
 8001994:	f002 fa38 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin;
 8001998:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800199e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	480f      	ldr	r0, [pc, #60]	@ (80019ec <MX_GPIO_Init+0x180>)
 80019b0:	f002 fa2a 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_WARNING_Pin LED_ERROR_Pin LED_CANB_Pin LED_CANA_Pin
                           LED1_Pin LED2_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 80019b4:	23ff      	movs	r3, #255	@ 0xff
 80019b6:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	480a      	ldr	r0, [pc, #40]	@ (80019f4 <MX_GPIO_Init+0x188>)
 80019cc:	f002 fa1c 	bl	8003e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	2017      	movs	r0, #23
 80019d6:	f002 f9e0 	bl	8003d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019da:	2017      	movs	r0, #23
 80019dc:	f002 f9f9 	bl	8003dd2 <HAL_NVIC_EnableIRQ>

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	@ 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40020400 	.word	0x40020400

080019fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI Line External Interrupt ISR Handler CallBack
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // PushButton 1
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a0c:	d106      	bne.n	8001a1c <HAL_GPIO_EXTI_Callback+0x20>
    {
    	//HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
    	pb1_value = 1;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x40>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
    	pb1_update = 1;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x44>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
    	pb2_value = 1;
    	pb2_update = 1;
    }

}
 8001a1a:	e009      	b.n	8001a30 <HAL_GPIO_EXTI_Callback+0x34>
    else if (GPIO_Pin == GPIO_PIN_8) // PushButton 2
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a22:	d105      	bne.n	8001a30 <HAL_GPIO_EXTI_Callback+0x34>
    	pb2_value = 1;
 8001a24:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <HAL_GPIO_EXTI_Callback+0x48>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
    	pb2_update = 1;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	2000045c 	.word	0x2000045c
 8001a40:	2000045e 	.word	0x2000045e
 8001a44:	2000045d 	.word	0x2000045d
 8001a48:	2000045f 	.word	0x2000045f

08001a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
}
 8001a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <Error_Handler+0x8>

08001a58 <InitDrives>:
	PWM2
};

void InitDrives(SPI_HandleTypeDef* hspi_, TIM_HandleTypeDef* htim_pwm1, uint32_t channel_pwm1,
		 	 	 	 	 	 	 	 	  TIM_HandleTypeDef* htim_pwm2, uint32_t channel_pwm2)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
	hspi = hspi_;
 8001a66:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae4 <InitDrives+0x8c>)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6013      	str	r3, [r2, #0]
	pwm1_timer = htim_pwm1;
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae8 <InitDrives+0x90>)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	6013      	str	r3, [r2, #0]
	pwm2_timer = htim_pwm2;
 8001a72:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <InitDrives+0x94>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6013      	str	r3, [r2, #0]
	pwm1_channel = channel_pwm1;
 8001a78:	4a1d      	ldr	r2, [pc, #116]	@ (8001af0 <InitDrives+0x98>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
	pwm2_channel = channel_pwm2;
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <InitDrives+0x9c>)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	6013      	str	r3, [r2, #0]

	pwm_timers[0] = pwm1_timer;
 8001a84:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <InitDrives+0x90>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <InitDrives+0xa0>)
 8001a8a:	6013      	str	r3, [r2, #0]
	pwm_timers[1] = pwm2_timer;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <InitDrives+0x94>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	@ (8001af8 <InitDrives+0xa0>)
 8001a92:	6053      	str	r3, [r2, #4]
	pwm_channels[0] = pwm1_channel;
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <InitDrives+0x98>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <InitDrives+0xa4>)
 8001a9a:	6013      	str	r3, [r2, #0]
	pwm_channels[1] = pwm2_channel;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <InitDrives+0x9c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a16      	ldr	r2, [pc, #88]	@ (8001afc <InitDrives+0xa4>)
 8001aa2:	6053      	str	r3, [r2, #4]

	HAL_GPIO_WritePin(drive_ports[DRIVE_PITCH][DRIVE_CS],
 8001aa4:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <InitDrives+0xa8>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	4a16      	ldr	r2, [pc, #88]	@ (8001b04 <InitDrives+0xac>)
 8001aaa:	89d1      	ldrh	r1, [r2, #14]
 8001aac:	2200      	movs	r2, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fb56 	bl	8004160 <HAL_GPIO_WritePin>
							  drive_pins[DRIVE_PITCH][DRIVE_CS], GPIO_PIN_RESET);
	HAL_GPIO_WritePin(drive_ports[DRIVE_MAST][DRIVE_CS],
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <InitDrives+0xa8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	@ (8001b04 <InitDrives+0xac>)
 8001aba:	8891      	ldrh	r1, [r2, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fb4e 	bl	8004160 <HAL_GPIO_WritePin>
							  drive_pins[DRIVE_MAST][DRIVE_CS], GPIO_PIN_RESET);

	InitDriveMotor(DRIVE_MAST);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 fa91 	bl	8001fec <InitDriveMotor>
	HAL_Delay(5);
 8001aca:	2005      	movs	r0, #5
 8001acc:	f001 f9ce 	bl	8002e6c <HAL_Delay>
	InitDriveMotor(DRIVE_PITCH);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f000 fa8b 	bl	8001fec <InitDriveMotor>
	HAL_Delay(5);
 8001ad6:	2005      	movs	r0, #5
 8001ad8:	f001 f9c8 	bl	8002e6c <HAL_Delay>
	// Set initial reg values
	InitRegValues(DRIVE_MAST);
	*/


}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000468 	.word	0x20000468
 8001ae8:	2000046c 	.word	0x2000046c
 8001aec:	20000470 	.word	0x20000470
 8001af0:	20000474 	.word	0x20000474
 8001af4:	20000478 	.word	0x20000478
 8001af8:	200004bc 	.word	0x200004bc
 8001afc:	200004c4 	.word	0x200004c4
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000028 	.word	0x20000028

08001b08 <TransmitMotorSPI>:


void TransmitMotorSPI(DRIVE_MOTOR drive_index, uint8_t reg)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460a      	mov	r2, r1
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	4613      	mov	r3, r2
 8001b16:	71bb      	strb	r3, [r7, #6]
	if (reg >= 7)
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d834      	bhi.n	8001b88 <TransmitMotorSPI+0x80>
	//HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
	//		  		    drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);

	//for (int i = 0; i < 1000; ++i) {}
	// uint16_t data = *(uint16_t*)(&drive_regs[drive_index]) + reg;
	uint16_t data = *((uint16_t*)(&drive_regs[drive_index])) | (reg << 12);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	015b      	lsls	r3, r3, #5
 8001b22:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <TransmitMotorSPI+0x88>)
 8001b24:	4413      	add	r3, r2
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	79bb      	ldrb	r3, [r7, #6]
 8001b2c:	031b      	lsls	r3, r3, #12
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	81fb      	strh	r3, [r7, #14]

	uint8_t tx_data[2] = {0};
 8001b36:	2300      	movs	r3, #0
 8001b38:	813b      	strh	r3, [r7, #8]
	tx_data[0] = ((reg & 0x07) << 4) | ((data & 0x0F00) >> 8);
 8001b3a:	79bb      	ldrb	r3, [r7, #6]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	89fb      	ldrh	r3, [r7, #14]
 8001b48:	121b      	asrs	r3, r3, #8
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xFF);
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	727b      	strb	r3, [r7, #9]
	uint8_t ret = HAL_SPI_Transmit(hspi, tx_data, 2, HAL_MAX_DELAY);
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <TransmitMotorSPI+0x8c>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	f107 0108 	add.w	r1, r7, #8
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f003 fa72 	bl	8005056 <HAL_SPI_Transmit>
 8001b72:	4603      	mov	r3, r0
 8001b74:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK)
 8001b76:	7b7b      	ldrb	r3, [r7, #13]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <TransmitMotorSPI+0x82>
	{
		// TODO: (Marc) Should really be the error led once it's soldered
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2104      	movs	r1, #4
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <TransmitMotorSPI+0x90>)
 8001b82:	f002 faed 	bl	8004160 <HAL_GPIO_WritePin>
 8001b86:	e000      	b.n	8001b8a <TransmitMotorSPI+0x82>
		return;
 8001b88:	bf00      	nop
	}
	//for (int i = 0; i < 1000; ++i) {}

	//HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
	//				  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);
}
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000047c 	.word	0x2000047c
 8001b94:	20000468 	.word	0x20000468
 8001b98:	40020c00 	.word	0x40020c00

08001b9c <SendDriveRegisters>:

	return 0;
}

void SendDriveRegisters(DRIVE_MOTOR drive_index)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
	// Send every register to the drive
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	4920      	ldr	r1, [pc, #128]	@ (8001c2c <SendDriveRegisters+0x90>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	491d      	ldr	r1, [pc, #116]	@ (8001c30 <SendDriveRegisters+0x94>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f002 fac7 	bl	8004160 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	// We send every register except for the status register (up to 7 register)
	for (uint8_t i = 0; i < (NUM_DRIVE_REGS - 1); ++i)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	e00b      	b.n	8001bf0 <SendDriveRegisters+0x54>
	{
		// uint16_t data = *((uint16_t*)(&drive_regs[drive_index]) + i);
		TransmitMotorSPI(drive_index, i);
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff92 	bl	8001b08 <TransmitMotorSPI>
		HAL_Delay(1);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f001 f941 	bl	8002e6c <HAL_Delay>
	for (uint8_t i = 0; i < (NUM_DRIVE_REGS - 1); ++i)
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	3301      	adds	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d9f0      	bls.n	8001bd8 <SendDriveRegisters+0x3c>
	}

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	490c      	ldr	r1, [pc, #48]	@ (8001c2c <SendDriveRegisters+0x90>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	3308      	adds	r3, #8
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	4909      	ldr	r1, [pc, #36]	@ (8001c30 <SendDriveRegisters+0x94>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	440b      	add	r3, r1
 8001c16:	3304      	adds	r3, #4
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f002 fa9f 	bl	8004160 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000028 	.word	0x20000028

08001c34 <InitRegValuesPWM>:
	drive_regs[drive_index].drive_reg.idriven = 0b10;	// Low-side gate drive peak current of 300mA peak (sink)
	drive_regs[drive_index].drive_reg.idrivep = 0b10;	// High-side gate drive peak current of 150mA peak (sink)
}

void InitRegValuesPWM(DRIVE_MOTOR drive_index)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
	// CTRL register
	// drive_regs[drive_index].ctrl_reg.enbl = 1;	// Enable motor
	drive_regs[drive_index].ctrl_reg.enbl = 0;	// Disable motor drive by default
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4a6b      	ldr	r2, [pc, #428]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001c42:	015b      	lsls	r3, r3, #5
 8001c44:	441a      	add	r2, r3
 8001c46:	7813      	ldrb	r3, [r2, #0]
 8001c48:	f36f 0300 	bfc	r3, #0, #1
 8001c4c:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.rdir = 0;	// Direction set by DIR pin
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4a67      	ldr	r2, [pc, #412]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001c52:	015b      	lsls	r3, r3, #5
 8001c54:	441a      	add	r2, r3
 8001c56:	7813      	ldrb	r3, [r2, #0]
 8001c58:	f36f 0341 	bfc	r3, #1, #1
 8001c5c:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.rstep = 0;	// No automatic stepping
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4a63      	ldr	r2, [pc, #396]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001c62:	015b      	lsls	r3, r3, #5
 8001c64:	441a      	add	r2, r3
 8001c66:	7813      	ldrb	r3, [r2, #0]
 8001c68:	f36f 0382 	bfc	r3, #2, #1
 8001c6c:	7013      	strb	r3, [r2, #0]
	//drive_regs[drive_index].ctrl_reg.mode = 0b0010;	// 1/4 step
	drive_regs[drive_index].ctrl_reg.mode = 0b0000;	// Full step
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	4a5f      	ldr	r2, [pc, #380]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001c72:	015b      	lsls	r3, r3, #5
 8001c74:	441a      	add	r2, r3
 8001c76:	7813      	ldrb	r3, [r2, #0]
 8001c78:	f36f 03c6 	bfc	r3, #3, #4
 8001c7c:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.extstall = 0;	// Internal stall detect
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4a5b      	ldr	r2, [pc, #364]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001c82:	015b      	lsls	r3, r3, #5
 8001c84:	441a      	add	r2, r3
 8001c86:	7813      	ldrb	r3, [r2, #0]
 8001c88:	f36f 13c7 	bfc	r3, #7, #1
 8001c8c:	7013      	strb	r3, [r2, #0]
	// drive_regs[drive_index].ctrl_reg.isgain = 0b00;	// Gain of 5
	drive_regs[drive_index].ctrl_reg.isgain = 0b01;	// Gain of 10
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	4a57      	ldr	r2, [pc, #348]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001c92:	015b      	lsls	r3, r3, #5
 8001c94:	441a      	add	r2, r3
 8001c96:	7853      	ldrb	r3, [r2, #1]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	f361 0301 	bfi	r3, r1, #0, #2
 8001c9e:	7053      	strb	r3, [r2, #1]
	drive_regs[drive_index].ctrl_reg.dtime = 0b00;	// Dead-time of 850ns
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	4a53      	ldr	r2, [pc, #332]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001ca4:	015b      	lsls	r3, r3, #5
 8001ca6:	441a      	add	r2, r3
 8001ca8:	7853      	ldrb	r3, [r2, #1]
 8001caa:	f36f 0383 	bfc	r3, #2, #2
 8001cae:	7053      	strb	r3, [r2, #1]

	// TORQUE register
	drive_regs[drive_index].torque_reg.torque = 24;// max 2.5A  //0xFF;	// Sets full torque for H-bridge
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4a4f      	ldr	r2, [pc, #316]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001cb4:	015b      	lsls	r3, r3, #5
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2218      	movs	r2, #24
 8001cbc:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].torque_reg.smplth = 0b111;	// 100us BEMF sample threshold
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001cc2:	015b      	lsls	r3, r3, #5
 8001cc4:	441a      	add	r2, r3
 8001cc6:	7953      	ldrb	r3, [r2, #5]
 8001cc8:	f043 0307 	orr.w	r3, r3, #7
 8001ccc:	7153      	strb	r3, [r2, #5]

	// OFF register
	drive_regs[drive_index].off_reg.toff = 0x80;		// Sets fixed off time, in increments of 500ns
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4a47      	ldr	r2, [pc, #284]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001cd2:	015b      	lsls	r3, r3, #5
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	2280      	movs	r2, #128	@ 0x80
 8001cda:	701a      	strb	r2, [r3, #0]
	// drive_regs[drive_index].off_reg.pwmmode = pwm_mode;	// Use internal indexer
	drive_regs[drive_index].off_reg.pwmmode = 1;
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4a44      	ldr	r2, [pc, #272]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001ce0:	015b      	lsls	r3, r3, #5
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f103 0208 	add.w	r2, r3, #8
 8001ce8:	7853      	ldrb	r3, [r2, #1]
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	7053      	strb	r3, [r2, #1]

	// BLANK register
	drive_regs[drive_index].blank_reg.tblank = 0x80;	// Current trip blanking time, in increments of 20ns
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001cf4:	015b      	lsls	r3, r3, #5
 8001cf6:	4413      	add	r3, r2
 8001cf8:	330c      	adds	r3, #12
 8001cfa:	2280      	movs	r2, #128	@ 0x80
 8001cfc:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].blank_reg.abt = 0;		// Disable adaptive blanking time
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4a3b      	ldr	r2, [pc, #236]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001d02:	015b      	lsls	r3, r3, #5
 8001d04:	4413      	add	r3, r2
 8001d06:	f103 0208 	add.w	r2, r3, #8
 8001d0a:	7953      	ldrb	r3, [r2, #5]
 8001d0c:	f36f 0300 	bfc	r3, #0, #1
 8001d10:	7153      	strb	r3, [r2, #5]

	// DECAY register
	drive_regs[drive_index].decay_reg.tdecay = 0x80;		// Mixed decay transition time, in increments of 500ns
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	4a36      	ldr	r2, [pc, #216]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4413      	add	r3, r2
 8001d1a:	3310      	adds	r3, #16
 8001d1c:	2280      	movs	r2, #128	@ 0x80
 8001d1e:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].decay_reg.decmod = 0b000;	// Force slow decay at all times
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4a33      	ldr	r2, [pc, #204]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001d24:	015b      	lsls	r3, r3, #5
 8001d26:	4413      	add	r3, r2
 8001d28:	f103 0210 	add.w	r2, r3, #16
 8001d2c:	7853      	ldrb	r3, [r2, #1]
 8001d2e:	f36f 0302 	bfc	r3, #0, #3
 8001d32:	7053      	strb	r3, [r2, #1]


	// STALL register
	drive_regs[drive_index].stall_reg.sdthr = 0xFF;	// Stall detect threshold
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	4a2e      	ldr	r2, [pc, #184]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3314      	adds	r3, #20
 8001d3e:	22ff      	movs	r2, #255	@ 0xff
 8001d40:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].stall_reg.sdcnt = 0b11;	// STALLn asserted on first step with BEMF below SDTHR
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	4a2a      	ldr	r2, [pc, #168]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001d46:	015b      	lsls	r3, r3, #5
 8001d48:	4413      	add	r3, r2
 8001d4a:	f103 0210 	add.w	r2, r3, #16
 8001d4e:	7953      	ldrb	r3, [r2, #5]
 8001d50:	f043 0303 	orr.w	r3, r3, #3
 8001d54:	7153      	strb	r3, [r2, #5]
	drive_regs[drive_index].stall_reg.vdiv = 0b00;	// BEMF divided by 32
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4a25      	ldr	r2, [pc, #148]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001d5a:	015b      	lsls	r3, r3, #5
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f103 0210 	add.w	r2, r3, #16
 8001d62:	7953      	ldrb	r3, [r2, #5]
 8001d64:	f36f 0383 	bfc	r3, #2, #2
 8001d68:	7153      	strb	r3, [r2, #5]

	// DRIVE register
	drive_regs[drive_index].drive_reg.ocpth = 0b11;		// OCP threshold of 500mV
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4a20      	ldr	r2, [pc, #128]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	4413      	add	r3, r2
 8001d72:	f103 0218 	add.w	r2, r3, #24
 8001d76:	7813      	ldrb	r3, [r2, #0]
 8001d78:	f043 0303 	orr.w	r3, r3, #3
 8001d7c:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.ocpdeg = 0b11;		// OCP deglitch time of 4us
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	4a1b      	ldr	r2, [pc, #108]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001d82:	015b      	lsls	r3, r3, #5
 8001d84:	4413      	add	r3, r2
 8001d86:	f103 0218 	add.w	r2, r3, #24
 8001d8a:	7813      	ldrb	r3, [r2, #0]
 8001d8c:	f043 030c 	orr.w	r3, r3, #12
 8001d90:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.tdriven = 0b11;	// Low-side gate drive time of 500ns
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4a16      	ldr	r2, [pc, #88]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001d96:	015b      	lsls	r3, r3, #5
 8001d98:	4413      	add	r3, r2
 8001d9a:	f103 0218 	add.w	r2, r3, #24
 8001d9e:	7813      	ldrb	r3, [r2, #0]
 8001da0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001da4:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.tdrivep = 0b11;	// High-side gate drive time of 500ns
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	4a11      	ldr	r2, [pc, #68]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001daa:	015b      	lsls	r3, r3, #5
 8001dac:	4413      	add	r3, r2
 8001dae:	f103 0218 	add.w	r2, r3, #24
 8001db2:	7813      	ldrb	r3, [r2, #0]
 8001db4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001db8:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.idriven = 0b11;	// Low-side gate drive peak current of 300mA peak (sink)
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f103 0218 	add.w	r2, r3, #24
 8001dc6:	7853      	ldrb	r3, [r2, #1]
 8001dc8:	f043 0303 	orr.w	r3, r3, #3
 8001dcc:	7053      	strb	r3, [r2, #1]
	drive_regs[drive_index].drive_reg.idrivep = 0b11;	// High-side gate drive peak current of 150mA peak (sink)
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <InitRegValuesPWM+0x1bc>)
 8001dd2:	015b      	lsls	r3, r3, #5
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f103 0218 	add.w	r2, r3, #24
 8001dda:	7853      	ldrb	r3, [r2, #1]
 8001ddc:	f043 030c 	orr.w	r3, r3, #12
 8001de0:	7053      	strb	r3, [r2, #1]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	2000047c 	.word	0x2000047c

08001df4 <InitRegValues2>:

void InitRegValues2(DRIVE_MOTOR drive_index)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
	// CTRL register
	// drive_regs[drive_index].ctrl_reg.enbl = 1;	// Enable motor
	drive_regs[drive_index].ctrl_reg.enbl = 0;	// Disable motor drive by default
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4a79      	ldr	r2, [pc, #484]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e02:	015b      	lsls	r3, r3, #5
 8001e04:	441a      	add	r2, r3
 8001e06:	7813      	ldrb	r3, [r2, #0]
 8001e08:	f36f 0300 	bfc	r3, #0, #1
 8001e0c:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.rdir = 0;	// Direction set by DIR pin
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e12:	015b      	lsls	r3, r3, #5
 8001e14:	441a      	add	r2, r3
 8001e16:	7813      	ldrb	r3, [r2, #0]
 8001e18:	f36f 0341 	bfc	r3, #1, #1
 8001e1c:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.rstep = 0;	// No automatic stepping
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4a71      	ldr	r2, [pc, #452]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e22:	015b      	lsls	r3, r3, #5
 8001e24:	441a      	add	r2, r3
 8001e26:	7813      	ldrb	r3, [r2, #0]
 8001e28:	f36f 0382 	bfc	r3, #2, #1
 8001e2c:	7013      	strb	r3, [r2, #0]
	//drive_regs[drive_index].ctrl_reg.mode = 0b0010;	// 1/4 step
	if (drive_index == DRIVE_PITCH)
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d109      	bne.n	8001e48 <InitRegValues2+0x54>
	{
		//drive_regs[drive_index].ctrl_reg.mode = 0b0010;	// 1/4 step
		drive_regs[drive_index].ctrl_reg.mode = 0b0001;	// 1/2 step
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	4a6c      	ldr	r2, [pc, #432]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e38:	015b      	lsls	r3, r3, #5
 8001e3a:	441a      	add	r2, r3
 8001e3c:	7813      	ldrb	r3, [r2, #0]
 8001e3e:	2101      	movs	r1, #1
 8001e40:	f361 03c6 	bfi	r3, r1, #3, #4
 8001e44:	7013      	strb	r3, [r2, #0]
 8001e46:	e007      	b.n	8001e58 <InitRegValues2+0x64>
		//drive_regs[drive_index].ctrl_reg.mode = 0b0000;	// Full step
	}
	else
		drive_regs[drive_index].ctrl_reg.mode = 0b0000;	// Full step
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	4a67      	ldr	r2, [pc, #412]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e4c:	015b      	lsls	r3, r3, #5
 8001e4e:	441a      	add	r2, r3
 8001e50:	7813      	ldrb	r3, [r2, #0]
 8001e52:	f36f 03c6 	bfc	r3, #3, #4
 8001e56:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.extstall = 0;	// Internal stall detect
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	4a63      	ldr	r2, [pc, #396]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e5c:	015b      	lsls	r3, r3, #5
 8001e5e:	441a      	add	r2, r3
 8001e60:	7813      	ldrb	r3, [r2, #0]
 8001e62:	f36f 13c7 	bfc	r3, #7, #1
 8001e66:	7013      	strb	r3, [r2, #0]
	// drive_regs[drive_index].ctrl_reg.isgain = 0b00;	// Gain of 5
	drive_regs[drive_index].ctrl_reg.isgain = 0b01;	// Gain of 10
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4a5f      	ldr	r2, [pc, #380]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e6c:	015b      	lsls	r3, r3, #5
 8001e6e:	441a      	add	r2, r3
 8001e70:	7853      	ldrb	r3, [r2, #1]
 8001e72:	2101      	movs	r1, #1
 8001e74:	f361 0301 	bfi	r3, r1, #0, #2
 8001e78:	7053      	strb	r3, [r2, #1]
	drive_regs[drive_index].ctrl_reg.dtime = 0b00;	// Dead-time of 850ns
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e7e:	015b      	lsls	r3, r3, #5
 8001e80:	441a      	add	r2, r3
 8001e82:	7853      	ldrb	r3, [r2, #1]
 8001e84:	f36f 0383 	bfc	r3, #2, #2
 8001e88:	7053      	strb	r3, [r2, #1]

	// TORQUE register
	drive_regs[drive_index].torque_reg.torque = 24;// max 2.5A  //0xFF;	// Sets full torque for H-bridge
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4a56      	ldr	r2, [pc, #344]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e8e:	015b      	lsls	r3, r3, #5
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	2218      	movs	r2, #24
 8001e96:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].torque_reg.smplth = 0b111;	// 100us BEMF sample threshold
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4a53      	ldr	r2, [pc, #332]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001e9c:	015b      	lsls	r3, r3, #5
 8001e9e:	441a      	add	r2, r3
 8001ea0:	7953      	ldrb	r3, [r2, #5]
 8001ea2:	f043 0307 	orr.w	r3, r3, #7
 8001ea6:	7153      	strb	r3, [r2, #5]

	// OFF register
	drive_regs[drive_index].off_reg.toff = 0x80;		// Sets fixed off time, in increments of 500ns
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4a4f      	ldr	r2, [pc, #316]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001eac:	015b      	lsls	r3, r3, #5
 8001eae:	4413      	add	r3, r2
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	2280      	movs	r2, #128	@ 0x80
 8001eb4:	701a      	strb	r2, [r3, #0]
	// drive_regs[drive_index].off_reg.pwmmode = pwm_mode;	// Use internal indexer
	drive_regs[drive_index].off_reg.pwmmode = 1;
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001eba:	015b      	lsls	r3, r3, #5
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f103 0208 	add.w	r2, r3, #8
 8001ec2:	7853      	ldrb	r3, [r2, #1]
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	7053      	strb	r3, [r2, #1]

	// BLANK register
	drive_regs[drive_index].blank_reg.tblank = 0x80;	// Current trip blanking time, in increments of 20ns
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	4a46      	ldr	r2, [pc, #280]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001ece:	015b      	lsls	r3, r3, #5
 8001ed0:	4413      	add	r3, r2
 8001ed2:	330c      	adds	r3, #12
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].blank_reg.abt = 0;		// Disable adaptive blanking time
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4a43      	ldr	r2, [pc, #268]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001edc:	015b      	lsls	r3, r3, #5
 8001ede:	4413      	add	r3, r2
 8001ee0:	f103 0208 	add.w	r2, r3, #8
 8001ee4:	7953      	ldrb	r3, [r2, #5]
 8001ee6:	f36f 0300 	bfc	r3, #0, #1
 8001eea:	7153      	strb	r3, [r2, #5]

	// DECAY register
	drive_regs[drive_index].decay_reg.tdecay = 0x80;		// Mixed decay transition time, in increments of 500ns
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	4a3e      	ldr	r2, [pc, #248]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001ef0:	015b      	lsls	r3, r3, #5
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3310      	adds	r3, #16
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	701a      	strb	r2, [r3, #0]
	if (drive_index == DRIVE_PITCH)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d10b      	bne.n	8001f18 <InitRegValues2+0x124>
		drive_regs[drive_index].decay_reg.decmod = 0b010;	// Force fast decay at all times
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a39      	ldr	r2, [pc, #228]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001f04:	015b      	lsls	r3, r3, #5
 8001f06:	4413      	add	r3, r2
 8001f08:	f103 0210 	add.w	r2, r3, #16
 8001f0c:	7853      	ldrb	r3, [r2, #1]
 8001f0e:	2102      	movs	r1, #2
 8001f10:	f361 0302 	bfi	r3, r1, #0, #3
 8001f14:	7053      	strb	r3, [r2, #1]
 8001f16:	e009      	b.n	8001f2c <InitRegValues2+0x138>
	else
		drive_regs[drive_index].decay_reg.decmod = 0b000;	// Force slow decay at all times
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	4a33      	ldr	r2, [pc, #204]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001f1c:	015b      	lsls	r3, r3, #5
 8001f1e:	4413      	add	r3, r2
 8001f20:	f103 0210 	add.w	r2, r3, #16
 8001f24:	7853      	ldrb	r3, [r2, #1]
 8001f26:	f36f 0302 	bfc	r3, #0, #3
 8001f2a:	7053      	strb	r3, [r2, #1]


	// STALL register
	drive_regs[drive_index].stall_reg.sdthr = 0xFF;	// Stall detect threshold
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001f30:	015b      	lsls	r3, r3, #5
 8001f32:	4413      	add	r3, r2
 8001f34:	3314      	adds	r3, #20
 8001f36:	22ff      	movs	r2, #255	@ 0xff
 8001f38:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].stall_reg.sdcnt = 0b11;	// STALLn asserted on first step with BEMF below SDTHR
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001f3e:	015b      	lsls	r3, r3, #5
 8001f40:	4413      	add	r3, r2
 8001f42:	f103 0210 	add.w	r2, r3, #16
 8001f46:	7953      	ldrb	r3, [r2, #5]
 8001f48:	f043 0303 	orr.w	r3, r3, #3
 8001f4c:	7153      	strb	r3, [r2, #5]
	drive_regs[drive_index].stall_reg.vdiv = 0b00;	// BEMF divided by 32
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	4a25      	ldr	r2, [pc, #148]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001f52:	015b      	lsls	r3, r3, #5
 8001f54:	4413      	add	r3, r2
 8001f56:	f103 0210 	add.w	r2, r3, #16
 8001f5a:	7953      	ldrb	r3, [r2, #5]
 8001f5c:	f36f 0383 	bfc	r3, #2, #2
 8001f60:	7153      	strb	r3, [r2, #5]

	// DRIVE register
	drive_regs[drive_index].drive_reg.ocpth = 0b11;		// OCP threshold of 500mV
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4a20      	ldr	r2, [pc, #128]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001f66:	015b      	lsls	r3, r3, #5
 8001f68:	4413      	add	r3, r2
 8001f6a:	f103 0218 	add.w	r2, r3, #24
 8001f6e:	7813      	ldrb	r3, [r2, #0]
 8001f70:	f043 0303 	orr.w	r3, r3, #3
 8001f74:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.ocpdeg = 0b11;		// OCP deglitch time of 4us
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001f7a:	015b      	lsls	r3, r3, #5
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f103 0218 	add.w	r2, r3, #24
 8001f82:	7813      	ldrb	r3, [r2, #0]
 8001f84:	f043 030c 	orr.w	r3, r3, #12
 8001f88:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.tdriven = 0b11;	// Low-side gate drive time of 500ns
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4a16      	ldr	r2, [pc, #88]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	4413      	add	r3, r2
 8001f92:	f103 0218 	add.w	r2, r3, #24
 8001f96:	7813      	ldrb	r3, [r2, #0]
 8001f98:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001f9c:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.tdrivep = 0b11;	// High-side gate drive time of 500ns
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001fa2:	015b      	lsls	r3, r3, #5
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f103 0218 	add.w	r2, r3, #24
 8001faa:	7813      	ldrb	r3, [r2, #0]
 8001fac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001fb0:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.idriven = 0b11;	// Low-side gate drive peak current of 300mA peak (sink)
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	4413      	add	r3, r2
 8001fba:	f103 0218 	add.w	r2, r3, #24
 8001fbe:	7853      	ldrb	r3, [r2, #1]
 8001fc0:	f043 0303 	orr.w	r3, r3, #3
 8001fc4:	7053      	strb	r3, [r2, #1]
	drive_regs[drive_index].drive_reg.idrivep = 0b11;	// High-side gate drive peak current of 150mA peak (sink)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	@ (8001fe8 <InitRegValues2+0x1f4>)
 8001fca:	015b      	lsls	r3, r3, #5
 8001fcc:	4413      	add	r3, r2
 8001fce:	f103 0218 	add.w	r2, r3, #24
 8001fd2:	7853      	ldrb	r3, [r2, #1]
 8001fd4:	f043 030c 	orr.w	r3, r3, #12
 8001fd8:	7053      	strb	r3, [r2, #1]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	2000047c 	.word	0x2000047c

08001fec <InitDriveMotor>:

void InitDriveMotor(DRIVE_MOTOR drive_index)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
	// Reset drive
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	492d      	ldr	r1, [pc, #180]	@ (80020b0 <InitDriveMotor+0xc4>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	79fa      	ldrb	r2, [r7, #7]
 8002008:	492a      	ldr	r1, [pc, #168]	@ (80020b4 <InitDriveMotor+0xc8>)
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	440b      	add	r3, r1
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	4619      	mov	r1, r3
 800201a:	f002 f8a1 	bl	8004160 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_SET);
	HAL_Delay(10);
 800201e:	200a      	movs	r0, #10
 8002020:	f000 ff24 	bl	8002e6c <HAL_Delay>
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	4922      	ldr	r1, [pc, #136]	@ (80020b0 <InitDriveMotor+0xc4>)
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	491f      	ldr	r1, [pc, #124]	@ (80020b4 <InitDriveMotor+0xc8>)
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	440b      	add	r3, r1
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	4619      	mov	r1, r3
 8002048:	f002 f88a 	bl	8004160 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_RESET);

	// Disable sleeping
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_SLEEP],
 800204c:	79fa      	ldrb	r2, [r7, #7]
 800204e:	4918      	ldr	r1, [pc, #96]	@ (80020b0 <InitDriveMotor+0xc4>)
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	3304      	adds	r3, #4
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	4914      	ldr	r1, [pc, #80]	@ (80020b4 <InitDriveMotor+0xc8>)
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	440b      	add	r3, r1
 800206c:	3302      	adds	r3, #2
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	4619      	mov	r1, r3
 8002074:	f002 f874 	bl	8004160 <HAL_GPIO_WritePin>
	// Set initial reg values
	//uint8_t pwm_mode = 0; // Internal indexer enabled
	//if (drive_index == DRIVE_MAST)
	//	pwm_mode = 1; // External pwm enabled
	// InitRegValues2(drive_index, pwm_mode);
	if (drive_index == DRIVE_MAST)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d104      	bne.n	8002088 <InitDriveMotor+0x9c>
		InitRegValuesPWM(drive_index);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fdd7 	bl	8001c34 <InitRegValuesPWM>
 8002086:	e003      	b.n	8002090 <InitDriveMotor+0xa4>
	else
		InitRegValues2(drive_index);
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff feb2 	bl	8001df4 <InitRegValues2>

	// Send regs over SPI
	SendDriveRegisters(drive_index);
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fd82 	bl	8001b9c <SendDriveRegisters>

	HAL_Delay(10);
 8002098:	200a      	movs	r0, #10
 800209a:	f000 fee7 	bl	8002e6c <HAL_Delay>
	ResetStatusRegisters(drive_index);
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 f899 	bl	80021d8 <ResetStatusRegisters>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000028 	.word	0x20000028

080020b8 <EnableDrive>:


void EnableDrive(DRIVE_MOTOR drive_index)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	491d      	ldr	r1, [pc, #116]	@ (800213c <EnableDrive+0x84>)
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3308      	adds	r3, #8
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	79fa      	ldrb	r2, [r7, #7]
 80020d6:	491a      	ldr	r1, [pc, #104]	@ (8002140 <EnableDrive+0x88>)
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	440b      	add	r3, r1
 80020e2:	3304      	adds	r3, #4
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	2201      	movs	r2, #1
 80020e8:	4619      	mov	r1, r3
 80020ea:	f002 f839 	bl	8004160 <HAL_GPIO_WritePin>
						  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	drive_regs[drive_index].ctrl_reg.enbl = 1;
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <EnableDrive+0x8c>)
 80020f2:	015b      	lsls	r3, r3, #5
 80020f4:	441a      	add	r2, r3
 80020f6:	7813      	ldrb	r3, [r2, #0]
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	7013      	strb	r3, [r2, #0]
	TransmitMotorSPI(drive_index, DRV8711_CTRL_REG);
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fd00 	bl	8001b08 <TransmitMotorSPI>

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8002108:	79fa      	ldrb	r2, [r7, #7]
 800210a:	490c      	ldr	r1, [pc, #48]	@ (800213c <EnableDrive+0x84>)
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3308      	adds	r3, #8
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	4908      	ldr	r1, [pc, #32]	@ (8002140 <EnableDrive+0x88>)
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	440b      	add	r3, r1
 8002128:	3304      	adds	r3, #4
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	2200      	movs	r2, #0
 800212e:	4619      	mov	r1, r3
 8002130:	f002 f816 	bl	8004160 <HAL_GPIO_WritePin>
						  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000000 	.word	0x20000000
 8002140:	20000028 	.word	0x20000028
 8002144:	2000047c 	.word	0x2000047c

08002148 <DisableDrive>:

void DisableDrive(DRIVE_MOTOR drive_index)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8002152:	79fa      	ldrb	r2, [r7, #7]
 8002154:	491d      	ldr	r1, [pc, #116]	@ (80021cc <DisableDrive+0x84>)
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3308      	adds	r3, #8
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	491a      	ldr	r1, [pc, #104]	@ (80021d0 <DisableDrive+0x88>)
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	440b      	add	r3, r1
 8002172:	3304      	adds	r3, #4
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	4619      	mov	r1, r3
 800217a:	f001 fff1 	bl	8004160 <HAL_GPIO_WritePin>
						  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	drive_regs[drive_index].ctrl_reg.enbl = 0;
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <DisableDrive+0x8c>)
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	441a      	add	r2, r3
 8002186:	7813      	ldrb	r3, [r2, #0]
 8002188:	f36f 0300 	bfc	r3, #0, #1
 800218c:	7013      	strb	r3, [r2, #0]
	TransmitMotorSPI(drive_index, DRV8711_CTRL_REG);
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fcb8 	bl	8001b08 <TransmitMotorSPI>

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8002198:	79fa      	ldrb	r2, [r7, #7]
 800219a:	490c      	ldr	r1, [pc, #48]	@ (80021cc <DisableDrive+0x84>)
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3308      	adds	r3, #8
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	79fa      	ldrb	r2, [r7, #7]
 80021ac:	4908      	ldr	r1, [pc, #32]	@ (80021d0 <DisableDrive+0x88>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	440b      	add	r3, r1
 80021b8:	3304      	adds	r3, #4
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	4619      	mov	r1, r3
 80021c0:	f001 ffce 	bl	8004160 <HAL_GPIO_WritePin>
				 	  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000028 	.word	0x20000028
 80021d4:	2000047c 	.word	0x2000047c

080021d8 <ResetStatusRegisters>:

void ResetStatusRegisters(DRIVE_MOTOR drive_index)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80021e2:	79fa      	ldrb	r2, [r7, #7]
 80021e4:	491f      	ldr	r1, [pc, #124]	@ (8002264 <ResetStatusRegisters+0x8c>)
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3308      	adds	r3, #8
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	79fa      	ldrb	r2, [r7, #7]
 80021f6:	491c      	ldr	r1, [pc, #112]	@ (8002268 <ResetStatusRegisters+0x90>)
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	440b      	add	r3, r1
 8002202:	3304      	adds	r3, #4
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	2201      	movs	r2, #1
 8002208:	4619      	mov	r1, r3
 800220a:	f001 ffa9 	bl	8004160 <HAL_GPIO_WritePin>
							  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	// drive_regs[drive_index].status_reg = {0};
	memset(&drive_regs[drive_index].status_reg, 0, sizeof(STATUS_REG));
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	015b      	lsls	r3, r3, #5
 8002212:	3318      	adds	r3, #24
 8002214:	4a15      	ldr	r2, [pc, #84]	@ (800226c <ResetStatusRegisters+0x94>)
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	2204      	movs	r2, #4
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fd52 	bl	8006cc8 <memset>
	TransmitMotorSPI(drive_index, DRV8711_STATUS_REG);
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2107      	movs	r1, #7
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fc6d 	bl	8001b08 <TransmitMotorSPI>

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 800222e:	79fa      	ldrb	r2, [r7, #7]
 8002230:	490c      	ldr	r1, [pc, #48]	@ (8002264 <ResetStatusRegisters+0x8c>)
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	3308      	adds	r3, #8
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	79fa      	ldrb	r2, [r7, #7]
 8002242:	4909      	ldr	r1, [pc, #36]	@ (8002268 <ResetStatusRegisters+0x90>)
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	440b      	add	r3, r1
 800224e:	3304      	adds	r3, #4
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	2200      	movs	r2, #0
 8002254:	4619      	mov	r1, r3
 8002256:	f001 ff83 	bl	8004160 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000000 	.word	0x20000000
 8002268:	20000028 	.word	0x20000028
 800226c:	2000047c 	.word	0x2000047c

08002270 <SendConfigRegisters>:

void SendConfigRegisters(DRIVE_MOTOR drive_index)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 800227a:	79fa      	ldrb	r2, [r7, #7]
 800227c:	491c      	ldr	r1, [pc, #112]	@ (80022f0 <SendConfigRegisters+0x80>)
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3308      	adds	r3, #8
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	79fa      	ldrb	r2, [r7, #7]
 800228e:	4919      	ldr	r1, [pc, #100]	@ (80022f4 <SendConfigRegisters+0x84>)
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	440b      	add	r3, r1
 800229a:	3304      	adds	r3, #4
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	4619      	mov	r1, r3
 80022a2:	f001 ff5d 	bl	8004160 <HAL_GPIO_WritePin>
								  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	TransmitMotorSPI(drive_index, DRV8711_CTRL_REG);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fc2c 	bl	8001b08 <TransmitMotorSPI>
	//delay_us(50);
	TransmitMotorSPI(drive_index, DRV8711_OFF_REG);
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2102      	movs	r1, #2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fc27 	bl	8001b08 <TransmitMotorSPI>

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	490c      	ldr	r1, [pc, #48]	@ (80022f0 <SendConfigRegisters+0x80>)
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3308      	adds	r3, #8
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	79fa      	ldrb	r2, [r7, #7]
 80022ce:	4909      	ldr	r1, [pc, #36]	@ (80022f4 <SendConfigRegisters+0x84>)
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	440b      	add	r3, r1
 80022da:	3304      	adds	r3, #4
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	4619      	mov	r1, r3
 80022e2:	f001 ff3d 	bl	8004160 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000028 	.word	0x20000028

080022f8 <SetDirection>:
{
	return drive_status[drive_index];
}

void SetDirection(DRIVE_MOTOR drive_index, uint32_t direction)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState state = (direction == DIR_LEFT) ? 1 : 0;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	bf0c      	ite	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	2300      	movne	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_DIR],
 8002312:	79fa      	ldrb	r2, [r7, #7]
 8002314:	490c      	ldr	r1, [pc, #48]	@ (8002348 <SetDirection+0x50>)
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3310      	adds	r3, #16
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	4909      	ldr	r1, [pc, #36]	@ (800234c <SetDirection+0x54>)
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	440b      	add	r3, r1
 8002332:	3308      	adds	r3, #8
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	4619      	mov	r1, r3
 800233a:	f001 ff11 	bl	8004160 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_DIR], state);
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000
 800234c:	20000028 	.word	0x20000028

08002350 <EnableDriveExternalPWM>:
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}

void EnableDriveExternalPWM(DRIVE_MOTOR drive_index)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
	drive_regs[drive_index].off_reg.pwmmode = 1;		// Use external PWM
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	4a1e      	ldr	r2, [pc, #120]	@ (80023d8 <EnableDriveExternalPWM+0x88>)
 800235e:	015b      	lsls	r3, r3, #5
 8002360:	4413      	add	r3, r2
 8002362:	f103 0208 	add.w	r2, r3, #8
 8002366:	7853      	ldrb	r3, [r2, #1]
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	7053      	strb	r3, [r2, #1]

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 800236e:	79fa      	ldrb	r2, [r7, #7]
 8002370:	491a      	ldr	r1, [pc, #104]	@ (80023dc <EnableDriveExternalPWM+0x8c>)
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3308      	adds	r3, #8
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	79fa      	ldrb	r2, [r7, #7]
 8002382:	4917      	ldr	r1, [pc, #92]	@ (80023e0 <EnableDriveExternalPWM+0x90>)
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	440b      	add	r3, r1
 800238e:	3304      	adds	r3, #4
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	4619      	mov	r1, r3
 8002396:	f001 fee3 	bl	8004160 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);
	TransmitMotorSPI(drive_index, DRV8711_OFF_REG);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fbb2 	bl	8001b08 <TransmitMotorSPI>
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80023a4:	79fa      	ldrb	r2, [r7, #7]
 80023a6:	490d      	ldr	r1, [pc, #52]	@ (80023dc <EnableDriveExternalPWM+0x8c>)
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3308      	adds	r3, #8
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	79fa      	ldrb	r2, [r7, #7]
 80023b8:	4909      	ldr	r1, [pc, #36]	@ (80023e0 <EnableDriveExternalPWM+0x90>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	440b      	add	r3, r1
 80023c4:	3304      	adds	r3, #4
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2200      	movs	r2, #0
 80023ca:	4619      	mov	r1, r3
 80023cc:	f001 fec8 	bl	8004160 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	2000047c 	.word	0x2000047c
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000028 	.word	0x20000028

080023e4 <better_step_function>:
uint32_t speed_stepper_motor_pitch_int_converted = 2; //in multiple of 50us
uint8_t gpio_pin_value = 0;
//fonctionne avec un timer d'un multiple de la vitesse maximale
//better_step_function() s'exécute tous les 50us
//vitesse max 100us, soit multiplicator_slowing_motor > stepper_motor_pitch où stepper_motor_pitch = 2 (50us*2=100us)
void better_step_function() {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	if (speed_stepper_motor_pitch >= 100) {
 80023e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <better_step_function+0xb4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b63      	cmp	r3, #99	@ 0x63
 80023ee:	d903      	bls.n	80023f8 <better_step_function+0x14>
		speed_stepper_motor_pitch_int_converted = 2;
 80023f0:	4b2a      	ldr	r3, [pc, #168]	@ (800249c <better_step_function+0xb8>)
 80023f2:	2202      	movs	r2, #2
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e013      	b.n	8002420 <better_step_function+0x3c>
	} else {
		speed_stepper_motor_pitch_int_converted = (uint32_t) ( 1 / (float) ((float) speed_stepper_motor_pitch / 100));
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <better_step_function+0xb4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002404:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80024a0 <better_step_function+0xbc>
 8002408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800240c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002418:	ee17 2a90 	vmov	r2, s15
 800241c:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <better_step_function+0xb8>)
 800241e:	601a      	str	r2, [r3, #0]
	}
	if (speed_stepper_motor_pitch_int_converted < 2) speed_stepper_motor_pitch_int_converted = 2; //sécurité sinon moteur bloque et besoin de HARD RESET toute la boite élé
 8002420:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <better_step_function+0xb8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d802      	bhi.n	800242e <better_step_function+0x4a>
 8002428:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <better_step_function+0xb8>)
 800242a:	2202      	movs	r2, #2
 800242c:	601a      	str	r2, [r3, #0]


	if (multiplicator_slowing_motor <= speed_stepper_motor_pitch_int_converted) {
 800242e:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <better_step_function+0xc0>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <better_step_function+0xb8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d805      	bhi.n	8002446 <better_step_function+0x62>
		multiplicator_slowing_motor++;
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <better_step_function+0xc0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	4a18      	ldr	r2, [pc, #96]	@ (80024a4 <better_step_function+0xc0>)
 8002442:	6013      	str	r3, [r2, #0]
			}
		}
	}


}
 8002444:	e025      	b.n	8002492 <better_step_function+0xae>
		multiplicator_slowing_motor = 0;
 8002446:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <better_step_function+0xc0>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
		if (motor_pitch_on == 1) {
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <better_step_function+0xc4>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d11e      	bne.n	8002492 <better_step_function+0xae>
			if (gpio_pin_value == 0) {
 8002454:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <better_step_function+0xc8>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <better_step_function+0x90>
				gpio_pin_value = 1;
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <better_step_function+0xc8>)
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(drive_ports[DRIVE_PITCH][DRIVE_STEP],
 8002462:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <better_step_function+0xcc>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <better_step_function+0xd0>)
 8002468:	8a11      	ldrh	r1, [r2, #16]
 800246a:	2201      	movs	r2, #1
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fe77 	bl	8004160 <HAL_GPIO_WritePin>
}
 8002472:	e00e      	b.n	8002492 <better_step_function+0xae>
			} else if (gpio_pin_value == 1) {
 8002474:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <better_step_function+0xc8>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10a      	bne.n	8002492 <better_step_function+0xae>
				gpio_pin_value = 0;
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <better_step_function+0xc8>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(drive_ports[DRIVE_PITCH][DRIVE_STEP],
 8002482:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <better_step_function+0xcc>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a0b      	ldr	r2, [pc, #44]	@ (80024b4 <better_step_function+0xd0>)
 8002488:	8a11      	ldrh	r1, [r2, #16]
 800248a:	2200      	movs	r2, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f001 fe67 	bl	8004160 <HAL_GPIO_WritePin>
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200003d8 	.word	0x200003d8
 800249c:	2000003c 	.word	0x2000003c
 80024a0:	42c80000 	.word	0x42c80000
 80024a4:	200004cc 	.word	0x200004cc
 80024a8:	20000464 	.word	0x20000464
 80024ac:	200004d0 	.word	0x200004d0
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000028 	.word	0x20000028

080024b8 <SetDutyCycle>:


void SetDutyCycle(uint32_t pwm_index, uint16_t duty_cycle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
	HAL_TIM_PWM_Stop(pwm_timers[pwm_index], pwm_channels[pwm_index]); // stop generation of pwm
 80024c4:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <SetDutyCycle+0x58>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024cc:	4911      	ldr	r1, [pc, #68]	@ (8002514 <SetDutyCycle+0x5c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f003 fa0e 	bl	80058f8 <HAL_TIM_PWM_Stop>

	TIM_OC_InitTypeDef sConfigOC;
	// (*htim).Init.Period = PWM_PERIOD; // set the period duration
	// HAL_TIM_PWM_Init(htim); // reinititialise with new period value

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024dc:	2360      	movs	r3, #96	@ 0x60
 80024de:	60fb      	str	r3, [r7, #12]
	//sConfigOC.Pulse = (uint32_t)(duty_cycle * (float)PWM_PERIOD); // set the pulse duration
	sConfigOC.Pulse = duty_cycle;
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(pwm_timers[pwm_index], &sConfigOC, pwm_channels[pwm_index]);
 80024ec:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <SetDutyCycle+0x58>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024f4:	4a07      	ldr	r2, [pc, #28]	@ (8002514 <SetDutyCycle+0x5c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	4619      	mov	r1, r3
 8002502:	f003 fb71 	bl	8005be8 <HAL_TIM_PWM_ConfigChannel>

	//HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2); // start pwm generation
}
 8002506:	bf00      	nop
 8002508:	3728      	adds	r7, #40	@ 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200004bc 	.word	0x200004bc
 8002514:	200004c4 	.word	0x200004c4

08002518 <DriveMastRight>:

void DriveMastRight()
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	SetDutyCycle(PWM1, 360);
 800251c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002520:	2000      	movs	r0, #0
 8002522:	f7ff ffc9 	bl	80024b8 <SetDutyCycle>
	SetDutyCycle(PWM2, 480);
 8002526:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800252a:	2001      	movs	r0, #1
 800252c:	f7ff ffc4 	bl	80024b8 <SetDutyCycle>
	HAL_TIM_PWM_Start(pwm1_timer, pwm1_channel);
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <DriveMastRight+0x3c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a08      	ldr	r2, [pc, #32]	@ (8002558 <DriveMastRight+0x40>)
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f003 f914 	bl	8005768 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm2_timer, pwm2_channel);
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <DriveMastRight+0x44>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a06      	ldr	r2, [pc, #24]	@ (8002560 <DriveMastRight+0x48>)
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f003 f90c 	bl	8005768 <HAL_TIM_PWM_Start>
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	2000046c 	.word	0x2000046c
 8002558:	20000474 	.word	0x20000474
 800255c:	20000470 	.word	0x20000470
 8002560:	20000478 	.word	0x20000478

08002564 <DriveMastLeft>:

void DriveMastLeft()
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	SetDutyCycle(PWM1, 480);
 8002568:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff ffa3 	bl	80024b8 <SetDutyCycle>
	SetDutyCycle(PWM2, 360);
 8002572:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002576:	2001      	movs	r0, #1
 8002578:	f7ff ff9e 	bl	80024b8 <SetDutyCycle>
	HAL_TIM_PWM_Start(pwm1_timer, pwm1_channel);
 800257c:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <DriveMastLeft+0x3c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a08      	ldr	r2, [pc, #32]	@ (80025a4 <DriveMastLeft+0x40>)
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f003 f8ee 	bl	8005768 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm2_timer, pwm2_channel);
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <DriveMastLeft+0x44>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a06      	ldr	r2, [pc, #24]	@ (80025ac <DriveMastLeft+0x48>)
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f003 f8e6 	bl	8005768 <HAL_TIM_PWM_Start>
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000046c 	.word	0x2000046c
 80025a4:	20000474 	.word	0x20000474
 80025a8:	20000470 	.word	0x20000470
 80025ac:	20000478 	.word	0x20000478

080025b0 <DriveMastStop>:

void DriveMastStop()
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	SetDutyCycle(PWM1, 0);
 80025b4:	2100      	movs	r1, #0
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7ff ff7e 	bl	80024b8 <SetDutyCycle>
	SetDutyCycle(PWM2, 0);
 80025bc:	2100      	movs	r1, #0
 80025be:	2001      	movs	r0, #1
 80025c0:	f7ff ff7a 	bl	80024b8 <SetDutyCycle>
	HAL_TIM_PWM_Stop(pwm1_timer, pwm1_channel);
 80025c4:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <DriveMastStop+0x38>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a08      	ldr	r2, [pc, #32]	@ (80025ec <DriveMastStop+0x3c>)
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f992 	bl	80058f8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(pwm2_timer, pwm2_channel);
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <DriveMastStop+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a06      	ldr	r2, [pc, #24]	@ (80025f4 <DriveMastStop+0x44>)
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 f98a 	bl	80058f8 <HAL_TIM_PWM_Stop>
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000046c 	.word	0x2000046c
 80025ec:	20000474 	.word	0x20000474
 80025f0:	20000470 	.word	0x20000470
 80025f4:	20000478 	.word	0x20000478

080025f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <HAL_MspInit+0x90>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a20      	ldr	r2, [pc, #128]	@ (8002688 <HAL_MspInit+0x90>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <HAL_MspInit+0x90>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <HAL_MspInit+0x90>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a19      	ldr	r2, [pc, #100]	@ (8002688 <HAL_MspInit+0x90>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <HAL_MspInit+0x90>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2101      	movs	r1, #1
 800263a:	f06f 000b 	mvn.w	r0, #11
 800263e:	f001 fbac 	bl	8003d9a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2101      	movs	r1, #1
 8002646:	f06f 000a 	mvn.w	r0, #10
 800264a:	f001 fba6 	bl	8003d9a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2101      	movs	r1, #1
 8002652:	f06f 0009 	mvn.w	r0, #9
 8002656:	f001 fba0 	bl	8003d9a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2101      	movs	r1, #1
 800265e:	f06f 0004 	mvn.w	r0, #4
 8002662:	f001 fb9a 	bl	8003d9a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2101      	movs	r1, #1
 800266a:	f06f 0003 	mvn.w	r0, #3
 800266e:	f001 fb94 	bl	8003d9a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2102      	movs	r1, #2
 8002676:	f06f 0001 	mvn.w	r0, #1
 800267a:	f001 fb8e 	bl	8003d9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	@ 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a21      	ldr	r2, [pc, #132]	@ (8002730 <HAL_CAN_MspInit+0xa4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d13c      	bne.n	8002728 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <HAL_CAN_MspInit+0xa8>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002734 <HAL_CAN_MspInit+0xa8>)
 80026b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026be:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <HAL_CAN_MspInit+0xa8>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_CAN_MspInit+0xa8>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	4a18      	ldr	r2, [pc, #96]	@ (8002734 <HAL_CAN_MspInit+0xa8>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026da:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <HAL_CAN_MspInit+0xa8>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80026ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80026f8:	2309      	movs	r3, #9
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	480d      	ldr	r0, [pc, #52]	@ (8002738 <HAL_CAN_MspInit+0xac>)
 8002704:	f001 fb80 	bl	8003e08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2101      	movs	r1, #1
 800270c:	2014      	movs	r0, #20
 800270e:	f001 fb44 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002712:	2014      	movs	r0, #20
 8002714:	f001 fb5d 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2101      	movs	r1, #1
 800271c:	2015      	movs	r0, #21
 800271e:	f001 fb3c 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002722:	2015      	movs	r0, #21
 8002724:	f001 fb55 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	@ 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40006400 	.word	0x40006400
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08c      	sub	sp, #48	@ 0x30
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a42      	ldr	r2, [pc, #264]	@ (8002864 <HAL_I2C_MspInit+0x128>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d12c      	bne.n	80027b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	4b41      	ldr	r3, [pc, #260]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a40      	ldr	r2, [pc, #256]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b3e      	ldr	r3, [pc, #248]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800277a:	23c0      	movs	r3, #192	@ 0xc0
 800277c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277e:	2312      	movs	r3, #18
 8002780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800278a:	2304      	movs	r3, #4
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	4619      	mov	r1, r3
 8002794:	4835      	ldr	r0, [pc, #212]	@ (800286c <HAL_I2C_MspInit+0x130>)
 8002796:	f001 fb37 	bl	8003e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	4b32      	ldr	r3, [pc, #200]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	4a31      	ldr	r2, [pc, #196]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 80027a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80027b6:	e050      	b.n	800285a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002870 <HAL_I2C_MspInit+0x134>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d14b      	bne.n	800285a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	4b28      	ldr	r3, [pc, #160]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	4a27      	ldr	r2, [pc, #156]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d2:	4b25      	ldr	r3, [pc, #148]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b21      	ldr	r3, [pc, #132]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	4a20      	ldr	r2, [pc, #128]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002800:	2312      	movs	r3, #18
 8002802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800280c:	2304      	movs	r3, #4
 800280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	4619      	mov	r1, r3
 8002816:	4817      	ldr	r0, [pc, #92]	@ (8002874 <HAL_I2C_MspInit+0x138>)
 8002818:	f001 faf6 	bl	8003e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800281c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002822:	2312      	movs	r3, #18
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800282e:	2304      	movs	r3, #4
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	4619      	mov	r1, r3
 8002838:	480f      	ldr	r0, [pc, #60]	@ (8002878 <HAL_I2C_MspInit+0x13c>)
 800283a:	f001 fae5 	bl	8003e08 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	4a08      	ldr	r2, [pc, #32]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 8002848:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800284c:	6413      	str	r3, [r2, #64]	@ 0x40
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_I2C_MspInit+0x12c>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
}
 800285a:	bf00      	nop
 800285c:	3730      	adds	r7, #48	@ 0x30
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40005400 	.word	0x40005400
 8002868:	40023800 	.word	0x40023800
 800286c:	40020400 	.word	0x40020400
 8002870:	40005c00 	.word	0x40005c00
 8002874:	40020800 	.word	0x40020800
 8002878:	40020000 	.word	0x40020000

0800287c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a19      	ldr	r2, [pc, #100]	@ (8002900 <HAL_SPI_MspInit+0x84>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d12b      	bne.n	80028f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <HAL_SPI_MspInit+0x88>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	4a17      	ldr	r2, [pc, #92]	@ (8002904 <HAL_SPI_MspInit+0x88>)
 80028a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_SPI_MspInit+0x88>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_SPI_MspInit+0x88>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	4a10      	ldr	r2, [pc, #64]	@ (8002904 <HAL_SPI_MspInit+0x88>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <HAL_SPI_MspInit+0x88>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028d6:	23e0      	movs	r3, #224	@ 0xe0
 80028d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028e6:	2305      	movs	r3, #5
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4619      	mov	r1, r3
 80028f0:	4805      	ldr	r0, [pc, #20]	@ (8002908 <HAL_SPI_MspInit+0x8c>)
 80028f2:	f001 fa89 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028f6:	bf00      	nop
 80028f8:	3728      	adds	r7, #40	@ 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40013000 	.word	0x40013000
 8002904:	40023800 	.word	0x40023800
 8002908:	40020000 	.word	0x40020000

0800290c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	@ 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <HAL_TIM_Base_MspInit+0x158>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10e      	bne.n	800293c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
 8002922:	4b51      	ldr	r3, [pc, #324]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	4a50      	ldr	r2, [pc, #320]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6453      	str	r3, [r2, #68]	@ 0x44
 800292e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800293a:	e08e      	b.n	8002a5a <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002944:	d10e      	bne.n	8002964 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	4b47      	ldr	r3, [pc, #284]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	4a46      	ldr	r2, [pc, #280]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6413      	str	r3, [r2, #64]	@ 0x40
 8002956:	4b44      	ldr	r3, [pc, #272]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	623b      	str	r3, [r7, #32]
 8002960:	6a3b      	ldr	r3, [r7, #32]
}
 8002962:	e07a      	b.n	8002a5a <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a40      	ldr	r2, [pc, #256]	@ (8002a6c <HAL_TIM_Base_MspInit+0x160>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10e      	bne.n	800298c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	4b3d      	ldr	r3, [pc, #244]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	4a3c      	ldr	r2, [pc, #240]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	6413      	str	r3, [r2, #64]	@ 0x40
 800297e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
}
 800298a:	e066      	b.n	8002a5a <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM4)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a37      	ldr	r2, [pc, #220]	@ (8002a70 <HAL_TIM_Base_MspInit+0x164>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d116      	bne.n	80029c4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	4b33      	ldr	r3, [pc, #204]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	4a32      	ldr	r2, [pc, #200]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a6:	4b30      	ldr	r3, [pc, #192]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2101      	movs	r1, #1
 80029b6:	201e      	movs	r0, #30
 80029b8:	f001 f9ef 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029bc:	201e      	movs	r0, #30
 80029be:	f001 fa08 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
}
 80029c2:	e04a      	b.n	8002a5a <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM5)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002a74 <HAL_TIM_Base_MspInit+0x168>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	4b25      	ldr	r3, [pc, #148]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	4a24      	ldr	r2, [pc, #144]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029de:	4b22      	ldr	r3, [pc, #136]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
}
 80029ea:	e036      	b.n	8002a5a <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM6)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a21      	ldr	r2, [pc, #132]	@ (8002a78 <HAL_TIM_Base_MspInit+0x16c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d116      	bne.n	8002a24 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002a00:	f043 0310 	orr.w	r3, r3, #16
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	2036      	movs	r0, #54	@ 0x36
 8002a18:	f001 f9bf 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a1c:	2036      	movs	r0, #54	@ 0x36
 8002a1e:	f001 f9d8 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
}
 8002a22:	e01a      	b.n	8002a5a <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM7)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a14      	ldr	r2, [pc, #80]	@ (8002a7c <HAL_TIM_Base_MspInit+0x170>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d115      	bne.n	8002a5a <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	4a0c      	ldr	r2, [pc, #48]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002a38:	f043 0320 	orr.w	r3, r3, #32
 8002a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <HAL_TIM_Base_MspInit+0x15c>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	2037      	movs	r0, #55	@ 0x37
 8002a50:	f001 f9a3 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a54:	2037      	movs	r0, #55	@ 0x37
 8002a56:	f001 f9bc 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	@ 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800
 8002a74:	40000c00 	.word	0x40000c00
 8002a78:	40001000 	.word	0x40001000
 8002a7c:	40001400 	.word	0x40001400

08002a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	@ 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a37      	ldr	r2, [pc, #220]	@ (8002b7c <HAL_TIM_MspPostInit+0xfc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d11f      	bne.n	8002ae2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	4a35      	ldr	r2, [pc, #212]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002aac:	f043 0310 	orr.w	r3, r3, #16
 8002ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab2:	4b33      	ldr	r3, [pc, #204]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002abe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4619      	mov	r1, r3
 8002ada:	482a      	ldr	r0, [pc, #168]	@ (8002b84 <HAL_TIM_MspPostInit+0x104>)
 8002adc:	f001 f994 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ae0:	e047      	b.n	8002b72 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aea:	d11f      	bne.n	8002b2c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	4b23      	ldr	r3, [pc, #140]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afc:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	4818      	ldr	r0, [pc, #96]	@ (8002b88 <HAL_TIM_MspPostInit+0x108>)
 8002b26:	f001 f96f 	bl	8003e08 <HAL_GPIO_Init>
}
 8002b2a:	e022      	b.n	8002b72 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a16      	ldr	r2, [pc, #88]	@ (8002b8c <HAL_TIM_MspPostInit+0x10c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d11d      	bne.n	8002b72 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	4a10      	ldr	r2, [pc, #64]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <HAL_TIM_MspPostInit+0x100>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b52:	2301      	movs	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b62:	2302      	movs	r3, #2
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b66:	f107 0314 	add.w	r3, r7, #20
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4806      	ldr	r0, [pc, #24]	@ (8002b88 <HAL_TIM_MspPostInit+0x108>)
 8002b6e:	f001 f94b 	bl	8003e08 <HAL_GPIO_Init>
}
 8002b72:	bf00      	nop
 8002b74:	3728      	adds	r7, #40	@ 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40000400 	.word	0x40000400

08002b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	@ 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <HAL_UART_MspInit+0x84>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d12b      	bne.n	8002c0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <HAL_UART_MspInit+0x88>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	4a17      	ldr	r2, [pc, #92]	@ (8002c18 <HAL_UART_MspInit+0x88>)
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_UART_MspInit+0x88>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_UART_MspInit+0x88>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a10      	ldr	r2, [pc, #64]	@ (8002c18 <HAL_UART_MspInit+0x88>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bde:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <HAL_UART_MspInit+0x88>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bea:	230c      	movs	r3, #12
 8002bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4619      	mov	r1, r3
 8002c04:	4805      	ldr	r0, [pc, #20]	@ (8002c1c <HAL_UART_MspInit+0x8c>)
 8002c06:	f001 f8ff 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c0a:	bf00      	nop
 8002c0c:	3728      	adds	r7, #40	@ 0x28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40004400 	.word	0x40004400
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000

08002c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <NMI_Handler+0x4>

08002c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <HardFault_Handler+0x4>

08002c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <MemManage_Handler+0x4>

08002c38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <BusFault_Handler+0x4>

08002c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <UsageFault_Handler+0x4>

08002c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c76:	f000 f8d9 	bl	8002e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c84:	4802      	ldr	r0, [pc, #8]	@ (8002c90 <CAN1_RX0_IRQHandler+0x10>)
 8002c86:	f000 fda5 	bl	80037d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000068 	.word	0x20000068

08002c94 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c98:	4802      	ldr	r0, [pc, #8]	@ (8002ca4 <CAN1_RX1_IRQHandler+0x10>)
 8002c9a:	f000 fd9b 	bl	80037d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000068 	.word	0x20000068

08002ca8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_Pin);
 8002cac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002cb0:	f001 fa8a 	bl	80041c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_Pin);
 8002cb4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002cb8:	f001 fa86 	bl	80041c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  // HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cc4:	4803      	ldr	r0, [pc, #12]	@ (8002cd4 <TIM4_IRQHandler+0x14>)
 8002cc6:	f002 fe87 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  timer50ms_flag = 1;
 8002cca:	4b03      	ldr	r3, [pc, #12]	@ (8002cd8 <TIM4_IRQHandler+0x18>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000268 	.word	0x20000268
 8002cd8:	20000461 	.word	0x20000461

08002cdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ce0:	4803      	ldr	r0, [pc, #12]	@ (8002cf0 <TIM6_DAC_IRQHandler+0x14>)
 8002ce2:	f002 fe79 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  better_step_function(); //s'active au 200us
 8002ce6:	f7ff fb7d 	bl	80023e4 <better_step_function>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200002f8 	.word	0x200002f8

08002cf4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002cf8:	4803      	ldr	r0, [pc, #12]	@ (8002d08 <TIM7_IRQHandler+0x14>)
 8002cfa:	f002 fe6d 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  b_timer250ms_flag = 1;
 8002cfe:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <TIM7_IRQHandler+0x18>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000340 	.word	0x20000340
 8002d0c:	200003d0 	.word	0x200003d0

08002d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d14:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <SystemInit+0x20>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1a:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <SystemInit+0x20>)
 8002d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d38:	480d      	ldr	r0, [pc, #52]	@ (8002d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d3a:	490e      	ldr	r1, [pc, #56]	@ (8002d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d40:	e002      	b.n	8002d48 <LoopCopyDataInit>

08002d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d46:	3304      	adds	r3, #4

08002d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d4c:	d3f9      	bcc.n	8002d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d50:	4c0b      	ldr	r4, [pc, #44]	@ (8002d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d54:	e001      	b.n	8002d5a <LoopFillZerobss>

08002d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d58:	3204      	adds	r2, #4

08002d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d5c:	d3fb      	bcc.n	8002d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d5e:	f7ff ffd7 	bl	8002d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d62:	f003 ffb9 	bl	8006cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d66:	f7fe f901 	bl	8000f6c <main>
  bx  lr    
 8002d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d74:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002d78:	08006d60 	.word	0x08006d60
  ldr r2, =_sbss
 8002d7c:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8002d80:	200004d8 	.word	0x200004d8

08002d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d84:	e7fe      	b.n	8002d84 <ADC_IRQHandler>
	...

08002d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc8 <HAL_Init+0x40>)
 8002d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <HAL_Init+0x40>)
 8002d9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da4:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a07      	ldr	r2, [pc, #28]	@ (8002dc8 <HAL_Init+0x40>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db0:	2003      	movs	r0, #3
 8002db2:	f000 ffe7 	bl	8003d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002db6:	200f      	movs	r0, #15
 8002db8:	f000 f808 	bl	8002dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dbc:	f7ff fc1c 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00

08002dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd4:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <HAL_InitTick+0x54>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <HAL_InitTick+0x58>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 ffff 	bl	8003dee <HAL_SYSTICK_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00e      	b.n	8002e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d80a      	bhi.n	8002e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e00:	2200      	movs	r2, #0
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	f000 ffc7 	bl	8003d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e0c:	4a06      	ldr	r2, [pc, #24]	@ (8002e28 <HAL_InitTick+0x5c>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000040 	.word	0x20000040
 8002e24:	20000048 	.word	0x20000048
 8002e28:	20000044 	.word	0x20000044

08002e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e30:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <HAL_IncTick+0x20>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_IncTick+0x24>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a04      	ldr	r2, [pc, #16]	@ (8002e50 <HAL_IncTick+0x24>)
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000048 	.word	0x20000048
 8002e50:	200004d4 	.word	0x200004d4

08002e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return uwTick;
 8002e58:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <HAL_GetTick+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	200004d4 	.word	0x200004d4

08002e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff ffee 	bl	8002e54 <HAL_GetTick>
 8002e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d005      	beq.n	8002e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <HAL_Delay+0x44>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e92:	bf00      	nop
 8002e94:	f7ff ffde 	bl	8002e54 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d8f7      	bhi.n	8002e94 <HAL_Delay+0x28>
  {
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000048 	.word	0x20000048

08002eb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0ed      	b.n	80030a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff fbda 	bl	800268c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee8:	f7ff ffb4 	bl	8002e54 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eee:	e012      	b.n	8002f16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ef0:	f7ff ffb0 	bl	8002e54 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b0a      	cmp	r3, #10
 8002efc:	d90b      	bls.n	8002f16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0c5      	b.n	80030a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0e5      	beq.n	8002ef0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0202 	bic.w	r2, r2, #2
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f34:	f7ff ff8e 	bl	8002e54 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f3a:	e012      	b.n	8002f62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f3c:	f7ff ff8a 	bl	8002e54 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b0a      	cmp	r3, #10
 8002f48:	d90b      	bls.n	8002f62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2205      	movs	r2, #5
 8002f5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e09f      	b.n	80030a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7e1b      	ldrb	r3, [r3, #24]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d108      	bne.n	8002f8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e007      	b.n	8002f9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	7e5b      	ldrb	r3, [r3, #25]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d108      	bne.n	8002fb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e007      	b.n	8002fc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7e9b      	ldrb	r3, [r3, #26]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d108      	bne.n	8002fde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0220 	orr.w	r2, r2, #32
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e007      	b.n	8002fee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0220 	bic.w	r2, r2, #32
 8002fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7edb      	ldrb	r3, [r3, #27]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d108      	bne.n	8003008 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0210 	bic.w	r2, r2, #16
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e007      	b.n	8003018 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0210 	orr.w	r2, r2, #16
 8003016:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7f1b      	ldrb	r3, [r3, #28]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d108      	bne.n	8003032 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0208 	orr.w	r2, r2, #8
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e007      	b.n	8003042 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0208 	bic.w	r2, r2, #8
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7f5b      	ldrb	r3, [r3, #29]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d108      	bne.n	800305c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0204 	orr.w	r2, r2, #4
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e007      	b.n	800306c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0204 	bic.w	r2, r2, #4
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	ea42 0103 	orr.w	r1, r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	1e5a      	subs	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d003      	beq.n	80030d2 <HAL_CAN_ConfigFilter+0x26>
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	f040 80be 	bne.w	800324e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80030d2:	4b65      	ldr	r3, [pc, #404]	@ (8003268 <HAL_CAN_ConfigFilter+0x1bc>)
 80030d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80030ec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	431a      	orrs	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2201      	movs	r2, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	43db      	mvns	r3, r3
 8003124:	401a      	ands	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d123      	bne.n	800317c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003156:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3248      	adds	r2, #72	@ 0x48
 800315c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003170:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003172:	6979      	ldr	r1, [r7, #20]
 8003174:	3348      	adds	r3, #72	@ 0x48
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d122      	bne.n	80031ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	431a      	orrs	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3248      	adds	r2, #72	@ 0x48
 80031aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031c0:	6979      	ldr	r1, [r7, #20]
 80031c2:	3348      	adds	r3, #72	@ 0x48
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	440b      	add	r3, r1
 80031c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	43db      	mvns	r3, r3
 80031dc:	401a      	ands	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80031e4:	e007      	b.n	80031f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43db      	mvns	r3, r3
 8003208:	401a      	ands	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003210:	e007      	b.n	8003222 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	431a      	orrs	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	431a      	orrs	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003240:	f023 0201 	bic.w	r2, r3, #1
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e006      	b.n	800325c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
  }
}
 800325c:	4618      	mov	r0, r3
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40006400 	.word	0x40006400

0800326c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d12e      	bne.n	80032de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003298:	f7ff fddc 	bl	8002e54 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800329e:	e012      	b.n	80032c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032a0:	f7ff fdd8 	bl	8002e54 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b0a      	cmp	r3, #10
 80032ac:	d90b      	bls.n	80032c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2205      	movs	r2, #5
 80032be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e012      	b.n	80032ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e5      	bne.n	80032a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e006      	b.n	80032ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
  }
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	@ 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003308:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003312:	7ffb      	ldrb	r3, [r7, #31]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d003      	beq.n	8003320 <HAL_CAN_AddTxMessage+0x2c>
 8003318:	7ffb      	ldrb	r3, [r7, #31]
 800331a:	2b02      	cmp	r3, #2
 800331c:	f040 80b8 	bne.w	8003490 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80a0 	beq.w	8003480 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	0e1b      	lsrs	r3, r3, #24
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d907      	bls.n	8003360 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e09e      	b.n	800349e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003360:	2201      	movs	r2, #1
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	409a      	lsls	r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800337c:	68f9      	ldr	r1, [r7, #12]
 800337e:	6809      	ldr	r1, [r1, #0]
 8003380:	431a      	orrs	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3318      	adds	r3, #24
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	440b      	add	r3, r1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e00f      	b.n	80033ae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003398:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3318      	adds	r3, #24
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	440b      	add	r3, r1
 80033ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3318      	adds	r3, #24
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	440b      	add	r3, r1
 80033be:	3304      	adds	r3, #4
 80033c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	7d1b      	ldrb	r3, [r3, #20]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d111      	bne.n	80033ee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3318      	adds	r3, #24
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6811      	ldr	r1, [r2, #0]
 80033de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3318      	adds	r3, #24
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	440b      	add	r3, r1
 80033ea:	3304      	adds	r3, #4
 80033ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3307      	adds	r3, #7
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	061a      	lsls	r2, r3, #24
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3306      	adds	r3, #6
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3305      	adds	r3, #5
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	4313      	orrs	r3, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	3204      	adds	r2, #4
 800340e:	7812      	ldrb	r2, [r2, #0]
 8003410:	4610      	mov	r0, r2
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	6811      	ldr	r1, [r2, #0]
 8003416:	ea43 0200 	orr.w	r2, r3, r0
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	440b      	add	r3, r1
 8003420:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003424:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3303      	adds	r3, #3
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	061a      	lsls	r2, r3, #24
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3302      	adds	r3, #2
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3301      	adds	r3, #1
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	4313      	orrs	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	4610      	mov	r0, r2
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	6811      	ldr	r1, [r2, #0]
 800344c:	ea43 0200 	orr.w	r2, r3, r0
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	440b      	add	r3, r1
 8003456:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800345a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3318      	adds	r3, #24
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	4413      	add	r3, r2
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6811      	ldr	r1, [r2, #0]
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3318      	adds	r3, #24
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	440b      	add	r3, r1
 800347a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e00e      	b.n	800349e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e006      	b.n	800349e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3724      	adds	r7, #36	@ 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034bc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80034be:	7afb      	ldrb	r3, [r7, #11]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d11d      	bne.n	8003506 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3301      	adds	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003506:	68fb      	ldr	r3, [r7, #12]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003528:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d003      	beq.n	8003538 <HAL_CAN_GetRxMessage+0x24>
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2b02      	cmp	r3, #2
 8003534:	f040 80f3 	bne.w	800371e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10e      	bne.n	800355c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d116      	bne.n	800357a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0e7      	b.n	800372c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0d8      	b.n	800372c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	331b      	adds	r3, #27
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0204 	and.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10c      	bne.n	80035b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	331b      	adds	r3, #27
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	4413      	add	r3, r2
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	0d5b      	lsrs	r3, r3, #21
 80035a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e00b      	b.n	80035ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	331b      	adds	r3, #27
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	4413      	add	r3, r2
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	08db      	lsrs	r3, r3, #3
 80035c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	331b      	adds	r3, #27
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4413      	add	r3, r2
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0202 	and.w	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	331b      	adds	r3, #27
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 020f 	and.w	r2, r3, #15
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	331b      	adds	r3, #27
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	4413      	add	r3, r2
 8003604:	3304      	adds	r3, #4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	b2da      	uxtb	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	331b      	adds	r3, #27
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	4413      	add	r3, r2
 800361c:	3304      	adds	r3, #4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	4413      	add	r3, r2
 8003632:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	4413      	add	r3, r2
 8003648:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0a1a      	lsrs	r2, r3, #8
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	4413      	add	r3, r2
 8003662:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0c1a      	lsrs	r2, r3, #16
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	3302      	adds	r3, #2
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	4413      	add	r3, r2
 800367c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	0e1a      	lsrs	r2, r3, #24
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	3303      	adds	r3, #3
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4413      	add	r3, r2
 8003696:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	3304      	adds	r3, #4
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0a1a      	lsrs	r2, r3, #8
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	3305      	adds	r3, #5
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	0c1a      	lsrs	r2, r3, #16
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	3306      	adds	r3, #6
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	0e1a      	lsrs	r2, r3, #24
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	3307      	adds	r3, #7
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d108      	bne.n	800370a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0220 	orr.w	r2, r2, #32
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	e007      	b.n	800371a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0220 	orr.w	r2, r2, #32
 8003718:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e006      	b.n	800372c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800374e:	7afb      	ldrb	r3, [r7, #11]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d002      	beq.n	800375a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003754:	7afb      	ldrb	r3, [r7, #11]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d10f      	bne.n	800377a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e005      	b.n	800377a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800377a:	68fb      	ldr	r3, [r7, #12]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003798:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d002      	beq.n	80037a6 <HAL_CAN_ActivateNotification+0x1e>
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d109      	bne.n	80037ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6959      	ldr	r1, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e006      	b.n	80037c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	@ 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d07c      	beq.n	8003914 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d023      	beq.n	800386c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f983 	bl	8003b42 <HAL_CAN_TxMailbox0CompleteCallback>
 800383c:	e016      	b.n	800386c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003850:	e00c      	b.n	800386c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
 8003864:	e002      	b.n	800386c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f989 	bl	8003b7e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d024      	beq.n	80038c0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800387e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f963 	bl	8003b56 <HAL_CAN_TxMailbox1CompleteCallback>
 8003890:	e016      	b.n	80038c0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d004      	beq.n	80038a6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a4:	e00c      	b.n	80038c0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b8:	e002      	b.n	80038c0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f969 	bl	8003b92 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d024      	beq.n	8003914 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f943 	bl	8003b6a <HAL_CAN_TxMailbox2CompleteCallback>
 80038e4:	e016      	b.n	8003914 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f8:	e00c      	b.n	8003914 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
 800390c:	e002      	b.n	8003914 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f949 	bl	8003ba6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2210      	movs	r2, #16
 8003936:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2208      	movs	r2, #8
 8003952:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd fa7f 	bl	8000e58 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d009      	beq.n	8003978 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd fa4c 	bl	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00c      	beq.n	800399c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2210      	movs	r2, #16
 800399a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2208      	movs	r2, #8
 80039b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fd fa57 	bl	8000e6c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d009      	beq.n	80039dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fd fa2c 	bl	8000e34 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d006      	beq.n	80039fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2210      	movs	r2, #16
 80039f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f8de 	bl	8003bba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00b      	beq.n	8003a20 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2208      	movs	r2, #8
 8003a18:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f8d7 	bl	8003bce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d07b      	beq.n	8003b22 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d072      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d043      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d03e      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aa2:	2b60      	cmp	r3, #96	@ 0x60
 8003aa4:	d02b      	beq.n	8003afe <HAL_CAN_IRQHandler+0x32a>
 8003aa6:	2b60      	cmp	r3, #96	@ 0x60
 8003aa8:	d82e      	bhi.n	8003b08 <HAL_CAN_IRQHandler+0x334>
 8003aaa:	2b50      	cmp	r3, #80	@ 0x50
 8003aac:	d022      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x320>
 8003aae:	2b50      	cmp	r3, #80	@ 0x50
 8003ab0:	d82a      	bhi.n	8003b08 <HAL_CAN_IRQHandler+0x334>
 8003ab2:	2b40      	cmp	r3, #64	@ 0x40
 8003ab4:	d019      	beq.n	8003aea <HAL_CAN_IRQHandler+0x316>
 8003ab6:	2b40      	cmp	r3, #64	@ 0x40
 8003ab8:	d826      	bhi.n	8003b08 <HAL_CAN_IRQHandler+0x334>
 8003aba:	2b30      	cmp	r3, #48	@ 0x30
 8003abc:	d010      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x30c>
 8003abe:	2b30      	cmp	r3, #48	@ 0x30
 8003ac0:	d822      	bhi.n	8003b08 <HAL_CAN_IRQHandler+0x334>
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d002      	beq.n	8003acc <HAL_CAN_IRQHandler+0x2f8>
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d005      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003aca:	e01d      	b.n	8003b08 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	f043 0308 	orr.w	r3, r3, #8
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ad4:	e019      	b.n	8003b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	f043 0310 	orr.w	r3, r3, #16
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ade:	e014      	b.n	8003b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	f043 0320 	orr.w	r3, r3, #32
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ae8:	e00f      	b.n	8003b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003af2:	e00a      	b.n	8003b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003afc:	e005      	b.n	8003b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b06:	e000      	b.n	8003b0a <HAL_CAN_IRQHandler+0x336>
            break;
 8003b08:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b18:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fd f9a3 	bl	8000e80 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	3728      	adds	r7, #40	@ 0x28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c28 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c00:	4013      	ands	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c16:	4a04      	ldr	r2, [pc, #16]	@ (8003c28 <__NVIC_SetPriorityGrouping+0x44>)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	60d3      	str	r3, [r2, #12]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c30:	4b04      	ldr	r3, [pc, #16]	@ (8003c44 <__NVIC_GetPriorityGrouping+0x18>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	f003 0307 	and.w	r3, r3, #7
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	db0b      	blt.n	8003c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	f003 021f 	and.w	r2, r3, #31
 8003c60:	4907      	ldr	r1, [pc, #28]	@ (8003c80 <__NVIC_EnableIRQ+0x38>)
 8003c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2001      	movs	r0, #1
 8003c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000e100 	.word	0xe000e100

08003c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	6039      	str	r1, [r7, #0]
 8003c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	db0a      	blt.n	8003cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	490c      	ldr	r1, [pc, #48]	@ (8003cd0 <__NVIC_SetPriority+0x4c>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	0112      	lsls	r2, r2, #4
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cac:	e00a      	b.n	8003cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4908      	ldr	r1, [pc, #32]	@ (8003cd4 <__NVIC_SetPriority+0x50>)
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	3b04      	subs	r3, #4
 8003cbc:	0112      	lsls	r2, r2, #4
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	761a      	strb	r2, [r3, #24]
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000e100 	.word	0xe000e100
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b089      	sub	sp, #36	@ 0x24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f1c3 0307 	rsb	r3, r3, #7
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	bf28      	it	cs
 8003cf6:	2304      	movcs	r3, #4
 8003cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d902      	bls.n	8003d08 <NVIC_EncodePriority+0x30>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3b03      	subs	r3, #3
 8003d06:	e000      	b.n	8003d0a <NVIC_EncodePriority+0x32>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d20:	f04f 31ff 	mov.w	r1, #4294967295
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2a:	43d9      	mvns	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d30:	4313      	orrs	r3, r2
         );
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3724      	adds	r7, #36	@ 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d50:	d301      	bcc.n	8003d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00f      	b.n	8003d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d56:	4a0a      	ldr	r2, [pc, #40]	@ (8003d80 <SysTick_Config+0x40>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d5e:	210f      	movs	r1, #15
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	f7ff ff8e 	bl	8003c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d68:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <SysTick_Config+0x40>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6e:	4b04      	ldr	r3, [pc, #16]	@ (8003d80 <SysTick_Config+0x40>)
 8003d70:	2207      	movs	r2, #7
 8003d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	e000e010 	.word	0xe000e010

08003d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff29 	bl	8003be4 <__NVIC_SetPriorityGrouping>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b086      	sub	sp, #24
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	4603      	mov	r3, r0
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dac:	f7ff ff3e 	bl	8003c2c <__NVIC_GetPriorityGrouping>
 8003db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f7ff ff8e 	bl	8003cd8 <NVIC_EncodePriority>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff5d 	bl	8003c84 <__NVIC_SetPriority>
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff31 	bl	8003c48 <__NVIC_EnableIRQ>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ffa2 	bl	8003d40 <SysTick_Config>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	@ 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	e165      	b.n	80040f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e24:	2201      	movs	r2, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4013      	ands	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	f040 8154 	bne.w	80040ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d005      	beq.n	8003e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d130      	bne.n	8003ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	2203      	movs	r2, #3
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 0201 	and.w	r2, r3, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d017      	beq.n	8003ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d123      	bne.n	8003f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	08da      	lsrs	r2, r3, #3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3208      	adds	r2, #8
 8003f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	08da      	lsrs	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3208      	adds	r2, #8
 8003f46:	69b9      	ldr	r1, [r7, #24]
 8003f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0203 	and.w	r2, r3, #3
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80ae 	beq.w	80040ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b5d      	ldr	r3, [pc, #372]	@ (8004108 <HAL_GPIO_Init+0x300>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	4a5c      	ldr	r2, [pc, #368]	@ (8004108 <HAL_GPIO_Init+0x300>)
 8003f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f9e:	4b5a      	ldr	r3, [pc, #360]	@ (8004108 <HAL_GPIO_Init+0x300>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003faa:	4a58      	ldr	r2, [pc, #352]	@ (800410c <HAL_GPIO_Init+0x304>)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	089b      	lsrs	r3, r3, #2
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4f      	ldr	r2, [pc, #316]	@ (8004110 <HAL_GPIO_Init+0x308>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d025      	beq.n	8004022 <HAL_GPIO_Init+0x21a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4e      	ldr	r2, [pc, #312]	@ (8004114 <HAL_GPIO_Init+0x30c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01f      	beq.n	800401e <HAL_GPIO_Init+0x216>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8004118 <HAL_GPIO_Init+0x310>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d019      	beq.n	800401a <HAL_GPIO_Init+0x212>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4c      	ldr	r2, [pc, #304]	@ (800411c <HAL_GPIO_Init+0x314>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_GPIO_Init+0x20e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8004120 <HAL_GPIO_Init+0x318>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00d      	beq.n	8004012 <HAL_GPIO_Init+0x20a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8004124 <HAL_GPIO_Init+0x31c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d007      	beq.n	800400e <HAL_GPIO_Init+0x206>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a49      	ldr	r2, [pc, #292]	@ (8004128 <HAL_GPIO_Init+0x320>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <HAL_GPIO_Init+0x202>
 8004006:	2306      	movs	r3, #6
 8004008:	e00c      	b.n	8004024 <HAL_GPIO_Init+0x21c>
 800400a:	2307      	movs	r3, #7
 800400c:	e00a      	b.n	8004024 <HAL_GPIO_Init+0x21c>
 800400e:	2305      	movs	r3, #5
 8004010:	e008      	b.n	8004024 <HAL_GPIO_Init+0x21c>
 8004012:	2304      	movs	r3, #4
 8004014:	e006      	b.n	8004024 <HAL_GPIO_Init+0x21c>
 8004016:	2303      	movs	r3, #3
 8004018:	e004      	b.n	8004024 <HAL_GPIO_Init+0x21c>
 800401a:	2302      	movs	r3, #2
 800401c:	e002      	b.n	8004024 <HAL_GPIO_Init+0x21c>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_GPIO_Init+0x21c>
 8004022:	2300      	movs	r3, #0
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	f002 0203 	and.w	r2, r2, #3
 800402a:	0092      	lsls	r2, r2, #2
 800402c:	4093      	lsls	r3, r2
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004034:	4935      	ldr	r1, [pc, #212]	@ (800410c <HAL_GPIO_Init+0x304>)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	3302      	adds	r3, #2
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004042:	4b3a      	ldr	r3, [pc, #232]	@ (800412c <HAL_GPIO_Init+0x324>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004066:	4a31      	ldr	r2, [pc, #196]	@ (800412c <HAL_GPIO_Init+0x324>)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800406c:	4b2f      	ldr	r3, [pc, #188]	@ (800412c <HAL_GPIO_Init+0x324>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004090:	4a26      	ldr	r2, [pc, #152]	@ (800412c <HAL_GPIO_Init+0x324>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004096:	4b25      	ldr	r3, [pc, #148]	@ (800412c <HAL_GPIO_Init+0x324>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ba:	4a1c      	ldr	r2, [pc, #112]	@ (800412c <HAL_GPIO_Init+0x324>)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040c0:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <HAL_GPIO_Init+0x324>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040e4:	4a11      	ldr	r2, [pc, #68]	@ (800412c <HAL_GPIO_Init+0x324>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3301      	adds	r3, #1
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	f67f ae96 	bls.w	8003e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3724      	adds	r7, #36	@ 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	40013800 	.word	0x40013800
 8004110:	40020000 	.word	0x40020000
 8004114:	40020400 	.word	0x40020400
 8004118:	40020800 	.word	0x40020800
 800411c:	40020c00 	.word	0x40020c00
 8004120:	40021000 	.word	0x40021000
 8004124:	40021400 	.word	0x40021400
 8004128:	40021800 	.word	0x40021800
 800412c:	40013c00 	.word	0x40013c00

08004130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	887b      	ldrh	r3, [r7, #2]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
 800414c:	e001      	b.n	8004152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
 800416c:	4613      	mov	r3, r2
 800416e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004170:	787b      	ldrb	r3, [r7, #1]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800417c:	e003      	b.n	8004186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800417e:	887b      	ldrh	r3, [r7, #2]
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	619a      	str	r2, [r3, #24]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4013      	ands	r3, r2
 80041aa:	041a      	lsls	r2, r3, #16
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	43d9      	mvns	r1, r3
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	400b      	ands	r3, r1
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	619a      	str	r2, [r3, #24]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041d2:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041de:	4a05      	ldr	r2, [pc, #20]	@ (80041f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd fc08 	bl	80019fc <HAL_GPIO_EXTI_Callback>
  }
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40013c00 	.word	0x40013c00

080041f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e12b      	b.n	8004462 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fe fa8c 	bl	800273c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2224      	movs	r2, #36	@ 0x24
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800424a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800425a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800425c:	f000 fa02 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 8004260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4a81      	ldr	r2, [pc, #516]	@ (800446c <HAL_I2C_Init+0x274>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d807      	bhi.n	800427c <HAL_I2C_Init+0x84>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a80      	ldr	r2, [pc, #512]	@ (8004470 <HAL_I2C_Init+0x278>)
 8004270:	4293      	cmp	r3, r2
 8004272:	bf94      	ite	ls
 8004274:	2301      	movls	r3, #1
 8004276:	2300      	movhi	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e006      	b.n	800428a <HAL_I2C_Init+0x92>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a7d      	ldr	r2, [pc, #500]	@ (8004474 <HAL_I2C_Init+0x27c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	bf94      	ite	ls
 8004284:	2301      	movls	r3, #1
 8004286:	2300      	movhi	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0e7      	b.n	8004462 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a78      	ldr	r2, [pc, #480]	@ (8004478 <HAL_I2C_Init+0x280>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0c9b      	lsrs	r3, r3, #18
 800429c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a6a      	ldr	r2, [pc, #424]	@ (800446c <HAL_I2C_Init+0x274>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d802      	bhi.n	80042cc <HAL_I2C_Init+0xd4>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	3301      	adds	r3, #1
 80042ca:	e009      	b.n	80042e0 <HAL_I2C_Init+0xe8>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	4a69      	ldr	r2, [pc, #420]	@ (800447c <HAL_I2C_Init+0x284>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	3301      	adds	r3, #1
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	495c      	ldr	r1, [pc, #368]	@ (800446c <HAL_I2C_Init+0x274>)
 80042fc:	428b      	cmp	r3, r1
 80042fe:	d819      	bhi.n	8004334 <HAL_I2C_Init+0x13c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1e59      	subs	r1, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fbb1 f3f3 	udiv	r3, r1, r3
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004314:	400b      	ands	r3, r1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_I2C_Init+0x138>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1e59      	subs	r1, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	fbb1 f3f3 	udiv	r3, r1, r3
 8004328:	3301      	adds	r3, #1
 800432a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432e:	e051      	b.n	80043d4 <HAL_I2C_Init+0x1dc>
 8004330:	2304      	movs	r3, #4
 8004332:	e04f      	b.n	80043d4 <HAL_I2C_Init+0x1dc>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d111      	bne.n	8004360 <HAL_I2C_Init+0x168>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1e58      	subs	r0, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	440b      	add	r3, r1
 800434a:	fbb0 f3f3 	udiv	r3, r0, r3
 800434e:	3301      	adds	r3, #1
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e012      	b.n	8004386 <HAL_I2C_Init+0x18e>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1e58      	subs	r0, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6859      	ldr	r1, [r3, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	0099      	lsls	r1, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	fbb0 f3f3 	udiv	r3, r0, r3
 8004376:	3301      	adds	r3, #1
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Init+0x196>
 800438a:	2301      	movs	r3, #1
 800438c:	e022      	b.n	80043d4 <HAL_I2C_Init+0x1dc>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10e      	bne.n	80043b4 <HAL_I2C_Init+0x1bc>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1e58      	subs	r0, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	460b      	mov	r3, r1
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	440b      	add	r3, r1
 80043a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a8:	3301      	adds	r3, #1
 80043aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b2:	e00f      	b.n	80043d4 <HAL_I2C_Init+0x1dc>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1e58      	subs	r0, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	0099      	lsls	r1, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ca:	3301      	adds	r3, #1
 80043cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	6809      	ldr	r1, [r1, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004402:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6911      	ldr	r1, [r2, #16]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68d2      	ldr	r2, [r2, #12]
 800440e:	4311      	orrs	r1, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	000186a0 	.word	0x000186a0
 8004470:	001e847f 	.word	0x001e847f
 8004474:	003d08ff 	.word	0x003d08ff
 8004478:	431bde83 	.word	0x431bde83
 800447c:	10624dd3 	.word	0x10624dd3

08004480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0cc      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004494:	4b68      	ldr	r3, [pc, #416]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d90c      	bls.n	80044bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a2:	4b65      	ldr	r3, [pc, #404]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044aa:	4b63      	ldr	r3, [pc, #396]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0b8      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d4:	4b59      	ldr	r3, [pc, #356]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a58      	ldr	r2, [pc, #352]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044ec:	4b53      	ldr	r3, [pc, #332]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4a52      	ldr	r2, [pc, #328]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f8:	4b50      	ldr	r3, [pc, #320]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	494d      	ldr	r1, [pc, #308]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d044      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d107      	bne.n	800452e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	4b47      	ldr	r3, [pc, #284]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d119      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e07f      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d003      	beq.n	800453e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800453a:	2b03      	cmp	r3, #3
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453e:	4b3f      	ldr	r3, [pc, #252]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e06f      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454e:	4b3b      	ldr	r3, [pc, #236]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e067      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800455e:	4b37      	ldr	r3, [pc, #220]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f023 0203 	bic.w	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4934      	ldr	r1, [pc, #208]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	4313      	orrs	r3, r2
 800456e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004570:	f7fe fc70 	bl	8002e54 <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	e00a      	b.n	800458e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004578:	f7fe fc6c 	bl	8002e54 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e04f      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	4b2b      	ldr	r3, [pc, #172]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 020c 	and.w	r2, r3, #12
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	429a      	cmp	r2, r3
 800459e:	d1eb      	bne.n	8004578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045a0:	4b25      	ldr	r3, [pc, #148]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d20c      	bcs.n	80045c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b22      	ldr	r3, [pc, #136]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b6:	4b20      	ldr	r3, [pc, #128]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e032      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d4:	4b19      	ldr	r3, [pc, #100]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4916      	ldr	r1, [pc, #88]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f2:	4b12      	ldr	r3, [pc, #72]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	490e      	ldr	r1, [pc, #56]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004606:	f000 f855 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 800460a:	4602      	mov	r2, r0
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	490a      	ldr	r1, [pc, #40]	@ (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 8004618:	5ccb      	ldrb	r3, [r1, r3]
 800461a:	fa22 f303 	lsr.w	r3, r2, r3
 800461e:	4a09      	ldr	r2, [pc, #36]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004622:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fbd0 	bl	8002dcc <HAL_InitTick>

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40023c00 	.word	0x40023c00
 800463c:	40023800 	.word	0x40023800
 8004640:	08006d38 	.word	0x08006d38
 8004644:	20000040 	.word	0x20000040
 8004648:	20000044 	.word	0x20000044

0800464c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004650:	4b03      	ldr	r3, [pc, #12]	@ (8004660 <HAL_RCC_GetHCLKFreq+0x14>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000040 	.word	0x20000040

08004664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004668:	f7ff fff0 	bl	800464c <HAL_RCC_GetHCLKFreq>
 800466c:	4602      	mov	r2, r0
 800466e:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	0a9b      	lsrs	r3, r3, #10
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	4903      	ldr	r1, [pc, #12]	@ (8004688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800467a:	5ccb      	ldrb	r3, [r1, r3]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	08006d48 	.word	0x08006d48

0800468c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004690:	f7ff ffdc 	bl	800464c <HAL_RCC_GetHCLKFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	0b5b      	lsrs	r3, r3, #13
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4903      	ldr	r1, [pc, #12]	@ (80046b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40023800 	.word	0x40023800
 80046b0:	08006d48 	.word	0x08006d48

080046b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b8:	b0a6      	sub	sp, #152	@ 0x98
 80046ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046da:	4bc8      	ldr	r3, [pc, #800]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	f200 817e 	bhi.w	80049e4 <HAL_RCC_GetSysClockFreq+0x330>
 80046e8:	a201      	add	r2, pc, #4	@ (adr r2, 80046f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004725 	.word	0x08004725
 80046f4:	080049e5 	.word	0x080049e5
 80046f8:	080049e5 	.word	0x080049e5
 80046fc:	080049e5 	.word	0x080049e5
 8004700:	0800472d 	.word	0x0800472d
 8004704:	080049e5 	.word	0x080049e5
 8004708:	080049e5 	.word	0x080049e5
 800470c:	080049e5 	.word	0x080049e5
 8004710:	08004735 	.word	0x08004735
 8004714:	080049e5 	.word	0x080049e5
 8004718:	080049e5 	.word	0x080049e5
 800471c:	080049e5 	.word	0x080049e5
 8004720:	0800489f 	.word	0x0800489f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4bb6      	ldr	r3, [pc, #728]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 800472a:	e15f      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472c:	4bb5      	ldr	r3, [pc, #724]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x350>)
 800472e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004732:	e15b      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004734:	4bb1      	ldr	r3, [pc, #708]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800473c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004740:	4bae      	ldr	r3, [pc, #696]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d031      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474c:	4bab      	ldr	r3, [pc, #684]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	099b      	lsrs	r3, r3, #6
 8004752:	2200      	movs	r2, #0
 8004754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004756:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004760:	2300      	movs	r3, #0
 8004762:	667b      	str	r3, [r7, #100]	@ 0x64
 8004764:	4ba7      	ldr	r3, [pc, #668]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x350>)
 8004766:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800476a:	462a      	mov	r2, r5
 800476c:	fb03 f202 	mul.w	r2, r3, r2
 8004770:	2300      	movs	r3, #0
 8004772:	4621      	mov	r1, r4
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	4413      	add	r3, r2
 800477a:	4aa2      	ldr	r2, [pc, #648]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x350>)
 800477c:	4621      	mov	r1, r4
 800477e:	fba1 1202 	umull	r1, r2, r1, r2
 8004782:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004784:	460a      	mov	r2, r1
 8004786:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004788:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800478a:	4413      	add	r3, r2
 800478c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800478e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004792:	2200      	movs	r2, #0
 8004794:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004796:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004798:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800479c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80047a0:	f7fb fd30 	bl	8000204 <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4613      	mov	r3, r2
 80047aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047ae:	e064      	b.n	800487a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b0:	4b92      	ldr	r3, [pc, #584]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	099b      	lsrs	r3, r3, #6
 80047b6:	2200      	movs	r2, #0
 80047b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80047bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047c4:	2300      	movs	r3, #0
 80047c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80047cc:	4622      	mov	r2, r4
 80047ce:	462b      	mov	r3, r5
 80047d0:	f04f 0000 	mov.w	r0, #0
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	0159      	lsls	r1, r3, #5
 80047da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047de:	0150      	lsls	r0, r2, #5
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4621      	mov	r1, r4
 80047e6:	1a51      	subs	r1, r2, r1
 80047e8:	6139      	str	r1, [r7, #16]
 80047ea:	4629      	mov	r1, r5
 80047ec:	eb63 0301 	sbc.w	r3, r3, r1
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047fe:	4659      	mov	r1, fp
 8004800:	018b      	lsls	r3, r1, #6
 8004802:	4651      	mov	r1, sl
 8004804:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004808:	4651      	mov	r1, sl
 800480a:	018a      	lsls	r2, r1, #6
 800480c:	4651      	mov	r1, sl
 800480e:	ebb2 0801 	subs.w	r8, r2, r1
 8004812:	4659      	mov	r1, fp
 8004814:	eb63 0901 	sbc.w	r9, r3, r1
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004824:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004828:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800482c:	4690      	mov	r8, r2
 800482e:	4699      	mov	r9, r3
 8004830:	4623      	mov	r3, r4
 8004832:	eb18 0303 	adds.w	r3, r8, r3
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	462b      	mov	r3, r5
 800483a:	eb49 0303 	adc.w	r3, r9, r3
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800484c:	4629      	mov	r1, r5
 800484e:	028b      	lsls	r3, r1, #10
 8004850:	4621      	mov	r1, r4
 8004852:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004856:	4621      	mov	r1, r4
 8004858:	028a      	lsls	r2, r1, #10
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004862:	2200      	movs	r2, #0
 8004864:	643b      	str	r3, [r7, #64]	@ 0x40
 8004866:	647a      	str	r2, [r7, #68]	@ 0x44
 8004868:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800486c:	f7fb fcca 	bl	8000204 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800487a:	4b60      	ldr	r3, [pc, #384]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	3301      	adds	r3, #1
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 800488c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004890:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800489c:	e0a6      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800489e:	4b57      	ldr	r3, [pc, #348]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048aa:	4b54      	ldr	r3, [pc, #336]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d02a      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b6:	4b51      	ldr	r3, [pc, #324]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	099b      	lsrs	r3, r3, #6
 80048bc:	2200      	movs	r2, #0
 80048be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048c8:	2100      	movs	r1, #0
 80048ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x350>)
 80048cc:	fb03 f201 	mul.w	r2, r3, r1
 80048d0:	2300      	movs	r3, #0
 80048d2:	fb00 f303 	mul.w	r3, r0, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004a04 <HAL_RCC_GetSysClockFreq+0x350>)
 80048da:	fba0 1202 	umull	r1, r2, r0, r2
 80048de:	677a      	str	r2, [r7, #116]	@ 0x74
 80048e0:	460a      	mov	r2, r1
 80048e2:	673a      	str	r2, [r7, #112]	@ 0x70
 80048e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048e6:	4413      	add	r3, r2
 80048e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80048ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ee:	2200      	movs	r2, #0
 80048f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80048f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80048f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80048fc:	f7fb fc82 	bl	8000204 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800490a:	e05b      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490c:	4b3b      	ldr	r3, [pc, #236]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	099b      	lsrs	r3, r3, #6
 8004912:	2200      	movs	r2, #0
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	623b      	str	r3, [r7, #32]
 8004920:	2300      	movs	r3, #0
 8004922:	627b      	str	r3, [r7, #36]	@ 0x24
 8004924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	f04f 0000 	mov.w	r0, #0
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	0159      	lsls	r1, r3, #5
 8004936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493a:	0150      	lsls	r0, r2, #5
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4641      	mov	r1, r8
 8004942:	ebb2 0a01 	subs.w	sl, r2, r1
 8004946:	4649      	mov	r1, r9
 8004948:	eb63 0b01 	sbc.w	fp, r3, r1
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800495c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004960:	ebb2 040a 	subs.w	r4, r2, sl
 8004964:	eb63 050b 	sbc.w	r5, r3, fp
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	00eb      	lsls	r3, r5, #3
 8004972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004976:	00e2      	lsls	r2, r4, #3
 8004978:	4614      	mov	r4, r2
 800497a:	461d      	mov	r5, r3
 800497c:	4643      	mov	r3, r8
 800497e:	18e3      	adds	r3, r4, r3
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	464b      	mov	r3, r9
 8004984:	eb45 0303 	adc.w	r3, r5, r3
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004996:	4629      	mov	r1, r5
 8004998:	028b      	lsls	r3, r1, #10
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a0:	4621      	mov	r1, r4
 80049a2:	028a      	lsls	r2, r1, #10
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ac:	2200      	movs	r2, #0
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	61fa      	str	r2, [r7, #28]
 80049b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b6:	f7fb fc25 	bl	8000204 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4613      	mov	r3, r2
 80049c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049c4:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x348>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	0f1b      	lsrs	r3, r3, #28
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80049d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80049e2:	e003      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e4:	4b06      	ldr	r3, [pc, #24]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80049ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3798      	adds	r7, #152	@ 0x98
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800
 8004a00:	00f42400 	.word	0x00f42400
 8004a04:	017d7840 	.word	0x017d7840

08004a08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e28d      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8083 	beq.w	8004b2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a28:	4b94      	ldr	r3, [pc, #592]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d019      	beq.n	8004a68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a34:	4b91      	ldr	r3, [pc, #580]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d106      	bne.n	8004a4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a40:	4b8e      	ldr	r3, [pc, #568]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a4c:	d00c      	beq.n	8004a68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a4e:	4b8b      	ldr	r3, [pc, #556]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d112      	bne.n	8004a80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a5a:	4b88      	ldr	r3, [pc, #544]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a66:	d10b      	bne.n	8004a80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a68:	4b84      	ldr	r3, [pc, #528]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d05b      	beq.n	8004b2c <HAL_RCC_OscConfig+0x124>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d157      	bne.n	8004b2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e25a      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a88:	d106      	bne.n	8004a98 <HAL_RCC_OscConfig+0x90>
 8004a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7b      	ldr	r2, [pc, #492]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e01d      	b.n	8004ad4 <HAL_RCC_OscConfig+0xcc>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0xb4>
 8004aa2:	4b76      	ldr	r3, [pc, #472]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a75      	ldr	r2, [pc, #468]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b73      	ldr	r3, [pc, #460]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a72      	ldr	r2, [pc, #456]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0xcc>
 8004abc:	4b6f      	ldr	r3, [pc, #444]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a6e      	ldr	r2, [pc, #440]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a6b      	ldr	r2, [pc, #428]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d013      	beq.n	8004b04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fe f9ba 	bl	8002e54 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fe f9b6 	bl	8002e54 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	@ 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e21f      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	4b61      	ldr	r3, [pc, #388]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0xdc>
 8004b02:	e014      	b.n	8004b2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fe f9a6 	bl	8002e54 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fe f9a2 	bl	8002e54 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	@ 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e20b      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	4b57      	ldr	r3, [pc, #348]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x104>
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d06f      	beq.n	8004c1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b3a:	4b50      	ldr	r3, [pc, #320]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d017      	beq.n	8004b76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b46:	4b4d      	ldr	r3, [pc, #308]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d105      	bne.n	8004b5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b52:	4b4a      	ldr	r3, [pc, #296]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b5e:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	d11c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6a:	4b44      	ldr	r3, [pc, #272]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d116      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b76:	4b41      	ldr	r3, [pc, #260]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_RCC_OscConfig+0x186>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d001      	beq.n	8004b8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e1d3      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4937      	ldr	r1, [pc, #220]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	e03a      	b.n	8004c1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d020      	beq.n	8004bee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bac:	4b34      	ldr	r3, [pc, #208]	@ (8004c80 <HAL_RCC_OscConfig+0x278>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb2:	f7fe f94f 	bl	8002e54 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bba:	f7fe f94b 	bl	8002e54 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e1b4      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f0      	beq.n	8004bba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd8:	4b28      	ldr	r3, [pc, #160]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4925      	ldr	r1, [pc, #148]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	600b      	str	r3, [r1, #0]
 8004bec:	e015      	b.n	8004c1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bee:	4b24      	ldr	r3, [pc, #144]	@ (8004c80 <HAL_RCC_OscConfig+0x278>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fe f92e 	bl	8002e54 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bfc:	f7fe f92a 	bl	8002e54 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e193      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d036      	beq.n	8004c94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d016      	beq.n	8004c5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2e:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fe f90e 	bl	8002e54 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c3c:	f7fe f90a 	bl	8002e54 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e173      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <HAL_RCC_OscConfig+0x274>)
 8004c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x234>
 8004c5a:	e01b      	b.n	8004c94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c5c:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	f7fe f8f7 	bl	8002e54 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c68:	e00e      	b.n	8004c88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c6a:	f7fe f8f3 	bl	8002e54 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d907      	bls.n	8004c88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e15c      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	42470000 	.word	0x42470000
 8004c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c88:	4b8a      	ldr	r3, [pc, #552]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ea      	bne.n	8004c6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8097 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca6:	4b83      	ldr	r3, [pc, #524]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10f      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	4a7e      	ldr	r2, [pc, #504]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cca:	60bb      	str	r3, [r7, #8]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd2:	4b79      	ldr	r3, [pc, #484]	@ (8004eb8 <HAL_RCC_OscConfig+0x4b0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d118      	bne.n	8004d10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cde:	4b76      	ldr	r3, [pc, #472]	@ (8004eb8 <HAL_RCC_OscConfig+0x4b0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a75      	ldr	r2, [pc, #468]	@ (8004eb8 <HAL_RCC_OscConfig+0x4b0>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cea:	f7fe f8b3 	bl	8002e54 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf2:	f7fe f8af 	bl	8002e54 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e118      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	4b6c      	ldr	r3, [pc, #432]	@ (8004eb8 <HAL_RCC_OscConfig+0x4b0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x31e>
 8004d18:	4b66      	ldr	r3, [pc, #408]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	4a65      	ldr	r2, [pc, #404]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d24:	e01c      	b.n	8004d60 <HAL_RCC_OscConfig+0x358>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x340>
 8004d2e:	4b61      	ldr	r3, [pc, #388]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	4a60      	ldr	r2, [pc, #384]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d34:	f043 0304 	orr.w	r3, r3, #4
 8004d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d3a:	4b5e      	ldr	r3, [pc, #376]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	4a5d      	ldr	r2, [pc, #372]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d46:	e00b      	b.n	8004d60 <HAL_RCC_OscConfig+0x358>
 8004d48:	4b5a      	ldr	r3, [pc, #360]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4c:	4a59      	ldr	r2, [pc, #356]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d54:	4b57      	ldr	r3, [pc, #348]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d58:	4a56      	ldr	r2, [pc, #344]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d5a:	f023 0304 	bic.w	r3, r3, #4
 8004d5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d015      	beq.n	8004d94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fe f874 	bl	8002e54 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fe f870 	bl	8002e54 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0d7      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d86:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0ee      	beq.n	8004d70 <HAL_RCC_OscConfig+0x368>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7fe f85e 	bl	8002e54 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fe f85a 	bl	8002e54 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e0c1      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db2:	4b40      	ldr	r3, [pc, #256]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ee      	bne.n	8004d9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80ad 	beq.w	8004f34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dda:	4b36      	ldr	r3, [pc, #216]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d060      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d145      	bne.n	8004e7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dee:	4b33      	ldr	r3, [pc, #204]	@ (8004ebc <HAL_RCC_OscConfig+0x4b4>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fe f82e 	bl	8002e54 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dfc:	f7fe f82a 	bl	8002e54 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e093      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0e:	4b29      	ldr	r3, [pc, #164]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	019b      	lsls	r3, r3, #6
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	3b01      	subs	r3, #1
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	061b      	lsls	r3, r3, #24
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	071b      	lsls	r3, r3, #28
 8004e46:	491b      	ldr	r1, [pc, #108]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <HAL_RCC_OscConfig+0x4b4>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fd ffff 	bl	8002e54 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fd fffb 	bl	8002e54 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e064      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6c:	4b11      	ldr	r3, [pc, #68]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x452>
 8004e78:	e05c      	b.n	8004f34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b10      	ldr	r3, [pc, #64]	@ (8004ebc <HAL_RCC_OscConfig+0x4b4>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fd ffe8 	bl	8002e54 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fd ffe4 	bl	8002e54 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e04d      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x480>
 8004ea6:	e045      	b.n	8004f34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e040      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f40 <HAL_RCC_OscConfig+0x538>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d030      	beq.n	8004f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d129      	bne.n	8004f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d122      	bne.n	8004f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d119      	bne.n	8004f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d10f      	bne.n	8004f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d107      	bne.n	8004f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800

08004f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e07b      	b.n	800504e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d108      	bne.n	8004f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f66:	d009      	beq.n	8004f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	61da      	str	r2, [r3, #28]
 8004f6e:	e005      	b.n	8004f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fd fc70 	bl	800287c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005000:	ea42 0103 	orr.w	r1, r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	f003 0104 	and.w	r1, r3, #4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	f003 0210 	and.w	r2, r3, #16
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800503c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b088      	sub	sp, #32
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_SPI_Transmit+0x22>
 8005074:	2302      	movs	r3, #2
 8005076:	e126      	b.n	80052c6 <HAL_SPI_Transmit+0x270>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005080:	f7fd fee8 	bl	8002e54 <HAL_GetTick>
 8005084:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b01      	cmp	r3, #1
 8005094:	d002      	beq.n	800509c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005096:	2302      	movs	r3, #2
 8005098:	77fb      	strb	r3, [r7, #31]
    goto error;
 800509a:	e10b      	b.n	80052b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_Transmit+0x52>
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050ac:	e102      	b.n	80052b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2203      	movs	r2, #3
 80050b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f4:	d10f      	bne.n	8005116 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005104:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005114:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005120:	2b40      	cmp	r3, #64	@ 0x40
 8005122:	d007      	beq.n	8005134 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005132:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800513c:	d14b      	bne.n	80051d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_SPI_Transmit+0xf6>
 8005146:	8afb      	ldrh	r3, [r7, #22]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d13e      	bne.n	80051ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	881a      	ldrh	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	1c9a      	adds	r2, r3, #2
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005170:	e02b      	b.n	80051ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b02      	cmp	r3, #2
 800517e:	d112      	bne.n	80051a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005184:	881a      	ldrh	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005190:	1c9a      	adds	r2, r3, #2
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051a4:	e011      	b.n	80051ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a6:	f7fd fe55 	bl	8002e54 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d803      	bhi.n	80051be <HAL_SPI_Transmit+0x168>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d102      	bne.n	80051c4 <HAL_SPI_Transmit+0x16e>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051c8:	e074      	b.n	80052b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ce      	bne.n	8005172 <HAL_SPI_Transmit+0x11c>
 80051d4:	e04c      	b.n	8005270 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_SPI_Transmit+0x18e>
 80051de:	8afb      	ldrh	r3, [r7, #22]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d140      	bne.n	8005266 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	7812      	ldrb	r2, [r2, #0]
 80051f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800520a:	e02c      	b.n	8005266 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d113      	bne.n	8005242 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	7812      	ldrb	r2, [r2, #0]
 8005226:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005240:	e011      	b.n	8005266 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005242:	f7fd fe07 	bl	8002e54 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d803      	bhi.n	800525a <HAL_SPI_Transmit+0x204>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d102      	bne.n	8005260 <HAL_SPI_Transmit+0x20a>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005264:	e026      	b.n	80052b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1cd      	bne.n	800520c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f8b3 	bl	80053e0 <SPI_EndRxTxTransaction>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800528e:	2300      	movs	r3, #0
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e000      	b.n	80052b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80052b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80052c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052e0:	f7fd fdb8 	bl	8002e54 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	4413      	add	r3, r2
 80052ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052f0:	f7fd fdb0 	bl	8002e54 <HAL_GetTick>
 80052f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052f6:	4b39      	ldr	r3, [pc, #228]	@ (80053dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	015b      	lsls	r3, r3, #5
 80052fc:	0d1b      	lsrs	r3, r3, #20
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	fb02 f303 	mul.w	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005306:	e054      	b.n	80053b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d050      	beq.n	80053b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005310:	f7fd fda0 	bl	8002e54 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	429a      	cmp	r2, r3
 800531e:	d902      	bls.n	8005326 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d13d      	bne.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005334:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800533e:	d111      	bne.n	8005364 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005348:	d004      	beq.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005352:	d107      	bne.n	8005364 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005362:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800536c:	d10f      	bne.n	800538e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800538c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e017      	b.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d19b      	bne.n	8005308 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000040 	.word	0x20000040

080053e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053ec:	4b1b      	ldr	r3, [pc, #108]	@ (800545c <SPI_EndRxTxTransaction+0x7c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005460 <SPI_EndRxTxTransaction+0x80>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	0d5b      	lsrs	r3, r3, #21
 80053f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800540a:	d112      	bne.n	8005432 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	2180      	movs	r1, #128	@ 0x80
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7ff ff5a 	bl	80052d0 <SPI_WaitFlagStateUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d016      	beq.n	8005450 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	f043 0220 	orr.w	r2, r3, #32
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e00f      	b.n	8005452 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	3b01      	subs	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005448:	2b80      	cmp	r3, #128	@ 0x80
 800544a:	d0f2      	beq.n	8005432 <SPI_EndRxTxTransaction+0x52>
 800544c:	e000      	b.n	8005450 <SPI_EndRxTxTransaction+0x70>
        break;
 800544e:	bf00      	nop
  }

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000040 	.word	0x20000040
 8005460:	165e9f81 	.word	0x165e9f81

08005464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e041      	b.n	80054fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fd fa3e 	bl	800290c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3304      	adds	r3, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f000 fd5c 	bl	8005f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	d001      	beq.n	800551c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e046      	b.n	80055aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a23      	ldr	r2, [pc, #140]	@ (80055b8 <HAL_TIM_Base_Start+0xb4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d022      	beq.n	8005574 <HAL_TIM_Base_Start+0x70>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005536:	d01d      	beq.n	8005574 <HAL_TIM_Base_Start+0x70>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1f      	ldr	r2, [pc, #124]	@ (80055bc <HAL_TIM_Base_Start+0xb8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d018      	beq.n	8005574 <HAL_TIM_Base_Start+0x70>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1e      	ldr	r2, [pc, #120]	@ (80055c0 <HAL_TIM_Base_Start+0xbc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <HAL_TIM_Base_Start+0x70>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1c      	ldr	r2, [pc, #112]	@ (80055c4 <HAL_TIM_Base_Start+0xc0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <HAL_TIM_Base_Start+0x70>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <HAL_TIM_Base_Start+0xc4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d009      	beq.n	8005574 <HAL_TIM_Base_Start+0x70>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a19      	ldr	r2, [pc, #100]	@ (80055cc <HAL_TIM_Base_Start+0xc8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_TIM_Base_Start+0x70>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a18      	ldr	r2, [pc, #96]	@ (80055d0 <HAL_TIM_Base_Start+0xcc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d111      	bne.n	8005598 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b06      	cmp	r3, #6
 8005584:	d010      	beq.n	80055a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0201 	orr.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005596:	e007      	b.n	80055a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40010400 	.word	0x40010400
 80055cc:	40014000 	.word	0x40014000
 80055d0:	40001800 	.word	0x40001800

080055d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d001      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e04e      	b.n	800568a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a23      	ldr	r2, [pc, #140]	@ (8005698 <HAL_TIM_Base_Start_IT+0xc4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x80>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005616:	d01d      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x80>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1f      	ldr	r2, [pc, #124]	@ (800569c <HAL_TIM_Base_Start_IT+0xc8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x80>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1e      	ldr	r2, [pc, #120]	@ (80056a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x80>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1c      	ldr	r2, [pc, #112]	@ (80056a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x80>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1b      	ldr	r2, [pc, #108]	@ (80056a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x80>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a19      	ldr	r2, [pc, #100]	@ (80056ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x80>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a18      	ldr	r2, [pc, #96]	@ (80056b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d111      	bne.n	8005678 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b06      	cmp	r3, #6
 8005664:	d010      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005676:	e007      	b.n	8005688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40010400 	.word	0x40010400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40001800 	.word	0x40001800

080056b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e041      	b.n	800574a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f839 	bl	8005752 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 fc34 	bl	8005f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <HAL_TIM_PWM_Start+0x24>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e022      	b.n	80057d2 <HAL_TIM_PWM_Start+0x6a>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b04      	cmp	r3, #4
 8005790:	d109      	bne.n	80057a6 <HAL_TIM_PWM_Start+0x3e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	bf14      	ite	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	2300      	moveq	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	e015      	b.n	80057d2 <HAL_TIM_PWM_Start+0x6a>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d109      	bne.n	80057c0 <HAL_TIM_PWM_Start+0x58>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	bf14      	ite	ne
 80057b8:	2301      	movne	r3, #1
 80057ba:	2300      	moveq	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e008      	b.n	80057d2 <HAL_TIM_PWM_Start+0x6a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	bf14      	ite	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	2300      	moveq	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e07c      	b.n	80058d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <HAL_TIM_PWM_Start+0x82>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e8:	e013      	b.n	8005812 <HAL_TIM_PWM_Start+0xaa>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_PWM_Start+0x92>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f8:	e00b      	b.n	8005812 <HAL_TIM_PWM_Start+0xaa>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d104      	bne.n	800580a <HAL_TIM_PWM_Start+0xa2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005808:	e003      	b.n	8005812 <HAL_TIM_PWM_Start+0xaa>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2201      	movs	r2, #1
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fe8a 	bl	8006534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2d      	ldr	r2, [pc, #180]	@ (80058dc <HAL_TIM_PWM_Start+0x174>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_TIM_PWM_Start+0xcc>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2c      	ldr	r2, [pc, #176]	@ (80058e0 <HAL_TIM_PWM_Start+0x178>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d101      	bne.n	8005838 <HAL_TIM_PWM_Start+0xd0>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_TIM_PWM_Start+0xd2>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800584c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a22      	ldr	r2, [pc, #136]	@ (80058dc <HAL_TIM_PWM_Start+0x174>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d022      	beq.n	800589e <HAL_TIM_PWM_Start+0x136>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005860:	d01d      	beq.n	800589e <HAL_TIM_PWM_Start+0x136>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1f      	ldr	r2, [pc, #124]	@ (80058e4 <HAL_TIM_PWM_Start+0x17c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d018      	beq.n	800589e <HAL_TIM_PWM_Start+0x136>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1d      	ldr	r2, [pc, #116]	@ (80058e8 <HAL_TIM_PWM_Start+0x180>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <HAL_TIM_PWM_Start+0x136>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1c      	ldr	r2, [pc, #112]	@ (80058ec <HAL_TIM_PWM_Start+0x184>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00e      	beq.n	800589e <HAL_TIM_PWM_Start+0x136>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a16      	ldr	r2, [pc, #88]	@ (80058e0 <HAL_TIM_PWM_Start+0x178>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d009      	beq.n	800589e <HAL_TIM_PWM_Start+0x136>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a18      	ldr	r2, [pc, #96]	@ (80058f0 <HAL_TIM_PWM_Start+0x188>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d004      	beq.n	800589e <HAL_TIM_PWM_Start+0x136>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a16      	ldr	r2, [pc, #88]	@ (80058f4 <HAL_TIM_PWM_Start+0x18c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d111      	bne.n	80058c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b06      	cmp	r3, #6
 80058ae:	d010      	beq.n	80058d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c0:	e007      	b.n	80058d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40010400 	.word	0x40010400
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40001800 	.word	0x40001800

080058f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2200      	movs	r2, #0
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fe12 	bl	8006534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2e      	ldr	r2, [pc, #184]	@ (80059d0 <HAL_TIM_PWM_Stop+0xd8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIM_PWM_Stop+0x2c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2d      	ldr	r2, [pc, #180]	@ (80059d4 <HAL_TIM_PWM_Stop+0xdc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d101      	bne.n	8005928 <HAL_TIM_PWM_Stop+0x30>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <HAL_TIM_PWM_Stop+0x32>
 8005928:	2300      	movs	r3, #0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d017      	beq.n	800595e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005938:	4013      	ands	r3, r2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10f      	bne.n	800595e <HAL_TIM_PWM_Stop+0x66>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	f240 4344 	movw	r3, #1092	@ 0x444
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d107      	bne.n	800595e <HAL_TIM_PWM_Stop+0x66>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800595c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6a1a      	ldr	r2, [r3, #32]
 8005964:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10f      	bne.n	800598e <HAL_TIM_PWM_Stop+0x96>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	f240 4344 	movw	r3, #1092	@ 0x444
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d107      	bne.n	800598e <HAL_TIM_PWM_Stop+0x96>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0201 	bic.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Stop+0xa6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800599c:	e013      	b.n	80059c6 <HAL_TIM_PWM_Stop+0xce>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_PWM_Stop+0xb6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ac:	e00b      	b.n	80059c6 <HAL_TIM_PWM_Stop+0xce>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d104      	bne.n	80059be <HAL_TIM_PWM_Stop+0xc6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059bc:	e003      	b.n	80059c6 <HAL_TIM_PWM_Stop+0xce>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40010400 	.word	0x40010400

080059d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d122      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0202 	mvn.w	r2, #2
 8005a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa81 	bl	8005f22 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa73 	bl	8005f0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fa84 	bl	8005f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d122      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d11b      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0204 	mvn.w	r2, #4
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa57 	bl	8005f22 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa49 	bl	8005f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa5a 	bl	8005f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0208 	mvn.w	r2, #8
 8005aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa2d 	bl	8005f22 <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fa1f 	bl	8005f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fa30 	bl	8005f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0210 	mvn.w	r2, #16
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2208      	movs	r2, #8
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa03 	bl	8005f22 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f9f5 	bl	8005f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fa06 	bl	8005f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10e      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0201 	mvn.w	r2, #1
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f9cf 	bl	8005efa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b66:	2b80      	cmp	r3, #128	@ 0x80
 8005b68:	d10e      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b74:	2b80      	cmp	r3, #128	@ 0x80
 8005b76:	d107      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fdd4 	bl	8006730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b40      	cmp	r3, #64	@ 0x40
 8005b94:	d10e      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba0:	2b40      	cmp	r3, #64	@ 0x40
 8005ba2:	d107      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f9cb 	bl	8005f4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d10e      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d107      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0220 	mvn.w	r2, #32
 8005bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fd9e 	bl	800671c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e0ae      	b.n	8005d64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b0c      	cmp	r3, #12
 8005c12:	f200 809f 	bhi.w	8005d54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c51 	.word	0x08005c51
 8005c20:	08005d55 	.word	0x08005d55
 8005c24:	08005d55 	.word	0x08005d55
 8005c28:	08005d55 	.word	0x08005d55
 8005c2c:	08005c91 	.word	0x08005c91
 8005c30:	08005d55 	.word	0x08005d55
 8005c34:	08005d55 	.word	0x08005d55
 8005c38:	08005d55 	.word	0x08005d55
 8005c3c:	08005cd3 	.word	0x08005cd3
 8005c40:	08005d55 	.word	0x08005d55
 8005c44:	08005d55 	.word	0x08005d55
 8005c48:	08005d55 	.word	0x08005d55
 8005c4c:	08005d13 	.word	0x08005d13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fa22 	bl	80060a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0208 	orr.w	r2, r2, #8
 8005c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0204 	bic.w	r2, r2, #4
 8005c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6999      	ldr	r1, [r3, #24]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	619a      	str	r2, [r3, #24]
      break;
 8005c8e:	e064      	b.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fa72 	bl	8006180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6999      	ldr	r1, [r3, #24]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	619a      	str	r2, [r3, #24]
      break;
 8005cd0:	e043      	b.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fac7 	bl	800626c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0208 	orr.w	r2, r2, #8
 8005cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0204 	bic.w	r2, r2, #4
 8005cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69d9      	ldr	r1, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	61da      	str	r2, [r3, #28]
      break;
 8005d10:	e023      	b.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fb1b 	bl	8006354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69d9      	ldr	r1, [r3, #28]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	021a      	lsls	r2, r3, #8
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	61da      	str	r2, [r3, #28]
      break;
 8005d52:	e002      	b.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	75fb      	strb	r3, [r7, #23]
      break;
 8005d58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIM_ConfigClockSource+0x1c>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e0b4      	b.n	8005ef2 <HAL_TIM_ConfigClockSource+0x186>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc0:	d03e      	beq.n	8005e40 <HAL_TIM_ConfigClockSource+0xd4>
 8005dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc6:	f200 8087 	bhi.w	8005ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dce:	f000 8086 	beq.w	8005ede <HAL_TIM_ConfigClockSource+0x172>
 8005dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd6:	d87f      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd8:	2b70      	cmp	r3, #112	@ 0x70
 8005dda:	d01a      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0xa6>
 8005ddc:	2b70      	cmp	r3, #112	@ 0x70
 8005dde:	d87b      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b60      	cmp	r3, #96	@ 0x60
 8005de2:	d050      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x11a>
 8005de4:	2b60      	cmp	r3, #96	@ 0x60
 8005de6:	d877      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b50      	cmp	r3, #80	@ 0x50
 8005dea:	d03c      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0xfa>
 8005dec:	2b50      	cmp	r3, #80	@ 0x50
 8005dee:	d873      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8005df0:	2b40      	cmp	r3, #64	@ 0x40
 8005df2:	d058      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x13a>
 8005df4:	2b40      	cmp	r3, #64	@ 0x40
 8005df6:	d86f      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8005df8:	2b30      	cmp	r3, #48	@ 0x30
 8005dfa:	d064      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8005dfc:	2b30      	cmp	r3, #48	@ 0x30
 8005dfe:	d86b      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d060      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d867      	bhi.n	8005ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d05c      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e0c:	2b10      	cmp	r3, #16
 8005e0e:	d05a      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e10:	e062      	b.n	8005ed8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6899      	ldr	r1, [r3, #8]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f000 fb67 	bl	80064f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	609a      	str	r2, [r3, #8]
      break;
 8005e3e:	e04f      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	6899      	ldr	r1, [r3, #8]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f000 fb50 	bl	80064f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e62:	609a      	str	r2, [r3, #8]
      break;
 8005e64:	e03c      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f000 fac4 	bl	8006400 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2150      	movs	r1, #80	@ 0x50
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fb1d 	bl	80064be <TIM_ITRx_SetConfig>
      break;
 8005e84:	e02c      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	461a      	mov	r2, r3
 8005e94:	f000 fae3 	bl	800645e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2160      	movs	r1, #96	@ 0x60
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fb0d 	bl	80064be <TIM_ITRx_SetConfig>
      break;
 8005ea4:	e01c      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6859      	ldr	r1, [r3, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f000 faa4 	bl	8006400 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2140      	movs	r1, #64	@ 0x40
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fafd 	bl	80064be <TIM_ITRx_SetConfig>
      break;
 8005ec4:	e00c      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f000 faf4 	bl	80064be <TIM_ITRx_SetConfig>
      break;
 8005ed6:	e003      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
      break;
 8005edc:	e000      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ede:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a40      	ldr	r2, [pc, #256]	@ (8006074 <TIM_Base_SetConfig+0x114>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d013      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f7e:	d00f      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3d      	ldr	r2, [pc, #244]	@ (8006078 <TIM_Base_SetConfig+0x118>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3c      	ldr	r2, [pc, #240]	@ (800607c <TIM_Base_SetConfig+0x11c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3b      	ldr	r2, [pc, #236]	@ (8006080 <TIM_Base_SetConfig+0x120>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a3a      	ldr	r2, [pc, #232]	@ (8006084 <TIM_Base_SetConfig+0x124>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d108      	bne.n	8005fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2f      	ldr	r2, [pc, #188]	@ (8006074 <TIM_Base_SetConfig+0x114>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d02b      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc0:	d027      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8006078 <TIM_Base_SetConfig+0x118>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d023      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800607c <TIM_Base_SetConfig+0x11c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01f      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8006080 <TIM_Base_SetConfig+0x120>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01b      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a29      	ldr	r2, [pc, #164]	@ (8006084 <TIM_Base_SetConfig+0x124>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d017      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a28      	ldr	r2, [pc, #160]	@ (8006088 <TIM_Base_SetConfig+0x128>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a27      	ldr	r2, [pc, #156]	@ (800608c <TIM_Base_SetConfig+0x12c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00f      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a26      	ldr	r2, [pc, #152]	@ (8006090 <TIM_Base_SetConfig+0x130>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00b      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a25      	ldr	r2, [pc, #148]	@ (8006094 <TIM_Base_SetConfig+0x134>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d007      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a24      	ldr	r2, [pc, #144]	@ (8006098 <TIM_Base_SetConfig+0x138>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a23      	ldr	r2, [pc, #140]	@ (800609c <TIM_Base_SetConfig+0x13c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0a      	ldr	r2, [pc, #40]	@ (8006074 <TIM_Base_SetConfig+0x114>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_Base_SetConfig+0xf8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a0c      	ldr	r2, [pc, #48]	@ (8006084 <TIM_Base_SetConfig+0x124>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d103      	bne.n	8006060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	615a      	str	r2, [r3, #20]
}
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40010000 	.word	0x40010000
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40010400 	.word	0x40010400
 8006088:	40014000 	.word	0x40014000
 800608c:	40014400 	.word	0x40014400
 8006090:	40014800 	.word	0x40014800
 8006094:	40001800 	.word	0x40001800
 8006098:	40001c00 	.word	0x40001c00
 800609c:	40002000 	.word	0x40002000

080060a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0201 	bic.w	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0303 	bic.w	r3, r3, #3
 80060d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f023 0302 	bic.w	r3, r3, #2
 80060e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a20      	ldr	r2, [pc, #128]	@ (8006178 <TIM_OC1_SetConfig+0xd8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC1_SetConfig+0x64>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a1f      	ldr	r2, [pc, #124]	@ (800617c <TIM_OC1_SetConfig+0xdc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d10c      	bne.n	800611e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0308 	bic.w	r3, r3, #8
 800610a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 0304 	bic.w	r3, r3, #4
 800611c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a15      	ldr	r2, [pc, #84]	@ (8006178 <TIM_OC1_SetConfig+0xd8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <TIM_OC1_SetConfig+0x8e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a14      	ldr	r2, [pc, #80]	@ (800617c <TIM_OC1_SetConfig+0xdc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d111      	bne.n	8006152 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800613c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40010000 	.word	0x40010000
 800617c:	40010400 	.word	0x40010400

08006180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f023 0210 	bic.w	r2, r3, #16
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f023 0320 	bic.w	r3, r3, #32
 80061ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a22      	ldr	r2, [pc, #136]	@ (8006264 <TIM_OC2_SetConfig+0xe4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_OC2_SetConfig+0x68>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a21      	ldr	r2, [pc, #132]	@ (8006268 <TIM_OC2_SetConfig+0xe8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d10d      	bne.n	8006204 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a17      	ldr	r2, [pc, #92]	@ (8006264 <TIM_OC2_SetConfig+0xe4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_OC2_SetConfig+0x94>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a16      	ldr	r2, [pc, #88]	@ (8006268 <TIM_OC2_SetConfig+0xe8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d113      	bne.n	800623c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800621a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40010000 	.word	0x40010000
 8006268:	40010400 	.word	0x40010400

0800626c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0303 	bic.w	r3, r3, #3
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a21      	ldr	r2, [pc, #132]	@ (800634c <TIM_OC3_SetConfig+0xe0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_OC3_SetConfig+0x66>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a20      	ldr	r2, [pc, #128]	@ (8006350 <TIM_OC3_SetConfig+0xe4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d10d      	bne.n	80062ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a16      	ldr	r2, [pc, #88]	@ (800634c <TIM_OC3_SetConfig+0xe0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <TIM_OC3_SetConfig+0x92>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a15      	ldr	r2, [pc, #84]	@ (8006350 <TIM_OC3_SetConfig+0xe4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d113      	bne.n	8006326 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800630c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	621a      	str	r2, [r3, #32]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400

08006354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800638a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800639e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	031b      	lsls	r3, r3, #12
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a12      	ldr	r2, [pc, #72]	@ (80063f8 <TIM_OC4_SetConfig+0xa4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_OC4_SetConfig+0x68>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a11      	ldr	r2, [pc, #68]	@ (80063fc <TIM_OC4_SetConfig+0xa8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d109      	bne.n	80063d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	019b      	lsls	r3, r3, #6
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40010400 	.word	0x40010400

08006400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f023 0201 	bic.w	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800642a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f023 030a 	bic.w	r3, r3, #10
 800643c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800645e:	b480      	push	{r7}
 8006460:	b087      	sub	sp, #28
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0210 	bic.w	r2, r3, #16
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	031b      	lsls	r3, r3, #12
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800649a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	f043 0307 	orr.w	r3, r3, #7
 80064e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800650e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	021a      	lsls	r2, r3, #8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	431a      	orrs	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4313      	orrs	r3, r2
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	609a      	str	r2, [r3, #8]
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	2201      	movs	r2, #1
 8006548:	fa02 f303 	lsl.w	r3, r2, r3
 800654c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1a      	ldr	r2, [r3, #32]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	43db      	mvns	r3, r3
 8006556:	401a      	ands	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1a      	ldr	r2, [r3, #32]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	fa01 f303 	lsl.w	r3, r1, r3
 800656c:	431a      	orrs	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
	...

08006580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006594:	2302      	movs	r3, #2
 8006596:	e05a      	b.n	800664e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a21      	ldr	r2, [pc, #132]	@ (800665c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d022      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e4:	d01d      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006660 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d018      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006664 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d013      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00e      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a18      	ldr	r2, [pc, #96]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d009      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a17      	ldr	r2, [pc, #92]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a15      	ldr	r2, [pc, #84]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d10c      	bne.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4313      	orrs	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40010000 	.word	0x40010000
 8006660:	40000400 	.word	0x40000400
 8006664:	40000800 	.word	0x40000800
 8006668:	40000c00 	.word	0x40000c00
 800666c:	40010400 	.word	0x40010400
 8006670:	40014000 	.word	0x40014000
 8006674:	40001800 	.word	0x40001800

08006678 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006690:	2302      	movs	r3, #2
 8006692:	e03d      	b.n	8006710 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e03f      	b.n	80067d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fc fa10 	bl	8002b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2224      	movs	r2, #36	@ 0x24
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f829 	bl	80067e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800679c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067e4:	b0c0      	sub	sp, #256	@ 0x100
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fc:	68d9      	ldr	r1, [r3, #12]
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	ea40 0301 	orr.w	r3, r0, r1
 8006808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	431a      	orrs	r2, r3
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	431a      	orrs	r2, r3
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006838:	f021 010c 	bic.w	r1, r1, #12
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006846:	430b      	orrs	r3, r1
 8006848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800685a:	6999      	ldr	r1, [r3, #24]
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	ea40 0301 	orr.w	r3, r0, r1
 8006866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b8f      	ldr	r3, [pc, #572]	@ (8006aac <UART_SetConfig+0x2cc>)
 8006870:	429a      	cmp	r2, r3
 8006872:	d005      	beq.n	8006880 <UART_SetConfig+0xa0>
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b8d      	ldr	r3, [pc, #564]	@ (8006ab0 <UART_SetConfig+0x2d0>)
 800687c:	429a      	cmp	r2, r3
 800687e:	d104      	bne.n	800688a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006880:	f7fd ff04 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 8006884:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006888:	e003      	b.n	8006892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800688a:	f7fd feeb 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 800688e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800689c:	f040 810c 	bne.w	8006ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80068ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	1891      	adds	r1, r2, r2
 80068b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80068ba:	415b      	adcs	r3, r3
 80068bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80068c2:	4621      	mov	r1, r4
 80068c4:	eb12 0801 	adds.w	r8, r2, r1
 80068c8:	4629      	mov	r1, r5
 80068ca:	eb43 0901 	adc.w	r9, r3, r1
 80068ce:	f04f 0200 	mov.w	r2, #0
 80068d2:	f04f 0300 	mov.w	r3, #0
 80068d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068e2:	4690      	mov	r8, r2
 80068e4:	4699      	mov	r9, r3
 80068e6:	4623      	mov	r3, r4
 80068e8:	eb18 0303 	adds.w	r3, r8, r3
 80068ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068f0:	462b      	mov	r3, r5
 80068f2:	eb49 0303 	adc.w	r3, r9, r3
 80068f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006906:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800690a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800690e:	460b      	mov	r3, r1
 8006910:	18db      	adds	r3, r3, r3
 8006912:	653b      	str	r3, [r7, #80]	@ 0x50
 8006914:	4613      	mov	r3, r2
 8006916:	eb42 0303 	adc.w	r3, r2, r3
 800691a:	657b      	str	r3, [r7, #84]	@ 0x54
 800691c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006924:	f7f9 fc6e 	bl	8000204 <__aeabi_uldivmod>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4b61      	ldr	r3, [pc, #388]	@ (8006ab4 <UART_SetConfig+0x2d4>)
 800692e:	fba3 2302 	umull	r2, r3, r3, r2
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	011c      	lsls	r4, r3, #4
 8006936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800693a:	2200      	movs	r2, #0
 800693c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006940:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006948:	4642      	mov	r2, r8
 800694a:	464b      	mov	r3, r9
 800694c:	1891      	adds	r1, r2, r2
 800694e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006950:	415b      	adcs	r3, r3
 8006952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006958:	4641      	mov	r1, r8
 800695a:	eb12 0a01 	adds.w	sl, r2, r1
 800695e:	4649      	mov	r1, r9
 8006960:	eb43 0b01 	adc.w	fp, r3, r1
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006978:	4692      	mov	sl, r2
 800697a:	469b      	mov	fp, r3
 800697c:	4643      	mov	r3, r8
 800697e:	eb1a 0303 	adds.w	r3, sl, r3
 8006982:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006986:	464b      	mov	r3, r9
 8006988:	eb4b 0303 	adc.w	r3, fp, r3
 800698c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800699c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80069a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069a4:	460b      	mov	r3, r1
 80069a6:	18db      	adds	r3, r3, r3
 80069a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80069aa:	4613      	mov	r3, r2
 80069ac:	eb42 0303 	adc.w	r3, r2, r3
 80069b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80069b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80069ba:	f7f9 fc23 	bl	8000204 <__aeabi_uldivmod>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ab4 <UART_SetConfig+0x2d4>)
 80069c6:	fba3 2301 	umull	r2, r3, r3, r1
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2264      	movs	r2, #100	@ 0x64
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	1acb      	subs	r3, r1, r3
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80069da:	4b36      	ldr	r3, [pc, #216]	@ (8006ab4 <UART_SetConfig+0x2d4>)
 80069dc:	fba3 2302 	umull	r2, r3, r3, r2
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069e8:	441c      	add	r4, r3
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	1891      	adds	r1, r2, r2
 8006a02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a04:	415b      	adcs	r3, r3
 8006a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	1851      	adds	r1, r2, r1
 8006a10:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a12:	4649      	mov	r1, r9
 8006a14:	414b      	adcs	r3, r1
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a24:	4659      	mov	r1, fp
 8006a26:	00cb      	lsls	r3, r1, #3
 8006a28:	4651      	mov	r1, sl
 8006a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a2e:	4651      	mov	r1, sl
 8006a30:	00ca      	lsls	r2, r1, #3
 8006a32:	4610      	mov	r0, r2
 8006a34:	4619      	mov	r1, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	4642      	mov	r2, r8
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a40:	464b      	mov	r3, r9
 8006a42:	460a      	mov	r2, r1
 8006a44:	eb42 0303 	adc.w	r3, r2, r3
 8006a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a60:	460b      	mov	r3, r1
 8006a62:	18db      	adds	r3, r3, r3
 8006a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a66:	4613      	mov	r3, r2
 8006a68:	eb42 0303 	adc.w	r3, r2, r3
 8006a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a76:	f7f9 fbc5 	bl	8000204 <__aeabi_uldivmod>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab4 <UART_SetConfig+0x2d4>)
 8006a80:	fba3 1302 	umull	r1, r3, r3, r2
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	2164      	movs	r1, #100	@ 0x64
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	3332      	adds	r3, #50	@ 0x32
 8006a92:	4a08      	ldr	r2, [pc, #32]	@ (8006ab4 <UART_SetConfig+0x2d4>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	f003 0207 	and.w	r2, r3, #7
 8006a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4422      	add	r2, r4
 8006aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006aa8:	e106      	b.n	8006cb8 <UART_SetConfig+0x4d8>
 8006aaa:	bf00      	nop
 8006aac:	40011000 	.word	0x40011000
 8006ab0:	40011400 	.word	0x40011400
 8006ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006aca:	4642      	mov	r2, r8
 8006acc:	464b      	mov	r3, r9
 8006ace:	1891      	adds	r1, r2, r2
 8006ad0:	6239      	str	r1, [r7, #32]
 8006ad2:	415b      	adcs	r3, r3
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ada:	4641      	mov	r1, r8
 8006adc:	1854      	adds	r4, r2, r1
 8006ade:	4649      	mov	r1, r9
 8006ae0:	eb43 0501 	adc.w	r5, r3, r1
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	00eb      	lsls	r3, r5, #3
 8006aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006af2:	00e2      	lsls	r2, r4, #3
 8006af4:	4614      	mov	r4, r2
 8006af6:	461d      	mov	r5, r3
 8006af8:	4643      	mov	r3, r8
 8006afa:	18e3      	adds	r3, r4, r3
 8006afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b00:	464b      	mov	r3, r9
 8006b02:	eb45 0303 	adc.w	r3, r5, r3
 8006b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b26:	4629      	mov	r1, r5
 8006b28:	008b      	lsls	r3, r1, #2
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b30:	4621      	mov	r1, r4
 8006b32:	008a      	lsls	r2, r1, #2
 8006b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b38:	f7f9 fb64 	bl	8000204 <__aeabi_uldivmod>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4b60      	ldr	r3, [pc, #384]	@ (8006cc4 <UART_SetConfig+0x4e4>)
 8006b42:	fba3 2302 	umull	r2, r3, r3, r2
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	011c      	lsls	r4, r3, #4
 8006b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	1891      	adds	r1, r2, r2
 8006b62:	61b9      	str	r1, [r7, #24]
 8006b64:	415b      	adcs	r3, r3
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	1851      	adds	r1, r2, r1
 8006b70:	6139      	str	r1, [r7, #16]
 8006b72:	4649      	mov	r1, r9
 8006b74:	414b      	adcs	r3, r1
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b84:	4659      	mov	r1, fp
 8006b86:	00cb      	lsls	r3, r1, #3
 8006b88:	4651      	mov	r1, sl
 8006b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8e:	4651      	mov	r1, sl
 8006b90:	00ca      	lsls	r2, r1, #3
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	4642      	mov	r2, r8
 8006b9a:	189b      	adds	r3, r3, r2
 8006b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	eb42 0303 	adc.w	r3, r2, r3
 8006ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	008b      	lsls	r3, r1, #2
 8006bc8:	4641      	mov	r1, r8
 8006bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bce:	4641      	mov	r1, r8
 8006bd0:	008a      	lsls	r2, r1, #2
 8006bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006bd6:	f7f9 fb15 	bl	8000204 <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4611      	mov	r1, r2
 8006be0:	4b38      	ldr	r3, [pc, #224]	@ (8006cc4 <UART_SetConfig+0x4e4>)
 8006be2:	fba3 2301 	umull	r2, r3, r3, r1
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	2264      	movs	r2, #100	@ 0x64
 8006bea:	fb02 f303 	mul.w	r3, r2, r3
 8006bee:	1acb      	subs	r3, r1, r3
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	3332      	adds	r3, #50	@ 0x32
 8006bf4:	4a33      	ldr	r2, [pc, #204]	@ (8006cc4 <UART_SetConfig+0x4e4>)
 8006bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c00:	441c      	add	r4, r3
 8006c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c06:	2200      	movs	r2, #0
 8006c08:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c10:	4642      	mov	r2, r8
 8006c12:	464b      	mov	r3, r9
 8006c14:	1891      	adds	r1, r2, r2
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	415b      	adcs	r3, r3
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c20:	4641      	mov	r1, r8
 8006c22:	1851      	adds	r1, r2, r1
 8006c24:	6039      	str	r1, [r7, #0]
 8006c26:	4649      	mov	r1, r9
 8006c28:	414b      	adcs	r3, r1
 8006c2a:	607b      	str	r3, [r7, #4]
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c38:	4659      	mov	r1, fp
 8006c3a:	00cb      	lsls	r3, r1, #3
 8006c3c:	4651      	mov	r1, sl
 8006c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c42:	4651      	mov	r1, sl
 8006c44:	00ca      	lsls	r2, r1, #3
 8006c46:	4610      	mov	r0, r2
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	189b      	adds	r3, r3, r2
 8006c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c52:	464b      	mov	r3, r9
 8006c54:	460a      	mov	r2, r1
 8006c56:	eb42 0303 	adc.w	r3, r2, r3
 8006c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c66:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c74:	4649      	mov	r1, r9
 8006c76:	008b      	lsls	r3, r1, #2
 8006c78:	4641      	mov	r1, r8
 8006c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c7e:	4641      	mov	r1, r8
 8006c80:	008a      	lsls	r2, r1, #2
 8006c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c86:	f7f9 fabd 	bl	8000204 <__aeabi_uldivmod>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <UART_SetConfig+0x4e4>)
 8006c90:	fba3 1302 	umull	r1, r3, r3, r2
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	2164      	movs	r1, #100	@ 0x64
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	3332      	adds	r3, #50	@ 0x32
 8006ca2:	4a08      	ldr	r2, [pc, #32]	@ (8006cc4 <UART_SetConfig+0x4e4>)
 8006ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	f003 020f 	and.w	r2, r3, #15
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4422      	add	r2, r4
 8006cb6:	609a      	str	r2, [r3, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cc4:	51eb851f 	.word	0x51eb851f

08006cc8 <memset>:
 8006cc8:	4402      	add	r2, r0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d100      	bne.n	8006cd2 <memset+0xa>
 8006cd0:	4770      	bx	lr
 8006cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cd6:	e7f9      	b.n	8006ccc <memset+0x4>

08006cd8 <__libc_init_array>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4d0d      	ldr	r5, [pc, #52]	@ (8006d10 <__libc_init_array+0x38>)
 8006cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8006d14 <__libc_init_array+0x3c>)
 8006cde:	1b64      	subs	r4, r4, r5
 8006ce0:	10a4      	asrs	r4, r4, #2
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	42a6      	cmp	r6, r4
 8006ce6:	d109      	bne.n	8006cfc <__libc_init_array+0x24>
 8006ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8006d18 <__libc_init_array+0x40>)
 8006cea:	4c0c      	ldr	r4, [pc, #48]	@ (8006d1c <__libc_init_array+0x44>)
 8006cec:	f000 f818 	bl	8006d20 <_init>
 8006cf0:	1b64      	subs	r4, r4, r5
 8006cf2:	10a4      	asrs	r4, r4, #2
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	42a6      	cmp	r6, r4
 8006cf8:	d105      	bne.n	8006d06 <__libc_init_array+0x2e>
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d00:	4798      	blx	r3
 8006d02:	3601      	adds	r6, #1
 8006d04:	e7ee      	b.n	8006ce4 <__libc_init_array+0xc>
 8006d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0a:	4798      	blx	r3
 8006d0c:	3601      	adds	r6, #1
 8006d0e:	e7f2      	b.n	8006cf6 <__libc_init_array+0x1e>
 8006d10:	08006d58 	.word	0x08006d58
 8006d14:	08006d58 	.word	0x08006d58
 8006d18:	08006d58 	.word	0x08006d58
 8006d1c:	08006d5c 	.word	0x08006d5c

08006d20 <_init>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	bf00      	nop
 8006d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d26:	bc08      	pop	{r3}
 8006d28:	469e      	mov	lr, r3
 8006d2a:	4770      	bx	lr

08006d2c <_fini>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	bf00      	nop
 8006d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d32:	bc08      	pop	{r3}
 8006d34:	469e      	mov	lr, r3
 8006d36:	4770      	bx	lr
