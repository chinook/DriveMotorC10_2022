
DriveMoteurC10_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008244  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08008414  08008414  00009414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008500  08008500  0000a0a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008500  08008500  00009500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008508  08008508  0000a0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008508  08008508  00009508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800850c  0800850c  0000950c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008510  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  200000a8  080085b8  0000a0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  080085b8  0000a68c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f50  00000000  00000000  0000a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b64  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00022b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105d  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242a3  00000000  00000000  0002508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018243  00000000  00000000  00049330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da692  00000000  00000000  00061573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bc05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060bc  00000000  00000000  0013bc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00141d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083fc 	.word	0x080083fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	080083fc 	.word	0x080083fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <delay_us>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_us(uint16_t delay16_us)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
	htim5.Instance->CNT = 0;
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <delay_us+0x30>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
	while (htim5.Instance->CNT < delay16_us);
 80005b2:	bf00      	nop
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <delay_us+0x30>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3f9      	bcc.n	80005b4 <delay_us+0x14>
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	2000030c 	.word	0x2000030c

080005d4 <ExecuteStateMachine>:
uint8_t timer50ms_flag = 0;
uint8_t timer250ms_counter = 0;
uint8_t timer500ms_counter = 0;

void ExecuteStateMachine()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af02      	add	r7, sp, #8
	// Check timers
	if (timer500ms_counter >= 10)
 80005da:	4b5f      	ldr	r3, [pc, #380]	@ (8000758 <ExecuteStateMachine+0x184>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b09      	cmp	r3, #9
 80005e0:	d928      	bls.n	8000634 <ExecuteStateMachine+0x60>
	{
		timer500ms_counter = 0;
 80005e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000758 <ExecuteStateMachine+0x184>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 80005e8:	2108      	movs	r1, #8
 80005ea:	485c      	ldr	r0, [pc, #368]	@ (800075c <ExecuteStateMachine+0x188>)
 80005ec:	f004 f83b 	bl	8004666 <HAL_GPIO_TogglePin>
		DEBUG_SPI_CHATGPT(DRIVE_MAST);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f001 fb95 	bl	8001d20 <DEBUG_SPI_CHATGPT>

		uint8_t tx[2] = {0xAA, 0x55}; // Donnée de test
 80005f6:	f245 53aa 	movw	r3, #21930	@ 0x55aa
 80005fa:	80bb      	strh	r3, [r7, #4]
		uint8_t rx[2] = {0};
 80005fc:	2300      	movs	r3, #0
 80005fe:	803b      	strh	r3, [r7, #0]

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2140      	movs	r1, #64	@ 0x40
 8000604:	4856      	ldr	r0, [pc, #344]	@ (8000760 <ExecuteStateMachine+0x18c>)
 8000606:	f004 f815 	bl	8004634 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx, rx, 2, HAL_MAX_DELAY);
 800060a:	463a      	mov	r2, r7
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2302      	movs	r3, #2
 8000616:	4853      	ldr	r0, [pc, #332]	@ (8000764 <ExecuteStateMachine+0x190>)
 8000618:	f005 f8c3 	bl	80057a2 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2140      	movs	r1, #64	@ 0x40
 8000620:	484f      	ldr	r0, [pc, #316]	@ (8000760 <ExecuteStateMachine+0x18c>)
 8000622:	f004 f807 	bl	8004634 <HAL_GPIO_WritePin>

		printf("Echo SPI : %02X %02X\n", rx[0], rx[1]);
 8000626:	783b      	ldrb	r3, [r7, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	787b      	ldrb	r3, [r7, #1]
 800062c:	461a      	mov	r2, r3
 800062e:	484e      	ldr	r0, [pc, #312]	@ (8000768 <ExecuteStateMachine+0x194>)
 8000630:	f007 f818 	bl	8007664 <iprintf>
	}
	if (timer50ms_flag)
 8000634:	4b4d      	ldr	r3, [pc, #308]	@ (800076c <ExecuteStateMachine+0x198>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d01a      	beq.n	8000672 <ExecuteStateMachine+0x9e>
	{
		timer50ms_flag = 0;
 800063c:	4b4b      	ldr	r3, [pc, #300]	@ (800076c <ExecuteStateMachine+0x198>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
		timer250ms_counter++;
 8000642:	4b4b      	ldr	r3, [pc, #300]	@ (8000770 <ExecuteStateMachine+0x19c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b49      	ldr	r3, [pc, #292]	@ (8000770 <ExecuteStateMachine+0x19c>)
 800064c:	701a      	strb	r2, [r3, #0]
		timer500ms_counter++;
 800064e:	4b42      	ldr	r3, [pc, #264]	@ (8000758 <ExecuteStateMachine+0x184>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b40      	ldr	r3, [pc, #256]	@ (8000758 <ExecuteStateMachine+0x184>)
 8000658:	701a      	strb	r2, [r3, #0]

		flag_buttons = 1;
 800065a:	4b46      	ldr	r3, [pc, #280]	@ (8000774 <ExecuteStateMachine+0x1a0>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
		flag_can_tx_send = 1;
 8000660:	4b45      	ldr	r3, [pc, #276]	@ (8000778 <ExecuteStateMachine+0x1a4>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
		flag_pitch_control = 1;
 8000666:	4b45      	ldr	r3, [pc, #276]	@ (800077c <ExecuteStateMachine+0x1a8>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
		flag_mast_control = 1;
 800066c:	4b44      	ldr	r3, [pc, #272]	@ (8000780 <ExecuteStateMachine+0x1ac>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
	}
	if (timer250ms_counter >= 5)
 8000672:	4b3f      	ldr	r3, [pc, #252]	@ (8000770 <ExecuteStateMachine+0x19c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b04      	cmp	r3, #4
 8000678:	d908      	bls.n	800068c <ExecuteStateMachine+0xb8>
	{
		timer250ms_counter = 0;
 800067a:	4b3d      	ldr	r3, [pc, #244]	@ (8000770 <ExecuteStateMachine+0x19c>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]

		//flag_can_tx_send = 1;

		flag_send_drive_pitch_config = 1;
 8000680:	4b40      	ldr	r3, [pc, #256]	@ (8000784 <ExecuteStateMachine+0x1b0>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
		flag_send_drive_mast_config = 1;
 8000686:	4b40      	ldr	r3, [pc, #256]	@ (8000788 <ExecuteStateMachine+0x1b4>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
	}

	// Check for ROPS or emergency stop flags
	if (b_rops)
 800068c:	4b3f      	ldr	r3, [pc, #252]	@ (800078c <ExecuteStateMachine+0x1b8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <ExecuteStateMachine+0xc6>
	{
		current_state = STATE_ROPS;
 8000694:	4b3e      	ldr	r3, [pc, #248]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 8000696:	2205      	movs	r2, #5
 8000698:	601a      	str	r2, [r3, #0]
	}
	if (b_emergency_stop)
 800069a:	4b3e      	ldr	r3, [pc, #248]	@ (8000794 <ExecuteStateMachine+0x1c0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <ExecuteStateMachine+0xd4>
	{
		current_state = STATE_EMERGENCY_STOP;
 80006a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 80006a4:	2206      	movs	r2, #6
 80006a6:	601a      	str	r2, [r3, #0]
	}

	switch (current_state)
 80006a8:	4b39      	ldr	r3, [pc, #228]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d813      	bhi.n	80006d8 <ExecuteStateMachine+0x104>
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d846      	bhi.n	8000742 <ExecuteStateMachine+0x16e>
 80006b4:	a201      	add	r2, pc, #4	@ (adr r2, 80006bc <ExecuteStateMachine+0xe8>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006df 	.word	0x080006df
 80006c0:	080006eb 	.word	0x080006eb
 80006c4:	080006f7 	.word	0x080006f7
 80006c8:	08000703 	.word	0x08000703
 80006cc:	0800070f 	.word	0x0800070f
 80006d0:	0800071b 	.word	0x0800071b
 80006d4:	08000727 	.word	0x08000727
 80006d8:	2bff      	cmp	r3, #255	@ 0xff
 80006da:	d02a      	beq.n	8000732 <ExecuteStateMachine+0x15e>
 80006dc:	e031      	b.n	8000742 <ExecuteStateMachine+0x16e>
	{
	case STATE_INIT:
		current_state = DoStateInit();
 80006de:	f000 f85b 	bl	8000798 <DoStateInit>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 80006e6:	6013      	str	r3, [r2, #0]
		break;
 80006e8:	e031      	b.n	800074e <ExecuteStateMachine+0x17a>

	case STATE_ASSESS_PUSH_BUTTONS:
		current_state = DoStateAssessPushButtons();
 80006ea:	f000 f8fd 	bl	80008e8 <DoStateAssessPushButtons>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a27      	ldr	r2, [pc, #156]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 80006f2:	6013      	str	r3, [r2, #0]
		break;
 80006f4:	e02b      	b.n	800074e <ExecuteStateMachine+0x17a>

	case STATE_PITCH_CONTROL:
		current_state = DoStatePitchControl();
 80006f6:	f000 f9d1 	bl	8000a9c <DoStatePitchControl>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a24      	ldr	r2, [pc, #144]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 80006fe:	6013      	str	r3, [r2, #0]
		break;
 8000700:	e025      	b.n	800074e <ExecuteStateMachine+0x17a>

	case STATE_MAST_CONTROL:
		current_state = DoStateMastControl();
 8000702:	f000 fa21 	bl	8000b48 <DoStateMastControl>
 8000706:	4603      	mov	r3, r0
 8000708:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 800070a:	6013      	str	r3, [r2, #0]
		break;
 800070c:	e01f      	b.n	800074e <ExecuteStateMachine+0x17a>

	case STATE_CAN:
		current_state = DoStateCAN();
 800070e:	f000 fa9f 	bl	8000c50 <DoStateCAN>
 8000712:	4603      	mov	r3, r0
 8000714:	4a1e      	ldr	r2, [pc, #120]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 8000716:	6013      	str	r3, [r2, #0]
		break;
 8000718:	e019      	b.n	800074e <ExecuteStateMachine+0x17a>

	case STATE_ROPS:
		current_state = DoStateROPS();
 800071a:	f000 faeb 	bl	8000cf4 <DoStateROPS>
 800071e:	4603      	mov	r3, r0
 8000720:	4a1b      	ldr	r2, [pc, #108]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 8000722:	6013      	str	r3, [r2, #0]
		break;
 8000724:	e013      	b.n	800074e <ExecuteStateMachine+0x17a>

	case STATE_EMERGENCY_STOP:
		current_state = DoStateEmergencyStop();
 8000726:	f000 fb29 	bl	8000d7c <DoStateEmergencyStop>
 800072a:	4603      	mov	r3, r0
 800072c:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 800072e:	6013      	str	r3, [r2, #0]
		break;
 8000730:	e00d      	b.n	800074e <ExecuteStateMachine+0x17a>

	case STATE_ERROR:
		DoStateError();
 8000732:	f000 fb33 	bl	8000d9c <DoStateError>
		// In case we exit error handler, restart the state machine
		current_state = DoStateInit();
 8000736:	f000 f82f 	bl	8000798 <DoStateInit>
 800073a:	4603      	mov	r3, r0
 800073c:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 800073e:	6013      	str	r3, [r2, #0]
		break;
 8000740:	e005      	b.n	800074e <ExecuteStateMachine+0x17a>

	default:
		current_state = DoStateInit();
 8000742:	f000 f829 	bl	8000798 <DoStateInit>
 8000746:	4603      	mov	r3, r0
 8000748:	4a11      	ldr	r2, [pc, #68]	@ (8000790 <ExecuteStateMachine+0x1bc>)
 800074a:	6013      	str	r3, [r2, #0]
		break;
 800074c:	bf00      	nop
	};
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200004bf 	.word	0x200004bf
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40021000 	.word	0x40021000
 8000764:	20000194 	.word	0x20000194
 8000768:	08008414 	.word	0x08008414
 800076c:	200004bd 	.word	0x200004bd
 8000770:	200004be 	.word	0x200004be
 8000774:	200004bc 	.word	0x200004bc
 8000778:	2000042d 	.word	0x2000042d
 800077c:	2000042e 	.word	0x2000042e
 8000780:	2000042f 	.word	0x2000042f
 8000784:	20000430 	.word	0x20000430
 8000788:	20000431 	.word	0x20000431
 800078c:	20000428 	.word	0x20000428
 8000790:	20000478 	.word	0x20000478
 8000794:	20000429 	.word	0x20000429

08000798 <DoStateInit>:

uint32_t DoStateInit()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af02      	add	r7, sp, #8
	b_rops = 0;
 800079e:	4b44      	ldr	r3, [pc, #272]	@ (80008b0 <DoStateInit+0x118>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
	b_emergency_stop = 0;
 80007a4:	4b43      	ldr	r3, [pc, #268]	@ (80008b4 <DoStateInit+0x11c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]

	b_timer500ms_flag = 0;
 80007aa:	4b43      	ldr	r3, [pc, #268]	@ (80008b8 <DoStateInit+0x120>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
	b_timer50ms_flag = 0;
 80007b0:	4b42      	ldr	r3, [pc, #264]	@ (80008bc <DoStateInit+0x124>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
	flag_can_tx_send = 0;
 80007b6:	4b42      	ldr	r3, [pc, #264]	@ (80008c0 <DoStateInit+0x128>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]

	can1_recv_flag = 0;
 80007bc:	4b41      	ldr	r3, [pc, #260]	@ (80008c4 <DoStateInit+0x12c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
	flag_can_tx_send = 0;
 80007c2:	4b3f      	ldr	r3, [pc, #252]	@ (80008c0 <DoStateInit+0x128>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]

	flag_send_drive_pitch_config = 0;
 80007c8:	4b3f      	ldr	r3, [pc, #252]	@ (80008c8 <DoStateInit+0x130>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
	flag_send_drive_mast_config = 0;
 80007ce:	4b3f      	ldr	r3, [pc, #252]	@ (80008cc <DoStateInit+0x134>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]

	memset(&can_tx_data, 0, sizeof(CAN_TX_Data));
 80007d4:	221c      	movs	r2, #28
 80007d6:	2100      	movs	r1, #0
 80007d8:	483d      	ldr	r0, [pc, #244]	@ (80008d0 <DoStateInit+0x138>)
 80007da:	f007 f88b 	bl	80078f4 <memset>

	InitDrives(&hspi1, &htim1, TIM_CHANNEL_2, &htim3, TIM_CHANNEL_3);
 80007de:	2308      	movs	r3, #8
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	4b3c      	ldr	r3, [pc, #240]	@ (80008d4 <DoStateInit+0x13c>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	493c      	ldr	r1, [pc, #240]	@ (80008d8 <DoStateInit+0x140>)
 80007e8:	483c      	ldr	r0, [pc, #240]	@ (80008dc <DoStateInit+0x144>)
 80007ea:	f001 f9f7 	bl	8001bdc <InitDrives>

	// Initialize the motor control values
	motorss.motors[DRIVE_PITCH].enabled = 0;
 80007ee:	4b3c      	ldr	r3, [pc, #240]	@ (80008e0 <DoStateInit+0x148>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	741a      	strb	r2, [r3, #16]
	motorss.motors[DRIVE_PITCH].request_enable = 0;
 80007f4:	4b3a      	ldr	r3, [pc, #232]	@ (80008e0 <DoStateInit+0x148>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	745a      	strb	r2, [r3, #17]
	motorss.motors[DRIVE_PITCH].request_disable = 0;
 80007fa:	4b39      	ldr	r3, [pc, #228]	@ (80008e0 <DoStateInit+0x148>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	749a      	strb	r2, [r3, #18]
	motorss.motors[DRIVE_PITCH].mode = MODE_MANUAL;
 8000800:	4b37      	ldr	r3, [pc, #220]	@ (80008e0 <DoStateInit+0x148>)
 8000802:	2200      	movs	r2, #0
 8000804:	74da      	strb	r2, [r3, #19]
	motorss.motors[DRIVE_PITCH].auto_command = 0;
 8000806:	4b36      	ldr	r3, [pc, #216]	@ (80008e0 <DoStateInit+0x148>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
	motorss.motors[DRIVE_PITCH].manual_command = 0;
 800080c:	4b34      	ldr	r3, [pc, #208]	@ (80008e0 <DoStateInit+0x148>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
	motorss.motors[DRIVE_PITCH].direction = DIR_STOP;
 8000812:	4b33      	ldr	r3, [pc, #204]	@ (80008e0 <DoStateInit+0x148>)
 8000814:	2200      	movs	r2, #0
 8000816:	751a      	strb	r2, [r3, #20]
	motorss.motors[DRIVE_PITCH].prev_direction = DIR_STOP;
 8000818:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <DoStateInit+0x148>)
 800081a:	2200      	movs	r2, #0
 800081c:	755a      	strb	r2, [r3, #21]

	motorss.motors[DRIVE_MAST].enabled = 0;
 800081e:	4b30      	ldr	r3, [pc, #192]	@ (80008e0 <DoStateInit+0x148>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
	motorss.motors[DRIVE_MAST].request_enable = 0;
 8000824:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <DoStateInit+0x148>)
 8000826:	2200      	movs	r2, #0
 8000828:	705a      	strb	r2, [r3, #1]
	motorss.motors[DRIVE_MAST].request_disable = 0;
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <DoStateInit+0x148>)
 800082c:	2200      	movs	r2, #0
 800082e:	709a      	strb	r2, [r3, #2]
	motorss.motors[DRIVE_MAST].mode = MODE_MANUAL;
 8000830:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <DoStateInit+0x148>)
 8000832:	2200      	movs	r2, #0
 8000834:	70da      	strb	r2, [r3, #3]
	motorss.motors[DRIVE_MAST].auto_command = 0;
 8000836:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <DoStateInit+0x148>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
	motorss.motors[DRIVE_MAST].manual_command = 0;
 800083c:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <DoStateInit+0x148>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
	motorss.motors[DRIVE_MAST].direction = DIR_STOP;
 8000842:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <DoStateInit+0x148>)
 8000844:	2200      	movs	r2, #0
 8000846:	711a      	strb	r2, [r3, #4]
	motorss.motors[DRIVE_MAST].prev_direction = DIR_STOP;
 8000848:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <DoStateInit+0x148>)
 800084a:	2200      	movs	r2, #0
 800084c:	715a      	strb	r2, [r3, #5]


	HAL_GPIO_WritePin(LED_CANA_GPIO_Port, LED_CANA_Pin, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4824      	ldr	r0, [pc, #144]	@ (80008e4 <DoStateInit+0x14c>)
 8000854:	f003 feee 	bl	8004634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2104      	movs	r1, #4
 800085c:	4821      	ldr	r0, [pc, #132]	@ (80008e4 <DoStateInit+0x14c>)
 800085e:	f003 fee9 	bl	8004634 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8000862:	200a      	movs	r0, #10
 8000864:	f002 fd6c 	bl	8003340 <HAL_Delay>
	EnableDriveExternalPWM(DRIVE_MAST);
 8000868:	2000      	movs	r0, #0
 800086a:	f001 ff37 	bl	80026dc <EnableDriveExternalPWM>
	HAL_Delay(10);
 800086e:	200a      	movs	r0, #10
 8000870:	f002 fd66 	bl	8003340 <HAL_Delay>
	//SetDirection(DRIVE_MAST, DIR_FORWARD);

	// HAL_GPIO_WritePin(TEST_BIN1_GPIO_Port, TEST_BIN1_Pin, GPIO_PIN_SET);
	// HAL_GPIO_WritePin(TEST_BIN2_GPIO_Port, TEST_BIN2_Pin, GPIO_PIN_SET);

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000874:	2104      	movs	r1, #4
 8000876:	4818      	ldr	r0, [pc, #96]	@ (80008d8 <DoStateInit+0x140>)
 8000878:	f005 fc4a 	bl	8006110 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800087c:	2108      	movs	r1, #8
 800087e:	4815      	ldr	r0, [pc, #84]	@ (80008d4 <DoStateInit+0x13c>)
 8000880:	f005 fc46 	bl	8006110 <HAL_TIM_PWM_Stop>

	motorss.motors[DRIVE_PITCH].enabled = 0;
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <DoStateInit+0x148>)
 8000886:	2200      	movs	r2, #0
 8000888:	741a      	strb	r2, [r3, #16]

	//SetDirection(DRIVE_PITCH, motors.pitch_motor.manual_direction);
	//delay_us(10);
	DisableDrive(DRIVE_PITCH);
 800088a:	2001      	movs	r0, #1
 800088c:	f001 fdea 	bl	8002464 <DisableDrive>
	//delay_us(10);
	DisableDrive(DRIVE_MAST);
 8000890:	2000      	movs	r0, #0
 8000892:	f001 fde7 	bl	8002464 <DisableDrive>

	delay_us(10);
 8000896:	200a      	movs	r0, #10
 8000898:	f7ff fe82 	bl	80005a0 <delay_us>
	ResetStatusRegisters(DRIVE_PITCH);
 800089c:	2001      	movs	r0, #1
 800089e:	f001 fe29 	bl	80024f4 <ResetStatusRegisters>
	delay_us(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f7ff fe7c 	bl	80005a0 <delay_us>

	return STATE_ASSESS_PUSH_BUTTONS;
 80008a8:	2301      	movs	r3, #1
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000428 	.word	0x20000428
 80008b4:	20000429 	.word	0x20000429
 80008b8:	2000042a 	.word	0x2000042a
 80008bc:	2000042b 	.word	0x2000042b
 80008c0:	2000042d 	.word	0x2000042d
 80008c4:	20000440 	.word	0x20000440
 80008c8:	20000430 	.word	0x20000430
 80008cc:	20000431 	.word	0x20000431
 80008d0:	2000047c 	.word	0x2000047c
 80008d4:	2000027c 	.word	0x2000027c
 80008d8:	200001ec 	.word	0x200001ec
 80008dc:	20000194 	.word	0x20000194
 80008e0:	20000498 	.word	0x20000498
 80008e4:	40020c00 	.word	0x40020c00

080008e8 <DoStateAssessPushButtons>:

uint32_t DoStateAssessPushButtons()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	if (flag_buttons == 1) {
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <DoStateAssessPushButtons+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d122      	bne.n	800093a <DoStateAssessPushButtons+0x52>
		flag_buttons = 0;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <DoStateAssessPushButtons+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) == GPIO_PIN_RESET) {
 80008fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008fe:	4811      	ldr	r0, [pc, #68]	@ (8000944 <DoStateAssessPushButtons+0x5c>)
 8000900:	f003 fe80 	bl	8004604 <HAL_GPIO_ReadPin>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10c      	bne.n	8000924 <DoStateAssessPushButtons+0x3c>
			speed_stepper_motor_pitch = 100;
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <DoStateAssessPushButtons+0x60>)
 800090c:	2264      	movs	r2, #100	@ 0x64
 800090e:	601a      	str	r2, [r3, #0]
			motorss.motors[DRIVE_PITCH].request_enable = 1;
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <DoStateAssessPushButtons+0x64>)
 8000912:	2201      	movs	r2, #1
 8000914:	745a      	strb	r2, [r3, #17]
			motorss.motors[DRIVE_PITCH].direction = DIR_LEFT;
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <DoStateAssessPushButtons+0x64>)
 8000918:	2201      	movs	r2, #1
 800091a:	751a      	strb	r2, [r3, #20]
			motor_pitch_on = 1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <DoStateAssessPushButtons+0x68>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e00a      	b.n	800093a <DoStateAssessPushButtons+0x52>

		}
		else if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin) == GPIO_PIN_RESET) {
 8000924:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000928:	4806      	ldr	r0, [pc, #24]	@ (8000944 <DoStateAssessPushButtons+0x5c>)
 800092a:	f003 fe6b 	bl	8004604 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <DoStateAssessPushButtons+0x52>
			ResetDrive(DRIVE_PITCH);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 fe6d 	bl	8002614 <ResetDrive>
				speed_stepper_motor_pitch--;
			}
		}*/
	}

	return STATE_PITCH_CONTROL;
 800093a:	2302      	movs	r3, #2
}
 800093c:	4618      	mov	r0, r3
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200004bc 	.word	0x200004bc
 8000944:	40021000 	.word	0x40021000
 8000948:	20000434 	.word	0x20000434
 800094c:	20000498 	.word	0x20000498
 8000950:	200004c0 	.word	0x200004c0

08000954 <CheckEnableDisableMotor>:

uint8_t CheckEnableDisableMotor(DRIVE_MOTOR motor)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	if (motor != DRIVE_PITCH && motor != DRIVE_MAST)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d004      	beq.n	800096e <CheckEnableDisableMotor+0x1a>
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <CheckEnableDisableMotor+0x1a>
		return 0;
 800096a:	2300      	movs	r3, #0
 800096c:	e052      	b.n	8000a14 <CheckEnableDisableMotor+0xc0>

	// Check if requested disable of drive
	if (motorss.motors[motor].request_disable)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4a2a      	ldr	r2, [pc, #168]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	4413      	add	r3, r2
 8000976:	3302      	adds	r3, #2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d02e      	beq.n	80009dc <CheckEnableDisableMotor+0x88>
	{
		DisableDrive(motor);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fd6f 	bl	8002464 <DisableDrive>
		//delay_us(20);

		// On disable, we reset the commands
		motorss.motors[motor].manual_command = 0;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4a24      	ldr	r2, [pc, #144]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	4413      	add	r3, r2
 800098e:	330c      	adds	r3, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
		motorss.motors[motor].auto_command = 0;
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	4413      	add	r3, r2
 800099c:	3308      	adds	r3, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
		motorss.motors[motor].prev_direction = DIR_INVALID;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	4413      	add	r3, r2
 80009aa:	3305      	adds	r3, #5
 80009ac:	2203      	movs	r2, #3
 80009ae:	701a      	strb	r2, [r3, #0]

		motorss.motors[motor].request_disable = 0;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	4413      	add	r3, r2
 80009b8:	3302      	adds	r3, #2
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
		// Make sure we do not reactive drive right after
		motorss.motors[motor].request_enable = 0;
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	4413      	add	r3, r2
 80009c6:	3301      	adds	r3, #1
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]

		motorss.motors[motor].enabled = 0;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a13      	ldr	r2, [pc, #76]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	4413      	add	r3, r2
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]

		return 1; // Indicates enable/disable status changed
 80009d8:	2301      	movs	r3, #1
 80009da:	e01b      	b.n	8000a14 <CheckEnableDisableMotor+0xc0>
	}
	// Check if requested enable of drive
	else if (motorss.motors[motor].request_enable)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4a0f      	ldr	r2, [pc, #60]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	4413      	add	r3, r2
 80009e4:	3301      	adds	r3, #1
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d012      	beq.n	8000a12 <CheckEnableDisableMotor+0xbe>
	{
		EnableDrive(motor);
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fcf0 	bl	80023d4 <EnableDrive>
		//delay_us(20);

		motorss.motors[motor].request_enable = 0;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 80009f8:	011b      	lsls	r3, r3, #4
 80009fa:	4413      	add	r3, r2
 80009fc:	3301      	adds	r3, #1
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]

		motorss.motors[motor].enabled = 1;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a05      	ldr	r2, [pc, #20]	@ (8000a1c <CheckEnableDisableMotor+0xc8>)
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	4413      	add	r3, r2
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]

		return 1; //Indicates enable/disable status changed
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <CheckEnableDisableMotor+0xc0>
	}

	return 0; // Indicates nothing changed
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000498 	.word	0x20000498

08000a20 <CheckChangeDirectionMotor>:

uint8_t CheckChangeDirectionMotor(DRIVE_MOTOR motor)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (motor != DRIVE_PITCH && motor != DRIVE_MAST)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d004      	beq.n	8000a3a <CheckChangeDirectionMotor+0x1a>
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <CheckChangeDirectionMotor+0x1a>
		return 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e029      	b.n	8000a8e <CheckChangeDirectionMotor+0x6e>


	// Check for change of direction
	if (motorss.motors[motor].direction != motorss.motors[motor].prev_direction)
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a16      	ldr	r2, [pc, #88]	@ (8000a98 <CheckChangeDirectionMotor+0x78>)
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	4413      	add	r3, r2
 8000a42:	3304      	adds	r3, #4
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4913      	ldr	r1, [pc, #76]	@ (8000a98 <CheckChangeDirectionMotor+0x78>)
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3305      	adds	r3, #5
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d01a      	beq.n	8000a8c <CheckChangeDirectionMotor+0x6c>
	{
		SetDirection(motor, motorss.motors[motor].direction);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <CheckChangeDirectionMotor+0x78>)
 8000a5a:	011b      	lsls	r3, r3, #4
 8000a5c:	4413      	add	r3, r2
 8000a5e:	3304      	adds	r3, #4
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fe0b 	bl	8002684 <SetDirection>
		//delay_us(20);

		motorss.motors[motor].prev_direction = motorss.motors[motor].direction;
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4909      	ldr	r1, [pc, #36]	@ (8000a98 <CheckChangeDirectionMotor+0x78>)
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	440a      	add	r2, r1
 8000a78:	3204      	adds	r2, #4
 8000a7a:	7811      	ldrb	r1, [r2, #0]
 8000a7c:	4a06      	ldr	r2, [pc, #24]	@ (8000a98 <CheckChangeDirectionMotor+0x78>)
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	4413      	add	r3, r2
 8000a82:	3305      	adds	r3, #5
 8000a84:	460a      	mov	r2, r1
 8000a86:	701a      	strb	r2, [r3, #0]

		return 1; // Indicates direction changed
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e000      	b.n	8000a8e <CheckChangeDirectionMotor+0x6e>
	}

	return 0; // Indicates direction did not change
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000498 	.word	0x20000498

08000a9c <DoStatePitchControl>:


uint8_t motor_pitch_on = 0;
uint32_t DoStatePitchControl()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	else {
		return STATE_MAST_CONTROL;
	}*/

	// Periodically re-send the config registers to make sure drive has correct values
	if (flag_send_drive_pitch_config)
 8000aa2:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <DoStatePitchControl+0x94>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d005      	beq.n	8000ab6 <DoStatePitchControl+0x1a>
	{
		flag_send_drive_pitch_config = 0;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <DoStatePitchControl+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
		SendConfigRegisters(DRIVE_PITCH);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f001 fd6b 	bl	800258c <SendConfigRegisters>
		//motorss.motors[DRIVE_PITCH].request_disable = 1;
	//}
	/*if (motorss.motors[DRIVE_PITCH].enabled != 1) {
		motorss.motors[DRIVE_PITCH].request_enable = 1;
	} */
	CheckEnableDisableMotor(DRIVE_PITCH);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff ff4c 	bl	8000954 <CheckEnableDisableMotor>



	if (motorss.motors[DRIVE_PITCH].enabled)
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <DoStatePitchControl+0x98>)
 8000abe:	7c1b      	ldrb	r3, [r3, #16]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d004      	beq.n	8000ace <DoStatePitchControl+0x32>
	{
		speed_stepper_motor_pitch = speed_stepper_motor_pitch;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <DoStatePitchControl+0x9c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <DoStatePitchControl+0x9c>)
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e002      	b.n	8000ad4 <DoStatePitchControl+0x38>
					//motors.pitch_motor.prev_auto_direction = DIR_INVALID;
				//}
			//}
		//}
	} else {
		motor_pitch_on = 0;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <DoStatePitchControl+0xa0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	}



	can_tx_data.pitch_motor_mode_feedback = motorss.motors[DRIVE_PITCH].mode;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <DoStatePitchControl+0x98>)
 8000ad6:	7cdb      	ldrb	r3, [r3, #19]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <DoStatePitchControl+0xa4>)
 8000adc:	611a      	str	r2, [r3, #16]

	// Check for faults or stall errors
	uint8_t stall = !HAL_GPIO_ReadPin(nSTALL2_GPIO_Port, nSTALL2_Pin);
 8000ade:	2108      	movs	r1, #8
 8000ae0:	4818      	ldr	r0, [pc, #96]	@ (8000b44 <DoStatePitchControl+0xa8>)
 8000ae2:	f003 fd8f 	bl	8004604 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bf0c      	ite	eq
 8000aec:	2301      	moveq	r3, #1
 8000aee:	2300      	movne	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	71fb      	strb	r3, [r7, #7]
	uint8_t fault = !HAL_GPIO_ReadPin(nFAULT2_GPIO_Port, nFAULT2_Pin);
 8000af4:	2110      	movs	r1, #16
 8000af6:	4813      	ldr	r0, [pc, #76]	@ (8000b44 <DoStatePitchControl+0xa8>)
 8000af8:	f003 fd84 	bl	8004604 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf0c      	ite	eq
 8000b02:	2301      	moveq	r3, #1
 8000b04:	2300      	movne	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	71bb      	strb	r3, [r7, #6]
	can_tx_data.pitch_motor_fault_stall = (fault + (stall << 1));
 8000b0a:	79ba      	ldrb	r2, [r7, #6]
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <DoStatePitchControl+0xa4>)
 8000b16:	609a      	str	r2, [r3, #8]

	if (fault)
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <DoStatePitchControl+0x88>
	{
		ResetStatusRegisters(DRIVE_PITCH);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f001 fce8 	bl	80024f4 <ResetStatusRegisters>
	}

	return STATE_MAST_CONTROL;
 8000b24:	2303      	movs	r3, #3
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000430 	.word	0x20000430
 8000b34:	20000498 	.word	0x20000498
 8000b38:	20000434 	.word	0x20000434
 8000b3c:	200004c0 	.word	0x200004c0
 8000b40:	2000047c 	.word	0x2000047c
 8000b44:	40021000 	.word	0x40021000

08000b48 <DoStateMastControl>:

uint32_t DoStateMastControl()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	if (flag_mast_control == 1) {
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c3c <DoStateMastControl+0xf4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d107      	bne.n	8000b66 <DoStateMastControl+0x1e>
		flag_mast_control = 0;
 8000b56:	4b39      	ldr	r3, [pc, #228]	@ (8000c3c <DoStateMastControl+0xf4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
	}
	else {
		return STATE_CAN;
	}
	// Periodically re-send the config registers to make sure drive has correct values
	if (flag_send_drive_mast_config)
 8000b5c:	4b38      	ldr	r3, [pc, #224]	@ (8000c40 <DoStateMastControl+0xf8>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d008      	beq.n	8000b76 <DoStateMastControl+0x2e>
 8000b64:	e001      	b.n	8000b6a <DoStateMastControl+0x22>
		return STATE_CAN;
 8000b66:	2304      	movs	r3, #4
 8000b68:	e063      	b.n	8000c32 <DoStateMastControl+0xea>
	{
		flag_send_drive_mast_config = 0;
 8000b6a:	4b35      	ldr	r3, [pc, #212]	@ (8000c40 <DoStateMastControl+0xf8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]

		SendConfigRegisters(DRIVE_MAST);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f001 fd0b 	bl	800258c <SendConfigRegisters>
	}

	// Check if requested disable of drive
	if (motorss.motors[DRIVE_MAST].enabled != 1) {
 8000b76:	4b33      	ldr	r3, [pc, #204]	@ (8000c44 <DoStateMastControl+0xfc>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d002      	beq.n	8000b84 <DoStateMastControl+0x3c>
		motorss.motors[DRIVE_MAST].request_enable = 1;
 8000b7e:	4b31      	ldr	r3, [pc, #196]	@ (8000c44 <DoStateMastControl+0xfc>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	705a      	strb	r2, [r3, #1]
	}
	CheckEnableDisableMotor(DRIVE_MAST);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff fee5 	bl	8000954 <CheckEnableDisableMotor>

	uint8_t enableChanged = CheckEnableDisableMotor(DRIVE_MAST);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fee2 	bl	8000954 <CheckEnableDisableMotor>
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
	if (enableChanged)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <DoStateMastControl+0x5e>
	{
		// Make sure to disable the PWMs if drive was disabled
		if (motorss.motors[DRIVE_MAST].enabled == 0)
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c44 <DoStateMastControl+0xfc>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <DoStateMastControl+0x5e>
		{
			DriveMastStop();
 8000ba2:	f001 fecb 	bl	800293c <DriveMastStop>
			//delay_us(20);
		}
	}

	//Check change of direction
	uint8_t directionChanged = CheckChangeDirectionMotor(DRIVE_MAST);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff ff3a 	bl	8000a20 <CheckChangeDirectionMotor>
 8000bac:	4603      	mov	r3, r0
 8000bae:	71bb      	strb	r3, [r7, #6]

	if (motorss.motors[DRIVE_MAST].enabled)
 8000bb0:	4b24      	ldr	r3, [pc, #144]	@ (8000c44 <DoStateMastControl+0xfc>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d013      	beq.n	8000be0 <DoStateMastControl+0x98>
	{
		if (motorss.motors[DRIVE_MAST].direction == DIR_STOP)
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <DoStateMastControl+0xfc>)
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <DoStateMastControl+0x7e>
		{
			DriveMastStop();
 8000bc0:	f001 febc 	bl	800293c <DriveMastStop>
 8000bc4:	e00c      	b.n	8000be0 <DoStateMastControl+0x98>
			//delay_us(20);
		}
		else if (motorss.motors[DRIVE_MAST].direction == DIR_LEFT)
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <DoStateMastControl+0xfc>)
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d102      	bne.n	8000bd4 <DoStateMastControl+0x8c>
		{
			DriveMastLeft();
 8000bce:	f001 fe8f 	bl	80028f0 <DriveMastLeft>
 8000bd2:	e005      	b.n	8000be0 <DoStateMastControl+0x98>
			//delay_us(20);
		}
		else if (motorss.motors[DRIVE_MAST].direction == DIR_RIGHT)
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <DoStateMastControl+0xfc>)
 8000bd6:	791b      	ldrb	r3, [r3, #4]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d101      	bne.n	8000be0 <DoStateMastControl+0x98>
		{
			DriveMastRight();
 8000bdc:	f001 fe62 	bl	80028a4 <DriveMastRight>
			}
		}
	}
	*/

	can_tx_data.mast_motor_mode_feedback = motorss.motors[DRIVE_MAST].mode;
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <DoStateMastControl+0xfc>)
 8000be2:	78db      	ldrb	r3, [r3, #3]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <DoStateMastControl+0x100>)
 8000be8:	615a      	str	r2, [r3, #20]

	// Check for faults or stall errors
	uint8_t stall = !HAL_GPIO_ReadPin(nSTALL1_GPIO_Port, nSTALL1_Pin);
 8000bea:	2102      	movs	r1, #2
 8000bec:	4817      	ldr	r0, [pc, #92]	@ (8000c4c <DoStateMastControl+0x104>)
 8000bee:	f003 fd09 	bl	8004604 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf0c      	ite	eq
 8000bf8:	2301      	moveq	r3, #1
 8000bfa:	2300      	movne	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	717b      	strb	r3, [r7, #5]
	uint8_t fault = !HAL_GPIO_ReadPin(nFAULT1_GPIO_Port, nFAULT1_Pin);
 8000c00:	2104      	movs	r1, #4
 8000c02:	4812      	ldr	r0, [pc, #72]	@ (8000c4c <DoStateMastControl+0x104>)
 8000c04:	f003 fcfe 	bl	8004604 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2301      	moveq	r3, #1
 8000c10:	2300      	movne	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	713b      	strb	r3, [r7, #4]
	can_tx_data.mast_motor_fault_stall = (fault + (stall << 1));
 8000c16:	793a      	ldrb	r2, [r7, #4]
 8000c18:	797b      	ldrb	r3, [r7, #5]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <DoStateMastControl+0x100>)
 8000c22:	60da      	str	r2, [r3, #12]

	if (fault)
 8000c24:	793b      	ldrb	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <DoStateMastControl+0xe8>
	{
		ResetStatusRegisters(DRIVE_MAST);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f001 fc62 	bl	80024f4 <ResetStatusRegisters>
	}

	return STATE_CAN;
 8000c30:	2304      	movs	r3, #4
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000042f 	.word	0x2000042f
 8000c40:	20000431 	.word	0x20000431
 8000c44:	20000498 	.word	0x20000498
 8000c48:	2000047c 	.word	0x2000047c
 8000c4c:	40020400 	.word	0x40020400

08000c50 <DoStateCAN>:

uint32_t DoStateCAN()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
	if (flag_can_tx_send) // Sent every 50ms
 8000c56:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <DoStateCAN+0x94>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d03d      	beq.n	8000cda <DoStateCAN+0x8a>
	{
		flag_can_tx_send = 0;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <DoStateCAN+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]


		uint32_t pitch_mode = can_tx_data.pitch_motor_mode_feedback;
 8000c64:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <DoStateCAN+0x98>)
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	60fb      	str	r3, [r7, #12]
		uint32_t pitch_mode_msg = ((pitch_mode == MODE_MANUAL) ? MOTOR_MODE_MANUAL : MOTOR_MODE_AUTOMATIC);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <DoStateCAN+0x24>
 8000c70:	2300      	movs	r3, #0
 8000c72:	e000      	b.n	8000c76 <DoStateCAN+0x26>
 8000c74:	2302      	movs	r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_PITCH_MODE, (uint8_t*)&pitch_mode_msg, 4, 0);
 8000c78:	1d39      	adds	r1, r7, #4
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	2021      	movs	r0, #33	@ 0x21
 8000c80:	f000 f9d6 	bl	8001030 <TransmitCAN>

		uint32_t mast_mode = can_tx_data.mast_motor_mode_feedback;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <DoStateCAN+0x98>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	60bb      	str	r3, [r7, #8]
		uint32_t mast_mode_msg = ((mast_mode == MODE_MANUAL) ? MOTOR_MODE_MANUAL : MOTOR_MODE_AUTOMATIC);
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <DoStateCAN+0x44>
 8000c90:	2300      	movs	r3, #0
 8000c92:	e000      	b.n	8000c96 <DoStateCAN+0x46>
 8000c94:	2302      	movs	r3, #2
 8000c96:	603b      	str	r3, [r7, #0]
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_MAST_MODE, (uint8_t*)&mast_mode_msg, 4, 0);
 8000c98:	4639      	mov	r1, r7
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	2022      	movs	r0, #34	@ 0x22
 8000ca0:	f000 f9c6 	bl	8001030 <TransmitCAN>

		static float test = 0;
		static float debug_log_4_value = 0;
		debug_log_4_value = debug_log_4_value + test;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <DoStateCAN+0x9c>)
 8000ca6:	ed93 7a00 	vldr	s14, [r3]
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <DoStateCAN+0xa0>)
 8000cac:	edd3 7a00 	vldr	s15, [r3]
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <DoStateCAN+0x9c>)
 8000cb6:	edc3 7a00 	vstr	s15, [r3]
		TransmitCAN(CAN_ID_MARIO_VAL_DEBUG_LOG_4, (uint8_t*)&debug_log_4_value, 4, 0);
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	490b      	ldr	r1, [pc, #44]	@ (8000cec <DoStateCAN+0x9c>)
 8000cc0:	204f      	movs	r0, #79	@ 0x4f
 8000cc2:	f000 f9b5 	bl	8001030 <TransmitCAN>
		test++;
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <DoStateCAN+0xa0>)
 8000cc8:	edd3 7a00 	vldr	s15, [r3]
 8000ccc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <DoStateCAN+0xa0>)
 8000cd6:	edc3 7a00 	vstr	s15, [r3]
		*/

	}

	// return STATE_PITCH_CONTROL;
	return STATE_ASSESS_PUSH_BUTTONS;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000042d 	.word	0x2000042d
 8000ce8:	2000047c 	.word	0x2000047c
 8000cec:	200004c4 	.word	0x200004c4
 8000cf0:	200004c8 	.word	0x200004c8

08000cf4 <DoStateROPS>:

uint32_t DoStateROPS()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	while (b_rops)
 8000cf8:	e029      	b.n	8000d4e <DoStateROPS+0x5a>
	{
		//delay_us(10);

		// Check timers
		if (b_timer500ms_flag)
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <DoStateROPS+0x68>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <DoStateROPS+0x1c>
		{
			b_timer500ms_flag = 0;
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <DoStateROPS+0x68>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 8000d08:	2108      	movs	r1, #8
 8000d0a:	4815      	ldr	r0, [pc, #84]	@ (8000d60 <DoStateROPS+0x6c>)
 8000d0c:	f003 fcab 	bl	8004666 <HAL_GPIO_TogglePin>
		}
		if (b_timer50ms_flag)
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <DoStateROPS+0x70>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d008      	beq.n	8000d2a <DoStateROPS+0x36>
		{
			b_timer50ms_flag = 0;
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <DoStateROPS+0x70>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
			flag_pitch_control = 1;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <DoStateROPS+0x74>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
			flag_mast_control = 1;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <DoStateROPS+0x78>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
			// flag_can_tx_send = 1;
		}
		if (b_timer250ms_flag)
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <DoStateROPS+0x7c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <DoStateROPS+0x4a>
		{
			b_timer250ms_flag = 0;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <DoStateROPS+0x7c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]

			flag_can_tx_send = 1;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <DoStateROPS+0x80>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
		// Safety check, if we have a command from MARIO, make sure drive is enabled
		//if (motors.motors[DRIVE_PITCH].auto_command && !motors.motors[DRIVE_PITCH].enabled)
		//	motors.motors[DRIVE_PITCH].request_enable = 1;
		//motors.motors[DRIVE_PITCH].mode = MODE_AUTOMATIC;

		DoStateAssessPushButtons();
 8000d3e:	f7ff fdd3 	bl	80008e8 <DoStateAssessPushButtons>
		DoStatePitchControl();
 8000d42:	f7ff feab 	bl	8000a9c <DoStatePitchControl>
		DoStateMastControl();
 8000d46:	f7ff feff 	bl	8000b48 <DoStateMastControl>
		DoStateCAN();
 8000d4a:	f7ff ff81 	bl	8000c50 <DoStateCAN>
	while (b_rops)
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <DoStateROPS+0x84>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1d1      	bne.n	8000cfa <DoStateROPS+0x6>
	}

	return STATE_PITCH_CONTROL;
 8000d56:	2302      	movs	r3, #2
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000042a 	.word	0x2000042a
 8000d60:	40020c00 	.word	0x40020c00
 8000d64:	2000042b 	.word	0x2000042b
 8000d68:	2000042e 	.word	0x2000042e
 8000d6c:	2000042f 	.word	0x2000042f
 8000d70:	2000042c 	.word	0x2000042c
 8000d74:	2000042d 	.word	0x2000042d
 8000d78:	20000428 	.word	0x20000428

08000d7c <DoStateEmergencyStop>:

uint32_t DoStateEmergencyStop()
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	while (b_emergency_stop)
 8000d80:	bf00      	nop
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <DoStateEmergencyStop+0x1c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1fb      	bne.n	8000d82 <DoStateEmergencyStop+0x6>
	{

	}

	return STATE_PITCH_CONTROL;
 8000d8a:	2302      	movs	r3, #2
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000429 	.word	0x20000429

08000d9c <DoStateError>:

void DoStateError()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	Error_Handler();
 8000da0:	f000 ff16 	bl	8001bd0 <Error_Handler>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SetMotorMode>:

//uint16_t test_debug_log_can_message[200] = {0};
//uint8_t test_debug_log_can_message_counter = 0;
void SetMotorMode(DRIVE_MOTOR motor, uint32_t can_value)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	603b      	str	r3, [r7, #0]
	} else {
		test_debug_log_can_message_counter++;
	}
	test_debug_log_can_message[test_debug_log_can_message_counter] = can_value; */

	uint32_t motor_mode = MODE_MANUAL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_MODE_MANUAL) {
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <SetMotorMode+0x22>
		motor_mode = MODE_MANUAL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	e004      	b.n	8000dd4 <SetMotorMode+0x2c>
	}
	else if (can_value == MOTOR_MODE_AUTOMATIC) {
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d10b      	bne.n	8000de8 <SetMotorMode+0x40>
		motor_mode = MODE_AUTOMATIC;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
	}
	else {
		return; // Do not set motor mode if mode value from CAN is invalid
	}

	motorss.motors[motor].mode = motor_mode;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	b2d1      	uxtb	r1, r2
 8000dda:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <SetMotorMode+0x4c>)
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	3303      	adds	r3, #3
 8000de2:	460a      	mov	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e000      	b.n	8000dea <SetMotorMode+0x42>
		return; // Do not set motor mode if mode value from CAN is invalid
 8000de8:	bf00      	nop
}
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	20000498 	.word	0x20000498

08000df8 <SetMotorDirection>:


void SetMotorDirection(DRIVE_MOTOR motor, int32_t can_value)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	603b      	str	r3, [r7, #0]
	} else {
		test_debug_log_can_message_counter++;
	}
	test_debug_log_can_message[test_debug_log_can_message_counter] = can_value;*/

	uint32_t motor_direction = DIR_INVALID;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_DIRECTION_STOP)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d102      	bne.n	8000e1a <SetMotorDirection+0x22>
		motor_direction = DIR_STOP;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	e00a      	b.n	8000e30 <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_LEFT)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <SetMotorDirection+0x2e>
		motor_direction = DIR_LEFT;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e004      	b.n	8000e30 <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_RIGHT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d10f      	bne.n	8000e4c <SetMotorDirection+0x54>
		motor_direction = DIR_RIGHT;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
	else
		return;

	motorss.motors[motor].direction = motor_direction;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	b2d1      	uxtb	r1, r2
 8000e36:	4a07      	ldr	r2, [pc, #28]	@ (8000e54 <SetMotorDirection+0x5c>)
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	460a      	mov	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]

	// Check change of direction
	CheckChangeDirectionMotor(motor);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fdeb 	bl	8000a20 <CheckChangeDirectionMotor>
 8000e4a:	e000      	b.n	8000e4e <SetMotorDirection+0x56>
		return;
 8000e4c:	bf00      	nop
}
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000498 	.word	0x20000498

08000e58 <ProcessCanMessage>:

void ProcessCanMessage()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) == GPIO_PIN_RESET) {
 8000e5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e62:	483c      	ldr	r0, [pc, #240]	@ (8000f54 <ProcessCanMessage+0xfc>)
 8000e64:	f003 fbce 	bl	8004604 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d06b      	beq.n	8000f46 <ProcessCanMessage+0xee>
		return 0;
	}
	if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin) == GPIO_PIN_RESET) {
 8000e6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e72:	4838      	ldr	r0, [pc, #224]	@ (8000f54 <ProcessCanMessage+0xfc>)
 8000e74:	f003 fbc6 	bl	8004604 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d065      	beq.n	8000f4a <ProcessCanMessage+0xf2>
	} BytesToType;
	static BytesToType bytesToType;

	// Technically CAN data can be 8 bytes but we only send 4-bytes data to the motor driver
	// uint32_t upper_can_data = rxData[4] | (rxData[5] << 8) | (rxData[6] << 16) | (rxData[7] << 24);
	uint32_t can_data = rxData[0] | (rxData[1] << 8) | (rxData[2] << 16) | (rxData[3] << 24);
 8000e7e:	4b36      	ldr	r3, [pc, #216]	@ (8000f58 <ProcessCanMessage+0x100>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <ProcessCanMessage+0x100>)
 8000e86:	785b      	ldrb	r3, [r3, #1]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <ProcessCanMessage+0x100>)
 8000e8e:	789b      	ldrb	r3, [r3, #2]
 8000e90:	041b      	lsls	r3, r3, #16
 8000e92:	431a      	orrs	r2, r3
 8000e94:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <ProcessCanMessage+0x100>)
 8000e96:	78db      	ldrb	r3, [r3, #3]
 8000e98:	061b      	lsls	r3, r3, #24
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	607b      	str	r3, [r7, #4]

	//
	// Motor Modes
	//
	// TODO: (Marc) Should one have precedence over the other ? What if steering wheel sets mode that is then overwritten by mario ?
	if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_MODE)
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f5c <ProcessCanMessage+0x104>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b11      	cmp	r3, #17
 8000ea4:	d104      	bne.n	8000eb0 <ProcessCanMessage+0x58>
	{
		SetMotorMode(DRIVE_PITCH, can_data);
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff ff7d 	bl	8000da8 <SetMotorMode>
 8000eae:	e04d      	b.n	8000f4c <ProcessCanMessage+0xf4>
	}
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_MODE)
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <ProcessCanMessage+0x104>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b12      	cmp	r3, #18
 8000eb6:	d104      	bne.n	8000ec2 <ProcessCanMessage+0x6a>
	{
		SetMotorMode(DRIVE_MAST, can_data);
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff ff74 	bl	8000da8 <SetMotorMode>
 8000ec0:	e044      	b.n	8000f4c <ProcessCanMessage+0xf4>
	}
	//
	// MARIO Manual motor commands
	//
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_DIRECTION)
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <ProcessCanMessage+0x104>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b13      	cmp	r3, #19
 8000ec8:	d110      	bne.n	8000eec <ProcessCanMessage+0x94>
	{
		SetMotorDirection(DRIVE_PITCH, can_data);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff ff92 	bl	8000df8 <SetMotorDirection>

		if (motorss.motors[DRIVE_PITCH].direction != DIR_STOP) {
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <ProcessCanMessage+0x108>)
 8000ed6:	7d1b      	ldrb	r3, [r3, #20]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <ProcessCanMessage+0x8c>
			motor_pitch_on = 1;
 8000edc:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <ProcessCanMessage+0x10c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e033      	b.n	8000f4c <ProcessCanMessage+0xf4>
		} else {
			motor_pitch_on = 0;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <ProcessCanMessage+0x10c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	e02f      	b.n	8000f4c <ProcessCanMessage+0xf4>
		}
	}
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_DIRECTION)
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <ProcessCanMessage+0x104>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b14      	cmp	r3, #20
 8000ef2:	d105      	bne.n	8000f00 <ProcessCanMessage+0xa8>
	{
		SetMotorDirection(DRIVE_MAST, can_data);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ff7d 	bl	8000df8 <SetMotorDirection>
 8000efe:	e025      	b.n	8000f4c <ProcessCanMessage+0xf4>
	}
	//
	// MARIO Automatic motor commands
	//
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_SPEED)
 8000f00:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <ProcessCanMessage+0x104>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b15      	cmp	r3, #21
 8000f06:	d106      	bne.n	8000f16 <ProcessCanMessage+0xbe>
	{
		can_data = (can_data & 0xFF); //SUPER IMPORTANT
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	607b      	str	r3, [r7, #4]

		//speed_stepper_motor_pitch = 100;
		speed_stepper_motor_pitch = can_data;
 8000f0e:	4a16      	ldr	r2, [pc, #88]	@ (8000f68 <ProcessCanMessage+0x110>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e01a      	b.n	8000f4c <ProcessCanMessage+0xf4>
		motors.pitch_motor.request_disable = 1;
		motors.mast_motor.request_disable = 1;

		DoStateInit();
	}*/
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_ROPS)
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <ProcessCanMessage+0x104>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <ProcessCanMessage+0xf4>
	{
		uint8_t rops_data = (can_data & 0xFF);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	70fb      	strb	r3, [r7, #3]
		if (rops_data == ROPS_ENABLE)
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d103      	bne.n	8000f30 <ProcessCanMessage+0xd8>
			b_rops = 1;
 8000f28:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <ProcessCanMessage+0x114>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e00d      	b.n	8000f4c <ProcessCanMessage+0xf4>
		else if (rops_data == ROPS_DISABLE)
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d103      	bne.n	8000f3e <ProcessCanMessage+0xe6>
			b_rops = 0;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <ProcessCanMessage+0x114>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e006      	b.n	8000f4c <ProcessCanMessage+0xf4>
		else
		{
			// Unknown value for ROPS command, assume cmd was to activate ROPS
			b_rops = 1;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <ProcessCanMessage+0x114>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e002      	b.n	8000f4c <ProcessCanMessage+0xf4>
		return 0;
 8000f46:	bf00      	nop
 8000f48:	e000      	b.n	8000f4c <ProcessCanMessage+0xf4>
		return 0;
 8000f4a:	bf00      	nop
	}
	else
	{
		// Unknown CAN ID
	}
}
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	20000438 	.word	0x20000438
 8000f5c:	2000045c 	.word	0x2000045c
 8000f60:	20000498 	.word	0x20000498
 8000f64:	200004c0 	.word	0x200004c0
 8000f68:	20000434 	.word	0x20000434
 8000f6c:	20000428 	.word	0x20000428

08000f70 <CAN_ReceiveFifoCallback>:

void CAN_ReceiveFifoCallback(CAN_HandleTypeDef* hcan, uint32_t fifo)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]

	uint32_t num_messages = HAL_CAN_GetRxFifoFillLevel(hcan, fifo);
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f002 fe45 	bl	8003c0c <HAL_CAN_GetRxFifoFillLevel>
 8000f82:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < num_messages; ++i)
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e00f      	b.n	8000faa <CAN_ReceiveFifoCallback+0x3a>
	{
		if (HAL_CAN_GetRxMessage(hcan, fifo, &pRxHeader, rxData) != HAL_OK)
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <CAN_ReceiveFifoCallback+0x4c>)
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <CAN_ReceiveFifoCallback+0x50>)
 8000f8e:	6839      	ldr	r1, [r7, #0]
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f002 fd29 	bl	80039e8 <HAL_CAN_GetRxMessage>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <CAN_ReceiveFifoCallback+0x30>
		{
			Error_Handler();
 8000f9c:	f000 fe18 	bl	8001bd0 <Error_Handler>
		}

		ProcessCanMessage();
 8000fa0:	f7ff ff5a 	bl	8000e58 <ProcessCanMessage>
	for (int i = 0; i < num_messages; ++i)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d8eb      	bhi.n	8000f8a <CAN_ReceiveFifoCallback+0x1a>
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000438 	.word	0x20000438
 8000fc0:	2000045c 	.word	0x2000045c

08000fc4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO0);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffce 	bl	8000f70 <CAN_ReceiveFifoCallback>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO1);
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffc2 	bl	8000f70 <CAN_ReceiveFifoCallback>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_CAN_RxFifo0FullCallback>:


// CAN error callbacks
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef* hcan)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_CAN_RxFifo1FullCallback>:

void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef* hcan)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <TransmitCAN>:


HAL_StatusTypeDef TransmitCAN(uint32_t id, uint8_t* buf, uint8_t size, uint8_t with_priority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	460b      	mov	r3, r1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	4613      	mov	r3, r2
 8001044:	71bb      	strb	r3, [r7, #6]
	// CAN_TxHeaderTypeDef msg;
	pTxHeader.StdId = id;
 8001046:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <TransmitCAN+0xb4>)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6013      	str	r3, [r2, #0]
	pTxHeader.IDE = CAN_ID_STD;
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <TransmitCAN+0xb4>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR = CAN_RTR_DATA;
 8001052:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <TransmitCAN+0xb4>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
	pTxHeader.DLC = size; // Number of bytes to send
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4a22      	ldr	r2, [pc, #136]	@ (80010e4 <TransmitCAN+0xb4>)
 800105c:	6113      	str	r3, [r2, #16]
	pTxHeader.TransmitGlobalTime = DISABLE;
 800105e:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <TransmitCAN+0xb4>)
 8001060:	2200      	movs	r2, #0
 8001062:	751a      	strb	r2, [r3, #20]

	uint8_t found_mailbox = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 10; ++i)
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	e00b      	b.n	8001086 <TransmitCAN+0x56>
	{
		// Check that mailbox is available for tx
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)
 800106e:	481e      	ldr	r0, [pc, #120]	@ (80010e8 <TransmitCAN+0xb8>)
 8001070:	f002 fc85 	bl	800397e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <TransmitCAN+0x50>
		{
			found_mailbox = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	75fb      	strb	r3, [r7, #23]
			break;
 800107e:	e005      	b.n	800108c <TransmitCAN+0x5c>
	for (int i = 0; i < 10; ++i)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	3301      	adds	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	2b09      	cmp	r3, #9
 800108a:	ddf0      	ble.n	800106e <TransmitCAN+0x3e>
	{
		// TODO: (Marc) Should really be the error led once it's been soldered
		//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
	}

	if (with_priority)
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d010      	beq.n	80010b4 <TransmitCAN+0x84>
	{
		// If message is important, make sure no other messages are queud to ensure it will be sent after any other
		// values that could override it.
		for (int i = 0; i < 10; ++i)
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	e008      	b.n	80010aa <TransmitCAN+0x7a>
		{
			// Check that all 3 mailboxes are empty
			if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 3)
 8001098:	4813      	ldr	r0, [pc, #76]	@ (80010e8 <TransmitCAN+0xb8>)
 800109a:	f002 fc70 	bl	800397e <HAL_CAN_GetTxMailboxesFreeLevel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d006      	beq.n	80010b2 <TransmitCAN+0x82>
		for (int i = 0; i < 10; ++i)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	3301      	adds	r3, #1
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	ddf3      	ble.n	8001098 <TransmitCAN+0x68>
 80010b0:	e000      	b.n	80010b4 <TransmitCAN+0x84>
				break;
 80010b2:	bf00      	nop
			//delay_us(50);
		}
	}

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, buf, &mb);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	490a      	ldr	r1, [pc, #40]	@ (80010e4 <TransmitCAN+0xb4>)
 80010bc:	480a      	ldr	r0, [pc, #40]	@ (80010e8 <TransmitCAN+0xb8>)
 80010be:	f002 fb83 	bl	80037c8 <HAL_CAN_AddTxMessage>
 80010c2:	4603      	mov	r3, r0
 80010c4:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK)
 80010c6:	7dbb      	ldrb	r3, [r7, #22]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <TransmitCAN+0xa0>
	{
		return ret;
 80010cc:	7dbb      	ldrb	r3, [r7, #22]
 80010ce:	e005      	b.n	80010dc <TransmitCAN+0xac>
	}

	// Update the CAN led
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2102      	movs	r1, #2
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <TransmitCAN+0xbc>)
 80010d6:	f003 faad 	bl	8004634 <HAL_GPIO_WritePin>
	// ToggleLed(LED_CAN);
	return ret;
 80010da:	7dbb      	ldrb	r3, [r7, #22]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3720      	adds	r7, #32
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000444 	.word	0x20000444
 80010e8:	200000c4 	.word	0x200000c4
 80010ec:	40020c00 	.word	0x40020c00

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f002 f8b2 	bl	800325c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f832 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f000 fc78 	bl	80019f0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001100:	f000 f89c 	bl	800123c <MX_CAN1_Init>
  MX_I2C1_Init();
 8001104:	f000 f924 	bl	8001350 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001108:	f000 f950 	bl	80013ac <MX_I2C3_Init>
  MX_SPI1_Init();
 800110c:	f000 f97c 	bl	8001408 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001110:	f000 fc44 	bl	800199c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001114:	f000 f9ae 	bl	8001474 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001118:	f000 fa4c 	bl	80015b4 <MX_TIM2_Init>
  MX_TIM4_Init();
 800111c:	f000 fb36 	bl	800178c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001120:	f000 fb82 	bl	8001828 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001124:	f000 fabc 	bl	80016a0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001128:	f000 fbce 	bl	80018c8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800112c:	f000 fc00 	bl	8001930 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8001130:	4807      	ldr	r0, [pc, #28]	@ (8001150 <main+0x60>)
 8001132:	f004 fe5b 	bl	8005dec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001136:	4807      	ldr	r0, [pc, #28]	@ (8001154 <main+0x64>)
 8001138:	f004 fe58 	bl	8005dec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800113c:	4806      	ldr	r0, [pc, #24]	@ (8001158 <main+0x68>)
 800113e:	f004 fe55 	bl	8005dec <HAL_TIM_Base_Start_IT>

  current_state = STATE_INIT;
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <main+0x6c>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ExecuteStateMachine();
 8001148:	f7ff fa44 	bl	80005d4 <ExecuteStateMachine>
 800114c:	e7fc      	b.n	8001148 <main+0x58>
 800114e:	bf00      	nop
 8001150:	20000354 	.word	0x20000354
 8001154:	200002c4 	.word	0x200002c4
 8001158:	2000039c 	.word	0x2000039c
 800115c:	20000478 	.word	0x20000478

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2234      	movs	r2, #52	@ 0x34
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f006 fbc0 	bl	80078f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <SystemClock_Config+0xd4>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a29      	ldr	r2, [pc, #164]	@ (8001234 <SystemClock_Config+0xd4>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <SystemClock_Config+0xd4>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a0:	2300      	movs	r3, #0
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <SystemClock_Config+0xd8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011ac:	4a22      	ldr	r2, [pc, #136]	@ (8001238 <SystemClock_Config+0xd8>)
 80011ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <SystemClock_Config+0xd8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	2310      	movs	r3, #16
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d4:	2308      	movs	r3, #8
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fe75 	bl	8004edc <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011f8:	f000 fcea 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001208:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800120c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001212:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2104      	movs	r1, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fb9a 	bl	8004954 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001226:	f000 fcd3 	bl	8001bd0 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	@ 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	@ 0x50
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001242:	4b41      	ldr	r3, [pc, #260]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001244:	4a41      	ldr	r2, [pc, #260]	@ (800134c <MX_CAN1_Init+0x110>)
 8001246:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8001248:	4b3f      	ldr	r3, [pc, #252]	@ (8001348 <MX_CAN1_Init+0x10c>)
 800124a:	2208      	movs	r2, #8
 800124c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800124e:	4b3e      	ldr	r3, [pc, #248]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8001254:	4b3c      	ldr	r3, [pc, #240]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001256:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800125a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800125c:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <MX_CAN1_Init+0x10c>)
 800125e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001262:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001264:	4b38      	ldr	r3, [pc, #224]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001266:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800126a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800126c:	4b36      	ldr	r3, [pc, #216]	@ (8001348 <MX_CAN1_Init+0x10c>)
 800126e:	2200      	movs	r2, #0
 8001270:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001272:	4b35      	ldr	r3, [pc, #212]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001274:	2200      	movs	r2, #0
 8001276:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001278:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <MX_CAN1_Init+0x10c>)
 800127a:	2200      	movs	r2, #0
 800127c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800127e:	4b32      	ldr	r3, [pc, #200]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001280:	2200      	movs	r2, #0
 8001282:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001286:	2200      	movs	r2, #0
 8001288:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800128a:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <MX_CAN1_Init+0x10c>)
 800128c:	2200      	movs	r2, #0
 800128e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001290:	482d      	ldr	r0, [pc, #180]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001292:	f002 f879 	bl	8003388 <HAL_CAN_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 800129c:	f000 fc98 	bl	8001bd0 <Error_Handler>
*/


	CAN_FilterTypeDef sf_fifo0;
	// All common bits go into the ID register
	sf_fifo0.FilterIdHigh = DRIVEMOTOR_FIFO0_RX_FILTER_ID_HIGH;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sf_fifo0.FilterIdLow = DRIVEMOTOR_FIFO0_RX_FILTER_ID_LOW;
 80012a4:	2360      	movs	r3, #96	@ 0x60
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Which bits to compare for filter
	sf_fifo0.FilterMaskIdHigh = 0x0000;
 80012a8:	2300      	movs	r3, #0
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30
	sf_fifo0.FilterMaskIdLow = (FIFO0_RX_FILTER_MASK_LOW & 0x07FF);
 80012ac:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34

	sf_fifo0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sf_fifo0.FilterBank = 0; // Which filter to use from the assigned ones
 80012b6:	2300      	movs	r3, #0
 80012b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sf_fifo0.FilterMode = CAN_FILTERMODE_IDMASK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	643b      	str	r3, [r7, #64]	@ 0x40
	sf_fifo0.FilterScale = CAN_FILTERSCALE_32BIT;
 80012be:	2301      	movs	r3, #1
 80012c0:	647b      	str	r3, [r7, #68]	@ 0x44
	sf_fifo0.FilterActivation = CAN_FILTER_ENABLE;
 80012c2:	2301      	movs	r3, #1
 80012c4:	64bb      	str	r3, [r7, #72]	@ 0x48
	sf_fifo0.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 80012c6:	230e      	movs	r3, #14
 80012c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo0) != HAL_OK)
 80012ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ce:	4619      	mov	r1, r3
 80012d0:	481d      	ldr	r0, [pc, #116]	@ (8001348 <MX_CAN1_Init+0x10c>)
 80012d2:	f002 f955 	bl	8003580 <HAL_CAN_ConfigFilter>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_CAN1_Init+0xa4>
	{
	  Error_Handler();
 80012dc:	f000 fc78 	bl	8001bd0 <Error_Handler>
	// All common bits go into the ID register
	//sf_fifo1.FilterIdHigh = 0x0000;
	//sf_fifo1.FilterIdLow = 0x0000;
	//sf_fifo1.FilterMaskIdHigh = 0x0000;
	//sf_fifo1.FilterMaskIdLow = 0x0000;
	sf_fifo1.FilterIdHigh = DRIVEMOTOR_FIFO1_RX_FILTER_ID_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
	sf_fifo1.FilterIdLow = DRIVEMOTOR_FIFO1_RX_FILTER_ID_LOW;
 80012e4:	2370      	movs	r3, #112	@ 0x70
 80012e6:	607b      	str	r3, [r7, #4]

	// Which bits to compare for filter
	sf_fifo1.FilterMaskIdHigh = 0x0000;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
	sf_fifo1.FilterMaskIdLow = (FIFO1_RX_FILTER_MASK_LOW & 0x7FF);
 80012ec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012f0:	60fb      	str	r3, [r7, #12]

	sf_fifo1.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
	sf_fifo1.FilterBank = 1; // Which filter to use from the assigned ones
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
	sf_fifo1.FilterMode = CAN_FILTERMODE_IDMASK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
	sf_fifo1.FilterScale = CAN_FILTERSCALE_32BIT;
 80012fe:	2301      	movs	r3, #1
 8001300:	61fb      	str	r3, [r7, #28]
	sf_fifo1.FilterActivation = CAN_FILTER_ENABLE;
 8001302:	2301      	movs	r3, #1
 8001304:	623b      	str	r3, [r7, #32]
	sf_fifo1.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8001306:	230e      	movs	r3, #14
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo1) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	480e      	ldr	r0, [pc, #56]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001310:	f002 f936 	bl	8003580 <HAL_CAN_ConfigFilter>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_CAN1_Init+0xe2>
	{
	  Error_Handler();
 800131a:	f000 fc59 	bl	8001bd0 <Error_Handler>

	//if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
	//{
	//	  Error_Handler();
	//}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800131e:	480a      	ldr	r0, [pc, #40]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001320:	f002 fa0e 	bl	8003740 <HAL_CAN_Start>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_CAN1_Init+0xf2>
	{
		Error_Handler();
 800132a:	f000 fc51 	bl	8001bd0 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 800132e:	2112      	movs	r1, #18
 8001330:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_CAN1_Init+0x10c>)
 8001332:	f002 fc93 	bl	8003c5c <HAL_CAN_ActivateNotification>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_CAN1_Init+0x104>
	{
		Error_Handler();
 800133c:	f000 fc48 	bl	8001bd0 <Error_Handler>
	}
	*/

  /* USER CODE END CAN1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3750      	adds	r7, #80	@ 0x50
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200000c4 	.word	0x200000c4
 800134c:	40006400 	.word	0x40006400

08001350 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001356:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <MX_I2C1_Init+0x54>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800135c:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <MX_I2C1_Init+0x58>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800136e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800138e:	f003 f99d 	bl	80046cc <HAL_I2C_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 fc1a 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200000ec 	.word	0x200000ec
 80013a4:	40005400 	.word	0x40005400
 80013a8:	000186a0 	.word	0x000186a0

080013ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013b2:	4a13      	ldr	r2, [pc, #76]	@ (8001400 <MX_I2C3_Init+0x54>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013b8:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <MX_I2C3_Init+0x58>)
 80013ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	@ (80013fc <MX_I2C3_Init+0x50>)
 80013ea:	f003 f96f 	bl	80046cc <HAL_I2C_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013f4:	f000 fbec 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000140 	.word	0x20000140
 8001400:	40005c00 	.word	0x40005c00
 8001404:	000186a0 	.word	0x000186a0

08001408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <MX_SPI1_Init+0x64>)
 800140e:	4a18      	ldr	r2, [pc, #96]	@ (8001470 <MX_SPI1_Init+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <MX_SPI1_Init+0x64>)
 8001414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_SPI1_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_SPI1_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_SPI1_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_SPI1_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_SPI1_Init+0x64>)
 8001434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001438:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_SPI1_Init+0x64>)
 800143c:	2230      	movs	r2, #48	@ 0x30
 800143e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <MX_SPI1_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_SPI1_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <MX_SPI1_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_SPI1_Init+0x64>)
 8001454:	220a      	movs	r2, #10
 8001456:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_SPI1_Init+0x64>)
 800145a:	f003 ffdd 	bl	8005418 <HAL_SPI_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001464:	f000 fbb4 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000194 	.word	0x20000194
 8001470:	40013000 	.word	0x40013000

08001474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b096      	sub	sp, #88	@ 0x58
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2220      	movs	r2, #32
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f006 fa21 	bl	80078f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b2:	4b3e      	ldr	r3, [pc, #248]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014b4:	4a3e      	ldr	r2, [pc, #248]	@ (80015b0 <MX_TIM1_Init+0x13c>)
 80014b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 80014b8:	4b3c      	ldr	r3, [pc, #240]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014ba:	2230      	movs	r2, #48	@ 0x30
 80014bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b3b      	ldr	r3, [pc, #236]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80014c4:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d2:	4b36      	ldr	r3, [pc, #216]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d8:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014da:	2280      	movs	r2, #128	@ 0x80
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014de:	4833      	ldr	r0, [pc, #204]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014e0:	f004 fbcc 	bl	8005c7c <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014ea:	f000 fb71 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014f8:	4619      	mov	r1, r3
 80014fa:	482c      	ldr	r0, [pc, #176]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014fc:	f005 f842 	bl	8006584 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001506:	f000 fb63 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800150a:	4828      	ldr	r0, [pc, #160]	@ (80015ac <MX_TIM1_Init+0x138>)
 800150c:	f004 fcde 	bl	8005ecc <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001516:	f000 fb5b 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001522:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001526:	4619      	mov	r1, r3
 8001528:	4820      	ldr	r0, [pc, #128]	@ (80015ac <MX_TIM1_Init+0x138>)
 800152a:	f005 fc35 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001534:	f000 fb4c 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001538:	2360      	movs	r3, #96	@ 0x60
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001558:	2204      	movs	r2, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4813      	ldr	r0, [pc, #76]	@ (80015ac <MX_TIM1_Init+0x138>)
 800155e:	f004 ff4f 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001568:	f000 fb32 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001580:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001584:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4807      	ldr	r0, [pc, #28]	@ (80015ac <MX_TIM1_Init+0x138>)
 8001590:	f005 fc7e 	bl	8006e90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800159a:	f000 fb19 	bl	8001bd0 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */

  // HAL_TIM_PWM_Start(&htim1, channel);

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800159e:	4803      	ldr	r0, [pc, #12]	@ (80015ac <MX_TIM1_Init+0x138>)
 80015a0:	f001 fc34 	bl	8002e0c <HAL_TIM_MspPostInit>

}
 80015a4:	bf00      	nop
 80015a6:	3758      	adds	r7, #88	@ 0x58
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001ec 	.word	0x200001ec
 80015b0:	40010000 	.word	0x40010000

080015b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	@ 0x38
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	615a      	str	r2, [r3, #20]
 80015e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e4:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80015ec:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015ee:	2230      	movs	r2, #48	@ 0x30
 80015f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b26      	ldr	r3, [pc, #152]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b25      	ldr	r3, [pc, #148]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160c:	4823      	ldr	r0, [pc, #140]	@ (800169c <MX_TIM2_Init+0xe8>)
 800160e:	f004 fb35 	bl	8005c7c <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001618:	f000 fada 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001622:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001626:	4619      	mov	r1, r3
 8001628:	481c      	ldr	r0, [pc, #112]	@ (800169c <MX_TIM2_Init+0xe8>)
 800162a:	f004 ffab 	bl	8006584 <HAL_TIM_ConfigClockSource>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001634:	f000 facc 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001638:	4818      	ldr	r0, [pc, #96]	@ (800169c <MX_TIM2_Init+0xe8>)
 800163a:	f004 fc47 	bl	8005ecc <HAL_TIM_PWM_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001644:	f000 fac4 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	4619      	mov	r1, r3
 8001656:	4811      	ldr	r0, [pc, #68]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001658:	f005 fb9e 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001662:	f000 fab5 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001666:	2360      	movs	r3, #96	@ 0x60
 8001668:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2208      	movs	r2, #8
 800167a:	4619      	mov	r1, r3
 800167c:	4807      	ldr	r0, [pc, #28]	@ (800169c <MX_TIM2_Init+0xe8>)
 800167e:	f004 febf 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001688:	f000 faa2 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800168c:	4803      	ldr	r0, [pc, #12]	@ (800169c <MX_TIM2_Init+0xe8>)
 800168e:	f001 fbbd 	bl	8002e0c <HAL_TIM_MspPostInit>

}
 8001692:	bf00      	nop
 8001694:	3738      	adds	r7, #56	@ 0x38
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000234 	.word	0x20000234

080016a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	@ 0x38
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <MX_TIM3_Init+0xe4>)
 80016d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001788 <MX_TIM3_Init+0xe8>)
 80016d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80016d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <MX_TIM3_Init+0xe4>)
 80016d8:	2230      	movs	r2, #48	@ 0x30
 80016da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <MX_TIM3_Init+0xe4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 80016e2:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <MX_TIM3_Init+0xe4>)
 80016e4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <MX_TIM3_Init+0xe4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <MX_TIM3_Init+0xe4>)
 80016f2:	2280      	movs	r2, #128	@ 0x80
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f6:	4823      	ldr	r0, [pc, #140]	@ (8001784 <MX_TIM3_Init+0xe4>)
 80016f8:	f004 fac0 	bl	8005c7c <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001702:	f000 fa65 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800170c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001710:	4619      	mov	r1, r3
 8001712:	481c      	ldr	r0, [pc, #112]	@ (8001784 <MX_TIM3_Init+0xe4>)
 8001714:	f004 ff36 	bl	8006584 <HAL_TIM_ConfigClockSource>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800171e:	f000 fa57 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001722:	4818      	ldr	r0, [pc, #96]	@ (8001784 <MX_TIM3_Init+0xe4>)
 8001724:	f004 fbd2 	bl	8005ecc <HAL_TIM_PWM_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800172e:	f000 fa4f 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	4619      	mov	r1, r3
 8001740:	4810      	ldr	r0, [pc, #64]	@ (8001784 <MX_TIM3_Init+0xe4>)
 8001742:	f005 fb29 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800174c:	f000 fa40 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001750:	2360      	movs	r3, #96	@ 0x60
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2208      	movs	r2, #8
 8001764:	4619      	mov	r1, r3
 8001766:	4807      	ldr	r0, [pc, #28]	@ (8001784 <MX_TIM3_Init+0xe4>)
 8001768:	f004 fe4a 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001772:	f000 fa2d 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001776:	4803      	ldr	r0, [pc, #12]	@ (8001784 <MX_TIM3_Init+0xe4>)
 8001778:	f001 fb48 	bl	8002e0c <HAL_TIM_MspPostInit>

}
 800177c:	bf00      	nop
 800177e:	3738      	adds	r7, #56	@ 0x38
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000027c 	.word	0x2000027c
 8001788:	40000400 	.word	0x40000400

0800178c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <MX_TIM4_Init+0x94>)
 80017aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001824 <MX_TIM4_Init+0x98>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <MX_TIM4_Init+0x94>)
 80017b0:	f240 227f 	movw	r2, #639	@ 0x27f
 80017b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <MX_TIM4_Init+0x94>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 80017bc:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <MX_TIM4_Init+0x94>)
 80017be:	f241 3287 	movw	r2, #4999	@ 0x1387
 80017c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <MX_TIM4_Init+0x94>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <MX_TIM4_Init+0x94>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017d0:	4813      	ldr	r0, [pc, #76]	@ (8001820 <MX_TIM4_Init+0x94>)
 80017d2:	f004 fa53 	bl	8005c7c <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80017dc:	f000 f9f8 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	4619      	mov	r1, r3
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <MX_TIM4_Init+0x94>)
 80017ee:	f004 fec9 	bl	8006584 <HAL_TIM_ConfigClockSource>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80017f8:	f000 f9ea 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	@ (8001820 <MX_TIM4_Init+0x94>)
 800180a:	f005 fac5 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001814:	f000 f9dc 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200002c4 	.word	0x200002c4
 8001824:	40000800 	.word	0x40000800

08001828 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001844:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <MX_TIM5_Init+0x98>)
 8001846:	4a1f      	ldr	r2, [pc, #124]	@ (80018c4 <MX_TIM5_Init+0x9c>)
 8001848:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 800184a:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <MX_TIM5_Init+0x98>)
 800184c:	222f      	movs	r2, #47	@ 0x2f
 800184e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <MX_TIM5_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65000;
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <MX_TIM5_Init+0x98>)
 8001858:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800185c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <MX_TIM5_Init+0x98>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001864:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <MX_TIM5_Init+0x98>)
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800186a:	4815      	ldr	r0, [pc, #84]	@ (80018c0 <MX_TIM5_Init+0x98>)
 800186c:	f004 fa06 	bl	8005c7c <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001876:	f000 f9ab 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	480e      	ldr	r0, [pc, #56]	@ (80018c0 <MX_TIM5_Init+0x98>)
 8001888:	f004 fe7c 	bl	8006584 <HAL_TIM_ConfigClockSource>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001892:	f000 f99d 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800189e:	463b      	mov	r3, r7
 80018a0:	4619      	mov	r1, r3
 80018a2:	4807      	ldr	r0, [pc, #28]	@ (80018c0 <MX_TIM5_Init+0x98>)
 80018a4:	f005 fa78 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80018ae:	f000 f98f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  HAL_TIM_Base_Start(&htim5);
 80018b2:	4803      	ldr	r0, [pc, #12]	@ (80018c0 <MX_TIM5_Init+0x98>)
 80018b4:	f004 fa32 	bl	8005d1c <HAL_TIM_Base_Start>

  /* USER CODE END TIM5_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000030c 	.word	0x2000030c
 80018c4:	40000c00 	.word	0x40000c00

080018c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018d6:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_TIM6_Init+0x60>)
 80018d8:	4a14      	ldr	r2, [pc, #80]	@ (800192c <MX_TIM6_Init+0x64>)
 80018da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <MX_TIM6_Init+0x60>)
 80018de:	2263      	movs	r2, #99	@ 0x63
 80018e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_TIM6_Init+0x60>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 31;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_TIM6_Init+0x60>)
 80018ea:	221f      	movs	r2, #31
 80018ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_TIM6_Init+0x60>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018f4:	480c      	ldr	r0, [pc, #48]	@ (8001928 <MX_TIM6_Init+0x60>)
 80018f6:	f004 f9c1 	bl	8005c7c <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001900:	f000 f966 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_TIM6_Init+0x60>)
 8001912:	f005 fa41 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800191c:	f000 f958 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000354 	.word	0x20000354
 800192c:	40001000 	.word	0x40001000

08001930 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <MX_TIM7_Init+0x64>)
 8001940:	4a15      	ldr	r2, [pc, #84]	@ (8001998 <MX_TIM7_Init+0x68>)
 8001942:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 480;
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <MX_TIM7_Init+0x64>)
 8001946:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800194a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_TIM7_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <MX_TIM7_Init+0x64>)
 8001954:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001958:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <MX_TIM7_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001960:	480c      	ldr	r0, [pc, #48]	@ (8001994 <MX_TIM7_Init+0x64>)
 8001962:	f004 f98b 	bl	8005c7c <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800196c:	f000 f930 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_TIM7_Init+0x64>)
 800197e:	f005 fa0b 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001988:	f000 f922 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000039c 	.word	0x2000039c
 8001998:	40001400 	.word	0x40001400

0800199c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <MX_USART2_UART_Init+0x50>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019d4:	f005 fac2 	bl	8006f5c <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019de:	f000 f8f7 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200003e4 	.word	0x200003e4
 80019ec:	40004400 	.word	0x40004400

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b58      	ldr	r3, [pc, #352]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a57      	ldr	r2, [pc, #348]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b55      	ldr	r3, [pc, #340]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b51      	ldr	r3, [pc, #324]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a50      	ldr	r2, [pc, #320]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b4e      	ldr	r3, [pc, #312]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a49      	ldr	r2, [pc, #292]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b47      	ldr	r3, [pc, #284]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b43      	ldr	r3, [pc, #268]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a42      	ldr	r2, [pc, #264]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b39      	ldr	r3, [pc, #228]	@ (8001b6c <MX_GPIO_Init+0x17c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FT_RESET_Pin|SPI_CS2_Pin|SPI_CS1_Pin|DIR1_Pin
 8001a92:	2200      	movs	r2, #0
 8001a94:	f24f 01e2 	movw	r1, #61666	@ 0xf0e2
 8001a98:	4835      	ldr	r0, [pc, #212]	@ (8001b70 <MX_GPIO_Init+0x180>)
 8001a9a:	f002 fdcb 	bl	8004634 <HAL_GPIO_WritePin>
                          |STEP1_Pin|RESET1_Pin|nSLEEP1_Pin|STEP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2137      	movs	r1, #55	@ 0x37
 8001aa2:	4834      	ldr	r0, [pc, #208]	@ (8001b74 <MX_GPIO_Init+0x184>)
 8001aa4:	f002 fdc6 	bl	8004634 <HAL_GPIO_WritePin>
                          |RESET2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	21ff      	movs	r1, #255	@ 0xff
 8001aac:	4832      	ldr	r0, [pc, #200]	@ (8001b78 <MX_GPIO_Init+0x188>)
 8001aae:	f002 fdc1 	bl	8004634 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nSTALL2_Pin nFAULT2_Pin */
  GPIO_InitStruct.Pin = nSTALL2_Pin|nFAULT2_Pin;
 8001ab2:	2318      	movs	r3, #24
 8001ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	482a      	ldr	r0, [pc, #168]	@ (8001b70 <MX_GPIO_Init+0x180>)
 8001ac6:	f002 fc09 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : FT_RESET_Pin SPI_CS2_Pin SPI_CS1_Pin DIR1_Pin
                           STEP1_Pin RESET1_Pin nSLEEP1_Pin STEP2_Pin */
  GPIO_InitStruct.Pin = FT_RESET_Pin|SPI_CS2_Pin|SPI_CS1_Pin|DIR1_Pin
 8001aca:	f24f 03e2 	movw	r3, #61666	@ 0xf0e2
 8001ace:	617b      	str	r3, [r7, #20]
                          |STEP1_Pin|RESET1_Pin|nSLEEP1_Pin|STEP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4823      	ldr	r0, [pc, #140]	@ (8001b70 <MX_GPIO_Init+0x180>)
 8001ae4:	f002 fbfa 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_2_Pin BIN1_2_Pin DIR2_Pin nSLEEP2_Pin
                           RESET2_Pin */
  GPIO_InitStruct.Pin = BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 8001ae8:	2337      	movs	r3, #55	@ 0x37
 8001aea:	617b      	str	r3, [r7, #20]
                          |RESET2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	481d      	ldr	r0, [pc, #116]	@ (8001b74 <MX_GPIO_Init+0x184>)
 8001b00:	f002 fbec 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : nSTALL1_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nSTALL1_Pin|nFAULT1_Pin;
 8001b04:	2306      	movs	r3, #6
 8001b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	4819      	ldr	r0, [pc, #100]	@ (8001b7c <MX_GPIO_Init+0x18c>)
 8001b18:	f002 fbe0 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin;
 8001b1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	480f      	ldr	r0, [pc, #60]	@ (8001b70 <MX_GPIO_Init+0x180>)
 8001b34:	f002 fbd2 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_WARNING_Pin LED_ERROR_Pin LED_CANB_Pin LED_CANA_Pin
                           LED1_Pin LED2_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 8001b38:	23ff      	movs	r3, #255	@ 0xff
 8001b3a:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480a      	ldr	r0, [pc, #40]	@ (8001b78 <MX_GPIO_Init+0x188>)
 8001b50:	f002 fbc4 	bl	80042dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2101      	movs	r1, #1
 8001b58:	2017      	movs	r0, #23
 8001b5a:	f002 fb88 	bl	800426e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b5e:	2017      	movs	r0, #23
 8001b60:	f002 fba1 	bl	80042a6 <HAL_NVIC_EnableIRQ>

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40020400 	.word	0x40020400

08001b80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI Line External Interrupt ISR Handler CallBack
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // PushButton 1
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b90:	d106      	bne.n	8001ba0 <HAL_GPIO_EXTI_Callback+0x20>
    {
    	//HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
    	pb1_value = 1;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
    	pb1_update = 1;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_GPIO_EXTI_Callback+0x44>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
    	pb2_value = 1;
    	pb2_update = 1;
    }

}
 8001b9e:	e009      	b.n	8001bb4 <HAL_GPIO_EXTI_Callback+0x34>
    else if (GPIO_Pin == GPIO_PIN_8) // PushButton 2
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ba6:	d105      	bne.n	8001bb4 <HAL_GPIO_EXTI_Callback+0x34>
    	pb2_value = 1;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
    	pb2_update = 1;
 8001bae:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	200004b8 	.word	0x200004b8
 8001bc4:	200004ba 	.word	0x200004ba
 8001bc8:	200004b9 	.word	0x200004b9
 8001bcc:	200004bb 	.word	0x200004bb

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <Error_Handler+0x8>

08001bdc <InitDrives>:
	PWM2
};

void InitDrives(SPI_HandleTypeDef* hspi_, TIM_HandleTypeDef* htim_pwm1, uint32_t channel_pwm1,
		 	 	 	 	 	 	 	 	  TIM_HandleTypeDef* htim_pwm2, uint32_t channel_pwm2)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
	hspi = hspi_;
 8001bea:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <InitDrives+0x8c>)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6013      	str	r3, [r2, #0]
	pwm1_timer = htim_pwm1;
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c6c <InitDrives+0x90>)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	6013      	str	r3, [r2, #0]
	pwm2_timer = htim_pwm2;
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c70 <InitDrives+0x94>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6013      	str	r3, [r2, #0]
	pwm1_channel = channel_pwm1;
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c74 <InitDrives+0x98>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
	pwm2_channel = channel_pwm2;
 8001c02:	4a1d      	ldr	r2, [pc, #116]	@ (8001c78 <InitDrives+0x9c>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6013      	str	r3, [r2, #0]

	pwm_timers[0] = pwm1_timer;
 8001c08:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <InitDrives+0x90>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c7c <InitDrives+0xa0>)
 8001c0e:	6013      	str	r3, [r2, #0]
	pwm_timers[1] = pwm2_timer;
 8001c10:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <InitDrives+0x94>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a19      	ldr	r2, [pc, #100]	@ (8001c7c <InitDrives+0xa0>)
 8001c16:	6053      	str	r3, [r2, #4]
	pwm_channels[0] = pwm1_channel;
 8001c18:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <InitDrives+0x98>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	@ (8001c80 <InitDrives+0xa4>)
 8001c1e:	6013      	str	r3, [r2, #0]
	pwm_channels[1] = pwm2_channel;
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <InitDrives+0x9c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a16      	ldr	r2, [pc, #88]	@ (8001c80 <InitDrives+0xa4>)
 8001c26:	6053      	str	r3, [r2, #4]

	HAL_GPIO_WritePin(drive_ports[DRIVE_PITCH][DRIVE_CS],
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <InitDrives+0xa8>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	4a16      	ldr	r2, [pc, #88]	@ (8001c88 <InitDrives+0xac>)
 8001c2e:	89d1      	ldrh	r1, [r2, #14]
 8001c30:	2200      	movs	r2, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fcfe 	bl	8004634 <HAL_GPIO_WritePin>
							  drive_pins[DRIVE_PITCH][DRIVE_CS], GPIO_PIN_RESET);
	HAL_GPIO_WritePin(drive_ports[DRIVE_MAST][DRIVE_CS],
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <InitDrives+0xa8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <InitDrives+0xac>)
 8001c3e:	8891      	ldrh	r1, [r2, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 fcf6 	bl	8004634 <HAL_GPIO_WritePin>
							  drive_pins[DRIVE_MAST][DRIVE_CS], GPIO_PIN_RESET);

	InitDriveMotor(DRIVE_MAST);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f000 fb5d 	bl	8002308 <InitDriveMotor>
	HAL_Delay(5);
 8001c4e:	2005      	movs	r0, #5
 8001c50:	f001 fb76 	bl	8003340 <HAL_Delay>
	InitDriveMotor(DRIVE_PITCH);
 8001c54:	2001      	movs	r0, #1
 8001c56:	f000 fb57 	bl	8002308 <InitDriveMotor>
	HAL_Delay(5);
 8001c5a:	2005      	movs	r0, #5
 8001c5c:	f001 fb70 	bl	8003340 <HAL_Delay>
	// Set initial reg values
	InitRegValues(DRIVE_MAST);
	*/


}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200004cc 	.word	0x200004cc
 8001c6c:	200004d0 	.word	0x200004d0
 8001c70:	200004d4 	.word	0x200004d4
 8001c74:	200004d8 	.word	0x200004d8
 8001c78:	200004dc 	.word	0x200004dc
 8001c7c:	20000520 	.word	0x20000520
 8001c80:	20000528 	.word	0x20000528
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000028 	.word	0x20000028

08001c8c <TransmitMotorSPI>:


void TransmitMotorSPI(DRIVE_MOTOR drive_index, uint8_t reg)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	460a      	mov	r2, r1
 8001c96:	71fb      	strb	r3, [r7, #7]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	71bb      	strb	r3, [r7, #6]
	if (reg >= 7)
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d834      	bhi.n	8001d0c <TransmitMotorSPI+0x80>
	//HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
	//		  		    drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);

	//for (int i = 0; i < 1000; ++i) {}
	// uint16_t data = *(uint16_t*)(&drive_regs[drive_index]) + reg;
	uint16_t data = *((uint16_t*)(&drive_regs[drive_index])) | (reg << 12);
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	015b      	lsls	r3, r3, #5
 8001ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d14 <TransmitMotorSPI+0x88>)
 8001ca8:	4413      	add	r3, r2
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	031b      	lsls	r3, r3, #12
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	81fb      	strh	r3, [r7, #14]

	uint8_t tx_data[2] = {0};
 8001cba:	2300      	movs	r3, #0
 8001cbc:	813b      	strh	r3, [r7, #8]
	tx_data[0] = ((reg & 0x07) << 4) | ((data & 0x0F00) >> 8);
 8001cbe:	79bb      	ldrb	r3, [r7, #6]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cc8:	b25a      	sxtb	r2, r3
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	121b      	asrs	r3, r3, #8
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	723b      	strb	r3, [r7, #8]
	tx_data[1] = (data & 0xFF);
 8001cde:	89fb      	ldrh	r3, [r7, #14]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	727b      	strb	r3, [r7, #9]
	uint8_t ret = HAL_SPI_Transmit(hspi, tx_data, 2, HAL_MAX_DELAY);
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <TransmitMotorSPI+0x8c>)
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f107 0108 	add.w	r1, r7, #8
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f003 fc1a 	bl	800552a <HAL_SPI_Transmit>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK)
 8001cfa:	7b7b      	ldrb	r3, [r7, #13]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <TransmitMotorSPI+0x82>
	{
		// TODO: (Marc) Should really be the error led once it's soldered
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2104      	movs	r1, #4
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <TransmitMotorSPI+0x90>)
 8001d06:	f002 fc95 	bl	8004634 <HAL_GPIO_WritePin>
 8001d0a:	e000      	b.n	8001d0e <TransmitMotorSPI+0x82>
		return;
 8001d0c:	bf00      	nop
	}
	//for (int i = 0; i < 1000; ++i) {}

	//HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
	//				  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);
}
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200004e0 	.word	0x200004e0
 8001d18:	200004cc 	.word	0x200004cc
 8001d1c:	40020c00 	.word	0x40020c00

08001d20 <DEBUG_SPI_CHATGPT>:
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}

void DEBUG_SPI_CHATGPT(DRIVE_MOTOR drive_index)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
    // Sélectionner le DRV8711 (CS = LOW)
    HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001d2a:	79fa      	ldrb	r2, [r7, #7]
 8001d2c:	4959      	ldr	r1, [pc, #356]	@ (8001e94 <DEBUG_SPI_CHATGPT+0x174>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3308      	adds	r3, #8
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	4956      	ldr	r1, [pc, #344]	@ (8001e98 <DEBUG_SPI_CHATGPT+0x178>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	440b      	add	r3, r1
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4619      	mov	r1, r3
 8001d52:	f002 fc6f 	bl	8004634 <HAL_GPIO_WritePin>
                      drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);

    // Étape 1 : envoyer la commande de lecture du registre 0x07 (STATUS)
    uint8_t tx_cmd[2] = { 0xF0, 0x00 };  // 0xF000 = lecture du registre 0x07
 8001d56:	23f0      	movs	r3, #240	@ 0xf0
 8001d58:	82bb      	strh	r3, [r7, #20]
    uint8_t rx_dummy[2] = {0};
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	823b      	strh	r3, [r7, #16]

    HAL_SPI_TransmitReceive(hspi, tx_cmd, rx_dummy, 2, HAL_MAX_DELAY);
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e9c <DEBUG_SPI_CHATGPT+0x17c>)
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	f107 0210 	add.w	r2, r7, #16
 8001d66:	f107 0114 	add.w	r1, r7, #20
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2302      	movs	r3, #2
 8001d72:	f003 fd16 	bl	80057a2 <HAL_SPI_TransmitReceive>

    // Désélectionner momentanément (important selon le timing du DRV8711)
    HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	4946      	ldr	r1, [pc, #280]	@ (8001e94 <DEBUG_SPI_CHATGPT+0x174>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3308      	adds	r3, #8
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	79fa      	ldrb	r2, [r7, #7]
 8001d8a:	4943      	ldr	r1, [pc, #268]	@ (8001e98 <DEBUG_SPI_CHATGPT+0x178>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	440b      	add	r3, r1
 8001d96:	3304      	adds	r3, #4
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f002 fc49 	bl	8004634 <HAL_GPIO_WritePin>
                      drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);
    HAL_Delay(1); // Petit délai si nécessaire
 8001da2:	2001      	movs	r0, #1
 8001da4:	f001 facc 	bl	8003340 <HAL_Delay>

    // Réactiver CS pour lire la vraie donnée
    HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001da8:	79fa      	ldrb	r2, [r7, #7]
 8001daa:	493a      	ldr	r1, [pc, #232]	@ (8001e94 <DEBUG_SPI_CHATGPT+0x174>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	3308      	adds	r3, #8
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	4936      	ldr	r1, [pc, #216]	@ (8001e98 <DEBUG_SPI_CHATGPT+0x178>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3304      	adds	r3, #4
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f002 fc30 	bl	8004634 <HAL_GPIO_WritePin>
                      drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);

    uint8_t tx_dummy[2] = { 0x00, 0x00 };
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	81bb      	strh	r3, [r7, #12]
    uint8_t rx_data[2] = { 0 };
 8001dd8:	2300      	movs	r3, #0
 8001dda:	813b      	strh	r3, [r7, #8]

    HAL_SPI_TransmitReceive(hspi, tx_dummy, rx_data, 2, HAL_MAX_DELAY);
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <DEBUG_SPI_CHATGPT+0x17c>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	f107 0208 	add.w	r2, r7, #8
 8001de4:	f107 010c 	add.w	r1, r7, #12
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2302      	movs	r3, #2
 8001df0:	f003 fcd7 	bl	80057a2 <HAL_SPI_TransmitReceive>

    // Désélection finale du périphérique
    HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001df4:	79fa      	ldrb	r2, [r7, #7]
 8001df6:	4927      	ldr	r1, [pc, #156]	@ (8001e94 <DEBUG_SPI_CHATGPT+0x174>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	3308      	adds	r3, #8
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	79fa      	ldrb	r2, [r7, #7]
 8001e08:	4923      	ldr	r1, [pc, #140]	@ (8001e98 <DEBUG_SPI_CHATGPT+0x178>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	440b      	add	r3, r1
 8001e14:	3304      	adds	r3, #4
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f002 fc0a 	bl	8004634 <HAL_GPIO_WritePin>
                      drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

    // Recomposer les 16 bits reçus
    uint16_t result = (rx_data[0] << 8) | rx_data[1];
 8001e20:	7a3b      	ldrb	r3, [r7, #8]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	7a7b      	ldrb	r3, [r7, #9]
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	82fb      	strh	r3, [r7, #22]

    // Affichage debug via UART ou autre
    printf("DRV8711[%d] STATUS = 0x%04X\r\n", drive_index, result);
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	8afa      	ldrh	r2, [r7, #22]
 8001e34:	4619      	mov	r1, r3
 8001e36:	481a      	ldr	r0, [pc, #104]	@ (8001ea0 <DEBUG_SPI_CHATGPT+0x180>)
 8001e38:	f005 fc14 	bl	8007664 <iprintf>

    if (result & (1 << 0)) printf("  OCP: Overcurrent\n");
 8001e3c:	8afb      	ldrh	r3, [r7, #22]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <DEBUG_SPI_CHATGPT+0x12c>
 8001e46:	4817      	ldr	r0, [pc, #92]	@ (8001ea4 <DEBUG_SPI_CHATGPT+0x184>)
 8001e48:	f005 fc74 	bl	8007734 <puts>
    if (result & (1 << 1)) printf("  UVLO: Undervoltage\n");
 8001e4c:	8afb      	ldrh	r3, [r7, #22]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <DEBUG_SPI_CHATGPT+0x13c>
 8001e56:	4814      	ldr	r0, [pc, #80]	@ (8001ea8 <DEBUG_SPI_CHATGPT+0x188>)
 8001e58:	f005 fc6c 	bl	8007734 <puts>
    if (result & (1 << 2)) printf("  OTS: Overtemp\n");
 8001e5c:	8afb      	ldrh	r3, [r7, #22]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <DEBUG_SPI_CHATGPT+0x14c>
 8001e66:	4811      	ldr	r0, [pc, #68]	@ (8001eac <DEBUG_SPI_CHATGPT+0x18c>)
 8001e68:	f005 fc64 	bl	8007734 <puts>
    if (result & (1 << 3)) printf("  PDF: Power Fault\n");
 8001e6c:	8afb      	ldrh	r3, [r7, #22]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <DEBUG_SPI_CHATGPT+0x15c>
 8001e76:	480e      	ldr	r0, [pc, #56]	@ (8001eb0 <DEBUG_SPI_CHATGPT+0x190>)
 8001e78:	f005 fc5c 	bl	8007734 <puts>
    if (result & (1 << 4)) printf("  STDLAT: Stall Latch\n");
 8001e7c:	8afb      	ldrh	r3, [r7, #22]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <DEBUG_SPI_CHATGPT+0x16c>
 8001e86:	480b      	ldr	r0, [pc, #44]	@ (8001eb4 <DEBUG_SPI_CHATGPT+0x194>)
 8001e88:	f005 fc54 	bl	8007734 <puts>
}
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000028 	.word	0x20000028
 8001e9c:	200004cc 	.word	0x200004cc
 8001ea0:	0800842c 	.word	0x0800842c
 8001ea4:	0800844c 	.word	0x0800844c
 8001ea8:	08008460 	.word	0x08008460
 8001eac:	08008478 	.word	0x08008478
 8001eb0:	08008488 	.word	0x08008488
 8001eb4:	0800849c 	.word	0x0800849c

08001eb8 <SendDriveRegisters>:

	return 0;
}

void SendDriveRegisters(DRIVE_MOTOR drive_index)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
	// Send every register to the drive
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001ec2:	79fa      	ldrb	r2, [r7, #7]
 8001ec4:	4920      	ldr	r1, [pc, #128]	@ (8001f48 <SendDriveRegisters+0x90>)
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	3308      	adds	r3, #8
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	79fa      	ldrb	r2, [r7, #7]
 8001ed6:	491d      	ldr	r1, [pc, #116]	@ (8001f4c <SendDriveRegisters+0x94>)
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f002 fba3 	bl	8004634 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	// We send every register except for the status register (up to 7 register)
	for (uint8_t i = 0; i < (NUM_DRIVE_REGS - 1); ++i)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e00b      	b.n	8001f0c <SendDriveRegisters+0x54>
	{
		// uint16_t data = *((uint16_t*)(&drive_regs[drive_index]) + i);
		TransmitMotorSPI(drive_index, i);
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fec6 	bl	8001c8c <TransmitMotorSPI>
		HAL_Delay(1);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f001 fa1d 	bl	8003340 <HAL_Delay>
	for (uint8_t i = 0; i < (NUM_DRIVE_REGS - 1); ++i)
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d9f0      	bls.n	8001ef4 <SendDriveRegisters+0x3c>
	}

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	490c      	ldr	r1, [pc, #48]	@ (8001f48 <SendDriveRegisters+0x90>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	3308      	adds	r3, #8
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	79fa      	ldrb	r2, [r7, #7]
 8001f26:	4909      	ldr	r1, [pc, #36]	@ (8001f4c <SendDriveRegisters+0x94>)
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	440b      	add	r3, r1
 8001f32:	3304      	adds	r3, #4
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f002 fb7b 	bl	8004634 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000028 	.word	0x20000028

08001f50 <InitRegValuesPWM>:
	drive_regs[drive_index].drive_reg.idriven = 0b10;	// Low-side gate drive peak current of 300mA peak (sink)
	drive_regs[drive_index].drive_reg.idrivep = 0b10;	// High-side gate drive peak current of 150mA peak (sink)
}

void InitRegValuesPWM(DRIVE_MOTOR drive_index)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
	// CTRL register
	// drive_regs[drive_index].ctrl_reg.enbl = 1;	// Enable motor
	drive_regs[drive_index].ctrl_reg.enbl = 0;	// Disable motor drive by default
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001f5e:	015b      	lsls	r3, r3, #5
 8001f60:	441a      	add	r2, r3
 8001f62:	7813      	ldrb	r3, [r2, #0]
 8001f64:	f36f 0300 	bfc	r3, #0, #1
 8001f68:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.rdir = 0;	// Direction set by DIR pin
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4a67      	ldr	r2, [pc, #412]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	441a      	add	r2, r3
 8001f72:	7813      	ldrb	r3, [r2, #0]
 8001f74:	f36f 0341 	bfc	r3, #1, #1
 8001f78:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.rstep = 0;	// No automatic stepping
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4a63      	ldr	r2, [pc, #396]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001f7e:	015b      	lsls	r3, r3, #5
 8001f80:	441a      	add	r2, r3
 8001f82:	7813      	ldrb	r3, [r2, #0]
 8001f84:	f36f 0382 	bfc	r3, #2, #1
 8001f88:	7013      	strb	r3, [r2, #0]
	//drive_regs[drive_index].ctrl_reg.mode = 0b0010;	// 1/4 step
	drive_regs[drive_index].ctrl_reg.mode = 0b0000;	// Full step
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4a5f      	ldr	r2, [pc, #380]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	441a      	add	r2, r3
 8001f92:	7813      	ldrb	r3, [r2, #0]
 8001f94:	f36f 03c6 	bfc	r3, #3, #4
 8001f98:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.extstall = 0;	// Internal stall detect
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4a5b      	ldr	r2, [pc, #364]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001f9e:	015b      	lsls	r3, r3, #5
 8001fa0:	441a      	add	r2, r3
 8001fa2:	7813      	ldrb	r3, [r2, #0]
 8001fa4:	f36f 13c7 	bfc	r3, #7, #1
 8001fa8:	7013      	strb	r3, [r2, #0]
	// drive_regs[drive_index].ctrl_reg.isgain = 0b00;	// Gain of 5
	drive_regs[drive_index].ctrl_reg.isgain = 0b01;	// Gain of 10
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4a57      	ldr	r2, [pc, #348]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001fae:	015b      	lsls	r3, r3, #5
 8001fb0:	441a      	add	r2, r3
 8001fb2:	7853      	ldrb	r3, [r2, #1]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	f361 0301 	bfi	r3, r1, #0, #2
 8001fba:	7053      	strb	r3, [r2, #1]
	drive_regs[drive_index].ctrl_reg.dtime = 0b00;	// Dead-time of 850ns
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4a53      	ldr	r2, [pc, #332]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	441a      	add	r2, r3
 8001fc4:	7853      	ldrb	r3, [r2, #1]
 8001fc6:	f36f 0383 	bfc	r3, #2, #2
 8001fca:	7053      	strb	r3, [r2, #1]

	// TORQUE register
	drive_regs[drive_index].torque_reg.torque = 24;// max 2.5A  //0xFF;	// Sets full torque for H-bridge
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	4a4f      	ldr	r2, [pc, #316]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2218      	movs	r2, #24
 8001fd8:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].torque_reg.smplth = 0b111;	// 100us BEMF sample threshold
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001fde:	015b      	lsls	r3, r3, #5
 8001fe0:	441a      	add	r2, r3
 8001fe2:	7953      	ldrb	r3, [r2, #5]
 8001fe4:	f043 0307 	orr.w	r3, r3, #7
 8001fe8:	7153      	strb	r3, [r2, #5]

	// OFF register
	drive_regs[drive_index].off_reg.toff = 0x80;		// Sets fixed off time, in increments of 500ns
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	4a47      	ldr	r2, [pc, #284]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	701a      	strb	r2, [r3, #0]
	// drive_regs[drive_index].off_reg.pwmmode = pwm_mode;	// Use internal indexer
	drive_regs[drive_index].off_reg.pwmmode = 1;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	4a44      	ldr	r2, [pc, #272]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8001ffc:	015b      	lsls	r3, r3, #5
 8001ffe:	4413      	add	r3, r2
 8002000:	f103 0208 	add.w	r2, r3, #8
 8002004:	7853      	ldrb	r3, [r2, #1]
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	7053      	strb	r3, [r2, #1]

	// BLANK register
	drive_regs[drive_index].blank_reg.tblank = 0x80;	// Current trip blanking time, in increments of 20ns
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4a3f      	ldr	r2, [pc, #252]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8002010:	015b      	lsls	r3, r3, #5
 8002012:	4413      	add	r3, r2
 8002014:	330c      	adds	r3, #12
 8002016:	2280      	movs	r2, #128	@ 0x80
 8002018:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].blank_reg.abt = 0;		// Disable adaptive blanking time
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	4a3b      	ldr	r2, [pc, #236]	@ (800210c <InitRegValuesPWM+0x1bc>)
 800201e:	015b      	lsls	r3, r3, #5
 8002020:	4413      	add	r3, r2
 8002022:	f103 0208 	add.w	r2, r3, #8
 8002026:	7953      	ldrb	r3, [r2, #5]
 8002028:	f36f 0300 	bfc	r3, #0, #1
 800202c:	7153      	strb	r3, [r2, #5]

	// DECAY register
	drive_regs[drive_index].decay_reg.tdecay = 0x80;		// Mixed decay transition time, in increments of 500ns
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	4a36      	ldr	r2, [pc, #216]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8002032:	015b      	lsls	r3, r3, #5
 8002034:	4413      	add	r3, r2
 8002036:	3310      	adds	r3, #16
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].decay_reg.decmod = 0b000;	// Force slow decay at all times
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	4a33      	ldr	r2, [pc, #204]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8002040:	015b      	lsls	r3, r3, #5
 8002042:	4413      	add	r3, r2
 8002044:	f103 0210 	add.w	r2, r3, #16
 8002048:	7853      	ldrb	r3, [r2, #1]
 800204a:	f36f 0302 	bfc	r3, #0, #3
 800204e:	7053      	strb	r3, [r2, #1]


	// STALL register
	drive_regs[drive_index].stall_reg.sdthr = 0xFF;	// Stall detect threshold
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4a2e      	ldr	r2, [pc, #184]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8002054:	015b      	lsls	r3, r3, #5
 8002056:	4413      	add	r3, r2
 8002058:	3314      	adds	r3, #20
 800205a:	22ff      	movs	r2, #255	@ 0xff
 800205c:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].stall_reg.sdcnt = 0b11;	// STALLn asserted on first step with BEMF below SDTHR
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	4a2a      	ldr	r2, [pc, #168]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8002062:	015b      	lsls	r3, r3, #5
 8002064:	4413      	add	r3, r2
 8002066:	f103 0210 	add.w	r2, r3, #16
 800206a:	7953      	ldrb	r3, [r2, #5]
 800206c:	f043 0303 	orr.w	r3, r3, #3
 8002070:	7153      	strb	r3, [r2, #5]
	drive_regs[drive_index].stall_reg.vdiv = 0b00;	// BEMF divided by 32
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	4a25      	ldr	r2, [pc, #148]	@ (800210c <InitRegValuesPWM+0x1bc>)
 8002076:	015b      	lsls	r3, r3, #5
 8002078:	4413      	add	r3, r2
 800207a:	f103 0210 	add.w	r2, r3, #16
 800207e:	7953      	ldrb	r3, [r2, #5]
 8002080:	f36f 0383 	bfc	r3, #2, #2
 8002084:	7153      	strb	r3, [r2, #5]

	// DRIVE register
	drive_regs[drive_index].drive_reg.ocpth = 0b11;		// OCP threshold of 500mV
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4a20      	ldr	r2, [pc, #128]	@ (800210c <InitRegValuesPWM+0x1bc>)
 800208a:	015b      	lsls	r3, r3, #5
 800208c:	4413      	add	r3, r2
 800208e:	f103 0218 	add.w	r2, r3, #24
 8002092:	7813      	ldrb	r3, [r2, #0]
 8002094:	f043 0303 	orr.w	r3, r3, #3
 8002098:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.ocpdeg = 0b11;		// OCP deglitch time of 4us
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	4a1b      	ldr	r2, [pc, #108]	@ (800210c <InitRegValuesPWM+0x1bc>)
 800209e:	015b      	lsls	r3, r3, #5
 80020a0:	4413      	add	r3, r2
 80020a2:	f103 0218 	add.w	r2, r3, #24
 80020a6:	7813      	ldrb	r3, [r2, #0]
 80020a8:	f043 030c 	orr.w	r3, r3, #12
 80020ac:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.tdriven = 0b11;	// Low-side gate drive time of 500ns
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	4a16      	ldr	r2, [pc, #88]	@ (800210c <InitRegValuesPWM+0x1bc>)
 80020b2:	015b      	lsls	r3, r3, #5
 80020b4:	4413      	add	r3, r2
 80020b6:	f103 0218 	add.w	r2, r3, #24
 80020ba:	7813      	ldrb	r3, [r2, #0]
 80020bc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80020c0:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.tdrivep = 0b11;	// High-side gate drive time of 500ns
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	4a11      	ldr	r2, [pc, #68]	@ (800210c <InitRegValuesPWM+0x1bc>)
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	4413      	add	r3, r2
 80020ca:	f103 0218 	add.w	r2, r3, #24
 80020ce:	7813      	ldrb	r3, [r2, #0]
 80020d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020d4:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.idriven = 0b11;	// Low-side gate drive peak current of 300mA peak (sink)
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	4a0c      	ldr	r2, [pc, #48]	@ (800210c <InitRegValuesPWM+0x1bc>)
 80020da:	015b      	lsls	r3, r3, #5
 80020dc:	4413      	add	r3, r2
 80020de:	f103 0218 	add.w	r2, r3, #24
 80020e2:	7853      	ldrb	r3, [r2, #1]
 80020e4:	f043 0303 	orr.w	r3, r3, #3
 80020e8:	7053      	strb	r3, [r2, #1]
	drive_regs[drive_index].drive_reg.idrivep = 0b11;	// High-side gate drive peak current of 150mA peak (sink)
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4a07      	ldr	r2, [pc, #28]	@ (800210c <InitRegValuesPWM+0x1bc>)
 80020ee:	015b      	lsls	r3, r3, #5
 80020f0:	4413      	add	r3, r2
 80020f2:	f103 0218 	add.w	r2, r3, #24
 80020f6:	7853      	ldrb	r3, [r2, #1]
 80020f8:	f043 030c 	orr.w	r3, r3, #12
 80020fc:	7053      	strb	r3, [r2, #1]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	200004e0 	.word	0x200004e0

08002110 <InitRegValues2>:

void InitRegValues2(DRIVE_MOTOR drive_index)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
	// CTRL register
	// drive_regs[drive_index].ctrl_reg.enbl = 1;	// Enable motor
	drive_regs[drive_index].ctrl_reg.enbl = 0;	// Disable motor drive by default
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	4a79      	ldr	r2, [pc, #484]	@ (8002304 <InitRegValues2+0x1f4>)
 800211e:	015b      	lsls	r3, r3, #5
 8002120:	441a      	add	r2, r3
 8002122:	7813      	ldrb	r3, [r2, #0]
 8002124:	f36f 0300 	bfc	r3, #0, #1
 8002128:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.rdir = 0;	// Direction set by DIR pin
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	4a75      	ldr	r2, [pc, #468]	@ (8002304 <InitRegValues2+0x1f4>)
 800212e:	015b      	lsls	r3, r3, #5
 8002130:	441a      	add	r2, r3
 8002132:	7813      	ldrb	r3, [r2, #0]
 8002134:	f36f 0341 	bfc	r3, #1, #1
 8002138:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.rstep = 0;	// No automatic stepping
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	4a71      	ldr	r2, [pc, #452]	@ (8002304 <InitRegValues2+0x1f4>)
 800213e:	015b      	lsls	r3, r3, #5
 8002140:	441a      	add	r2, r3
 8002142:	7813      	ldrb	r3, [r2, #0]
 8002144:	f36f 0382 	bfc	r3, #2, #1
 8002148:	7013      	strb	r3, [r2, #0]
	//drive_regs[drive_index].ctrl_reg.mode = 0b0010;	// 1/4 step
	if (drive_index == DRIVE_PITCH)
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d109      	bne.n	8002164 <InitRegValues2+0x54>
	{
		//drive_regs[drive_index].ctrl_reg.mode = 0b0010;	// 1/4 step
		drive_regs[drive_index].ctrl_reg.mode = 0b0001;	// 1/2 step
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	4a6c      	ldr	r2, [pc, #432]	@ (8002304 <InitRegValues2+0x1f4>)
 8002154:	015b      	lsls	r3, r3, #5
 8002156:	441a      	add	r2, r3
 8002158:	7813      	ldrb	r3, [r2, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	f361 03c6 	bfi	r3, r1, #3, #4
 8002160:	7013      	strb	r3, [r2, #0]
 8002162:	e007      	b.n	8002174 <InitRegValues2+0x64>
		//drive_regs[drive_index].ctrl_reg.mode = 0b0000;	// Full step
	}
	else
		drive_regs[drive_index].ctrl_reg.mode = 0b0000;	// Full step
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	4a67      	ldr	r2, [pc, #412]	@ (8002304 <InitRegValues2+0x1f4>)
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	441a      	add	r2, r3
 800216c:	7813      	ldrb	r3, [r2, #0]
 800216e:	f36f 03c6 	bfc	r3, #3, #4
 8002172:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].ctrl_reg.extstall = 0;	// Internal stall detect
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4a63      	ldr	r2, [pc, #396]	@ (8002304 <InitRegValues2+0x1f4>)
 8002178:	015b      	lsls	r3, r3, #5
 800217a:	441a      	add	r2, r3
 800217c:	7813      	ldrb	r3, [r2, #0]
 800217e:	f36f 13c7 	bfc	r3, #7, #1
 8002182:	7013      	strb	r3, [r2, #0]
	// drive_regs[drive_index].ctrl_reg.isgain = 0b00;	// Gain of 5
	drive_regs[drive_index].ctrl_reg.isgain = 0b01;	// Gain of 10
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	4a5f      	ldr	r2, [pc, #380]	@ (8002304 <InitRegValues2+0x1f4>)
 8002188:	015b      	lsls	r3, r3, #5
 800218a:	441a      	add	r2, r3
 800218c:	7853      	ldrb	r3, [r2, #1]
 800218e:	2101      	movs	r1, #1
 8002190:	f361 0301 	bfi	r3, r1, #0, #2
 8002194:	7053      	strb	r3, [r2, #1]
	drive_regs[drive_index].ctrl_reg.dtime = 0b00;	// Dead-time of 850ns
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	4a5a      	ldr	r2, [pc, #360]	@ (8002304 <InitRegValues2+0x1f4>)
 800219a:	015b      	lsls	r3, r3, #5
 800219c:	441a      	add	r2, r3
 800219e:	7853      	ldrb	r3, [r2, #1]
 80021a0:	f36f 0383 	bfc	r3, #2, #2
 80021a4:	7053      	strb	r3, [r2, #1]

	// TORQUE register
	drive_regs[drive_index].torque_reg.torque = 24;// max 2.5A  //0xFF;	// Sets full torque for H-bridge
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	4a56      	ldr	r2, [pc, #344]	@ (8002304 <InitRegValues2+0x1f4>)
 80021aa:	015b      	lsls	r3, r3, #5
 80021ac:	4413      	add	r3, r2
 80021ae:	3304      	adds	r3, #4
 80021b0:	2218      	movs	r2, #24
 80021b2:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].torque_reg.smplth = 0b111;	// 100us BEMF sample threshold
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	4a53      	ldr	r2, [pc, #332]	@ (8002304 <InitRegValues2+0x1f4>)
 80021b8:	015b      	lsls	r3, r3, #5
 80021ba:	441a      	add	r2, r3
 80021bc:	7953      	ldrb	r3, [r2, #5]
 80021be:	f043 0307 	orr.w	r3, r3, #7
 80021c2:	7153      	strb	r3, [r2, #5]

	// OFF register
	drive_regs[drive_index].off_reg.toff = 0x80;		// Sets fixed off time, in increments of 500ns
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	4a4f      	ldr	r2, [pc, #316]	@ (8002304 <InitRegValues2+0x1f4>)
 80021c8:	015b      	lsls	r3, r3, #5
 80021ca:	4413      	add	r3, r2
 80021cc:	3308      	adds	r3, #8
 80021ce:	2280      	movs	r2, #128	@ 0x80
 80021d0:	701a      	strb	r2, [r3, #0]
	// drive_regs[drive_index].off_reg.pwmmode = pwm_mode;	// Use internal indexer
	drive_regs[drive_index].off_reg.pwmmode = 1;
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002304 <InitRegValues2+0x1f4>)
 80021d6:	015b      	lsls	r3, r3, #5
 80021d8:	4413      	add	r3, r2
 80021da:	f103 0208 	add.w	r2, r3, #8
 80021de:	7853      	ldrb	r3, [r2, #1]
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	7053      	strb	r3, [r2, #1]

	// BLANK register
	drive_regs[drive_index].blank_reg.tblank = 0x80;	// Current trip blanking time, in increments of 20ns
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	4a46      	ldr	r2, [pc, #280]	@ (8002304 <InitRegValues2+0x1f4>)
 80021ea:	015b      	lsls	r3, r3, #5
 80021ec:	4413      	add	r3, r2
 80021ee:	330c      	adds	r3, #12
 80021f0:	2280      	movs	r2, #128	@ 0x80
 80021f2:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].blank_reg.abt = 0;		// Disable adaptive blanking time
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4a43      	ldr	r2, [pc, #268]	@ (8002304 <InitRegValues2+0x1f4>)
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	4413      	add	r3, r2
 80021fc:	f103 0208 	add.w	r2, r3, #8
 8002200:	7953      	ldrb	r3, [r2, #5]
 8002202:	f36f 0300 	bfc	r3, #0, #1
 8002206:	7153      	strb	r3, [r2, #5]

	// DECAY register
	drive_regs[drive_index].decay_reg.tdecay = 0x80;		// Mixed decay transition time, in increments of 500ns
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	4a3e      	ldr	r2, [pc, #248]	@ (8002304 <InitRegValues2+0x1f4>)
 800220c:	015b      	lsls	r3, r3, #5
 800220e:	4413      	add	r3, r2
 8002210:	3310      	adds	r3, #16
 8002212:	2280      	movs	r2, #128	@ 0x80
 8002214:	701a      	strb	r2, [r3, #0]
	if (drive_index == DRIVE_PITCH)
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10b      	bne.n	8002234 <InitRegValues2+0x124>
		drive_regs[drive_index].decay_reg.decmod = 0b010;	// Force fast decay at all times
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	4a39      	ldr	r2, [pc, #228]	@ (8002304 <InitRegValues2+0x1f4>)
 8002220:	015b      	lsls	r3, r3, #5
 8002222:	4413      	add	r3, r2
 8002224:	f103 0210 	add.w	r2, r3, #16
 8002228:	7853      	ldrb	r3, [r2, #1]
 800222a:	2102      	movs	r1, #2
 800222c:	f361 0302 	bfi	r3, r1, #0, #3
 8002230:	7053      	strb	r3, [r2, #1]
 8002232:	e009      	b.n	8002248 <InitRegValues2+0x138>
	else
		drive_regs[drive_index].decay_reg.decmod = 0b000;	// Force slow decay at all times
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	4a33      	ldr	r2, [pc, #204]	@ (8002304 <InitRegValues2+0x1f4>)
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	4413      	add	r3, r2
 800223c:	f103 0210 	add.w	r2, r3, #16
 8002240:	7853      	ldrb	r3, [r2, #1]
 8002242:	f36f 0302 	bfc	r3, #0, #3
 8002246:	7053      	strb	r3, [r2, #1]


	// STALL register
	drive_regs[drive_index].stall_reg.sdthr = 0xFF;	// Stall detect threshold
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	4a2e      	ldr	r2, [pc, #184]	@ (8002304 <InitRegValues2+0x1f4>)
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	4413      	add	r3, r2
 8002250:	3314      	adds	r3, #20
 8002252:	22ff      	movs	r2, #255	@ 0xff
 8002254:	701a      	strb	r2, [r3, #0]
	drive_regs[drive_index].stall_reg.sdcnt = 0b11;	// STALLn asserted on first step with BEMF below SDTHR
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	4a2a      	ldr	r2, [pc, #168]	@ (8002304 <InitRegValues2+0x1f4>)
 800225a:	015b      	lsls	r3, r3, #5
 800225c:	4413      	add	r3, r2
 800225e:	f103 0210 	add.w	r2, r3, #16
 8002262:	7953      	ldrb	r3, [r2, #5]
 8002264:	f043 0303 	orr.w	r3, r3, #3
 8002268:	7153      	strb	r3, [r2, #5]
	drive_regs[drive_index].stall_reg.vdiv = 0b00;	// BEMF divided by 32
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	4a25      	ldr	r2, [pc, #148]	@ (8002304 <InitRegValues2+0x1f4>)
 800226e:	015b      	lsls	r3, r3, #5
 8002270:	4413      	add	r3, r2
 8002272:	f103 0210 	add.w	r2, r3, #16
 8002276:	7953      	ldrb	r3, [r2, #5]
 8002278:	f36f 0383 	bfc	r3, #2, #2
 800227c:	7153      	strb	r3, [r2, #5]

	// DRIVE register
	drive_regs[drive_index].drive_reg.ocpth = 0b11;		// OCP threshold of 500mV
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <InitRegValues2+0x1f4>)
 8002282:	015b      	lsls	r3, r3, #5
 8002284:	4413      	add	r3, r2
 8002286:	f103 0218 	add.w	r2, r3, #24
 800228a:	7813      	ldrb	r3, [r2, #0]
 800228c:	f043 0303 	orr.w	r3, r3, #3
 8002290:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.ocpdeg = 0b11;		// OCP deglitch time of 4us
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4a1b      	ldr	r2, [pc, #108]	@ (8002304 <InitRegValues2+0x1f4>)
 8002296:	015b      	lsls	r3, r3, #5
 8002298:	4413      	add	r3, r2
 800229a:	f103 0218 	add.w	r2, r3, #24
 800229e:	7813      	ldrb	r3, [r2, #0]
 80022a0:	f043 030c 	orr.w	r3, r3, #12
 80022a4:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.tdriven = 0b11;	// Low-side gate drive time of 500ns
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <InitRegValues2+0x1f4>)
 80022aa:	015b      	lsls	r3, r3, #5
 80022ac:	4413      	add	r3, r2
 80022ae:	f103 0218 	add.w	r2, r3, #24
 80022b2:	7813      	ldrb	r3, [r2, #0]
 80022b4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80022b8:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.tdrivep = 0b11;	// High-side gate drive time of 500ns
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	4a11      	ldr	r2, [pc, #68]	@ (8002304 <InitRegValues2+0x1f4>)
 80022be:	015b      	lsls	r3, r3, #5
 80022c0:	4413      	add	r3, r2
 80022c2:	f103 0218 	add.w	r2, r3, #24
 80022c6:	7813      	ldrb	r3, [r2, #0]
 80022c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022cc:	7013      	strb	r3, [r2, #0]
	drive_regs[drive_index].drive_reg.idriven = 0b11;	// Low-side gate drive peak current of 300mA peak (sink)
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002304 <InitRegValues2+0x1f4>)
 80022d2:	015b      	lsls	r3, r3, #5
 80022d4:	4413      	add	r3, r2
 80022d6:	f103 0218 	add.w	r2, r3, #24
 80022da:	7853      	ldrb	r3, [r2, #1]
 80022dc:	f043 0303 	orr.w	r3, r3, #3
 80022e0:	7053      	strb	r3, [r2, #1]
	drive_regs[drive_index].drive_reg.idrivep = 0b11;	// High-side gate drive peak current of 150mA peak (sink)
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <InitRegValues2+0x1f4>)
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	4413      	add	r3, r2
 80022ea:	f103 0218 	add.w	r2, r3, #24
 80022ee:	7853      	ldrb	r3, [r2, #1]
 80022f0:	f043 030c 	orr.w	r3, r3, #12
 80022f4:	7053      	strb	r3, [r2, #1]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	200004e0 	.word	0x200004e0

08002308 <InitDriveMotor>:

void InitDriveMotor(DRIVE_MOTOR drive_index)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
	// Reset drive
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8002312:	79fa      	ldrb	r2, [r7, #7]
 8002314:	492d      	ldr	r1, [pc, #180]	@ (80023cc <InitDriveMotor+0xc4>)
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	79fa      	ldrb	r2, [r7, #7]
 8002324:	492a      	ldr	r1, [pc, #168]	@ (80023d0 <InitDriveMotor+0xc8>)
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	440b      	add	r3, r1
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	2201      	movs	r2, #1
 8002334:	4619      	mov	r1, r3
 8002336:	f002 f97d 	bl	8004634 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_SET);
	HAL_Delay(10);
 800233a:	200a      	movs	r0, #10
 800233c:	f001 f800 	bl	8003340 <HAL_Delay>
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8002340:	79fa      	ldrb	r2, [r7, #7]
 8002342:	4922      	ldr	r1, [pc, #136]	@ (80023cc <InitDriveMotor+0xc4>)
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	79fa      	ldrb	r2, [r7, #7]
 8002352:	491f      	ldr	r1, [pc, #124]	@ (80023d0 <InitDriveMotor+0xc8>)
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	440b      	add	r3, r1
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	f002 f966 	bl	8004634 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_RESET);

	// Disable sleeping
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_SLEEP],
 8002368:	79fa      	ldrb	r2, [r7, #7]
 800236a:	4918      	ldr	r1, [pc, #96]	@ (80023cc <InitDriveMotor+0xc4>)
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3304      	adds	r3, #4
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	4914      	ldr	r1, [pc, #80]	@ (80023d0 <InitDriveMotor+0xc8>)
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	440b      	add	r3, r1
 8002388:	3302      	adds	r3, #2
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	2201      	movs	r2, #1
 800238e:	4619      	mov	r1, r3
 8002390:	f002 f950 	bl	8004634 <HAL_GPIO_WritePin>
	// Set initial reg values
	//uint8_t pwm_mode = 0; // Internal indexer enabled
	//if (drive_index == DRIVE_MAST)
	//	pwm_mode = 1; // External pwm enabled
	// InitRegValues2(drive_index, pwm_mode);
	if (drive_index == DRIVE_MAST)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d104      	bne.n	80023a4 <InitDriveMotor+0x9c>
		InitRegValuesPWM(drive_index);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fdd7 	bl	8001f50 <InitRegValuesPWM>
 80023a2:	e003      	b.n	80023ac <InitDriveMotor+0xa4>
	else
		InitRegValues2(drive_index);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff feb2 	bl	8002110 <InitRegValues2>

	// Send regs over SPI
	SendDriveRegisters(drive_index);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fd82 	bl	8001eb8 <SendDriveRegisters>

	HAL_Delay(10);
 80023b4:	200a      	movs	r0, #10
 80023b6:	f000 ffc3 	bl	8003340 <HAL_Delay>
	ResetStatusRegisters(drive_index);
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f899 	bl	80024f4 <ResetStatusRegisters>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000000 	.word	0x20000000
 80023d0:	20000028 	.word	0x20000028

080023d4 <EnableDrive>:


void EnableDrive(DRIVE_MOTOR drive_index)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80023de:	79fa      	ldrb	r2, [r7, #7]
 80023e0:	491d      	ldr	r1, [pc, #116]	@ (8002458 <EnableDrive+0x84>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	3308      	adds	r3, #8
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	79fa      	ldrb	r2, [r7, #7]
 80023f2:	491a      	ldr	r1, [pc, #104]	@ (800245c <EnableDrive+0x88>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	440b      	add	r3, r1
 80023fe:	3304      	adds	r3, #4
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	4619      	mov	r1, r3
 8002406:	f002 f915 	bl	8004634 <HAL_GPIO_WritePin>
						  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	drive_regs[drive_index].ctrl_reg.enbl = 1;
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	4a14      	ldr	r2, [pc, #80]	@ (8002460 <EnableDrive+0x8c>)
 800240e:	015b      	lsls	r3, r3, #5
 8002410:	441a      	add	r2, r3
 8002412:	7813      	ldrb	r3, [r2, #0]
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	7013      	strb	r3, [r2, #0]
	TransmitMotorSPI(drive_index, DRV8711_CTRL_REG);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fc34 	bl	8001c8c <TransmitMotorSPI>

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8002424:	79fa      	ldrb	r2, [r7, #7]
 8002426:	490c      	ldr	r1, [pc, #48]	@ (8002458 <EnableDrive+0x84>)
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3308      	adds	r3, #8
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	79fa      	ldrb	r2, [r7, #7]
 8002438:	4908      	ldr	r1, [pc, #32]	@ (800245c <EnableDrive+0x88>)
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	440b      	add	r3, r1
 8002444:	3304      	adds	r3, #4
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	f002 f8f2 	bl	8004634 <HAL_GPIO_WritePin>
						  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000000 	.word	0x20000000
 800245c:	20000028 	.word	0x20000028
 8002460:	200004e0 	.word	0x200004e0

08002464 <DisableDrive>:

void DisableDrive(DRIVE_MOTOR drive_index)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 800246e:	79fa      	ldrb	r2, [r7, #7]
 8002470:	491d      	ldr	r1, [pc, #116]	@ (80024e8 <DisableDrive+0x84>)
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3308      	adds	r3, #8
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	79fa      	ldrb	r2, [r7, #7]
 8002482:	491a      	ldr	r1, [pc, #104]	@ (80024ec <DisableDrive+0x88>)
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	440b      	add	r3, r1
 800248e:	3304      	adds	r3, #4
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	4619      	mov	r1, r3
 8002496:	f002 f8cd 	bl	8004634 <HAL_GPIO_WritePin>
						  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	drive_regs[drive_index].ctrl_reg.enbl = 0;
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <DisableDrive+0x8c>)
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	441a      	add	r2, r3
 80024a2:	7813      	ldrb	r3, [r2, #0]
 80024a4:	f36f 0300 	bfc	r3, #0, #1
 80024a8:	7013      	strb	r3, [r2, #0]
	TransmitMotorSPI(drive_index, DRV8711_CTRL_REG);
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fbec 	bl	8001c8c <TransmitMotorSPI>

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80024b4:	79fa      	ldrb	r2, [r7, #7]
 80024b6:	490c      	ldr	r1, [pc, #48]	@ (80024e8 <DisableDrive+0x84>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3308      	adds	r3, #8
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	79fa      	ldrb	r2, [r7, #7]
 80024c8:	4908      	ldr	r1, [pc, #32]	@ (80024ec <DisableDrive+0x88>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	3304      	adds	r3, #4
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	4619      	mov	r1, r3
 80024dc:	f002 f8aa 	bl	8004634 <HAL_GPIO_WritePin>
				 	  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000028 	.word	0x20000028
 80024f0:	200004e0 	.word	0x200004e0

080024f4 <ResetStatusRegisters>:

void ResetStatusRegisters(DRIVE_MOTOR drive_index)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	491f      	ldr	r1, [pc, #124]	@ (8002580 <ResetStatusRegisters+0x8c>)
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3308      	adds	r3, #8
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	79fa      	ldrb	r2, [r7, #7]
 8002512:	491c      	ldr	r1, [pc, #112]	@ (8002584 <ResetStatusRegisters+0x90>)
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	440b      	add	r3, r1
 800251e:	3304      	adds	r3, #4
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	2201      	movs	r2, #1
 8002524:	4619      	mov	r1, r3
 8002526:	f002 f885 	bl	8004634 <HAL_GPIO_WritePin>
							  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	// drive_regs[drive_index].status_reg = {0};
	memset(&drive_regs[drive_index].status_reg, 0, sizeof(STATUS_REG));
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	015b      	lsls	r3, r3, #5
 800252e:	3318      	adds	r3, #24
 8002530:	4a15      	ldr	r2, [pc, #84]	@ (8002588 <ResetStatusRegisters+0x94>)
 8002532:	4413      	add	r3, r2
 8002534:	3304      	adds	r3, #4
 8002536:	2204      	movs	r2, #4
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f005 f9da 	bl	80078f4 <memset>
	TransmitMotorSPI(drive_index, DRV8711_STATUS_REG);
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	2107      	movs	r1, #7
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fba1 	bl	8001c8c <TransmitMotorSPI>

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 800254a:	79fa      	ldrb	r2, [r7, #7]
 800254c:	490c      	ldr	r1, [pc, #48]	@ (8002580 <ResetStatusRegisters+0x8c>)
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3308      	adds	r3, #8
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	79fa      	ldrb	r2, [r7, #7]
 800255e:	4909      	ldr	r1, [pc, #36]	@ (8002584 <ResetStatusRegisters+0x90>)
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	440b      	add	r3, r1
 800256a:	3304      	adds	r3, #4
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	4619      	mov	r1, r3
 8002572:	f002 f85f 	bl	8004634 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000
 8002584:	20000028 	.word	0x20000028
 8002588:	200004e0 	.word	0x200004e0

0800258c <SendConfigRegisters>:

void SendConfigRegisters(DRIVE_MOTOR drive_index)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8002596:	79fa      	ldrb	r2, [r7, #7]
 8002598:	491c      	ldr	r1, [pc, #112]	@ (800260c <SendConfigRegisters+0x80>)
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3308      	adds	r3, #8
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	79fa      	ldrb	r2, [r7, #7]
 80025aa:	4919      	ldr	r1, [pc, #100]	@ (8002610 <SendConfigRegisters+0x84>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	440b      	add	r3, r1
 80025b6:	3304      	adds	r3, #4
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4619      	mov	r1, r3
 80025be:	f002 f839 	bl	8004634 <HAL_GPIO_WritePin>
								  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);

	TransmitMotorSPI(drive_index, DRV8711_CTRL_REG);
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fb60 	bl	8001c8c <TransmitMotorSPI>
	//delay_us(50);
	TransmitMotorSPI(drive_index, DRV8711_OFF_REG);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2102      	movs	r1, #2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fb5b 	bl	8001c8c <TransmitMotorSPI>

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <SendConfigRegisters+0x80>)
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3308      	adds	r3, #8
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	79fa      	ldrb	r2, [r7, #7]
 80025ea:	4909      	ldr	r1, [pc, #36]	@ (8002610 <SendConfigRegisters+0x84>)
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	440b      	add	r3, r1
 80025f6:	3304      	adds	r3, #4
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	f002 f819 	bl	8004634 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000000 	.word	0x20000000
 8002610:	20000028 	.word	0x20000028

08002614 <ResetDrive>:

void ResetDrive(DRIVE_MOTOR drive_index)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 800261e:	79fa      	ldrb	r2, [r7, #7]
 8002620:	4916      	ldr	r1, [pc, #88]	@ (800267c <ResetDrive+0x68>)
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	79fa      	ldrb	r2, [r7, #7]
 8002630:	4913      	ldr	r1, [pc, #76]	@ (8002680 <ResetDrive+0x6c>)
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	440b      	add	r3, r1
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	2201      	movs	r2, #1
 8002640:	4619      	mov	r1, r3
 8002642:	f001 fff7 	bl	8004634 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_SET);
	HAL_Delay(10);
 8002646:	200a      	movs	r0, #10
 8002648:	f000 fe7a 	bl	8003340 <HAL_Delay>
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 800264c:	79fa      	ldrb	r2, [r7, #7]
 800264e:	490b      	ldr	r1, [pc, #44]	@ (800267c <ResetDrive+0x68>)
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	79fa      	ldrb	r2, [r7, #7]
 800265e:	4908      	ldr	r1, [pc, #32]	@ (8002680 <ResetDrive+0x6c>)
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	440b      	add	r3, r1
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	2200      	movs	r2, #0
 800266e:	4619      	mov	r1, r3
 8002670:	f001 ffe0 	bl	8004634 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_RESET);
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000000 	.word	0x20000000
 8002680:	20000028 	.word	0x20000028

08002684 <SetDirection>:
{
	return drive_status[drive_index];
}

void SetDirection(DRIVE_MOTOR drive_index, uint32_t direction)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState state = (direction == DIR_LEFT) ? 1 : 0;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_DIR],
 800269e:	79fa      	ldrb	r2, [r7, #7]
 80026a0:	490c      	ldr	r1, [pc, #48]	@ (80026d4 <SetDirection+0x50>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	3310      	adds	r3, #16
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	4909      	ldr	r1, [pc, #36]	@ (80026d8 <SetDirection+0x54>)
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	440b      	add	r3, r1
 80026be:	3308      	adds	r3, #8
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f001 ffb5 	bl	8004634 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_DIR], state);
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000028 	.word	0x20000028

080026dc <EnableDriveExternalPWM>:
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}

void EnableDriveExternalPWM(DRIVE_MOTOR drive_index)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
	drive_regs[drive_index].off_reg.pwmmode = 1;		// Use external PWM
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002764 <EnableDriveExternalPWM+0x88>)
 80026ea:	015b      	lsls	r3, r3, #5
 80026ec:	4413      	add	r3, r2
 80026ee:	f103 0208 	add.w	r2, r3, #8
 80026f2:	7853      	ldrb	r3, [r2, #1]
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	7053      	strb	r3, [r2, #1]

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80026fa:	79fa      	ldrb	r2, [r7, #7]
 80026fc:	491a      	ldr	r1, [pc, #104]	@ (8002768 <EnableDriveExternalPWM+0x8c>)
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3308      	adds	r3, #8
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	4917      	ldr	r1, [pc, #92]	@ (800276c <EnableDriveExternalPWM+0x90>)
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	440b      	add	r3, r1
 800271a:	3304      	adds	r3, #4
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	4619      	mov	r1, r3
 8002722:	f001 ff87 	bl	8004634 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);
	TransmitMotorSPI(drive_index, DRV8711_OFF_REG);
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2102      	movs	r1, #2
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff faae 	bl	8001c8c <TransmitMotorSPI>
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8002730:	79fa      	ldrb	r2, [r7, #7]
 8002732:	490d      	ldr	r1, [pc, #52]	@ (8002768 <EnableDriveExternalPWM+0x8c>)
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	3308      	adds	r3, #8
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	79fa      	ldrb	r2, [r7, #7]
 8002744:	4909      	ldr	r1, [pc, #36]	@ (800276c <EnableDriveExternalPWM+0x90>)
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	440b      	add	r3, r1
 8002750:	3304      	adds	r3, #4
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	2200      	movs	r2, #0
 8002756:	4619      	mov	r1, r3
 8002758:	f001 ff6c 	bl	8004634 <HAL_GPIO_WritePin>
					  drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200004e0 	.word	0x200004e0
 8002768:	20000000 	.word	0x20000000
 800276c:	20000028 	.word	0x20000028

08002770 <better_step_function>:
uint32_t speed_stepper_motor_pitch_int_converted = 2; //in multiple of 50us
uint8_t gpio_pin_value = 0;
//fonctionne avec un timer d'un multiple de la vitesse maximale
//better_step_function() s'exécute tous les 50us
//vitesse max 100us, soit multiplicator_slowing_motor > stepper_motor_pitch où stepper_motor_pitch = 2 (50us*2=100us)
void better_step_function() {
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	if (speed_stepper_motor_pitch >= 100) {
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <better_step_function+0xb4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b63      	cmp	r3, #99	@ 0x63
 800277a:	d903      	bls.n	8002784 <better_step_function+0x14>
		speed_stepper_motor_pitch_int_converted = 2;
 800277c:	4b2a      	ldr	r3, [pc, #168]	@ (8002828 <better_step_function+0xb8>)
 800277e:	2202      	movs	r2, #2
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e013      	b.n	80027ac <better_step_function+0x3c>
	} else {
		speed_stepper_motor_pitch_int_converted = (uint32_t) ( 1 / (float) ((float) speed_stepper_motor_pitch / 100));
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <better_step_function+0xb4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002790:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800282c <better_step_function+0xbc>
 8002794:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002798:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800279c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027a4:	ee17 2a90 	vmov	r2, s15
 80027a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002828 <better_step_function+0xb8>)
 80027aa:	601a      	str	r2, [r3, #0]
	}
	if (speed_stepper_motor_pitch_int_converted < 2) speed_stepper_motor_pitch_int_converted = 2; //sécurité sinon moteur bloque et besoin de HARD RESET toute la boite élé
 80027ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <better_step_function+0xb8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d802      	bhi.n	80027ba <better_step_function+0x4a>
 80027b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <better_step_function+0xb8>)
 80027b6:	2202      	movs	r2, #2
 80027b8:	601a      	str	r2, [r3, #0]


	if (multiplicator_slowing_motor <= speed_stepper_motor_pitch_int_converted) {
 80027ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <better_step_function+0xc0>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <better_step_function+0xb8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d805      	bhi.n	80027d2 <better_step_function+0x62>
		multiplicator_slowing_motor++;
 80027c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <better_step_function+0xc0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <better_step_function+0xc0>)
 80027ce:	6013      	str	r3, [r2, #0]
			}
		}
	}


}
 80027d0:	e025      	b.n	800281e <better_step_function+0xae>
		multiplicator_slowing_motor = 0;
 80027d2:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <better_step_function+0xc0>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
		if (motor_pitch_on == 1) {
 80027d8:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <better_step_function+0xc4>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d11e      	bne.n	800281e <better_step_function+0xae>
			if (gpio_pin_value == 0) {
 80027e0:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <better_step_function+0xc8>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <better_step_function+0x90>
				gpio_pin_value = 1;
 80027e8:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <better_step_function+0xc8>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(drive_ports[DRIVE_PITCH][DRIVE_STEP],
 80027ee:	4b13      	ldr	r3, [pc, #76]	@ (800283c <better_step_function+0xcc>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <better_step_function+0xd0>)
 80027f4:	8a11      	ldrh	r1, [r2, #16]
 80027f6:	2201      	movs	r2, #1
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 ff1b 	bl	8004634 <HAL_GPIO_WritePin>
}
 80027fe:	e00e      	b.n	800281e <better_step_function+0xae>
			} else if (gpio_pin_value == 1) {
 8002800:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <better_step_function+0xc8>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10a      	bne.n	800281e <better_step_function+0xae>
				gpio_pin_value = 0;
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <better_step_function+0xc8>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(drive_ports[DRIVE_PITCH][DRIVE_STEP],
 800280e:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <better_step_function+0xcc>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a0b      	ldr	r2, [pc, #44]	@ (8002840 <better_step_function+0xd0>)
 8002814:	8a11      	ldrh	r1, [r2, #16]
 8002816:	2200      	movs	r2, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f001 ff0b 	bl	8004634 <HAL_GPIO_WritePin>
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000434 	.word	0x20000434
 8002828:	2000003c 	.word	0x2000003c
 800282c:	42c80000 	.word	0x42c80000
 8002830:	20000530 	.word	0x20000530
 8002834:	200004c0 	.word	0x200004c0
 8002838:	20000534 	.word	0x20000534
 800283c:	20000000 	.word	0x20000000
 8002840:	20000028 	.word	0x20000028

08002844 <SetDutyCycle>:


void SetDutyCycle(uint32_t pwm_index, uint16_t duty_cycle)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	@ 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
	HAL_TIM_PWM_Stop(pwm_timers[pwm_index], pwm_channels[pwm_index]); // stop generation of pwm
 8002850:	4a12      	ldr	r2, [pc, #72]	@ (800289c <SetDutyCycle+0x58>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002858:	4911      	ldr	r1, [pc, #68]	@ (80028a0 <SetDutyCycle+0x5c>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f003 fc54 	bl	8006110 <HAL_TIM_PWM_Stop>

	TIM_OC_InitTypeDef sConfigOC;
	// (*htim).Init.Period = PWM_PERIOD; // set the period duration
	// HAL_TIM_PWM_Init(htim); // reinititialise with new period value

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002868:	2360      	movs	r3, #96	@ 0x60
 800286a:	60fb      	str	r3, [r7, #12]
	//sConfigOC.Pulse = (uint32_t)(duty_cycle * (float)PWM_PERIOD); // set the pulse duration
	sConfigOC.Pulse = duty_cycle;
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(pwm_timers[pwm_index], &sConfigOC, pwm_channels[pwm_index]);
 8002878:	4a08      	ldr	r2, [pc, #32]	@ (800289c <SetDutyCycle+0x58>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002880:	4a07      	ldr	r2, [pc, #28]	@ (80028a0 <SetDutyCycle+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	4619      	mov	r1, r3
 800288e:	f003 fdb7 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>

	//HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2); // start pwm generation
}
 8002892:	bf00      	nop
 8002894:	3728      	adds	r7, #40	@ 0x28
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000520 	.word	0x20000520
 80028a0:	20000528 	.word	0x20000528

080028a4 <DriveMastRight>:

void DriveMastRight()
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	SetDutyCycle(PWM1, 360);
 80028a8:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7ff ffc9 	bl	8002844 <SetDutyCycle>
	SetDutyCycle(PWM2, 480);
 80028b2:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7ff ffc4 	bl	8002844 <SetDutyCycle>
	HAL_TIM_PWM_Start(pwm1_timer, pwm1_channel);
 80028bc:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <DriveMastRight+0x3c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a08      	ldr	r2, [pc, #32]	@ (80028e4 <DriveMastRight+0x40>)
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 fb5a 	bl	8005f80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm2_timer, pwm2_channel);
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <DriveMastRight+0x44>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a06      	ldr	r2, [pc, #24]	@ (80028ec <DriveMastRight+0x48>)
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fb52 	bl	8005f80 <HAL_TIM_PWM_Start>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200004d0 	.word	0x200004d0
 80028e4:	200004d8 	.word	0x200004d8
 80028e8:	200004d4 	.word	0x200004d4
 80028ec:	200004dc 	.word	0x200004dc

080028f0 <DriveMastLeft>:

void DriveMastLeft()
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	SetDutyCycle(PWM1, 480);
 80028f4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7ff ffa3 	bl	8002844 <SetDutyCycle>
	SetDutyCycle(PWM2, 360);
 80028fe:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002902:	2001      	movs	r0, #1
 8002904:	f7ff ff9e 	bl	8002844 <SetDutyCycle>
	HAL_TIM_PWM_Start(pwm1_timer, pwm1_channel);
 8002908:	4b08      	ldr	r3, [pc, #32]	@ (800292c <DriveMastLeft+0x3c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a08      	ldr	r2, [pc, #32]	@ (8002930 <DriveMastLeft+0x40>)
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f003 fb34 	bl	8005f80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm2_timer, pwm2_channel);
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <DriveMastLeft+0x44>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a06      	ldr	r2, [pc, #24]	@ (8002938 <DriveMastLeft+0x48>)
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f003 fb2c 	bl	8005f80 <HAL_TIM_PWM_Start>
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200004d0 	.word	0x200004d0
 8002930:	200004d8 	.word	0x200004d8
 8002934:	200004d4 	.word	0x200004d4
 8002938:	200004dc 	.word	0x200004dc

0800293c <DriveMastStop>:

void DriveMastStop()
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	SetDutyCycle(PWM1, 0);
 8002940:	2100      	movs	r1, #0
 8002942:	2000      	movs	r0, #0
 8002944:	f7ff ff7e 	bl	8002844 <SetDutyCycle>
	SetDutyCycle(PWM2, 0);
 8002948:	2100      	movs	r1, #0
 800294a:	2001      	movs	r0, #1
 800294c:	f7ff ff7a 	bl	8002844 <SetDutyCycle>
	HAL_TIM_PWM_Stop(pwm1_timer, pwm1_channel);
 8002950:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <DriveMastStop+0x38>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a08      	ldr	r2, [pc, #32]	@ (8002978 <DriveMastStop+0x3c>)
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fbd8 	bl	8006110 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(pwm2_timer, pwm2_channel);
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <DriveMastStop+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a06      	ldr	r2, [pc, #24]	@ (8002980 <DriveMastStop+0x44>)
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f003 fbd0 	bl	8006110 <HAL_TIM_PWM_Stop>
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200004d0 	.word	0x200004d0
 8002978:	200004d8 	.word	0x200004d8
 800297c:	200004d4 	.word	0x200004d4
 8002980:	200004dc 	.word	0x200004dc

08002984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	4b21      	ldr	r3, [pc, #132]	@ (8002a14 <HAL_MspInit+0x90>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4a20      	ldr	r2, [pc, #128]	@ (8002a14 <HAL_MspInit+0x90>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a14 <HAL_MspInit+0x90>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <HAL_MspInit+0x90>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a19      	ldr	r2, [pc, #100]	@ (8002a14 <HAL_MspInit+0x90>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <HAL_MspInit+0x90>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2101      	movs	r1, #1
 80029c6:	f06f 000b 	mvn.w	r0, #11
 80029ca:	f001 fc50 	bl	800426e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2101      	movs	r1, #1
 80029d2:	f06f 000a 	mvn.w	r0, #10
 80029d6:	f001 fc4a 	bl	800426e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2101      	movs	r1, #1
 80029de:	f06f 0009 	mvn.w	r0, #9
 80029e2:	f001 fc44 	bl	800426e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2101      	movs	r1, #1
 80029ea:	f06f 0004 	mvn.w	r0, #4
 80029ee:	f001 fc3e 	bl	800426e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2101      	movs	r1, #1
 80029f6:	f06f 0003 	mvn.w	r0, #3
 80029fa:	f001 fc38 	bl	800426e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2102      	movs	r1, #2
 8002a02:	f06f 0001 	mvn.w	r0, #1
 8002a06:	f001 fc32 	bl	800426e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800

08002a18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a21      	ldr	r2, [pc, #132]	@ (8002abc <HAL_CAN_MspInit+0xa4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d13c      	bne.n	8002ab4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <HAL_CAN_MspInit+0xa8>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac0 <HAL_CAN_MspInit+0xa8>)
 8002a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <HAL_CAN_MspInit+0xa8>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <HAL_CAN_MspInit+0xa8>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ac0 <HAL_CAN_MspInit+0xa8>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b16      	ldr	r3, [pc, #88]	@ (8002ac0 <HAL_CAN_MspInit+0xa8>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	2303      	movs	r3, #3
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a84:	2309      	movs	r3, #9
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	480d      	ldr	r0, [pc, #52]	@ (8002ac4 <HAL_CAN_MspInit+0xac>)
 8002a90:	f001 fc24 	bl	80042dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2101      	movs	r1, #1
 8002a98:	2014      	movs	r0, #20
 8002a9a:	f001 fbe8 	bl	800426e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a9e:	2014      	movs	r0, #20
 8002aa0:	f001 fc01 	bl	80042a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	2015      	movs	r0, #21
 8002aaa:	f001 fbe0 	bl	800426e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002aae:	2015      	movs	r0, #21
 8002ab0:	f001 fbf9 	bl	80042a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3728      	adds	r7, #40	@ 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40006400 	.word	0x40006400
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	@ 0x30
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 031c 	add.w	r3, r7, #28
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a42      	ldr	r2, [pc, #264]	@ (8002bf0 <HAL_I2C_MspInit+0x128>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d12c      	bne.n	8002b44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	4a40      	ldr	r2, [pc, #256]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afa:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b06:	23c0      	movs	r3, #192	@ 0xc0
 8002b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b0a:	2312      	movs	r3, #18
 8002b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b12:	2303      	movs	r3, #3
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b16:	2304      	movs	r3, #4
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4835      	ldr	r0, [pc, #212]	@ (8002bf8 <HAL_I2C_MspInit+0x130>)
 8002b22:	f001 fbdb 	bl	80042dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	4b32      	ldr	r3, [pc, #200]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	4a31      	ldr	r2, [pc, #196]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002b30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b36:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b42:	e050      	b.n	8002be6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2c      	ldr	r2, [pc, #176]	@ (8002bfc <HAL_I2C_MspInit+0x134>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d14b      	bne.n	8002be6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	4b28      	ldr	r3, [pc, #160]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	4a27      	ldr	r2, [pc, #156]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5e:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a20      	ldr	r2, [pc, #128]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8c:	2312      	movs	r3, #18
 8002b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b94:	2303      	movs	r3, #3
 8002b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b98:	2304      	movs	r3, #4
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4817      	ldr	r0, [pc, #92]	@ (8002c00 <HAL_I2C_MspInit+0x138>)
 8002ba4:	f001 fb9a 	bl	80042dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ba8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bae:	2312      	movs	r3, #18
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	f107 031c 	add.w	r3, r7, #28
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	480f      	ldr	r0, [pc, #60]	@ (8002c04 <HAL_I2C_MspInit+0x13c>)
 8002bc6:	f001 fb89 	bl	80042dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002bd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_I2C_MspInit+0x12c>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
}
 8002be6:	bf00      	nop
 8002be8:	3730      	adds	r7, #48	@ 0x30
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40005400 	.word	0x40005400
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40005c00 	.word	0x40005c00
 8002c00:	40020800 	.word	0x40020800
 8002c04:	40020000 	.word	0x40020000

08002c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	@ 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a19      	ldr	r2, [pc, #100]	@ (8002c8c <HAL_SPI_MspInit+0x84>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d12b      	bne.n	8002c82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	4b18      	ldr	r3, [pc, #96]	@ (8002c90 <HAL_SPI_MspInit+0x88>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	4a17      	ldr	r2, [pc, #92]	@ (8002c90 <HAL_SPI_MspInit+0x88>)
 8002c34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c3a:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <HAL_SPI_MspInit+0x88>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <HAL_SPI_MspInit+0x88>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4a10      	ldr	r2, [pc, #64]	@ (8002c90 <HAL_SPI_MspInit+0x88>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <HAL_SPI_MspInit+0x88>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c62:	23e0      	movs	r3, #224	@ 0xe0
 8002c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c72:	2305      	movs	r3, #5
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <HAL_SPI_MspInit+0x8c>)
 8002c7e:	f001 fb2d 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c82:	bf00      	nop
 8002c84:	3728      	adds	r7, #40	@ 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40013000 	.word	0x40013000
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40020000 	.word	0x40020000

08002c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a52      	ldr	r2, [pc, #328]	@ (8002df0 <HAL_TIM_Base_MspInit+0x158>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cae:	4b51      	ldr	r3, [pc, #324]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	4a50      	ldr	r2, [pc, #320]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cba:	4b4e      	ldr	r3, [pc, #312]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002cc6:	e08e      	b.n	8002de6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
 8002cd6:	4b47      	ldr	r3, [pc, #284]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	4a46      	ldr	r2, [pc, #280]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce2:	4b44      	ldr	r3, [pc, #272]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	6a3b      	ldr	r3, [r7, #32]
}
 8002cee:	e07a      	b.n	8002de6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a40      	ldr	r2, [pc, #256]	@ (8002df8 <HAL_TIM_Base_MspInit+0x160>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	4a3c      	ldr	r2, [pc, #240]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
}
 8002d16:	e066      	b.n	8002de6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM4)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a37      	ldr	r2, [pc, #220]	@ (8002dfc <HAL_TIM_Base_MspInit+0x164>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d116      	bne.n	8002d50 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	4a32      	ldr	r2, [pc, #200]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d32:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2101      	movs	r1, #1
 8002d42:	201e      	movs	r0, #30
 8002d44:	f001 fa93 	bl	800426e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d48:	201e      	movs	r0, #30
 8002d4a:	f001 faac 	bl	80042a6 <HAL_NVIC_EnableIRQ>
}
 8002d4e:	e04a      	b.n	8002de6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM5)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2a      	ldr	r2, [pc, #168]	@ (8002e00 <HAL_TIM_Base_MspInit+0x168>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	4a24      	ldr	r2, [pc, #144]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6a:	4b22      	ldr	r3, [pc, #136]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]
}
 8002d76:	e036      	b.n	8002de6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM6)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a21      	ldr	r2, [pc, #132]	@ (8002e04 <HAL_TIM_Base_MspInit+0x16c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d116      	bne.n	8002db0 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d8c:	f043 0310 	orr.w	r3, r3, #16
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	2036      	movs	r0, #54	@ 0x36
 8002da4:	f001 fa63 	bl	800426e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002da8:	2036      	movs	r0, #54	@ 0x36
 8002daa:	f001 fa7c 	bl	80042a6 <HAL_NVIC_EnableIRQ>
}
 8002dae:	e01a      	b.n	8002de6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM7)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <HAL_TIM_Base_MspInit+0x170>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d115      	bne.n	8002de6 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002dc4:	f043 0320 	orr.w	r3, r3, #32
 8002dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dca:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <HAL_TIM_Base_MspInit+0x15c>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2037      	movs	r0, #55	@ 0x37
 8002ddc:	f001 fa47 	bl	800426e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002de0:	2037      	movs	r0, #55	@ 0x37
 8002de2:	f001 fa60 	bl	80042a6 <HAL_NVIC_EnableIRQ>
}
 8002de6:	bf00      	nop
 8002de8:	3728      	adds	r7, #40	@ 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40000c00 	.word	0x40000c00
 8002e04:	40001000 	.word	0x40001000
 8002e08:	40001400 	.word	0x40001400

08002e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a37      	ldr	r2, [pc, #220]	@ (8002f08 <HAL_TIM_MspPostInit+0xfc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d11f      	bne.n	8002e6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	4b36      	ldr	r3, [pc, #216]	@ (8002f0c <HAL_TIM_MspPostInit+0x100>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	4a35      	ldr	r2, [pc, #212]	@ (8002f0c <HAL_TIM_MspPostInit+0x100>)
 8002e38:	f043 0310 	orr.w	r3, r3, #16
 8002e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3e:	4b33      	ldr	r3, [pc, #204]	@ (8002f0c <HAL_TIM_MspPostInit+0x100>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4619      	mov	r1, r3
 8002e66:	482a      	ldr	r0, [pc, #168]	@ (8002f10 <HAL_TIM_MspPostInit+0x104>)
 8002e68:	f001 fa38 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e6c:	e047      	b.n	8002efe <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e76:	d11f      	bne.n	8002eb8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	4b23      	ldr	r3, [pc, #140]	@ (8002f0c <HAL_TIM_MspPostInit+0x100>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	4a22      	ldr	r2, [pc, #136]	@ (8002f0c <HAL_TIM_MspPostInit+0x100>)
 8002e82:	f043 0302 	orr.w	r3, r3, #2
 8002e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e88:	4b20      	ldr	r3, [pc, #128]	@ (8002f0c <HAL_TIM_MspPostInit+0x100>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eaa:	f107 0314 	add.w	r3, r7, #20
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4818      	ldr	r0, [pc, #96]	@ (8002f14 <HAL_TIM_MspPostInit+0x108>)
 8002eb2:	f001 fa13 	bl	80042dc <HAL_GPIO_Init>
}
 8002eb6:	e022      	b.n	8002efe <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a16      	ldr	r2, [pc, #88]	@ (8002f18 <HAL_TIM_MspPostInit+0x10c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d11d      	bne.n	8002efe <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <HAL_TIM_MspPostInit+0x100>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a10      	ldr	r2, [pc, #64]	@ (8002f0c <HAL_TIM_MspPostInit+0x100>)
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <HAL_TIM_MspPostInit+0x100>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4806      	ldr	r0, [pc, #24]	@ (8002f14 <HAL_TIM_MspPostInit+0x108>)
 8002efa:	f001 f9ef 	bl	80042dc <HAL_GPIO_Init>
}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	@ 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40000400 	.word	0x40000400

08002f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	@ 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	@ (8002fa0 <HAL_UART_MspInit+0x84>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12b      	bne.n	8002f96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <HAL_UART_MspInit+0x88>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	4a17      	ldr	r2, [pc, #92]	@ (8002fa4 <HAL_UART_MspInit+0x88>)
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_UART_MspInit+0x88>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <HAL_UART_MspInit+0x88>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	4a10      	ldr	r2, [pc, #64]	@ (8002fa4 <HAL_UART_MspInit+0x88>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <HAL_UART_MspInit+0x88>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f76:	230c      	movs	r3, #12
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f82:	2303      	movs	r3, #3
 8002f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f86:	2307      	movs	r3, #7
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <HAL_UART_MspInit+0x8c>)
 8002f92:	f001 f9a3 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f96:	bf00      	nop
 8002f98:	3728      	adds	r7, #40	@ 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40004400 	.word	0x40004400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020000 	.word	0x40020000

08002fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <NMI_Handler+0x4>

08002fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <HardFault_Handler+0x4>

08002fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <MemManage_Handler+0x4>

08002fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <BusFault_Handler+0x4>

08002fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <UsageFault_Handler+0x4>

08002fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003002:	f000 f97d 	bl	8003300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003010:	4802      	ldr	r0, [pc, #8]	@ (800301c <CAN1_RX0_IRQHandler+0x10>)
 8003012:	f000 fe49 	bl	8003ca8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200000c4 	.word	0x200000c4

08003020 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003024:	4802      	ldr	r0, [pc, #8]	@ (8003030 <CAN1_RX1_IRQHandler+0x10>)
 8003026:	f000 fe3f 	bl	8003ca8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	200000c4 	.word	0x200000c4

08003034 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_Pin);
 8003038:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800303c:	f001 fb2e 	bl	800469c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_Pin);
 8003040:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003044:	f001 fb2a 	bl	800469c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  // HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}

0800304c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003050:	4803      	ldr	r0, [pc, #12]	@ (8003060 <TIM4_IRQHandler+0x14>)
 8003052:	f003 f8cd 	bl	80061f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  timer50ms_flag = 1;
 8003056:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <TIM4_IRQHandler+0x18>)
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM4_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}
 8003060:	200002c4 	.word	0x200002c4
 8003064:	200004bd 	.word	0x200004bd

08003068 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800306c:	4803      	ldr	r0, [pc, #12]	@ (800307c <TIM6_DAC_IRQHandler+0x14>)
 800306e:	f003 f8bf 	bl	80061f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  better_step_function(); //s'active au 200us
 8003072:	f7ff fb7d 	bl	8002770 <better_step_function>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000354 	.word	0x20000354

08003080 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003084:	4803      	ldr	r0, [pc, #12]	@ (8003094 <TIM7_IRQHandler+0x14>)
 8003086:	f003 f8b3 	bl	80061f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  b_timer250ms_flag = 1;
 800308a:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <TIM7_IRQHandler+0x18>)
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 1 */
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2000039c 	.word	0x2000039c
 8003098:	2000042c 	.word	0x2000042c

0800309c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e00a      	b.n	80030c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030ae:	f3af 8000 	nop.w
 80030b2:	4601      	mov	r1, r0
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	60ba      	str	r2, [r7, #8]
 80030ba:	b2ca      	uxtb	r2, r1
 80030bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3301      	adds	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	dbf0      	blt.n	80030ae <_read+0x12>
	}

return len;
 80030cc:	687b      	ldr	r3, [r7, #4]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e009      	b.n	80030fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	60ba      	str	r2, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3301      	adds	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	dbf1      	blt.n	80030e8 <_write+0x12>
	}
	return len;
 8003104:	687b      	ldr	r3, [r7, #4]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_close>:

int _close(int file)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
	return -1;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003136:	605a      	str	r2, [r3, #4]
	return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_isatty>:

int _isatty(int file)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
	return 1;
 800314e:	2301      	movs	r3, #1
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
	return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003180:	4a14      	ldr	r2, [pc, #80]	@ (80031d4 <_sbrk+0x5c>)
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <_sbrk+0x60>)
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800318c:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <_sbrk+0x64>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <_sbrk+0x64>)
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <_sbrk+0x68>)
 8003198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800319a:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d207      	bcs.n	80031b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a8:	f004 fbf2 	bl	8007990 <__errno>
 80031ac:	4603      	mov	r3, r0
 80031ae:	220c      	movs	r2, #12
 80031b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	e009      	b.n	80031cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b8:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <_sbrk+0x64>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	4a05      	ldr	r2, [pc, #20]	@ (80031dc <_sbrk+0x64>)
 80031c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ca:	68fb      	ldr	r3, [r7, #12]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20020000 	.word	0x20020000
 80031d8:	00000400 	.word	0x00000400
 80031dc:	20000538 	.word	0x20000538
 80031e0:	20000690 	.word	0x20000690

080031e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <SystemInit+0x20>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ee:	4a05      	ldr	r2, [pc, #20]	@ (8003204 <SystemInit+0x20>)
 80031f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800320c:	480d      	ldr	r0, [pc, #52]	@ (8003244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800320e:	490e      	ldr	r1, [pc, #56]	@ (8003248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003210:	4a0e      	ldr	r2, [pc, #56]	@ (800324c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003214:	e002      	b.n	800321c <LoopCopyDataInit>

08003216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800321a:	3304      	adds	r3, #4

0800321c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800321c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003220:	d3f9      	bcc.n	8003216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003222:	4a0b      	ldr	r2, [pc, #44]	@ (8003250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003224:	4c0b      	ldr	r4, [pc, #44]	@ (8003254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003228:	e001      	b.n	800322e <LoopFillZerobss>

0800322a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800322a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800322c:	3204      	adds	r2, #4

0800322e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003230:	d3fb      	bcc.n	800322a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003232:	f7ff ffd7 	bl	80031e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003236:	f004 fbb1 	bl	800799c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323a:	f7fd ff59 	bl	80010f0 <main>
  bx  lr    
 800323e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003248:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800324c:	08008510 	.word	0x08008510
  ldr r2, =_sbss
 8003250:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003254:	2000068c 	.word	0x2000068c

08003258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003258:	e7fe      	b.n	8003258 <ADC_IRQHandler>
	...

0800325c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003260:	4b0e      	ldr	r3, [pc, #56]	@ (800329c <HAL_Init+0x40>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0d      	ldr	r2, [pc, #52]	@ (800329c <HAL_Init+0x40>)
 8003266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800326a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800326c:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_Init+0x40>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <HAL_Init+0x40>)
 8003272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003278:	4b08      	ldr	r3, [pc, #32]	@ (800329c <HAL_Init+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a07      	ldr	r2, [pc, #28]	@ (800329c <HAL_Init+0x40>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003284:	2003      	movs	r0, #3
 8003286:	f000 ffe7 	bl	8004258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800328a:	200f      	movs	r0, #15
 800328c:	f000 f808 	bl	80032a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003290:	f7ff fb78 	bl	8002984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023c00 	.word	0x40023c00

080032a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a8:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <HAL_InitTick+0x54>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <HAL_InitTick+0x58>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 ffff 	bl	80042c2 <HAL_SYSTICK_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e00e      	b.n	80032ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d80a      	bhi.n	80032ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d4:	2200      	movs	r2, #0
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	f000 ffc7 	bl	800426e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032e0:	4a06      	ldr	r2, [pc, #24]	@ (80032fc <HAL_InitTick+0x5c>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000040 	.word	0x20000040
 80032f8:	20000048 	.word	0x20000048
 80032fc:	20000044 	.word	0x20000044

08003300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003304:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <HAL_IncTick+0x20>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <HAL_IncTick+0x24>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4413      	add	r3, r2
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <HAL_IncTick+0x24>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000048 	.word	0x20000048
 8003324:	2000053c 	.word	0x2000053c

08003328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return uwTick;
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <HAL_GetTick+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	2000053c 	.word	0x2000053c

08003340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003348:	f7ff ffee 	bl	8003328 <HAL_GetTick>
 800334c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d005      	beq.n	8003366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335a:	4b0a      	ldr	r3, [pc, #40]	@ (8003384 <HAL_Delay+0x44>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003366:	bf00      	nop
 8003368:	f7ff ffde 	bl	8003328 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d8f7      	bhi.n	8003368 <HAL_Delay+0x28>
  {
  }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000048 	.word	0x20000048

08003388 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0ed      	b.n	8003576 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff fb36 	bl	8002a18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033bc:	f7ff ffb4 	bl	8003328 <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033c2:	e012      	b.n	80033ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033c4:	f7ff ffb0 	bl	8003328 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b0a      	cmp	r3, #10
 80033d0:	d90b      	bls.n	80033ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2205      	movs	r2, #5
 80033e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0c5      	b.n	8003576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0e5      	beq.n	80033c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0202 	bic.w	r2, r2, #2
 8003406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003408:	f7ff ff8e 	bl	8003328 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800340e:	e012      	b.n	8003436 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003410:	f7ff ff8a 	bl	8003328 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b0a      	cmp	r3, #10
 800341c:	d90b      	bls.n	8003436 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2205      	movs	r2, #5
 800342e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e09f      	b.n	8003576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e5      	bne.n	8003410 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7e1b      	ldrb	r3, [r3, #24]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d108      	bne.n	800345e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e007      	b.n	800346e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7e5b      	ldrb	r3, [r3, #25]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d108      	bne.n	8003488 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e007      	b.n	8003498 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7e9b      	ldrb	r3, [r3, #26]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d108      	bne.n	80034b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0220 	orr.w	r2, r2, #32
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e007      	b.n	80034c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0220 	bic.w	r2, r2, #32
 80034c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7edb      	ldrb	r3, [r3, #27]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d108      	bne.n	80034dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0210 	bic.w	r2, r2, #16
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e007      	b.n	80034ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0210 	orr.w	r2, r2, #16
 80034ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7f1b      	ldrb	r3, [r3, #28]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d108      	bne.n	8003506 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0208 	orr.w	r2, r2, #8
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e007      	b.n	8003516 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0208 	bic.w	r2, r2, #8
 8003514:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7f5b      	ldrb	r3, [r3, #29]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d108      	bne.n	8003530 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0204 	orr.w	r2, r2, #4
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e007      	b.n	8003540 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0204 	bic.w	r2, r2, #4
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	ea42 0103 	orr.w	r1, r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	1e5a      	subs	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003596:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d003      	beq.n	80035a6 <HAL_CAN_ConfigFilter+0x26>
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	f040 80be 	bne.w	8003722 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035a6:	4b65      	ldr	r3, [pc, #404]	@ (800373c <HAL_CAN_ConfigFilter+0x1bc>)
 80035a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035c0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	431a      	orrs	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2201      	movs	r2, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	401a      	ands	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d123      	bne.n	8003650 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	43db      	mvns	r3, r3
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800362a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3248      	adds	r2, #72	@ 0x48
 8003630:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003644:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003646:	6979      	ldr	r1, [r7, #20]
 8003648:	3348      	adds	r3, #72	@ 0x48
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d122      	bne.n	800369e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	431a      	orrs	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003678:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3248      	adds	r2, #72	@ 0x48
 800367e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003692:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003694:	6979      	ldr	r1, [r7, #20]
 8003696:	3348      	adds	r3, #72	@ 0x48
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	440b      	add	r3, r1
 800369c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	401a      	ands	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80036b8:	e007      	b.n	80036ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43db      	mvns	r3, r3
 80036dc:	401a      	ands	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80036e4:	e007      	b.n	80036f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d107      	bne.n	800370e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	431a      	orrs	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003714:	f023 0201 	bic.w	r2, r3, #1
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e006      	b.n	8003730 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	40006400 	.word	0x40006400

08003740 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d12e      	bne.n	80037b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800376c:	f7ff fddc 	bl	8003328 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003772:	e012      	b.n	800379a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003774:	f7ff fdd8 	bl	8003328 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b0a      	cmp	r3, #10
 8003780:	d90b      	bls.n	800379a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2205      	movs	r2, #5
 8003792:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e012      	b.n	80037c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e006      	b.n	80037c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b089      	sub	sp, #36	@ 0x24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037e6:	7ffb      	ldrb	r3, [r7, #31]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d003      	beq.n	80037f4 <HAL_CAN_AddTxMessage+0x2c>
 80037ec:	7ffb      	ldrb	r3, [r7, #31]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	f040 80b8 	bne.w	8003964 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80a0 	beq.w	8003954 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	0e1b      	lsrs	r3, r3, #24
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d907      	bls.n	8003834 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e09e      	b.n	8003972 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003834:	2201      	movs	r2, #1
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	409a      	lsls	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	6809      	ldr	r1, [r1, #0]
 8003854:	431a      	orrs	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	3318      	adds	r3, #24
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	440b      	add	r3, r1
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e00f      	b.n	8003882 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800386c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003876:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3318      	adds	r3, #24
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	440b      	add	r3, r1
 8003880:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	3318      	adds	r3, #24
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	440b      	add	r3, r1
 8003892:	3304      	adds	r3, #4
 8003894:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	7d1b      	ldrb	r3, [r3, #20]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d111      	bne.n	80038c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3318      	adds	r3, #24
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4413      	add	r3, r2
 80038aa:	3304      	adds	r3, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	6811      	ldr	r1, [r2, #0]
 80038b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	3318      	adds	r3, #24
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	440b      	add	r3, r1
 80038be:	3304      	adds	r3, #4
 80038c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3307      	adds	r3, #7
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	061a      	lsls	r2, r3, #24
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3306      	adds	r3, #6
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3305      	adds	r3, #5
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	4313      	orrs	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	3204      	adds	r2, #4
 80038e2:	7812      	ldrb	r2, [r2, #0]
 80038e4:	4610      	mov	r0, r2
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	6811      	ldr	r1, [r2, #0]
 80038ea:	ea43 0200 	orr.w	r2, r3, r0
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80038f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3303      	adds	r3, #3
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	061a      	lsls	r2, r3, #24
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3302      	adds	r3, #2
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3301      	adds	r3, #1
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	4313      	orrs	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	4610      	mov	r0, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	6811      	ldr	r1, [r2, #0]
 8003920:	ea43 0200 	orr.w	r2, r3, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	440b      	add	r3, r1
 800392a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800392e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	3318      	adds	r3, #24
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4413      	add	r3, r2
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	6811      	ldr	r1, [r2, #0]
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3318      	adds	r3, #24
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	440b      	add	r3, r1
 800394e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e00e      	b.n	8003972 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e006      	b.n	8003972 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
  }
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	@ 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003990:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003992:	7afb      	ldrb	r3, [r7, #11]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d002      	beq.n	800399e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003998:	7afb      	ldrb	r3, [r7, #11]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d11d      	bne.n	80039da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3301      	adds	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3301      	adds	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80039da:	68fb      	ldr	r3, [r7, #12]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d003      	beq.n	8003a0c <HAL_CAN_GetRxMessage+0x24>
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	f040 80f3 	bne.w	8003bf2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10e      	bne.n	8003a30 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d116      	bne.n	8003a4e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0e7      	b.n	8003c00 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e0d8      	b.n	8003c00 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	331b      	adds	r3, #27
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0204 	and.w	r2, r3, #4
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10c      	bne.n	8003a86 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	331b      	adds	r3, #27
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	4413      	add	r3, r2
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	0d5b      	lsrs	r3, r3, #21
 8003a7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e00b      	b.n	8003a9e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	331b      	adds	r3, #27
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	4413      	add	r3, r2
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	331b      	adds	r3, #27
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	4413      	add	r3, r2
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0202 	and.w	r2, r3, #2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	331b      	adds	r3, #27
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	4413      	add	r3, r2
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	331b      	adds	r3, #27
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3304      	adds	r3, #4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	331b      	adds	r3, #27
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	0a1a      	lsrs	r2, r3, #8
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0c1a      	lsrs	r2, r3, #16
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	3302      	adds	r3, #2
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	0e1a      	lsrs	r2, r3, #24
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	3303      	adds	r3, #3
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	3304      	adds	r3, #4
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	0a1a      	lsrs	r2, r3, #8
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	3305      	adds	r3, #5
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	0c1a      	lsrs	r2, r3, #16
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	3306      	adds	r3, #6
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0e1a      	lsrs	r2, r3, #24
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	3307      	adds	r3, #7
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d108      	bne.n	8003bde <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0220 	orr.w	r2, r2, #32
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	e007      	b.n	8003bee <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0220 	orr.w	r2, r2, #32
 8003bec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e006      	b.n	8003c00 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c20:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d002      	beq.n	8003c2e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d10f      	bne.n	8003c4e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e005      	b.n	8003c4e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c6c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d002      	beq.n	8003c7a <HAL_CAN_ActivateNotification+0x1e>
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d109      	bne.n	8003c8e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6959      	ldr	r1, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e006      	b.n	8003c9c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	@ 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d07c      	beq.n	8003de8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d023      	beq.n	8003d40 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f983 	bl	8004016 <HAL_CAN_TxMailbox0CompleteCallback>
 8003d10:	e016      	b.n	8003d40 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d24:	e00c      	b.n	8003d40 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d38:	e002      	b.n	8003d40 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f989 	bl	8004052 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d024      	beq.n	8003d94 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f963 	bl	800402a <HAL_CAN_TxMailbox1CompleteCallback>
 8003d64:	e016      	b.n	8003d94 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d78:	e00c      	b.n	8003d94 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8c:	e002      	b.n	8003d94 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f969 	bl	8004066 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d024      	beq.n	8003de8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003da6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f943 	bl	800403e <HAL_CAN_TxMailbox2CompleteCallback>
 8003db8:	e016      	b.n	8003de8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dcc:	e00c      	b.n	8003de8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de0:	e002      	b.n	8003de8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f949 	bl	800407a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d007      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2210      	movs	r2, #16
 8003e0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2208      	movs	r2, #8
 8003e26:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fd f8e3 	bl	8000ff4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd f8bc 	bl	8000fc4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2208      	movs	r2, #8
 8003e8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fd f8bb 	bl	8001008 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd f896 	bl	8000fdc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d006      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f8de 	bl	800408e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2208      	movs	r2, #8
 8003eec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f8d7 	bl	80040a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d07b      	beq.n	8003ff6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d072      	beq.n	8003fee <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	f043 0302 	orr.w	r3, r3, #2
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	f043 0304 	orr.w	r3, r3, #4
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d043      	beq.n	8003fee <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d03e      	beq.n	8003fee <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f76:	2b60      	cmp	r3, #96	@ 0x60
 8003f78:	d02b      	beq.n	8003fd2 <HAL_CAN_IRQHandler+0x32a>
 8003f7a:	2b60      	cmp	r3, #96	@ 0x60
 8003f7c:	d82e      	bhi.n	8003fdc <HAL_CAN_IRQHandler+0x334>
 8003f7e:	2b50      	cmp	r3, #80	@ 0x50
 8003f80:	d022      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x320>
 8003f82:	2b50      	cmp	r3, #80	@ 0x50
 8003f84:	d82a      	bhi.n	8003fdc <HAL_CAN_IRQHandler+0x334>
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	d019      	beq.n	8003fbe <HAL_CAN_IRQHandler+0x316>
 8003f8a:	2b40      	cmp	r3, #64	@ 0x40
 8003f8c:	d826      	bhi.n	8003fdc <HAL_CAN_IRQHandler+0x334>
 8003f8e:	2b30      	cmp	r3, #48	@ 0x30
 8003f90:	d010      	beq.n	8003fb4 <HAL_CAN_IRQHandler+0x30c>
 8003f92:	2b30      	cmp	r3, #48	@ 0x30
 8003f94:	d822      	bhi.n	8003fdc <HAL_CAN_IRQHandler+0x334>
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d002      	beq.n	8003fa0 <HAL_CAN_IRQHandler+0x2f8>
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d005      	beq.n	8003faa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f9e:	e01d      	b.n	8003fdc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	f043 0308 	orr.w	r3, r3, #8
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fa8:	e019      	b.n	8003fde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	f043 0310 	orr.w	r3, r3, #16
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fb2:	e014      	b.n	8003fde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	f043 0320 	orr.w	r3, r3, #32
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fbc:	e00f      	b.n	8003fde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fc6:	e00a      	b.n	8003fde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fd0:	e005      	b.n	8003fde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fda:	e000      	b.n	8003fde <HAL_CAN_IRQHandler+0x336>
            break;
 8003fdc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003fec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7fd f807 	bl	800101c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800400e:	bf00      	nop
 8004010:	3728      	adds	r7, #40	@ 0x28
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c8:	4b0c      	ldr	r3, [pc, #48]	@ (80040fc <__NVIC_SetPriorityGrouping+0x44>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040d4:	4013      	ands	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ea:	4a04      	ldr	r2, [pc, #16]	@ (80040fc <__NVIC_SetPriorityGrouping+0x44>)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	60d3      	str	r3, [r2, #12]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004104:	4b04      	ldr	r3, [pc, #16]	@ (8004118 <__NVIC_GetPriorityGrouping+0x18>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	0a1b      	lsrs	r3, r3, #8
 800410a:	f003 0307 	and.w	r3, r3, #7
}
 800410e:	4618      	mov	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	2b00      	cmp	r3, #0
 800412c:	db0b      	blt.n	8004146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	f003 021f 	and.w	r2, r3, #31
 8004134:	4907      	ldr	r1, [pc, #28]	@ (8004154 <__NVIC_EnableIRQ+0x38>)
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2001      	movs	r0, #1
 800413e:	fa00 f202 	lsl.w	r2, r0, r2
 8004142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	e000e100 	.word	0xe000e100

08004158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004168:	2b00      	cmp	r3, #0
 800416a:	db0a      	blt.n	8004182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	490c      	ldr	r1, [pc, #48]	@ (80041a4 <__NVIC_SetPriority+0x4c>)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	0112      	lsls	r2, r2, #4
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	440b      	add	r3, r1
 800417c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004180:	e00a      	b.n	8004198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	4908      	ldr	r1, [pc, #32]	@ (80041a8 <__NVIC_SetPriority+0x50>)
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	3b04      	subs	r3, #4
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	440b      	add	r3, r1
 8004196:	761a      	strb	r2, [r3, #24]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000e100 	.word	0xe000e100
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	@ 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f1c3 0307 	rsb	r3, r3, #7
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	bf28      	it	cs
 80041ca:	2304      	movcs	r3, #4
 80041cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3304      	adds	r3, #4
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d902      	bls.n	80041dc <NVIC_EncodePriority+0x30>
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3b03      	subs	r3, #3
 80041da:	e000      	b.n	80041de <NVIC_EncodePriority+0x32>
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	401a      	ands	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f4:	f04f 31ff 	mov.w	r1, #4294967295
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	43d9      	mvns	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	4313      	orrs	r3, r2
         );
}
 8004206:	4618      	mov	r0, r3
 8004208:	3724      	adds	r7, #36	@ 0x24
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004224:	d301      	bcc.n	800422a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004226:	2301      	movs	r3, #1
 8004228:	e00f      	b.n	800424a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800422a:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <SysTick_Config+0x40>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004232:	210f      	movs	r1, #15
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	f7ff ff8e 	bl	8004158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800423c:	4b05      	ldr	r3, [pc, #20]	@ (8004254 <SysTick_Config+0x40>)
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004242:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <SysTick_Config+0x40>)
 8004244:	2207      	movs	r2, #7
 8004246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	e000e010 	.word	0xe000e010

08004258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ff29 	bl	80040b8 <__NVIC_SetPriorityGrouping>
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800426e:	b580      	push	{r7, lr}
 8004270:	b086      	sub	sp, #24
 8004272:	af00      	add	r7, sp, #0
 8004274:	4603      	mov	r3, r0
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004280:	f7ff ff3e 	bl	8004100 <__NVIC_GetPriorityGrouping>
 8004284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	6978      	ldr	r0, [r7, #20]
 800428c:	f7ff ff8e 	bl	80041ac <NVIC_EncodePriority>
 8004290:	4602      	mov	r2, r0
 8004292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff5d 	bl	8004158 <__NVIC_SetPriority>
}
 800429e:	bf00      	nop
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	4603      	mov	r3, r0
 80042ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff31 	bl	800411c <__NVIC_EnableIRQ>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ffa2 	bl	8004214 <SysTick_Config>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042dc:	b480      	push	{r7}
 80042de:	b089      	sub	sp, #36	@ 0x24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e165      	b.n	80045c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042f8:	2201      	movs	r2, #1
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	429a      	cmp	r2, r3
 8004312:	f040 8154 	bne.w	80045be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d005      	beq.n	800432e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800432a:	2b02      	cmp	r3, #2
 800432c:	d130      	bne.n	8004390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	2203      	movs	r2, #3
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004364:	2201      	movs	r2, #1
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 0201 	and.w	r2, r3, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	2b03      	cmp	r3, #3
 800439a:	d017      	beq.n	80043cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	2203      	movs	r2, #3
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d123      	bne.n	8004420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	08da      	lsrs	r2, r3, #3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3208      	adds	r2, #8
 80043e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	220f      	movs	r2, #15
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	08da      	lsrs	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3208      	adds	r2, #8
 800441a:	69b9      	ldr	r1, [r7, #24]
 800441c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2203      	movs	r2, #3
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0203 	and.w	r2, r3, #3
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80ae 	beq.w	80045be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	4b5d      	ldr	r3, [pc, #372]	@ (80045dc <HAL_GPIO_Init+0x300>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	4a5c      	ldr	r2, [pc, #368]	@ (80045dc <HAL_GPIO_Init+0x300>)
 800446c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004470:	6453      	str	r3, [r2, #68]	@ 0x44
 8004472:	4b5a      	ldr	r3, [pc, #360]	@ (80045dc <HAL_GPIO_Init+0x300>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800447e:	4a58      	ldr	r2, [pc, #352]	@ (80045e0 <HAL_GPIO_Init+0x304>)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	3302      	adds	r3, #2
 8004486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	220f      	movs	r2, #15
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4013      	ands	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a4f      	ldr	r2, [pc, #316]	@ (80045e4 <HAL_GPIO_Init+0x308>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d025      	beq.n	80044f6 <HAL_GPIO_Init+0x21a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4e      	ldr	r2, [pc, #312]	@ (80045e8 <HAL_GPIO_Init+0x30c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <HAL_GPIO_Init+0x216>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4d      	ldr	r2, [pc, #308]	@ (80045ec <HAL_GPIO_Init+0x310>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d019      	beq.n	80044ee <HAL_GPIO_Init+0x212>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4c      	ldr	r2, [pc, #304]	@ (80045f0 <HAL_GPIO_Init+0x314>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x20e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4b      	ldr	r2, [pc, #300]	@ (80045f4 <HAL_GPIO_Init+0x318>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x20a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4a      	ldr	r2, [pc, #296]	@ (80045f8 <HAL_GPIO_Init+0x31c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x206>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a49      	ldr	r2, [pc, #292]	@ (80045fc <HAL_GPIO_Init+0x320>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x202>
 80044da:	2306      	movs	r3, #6
 80044dc:	e00c      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044de:	2307      	movs	r3, #7
 80044e0:	e00a      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044e2:	2305      	movs	r3, #5
 80044e4:	e008      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044e6:	2304      	movs	r3, #4
 80044e8:	e006      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e004      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e002      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044f6:	2300      	movs	r3, #0
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	f002 0203 	and.w	r2, r2, #3
 80044fe:	0092      	lsls	r2, r2, #2
 8004500:	4093      	lsls	r3, r2
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004508:	4935      	ldr	r1, [pc, #212]	@ (80045e0 <HAL_GPIO_Init+0x304>)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	3302      	adds	r3, #2
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004516:	4b3a      	ldr	r3, [pc, #232]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800453a:	4a31      	ldr	r2, [pc, #196]	@ (8004600 <HAL_GPIO_Init+0x324>)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004540:	4b2f      	ldr	r3, [pc, #188]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	43db      	mvns	r3, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004564:	4a26      	ldr	r2, [pc, #152]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800456a:	4b25      	ldr	r3, [pc, #148]	@ (8004600 <HAL_GPIO_Init+0x324>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800458e:	4a1c      	ldr	r2, [pc, #112]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004594:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045b8:	4a11      	ldr	r2, [pc, #68]	@ (8004600 <HAL_GPIO_Init+0x324>)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	f67f ae96 	bls.w	80042f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	3724      	adds	r7, #36	@ 0x24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40013800 	.word	0x40013800
 80045e4:	40020000 	.word	0x40020000
 80045e8:	40020400 	.word	0x40020400
 80045ec:	40020800 	.word	0x40020800
 80045f0:	40020c00 	.word	0x40020c00
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40021400 	.word	0x40021400
 80045fc:	40021800 	.word	0x40021800
 8004600:	40013c00 	.word	0x40013c00

08004604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e001      	b.n	8004626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004650:	e003      	b.n	800465a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	619a      	str	r2, [r3, #24]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004678:	887a      	ldrh	r2, [r7, #2]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4013      	ands	r3, r2
 800467e:	041a      	lsls	r2, r3, #16
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	43d9      	mvns	r1, r3
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	400b      	ands	r3, r1
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	619a      	str	r2, [r3, #24]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046a6:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046b2:	4a05      	ldr	r2, [pc, #20]	@ (80046c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fd fa60 	bl	8001b80 <HAL_GPIO_EXTI_Callback>
  }
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40013c00 	.word	0x40013c00

080046cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e12b      	b.n	8004936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fe f9e8 	bl	8002ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2224      	movs	r2, #36	@ 0x24
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800471e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800472e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004730:	f000 fa02 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8004734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	4a81      	ldr	r2, [pc, #516]	@ (8004940 <HAL_I2C_Init+0x274>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d807      	bhi.n	8004750 <HAL_I2C_Init+0x84>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a80      	ldr	r2, [pc, #512]	@ (8004944 <HAL_I2C_Init+0x278>)
 8004744:	4293      	cmp	r3, r2
 8004746:	bf94      	ite	ls
 8004748:	2301      	movls	r3, #1
 800474a:	2300      	movhi	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e006      	b.n	800475e <HAL_I2C_Init+0x92>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a7d      	ldr	r2, [pc, #500]	@ (8004948 <HAL_I2C_Init+0x27c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	bf94      	ite	ls
 8004758:	2301      	movls	r3, #1
 800475a:	2300      	movhi	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0e7      	b.n	8004936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a78      	ldr	r2, [pc, #480]	@ (800494c <HAL_I2C_Init+0x280>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	0c9b      	lsrs	r3, r3, #18
 8004770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a6a      	ldr	r2, [pc, #424]	@ (8004940 <HAL_I2C_Init+0x274>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d802      	bhi.n	80047a0 <HAL_I2C_Init+0xd4>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3301      	adds	r3, #1
 800479e:	e009      	b.n	80047b4 <HAL_I2C_Init+0xe8>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	4a69      	ldr	r2, [pc, #420]	@ (8004950 <HAL_I2C_Init+0x284>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	099b      	lsrs	r3, r3, #6
 80047b2:	3301      	adds	r3, #1
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	495c      	ldr	r1, [pc, #368]	@ (8004940 <HAL_I2C_Init+0x274>)
 80047d0:	428b      	cmp	r3, r1
 80047d2:	d819      	bhi.n	8004808 <HAL_I2C_Init+0x13c>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1e59      	subs	r1, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	fbb1 f3f3 	udiv	r3, r1, r3
 80047e2:	1c59      	adds	r1, r3, #1
 80047e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047e8:	400b      	ands	r3, r1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_I2C_Init+0x138>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1e59      	subs	r1, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004802:	e051      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004804:	2304      	movs	r3, #4
 8004806:	e04f      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d111      	bne.n	8004834 <HAL_I2C_Init+0x168>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1e58      	subs	r0, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	440b      	add	r3, r1
 800481e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e012      	b.n	800485a <HAL_I2C_Init+0x18e>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1e58      	subs	r0, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	0099      	lsls	r1, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	fbb0 f3f3 	udiv	r3, r0, r3
 800484a:	3301      	adds	r3, #1
 800484c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_Init+0x196>
 800485e:	2301      	movs	r3, #1
 8004860:	e022      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10e      	bne.n	8004888 <HAL_I2C_Init+0x1bc>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1e58      	subs	r0, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	440b      	add	r3, r1
 8004878:	fbb0 f3f3 	udiv	r3, r0, r3
 800487c:	3301      	adds	r3, #1
 800487e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004886:	e00f      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e58      	subs	r0, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	0099      	lsls	r1, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	fbb0 f3f3 	udiv	r3, r0, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	6809      	ldr	r1, [r1, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6911      	ldr	r1, [r2, #16]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68d2      	ldr	r2, [r2, #12]
 80048e2:	4311      	orrs	r1, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	000186a0 	.word	0x000186a0
 8004944:	001e847f 	.word	0x001e847f
 8004948:	003d08ff 	.word	0x003d08ff
 800494c:	431bde83 	.word	0x431bde83
 8004950:	10624dd3 	.word	0x10624dd3

08004954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0cc      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b68      	ldr	r3, [pc, #416]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d90c      	bls.n	8004990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b65      	ldr	r3, [pc, #404]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b63      	ldr	r3, [pc, #396]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0b8      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a8:	4b59      	ldr	r3, [pc, #356]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a58      	ldr	r2, [pc, #352]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c0:	4b53      	ldr	r3, [pc, #332]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a52      	ldr	r2, [pc, #328]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b50      	ldr	r3, [pc, #320]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	494d      	ldr	r1, [pc, #308]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d044      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d119      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e07f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d003      	beq.n	8004a12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a12:	4b3f      	ldr	r3, [pc, #252]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e06f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a22:	4b3b      	ldr	r3, [pc, #236]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e067      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a32:	4b37      	ldr	r3, [pc, #220]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f023 0203 	bic.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4934      	ldr	r1, [pc, #208]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a44:	f7fe fc70 	bl	8003328 <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4c:	f7fe fc6c 	bl	8003328 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e04f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	4b2b      	ldr	r3, [pc, #172]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 020c 	and.w	r2, r3, #12
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d1eb      	bne.n	8004a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a74:	4b25      	ldr	r3, [pc, #148]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d20c      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b22      	ldr	r3, [pc, #136]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e032      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4916      	ldr	r1, [pc, #88]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac6:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	490e      	ldr	r1, [pc, #56]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ada:	f000 f855 	bl	8004b88 <HAL_RCC_GetSysClockFreq>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	490a      	ldr	r1, [pc, #40]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	5ccb      	ldrb	r3, [r1, r3]
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004af6:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe fbd0 	bl	80032a0 <HAL_InitTick>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023c00 	.word	0x40023c00
 8004b10:	40023800 	.word	0x40023800
 8004b14:	080084b4 	.word	0x080084b4
 8004b18:	20000040 	.word	0x20000040
 8004b1c:	20000044 	.word	0x20000044

08004b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000040 	.word	0x20000040

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0a9b      	lsrs	r3, r3, #10
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4903      	ldr	r1, [pc, #12]	@ (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	080084c4 	.word	0x080084c4

08004b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b64:	f7ff ffdc 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0b5b      	lsrs	r3, r3, #13
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	@ (8004b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	080084c4 	.word	0x080084c4

08004b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b8c:	b0a6      	sub	sp, #152	@ 0x98
 8004b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bae:	4bc8      	ldr	r3, [pc, #800]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	f200 817e 	bhi.w	8004eb8 <HAL_RCC_GetSysClockFreq+0x330>
 8004bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004eb9 	.word	0x08004eb9
 8004bcc:	08004eb9 	.word	0x08004eb9
 8004bd0:	08004eb9 	.word	0x08004eb9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004eb9 	.word	0x08004eb9
 8004bdc:	08004eb9 	.word	0x08004eb9
 8004be0:	08004eb9 	.word	0x08004eb9
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004eb9 	.word	0x08004eb9
 8004bec:	08004eb9 	.word	0x08004eb9
 8004bf0:	08004eb9 	.word	0x08004eb9
 8004bf4:	08004d73 	.word	0x08004d73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf8:	4bb6      	ldr	r3, [pc, #728]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004bfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8004bfe:	e15f      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c00:	4bb5      	ldr	r3, [pc, #724]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004c06:	e15b      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c08:	4bb1      	ldr	r3, [pc, #708]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c14:	4bae      	ldr	r3, [pc, #696]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d031      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c20:	4bab      	ldr	r3, [pc, #684]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	099b      	lsrs	r3, r3, #6
 8004c26:	2200      	movs	r2, #0
 8004c28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c34:	2300      	movs	r3, #0
 8004c36:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c38:	4ba7      	ldr	r3, [pc, #668]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c3a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004c3e:	462a      	mov	r2, r5
 8004c40:	fb03 f202 	mul.w	r2, r3, r2
 8004c44:	2300      	movs	r3, #0
 8004c46:	4621      	mov	r1, r4
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	4aa2      	ldr	r2, [pc, #648]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c50:	4621      	mov	r1, r4
 8004c52:	fba1 1202 	umull	r1, r2, r1, r2
 8004c56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c58:	460a      	mov	r2, r1
 8004c5a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004c5c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004c5e:	4413      	add	r3, r2
 8004c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c66:	2200      	movs	r2, #0
 8004c68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004c6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c70:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004c74:	f7fb fb1c 	bl	80002b0 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c82:	e064      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c84:	4b92      	ldr	r3, [pc, #584]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c8e:	657a      	str	r2, [r7, #84]	@ 0x54
 8004c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c98:	2300      	movs	r3, #0
 8004c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c9c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004ca0:	4622      	mov	r2, r4
 8004ca2:	462b      	mov	r3, r5
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	0159      	lsls	r1, r3, #5
 8004cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb2:	0150      	lsls	r0, r2, #5
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4621      	mov	r1, r4
 8004cba:	1a51      	subs	r1, r2, r1
 8004cbc:	6139      	str	r1, [r7, #16]
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cd2:	4659      	mov	r1, fp
 8004cd4:	018b      	lsls	r3, r1, #6
 8004cd6:	4651      	mov	r1, sl
 8004cd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cdc:	4651      	mov	r1, sl
 8004cde:	018a      	lsls	r2, r1, #6
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	ebb2 0801 	subs.w	r8, r2, r1
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	eb63 0901 	sbc.w	r9, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cf8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d00:	4690      	mov	r8, r2
 8004d02:	4699      	mov	r9, r3
 8004d04:	4623      	mov	r3, r4
 8004d06:	eb18 0303 	adds.w	r3, r8, r3
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	eb49 0303 	adc.w	r3, r9, r3
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d20:	4629      	mov	r1, r5
 8004d22:	028b      	lsls	r3, r1, #10
 8004d24:	4621      	mov	r1, r4
 8004d26:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	028a      	lsls	r2, r1, #10
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d36:	2200      	movs	r2, #0
 8004d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d40:	f7fb fab6 	bl	80002b0 <__aeabi_uldivmod>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4613      	mov	r3, r2
 8004d4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d4e:	4b60      	ldr	r3, [pc, #384]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	0c1b      	lsrs	r3, r3, #16
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	3301      	adds	r3, #1
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8004d60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d70:	e0a6      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d72:	4b57      	ldr	r3, [pc, #348]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d7e:	4b54      	ldr	r3, [pc, #336]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d02a      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8a:	4b51      	ldr	r3, [pc, #324]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	2200      	movs	r2, #0
 8004d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004da0:	fb03 f201 	mul.w	r2, r3, r1
 8004da4:	2300      	movs	r3, #0
 8004da6:	fb00 f303 	mul.w	r3, r0, r3
 8004daa:	4413      	add	r3, r2
 8004dac:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004dae:	fba0 1202 	umull	r1, r2, r0, r2
 8004db2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004db4:	460a      	mov	r2, r1
 8004db6:	673a      	str	r2, [r7, #112]	@ 0x70
 8004db8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004dba:	4413      	add	r3, r2
 8004dbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8004dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dc6:	637a      	str	r2, [r7, #52]	@ 0x34
 8004dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004dcc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004dd0:	f7fb fa6e 	bl	80002b0 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4613      	mov	r3, r2
 8004dda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dde:	e05b      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	099b      	lsrs	r3, r3, #6
 8004de6:	2200      	movs	r2, #0
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	2300      	movs	r3, #0
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	f04f 0000 	mov.w	r0, #0
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	0159      	lsls	r1, r3, #5
 8004e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0e:	0150      	lsls	r0, r2, #5
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4641      	mov	r1, r8
 8004e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e34:	ebb2 040a 	subs.w	r4, r2, sl
 8004e38:	eb63 050b 	sbc.w	r5, r3, fp
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	00eb      	lsls	r3, r5, #3
 8004e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e4a:	00e2      	lsls	r2, r4, #3
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	461d      	mov	r5, r3
 8004e50:	4643      	mov	r3, r8
 8004e52:	18e3      	adds	r3, r4, r3
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	464b      	mov	r3, r9
 8004e58:	eb45 0303 	adc.w	r3, r5, r3
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	028b      	lsls	r3, r1, #10
 8004e6e:	4621      	mov	r1, r4
 8004e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e74:	4621      	mov	r1, r4
 8004e76:	028a      	lsls	r2, r1, #10
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e80:	2200      	movs	r2, #0
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	61fa      	str	r2, [r7, #28]
 8004e86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e8a:	f7fb fa11 	bl	80002b0 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4613      	mov	r3, r2
 8004e94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e98:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	0f1b      	lsrs	r3, r3, #28
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8004ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004eb6:	e003      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004ebe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3798      	adds	r7, #152	@ 0x98
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	00f42400 	.word	0x00f42400
 8004ed8:	017d7840 	.word	0x017d7840

08004edc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e28d      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8083 	beq.w	8005002 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004efc:	4b94      	ldr	r3, [pc, #592]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d019      	beq.n	8004f3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f08:	4b91      	ldr	r3, [pc, #580]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d106      	bne.n	8004f22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f14:	4b8e      	ldr	r3, [pc, #568]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f20:	d00c      	beq.n	8004f3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f22:	4b8b      	ldr	r3, [pc, #556]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d112      	bne.n	8004f54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f2e:	4b88      	ldr	r3, [pc, #544]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f3a:	d10b      	bne.n	8004f54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f3c:	4b84      	ldr	r3, [pc, #528]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d05b      	beq.n	8005000 <HAL_RCC_OscConfig+0x124>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d157      	bne.n	8005000 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e25a      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5c:	d106      	bne.n	8004f6c <HAL_RCC_OscConfig+0x90>
 8004f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7b      	ldr	r2, [pc, #492]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	e01d      	b.n	8004fa8 <HAL_RCC_OscConfig+0xcc>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCC_OscConfig+0xb4>
 8004f76:	4b76      	ldr	r3, [pc, #472]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a75      	ldr	r2, [pc, #468]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	4b73      	ldr	r3, [pc, #460]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a72      	ldr	r2, [pc, #456]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e00b      	b.n	8004fa8 <HAL_RCC_OscConfig+0xcc>
 8004f90:	4b6f      	ldr	r3, [pc, #444]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a6e      	ldr	r2, [pc, #440]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	4b6c      	ldr	r3, [pc, #432]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d013      	beq.n	8004fd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fe f9ba 	bl	8003328 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb8:	f7fe f9b6 	bl	8003328 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	@ 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e21f      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fca:	4b61      	ldr	r3, [pc, #388]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0xdc>
 8004fd6:	e014      	b.n	8005002 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fe f9a6 	bl	8003328 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fe f9a2 	bl	8003328 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	@ 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e20b      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff2:	4b57      	ldr	r3, [pc, #348]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x104>
 8004ffe:	e000      	b.n	8005002 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d06f      	beq.n	80050ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800500e:	4b50      	ldr	r3, [pc, #320]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b00      	cmp	r3, #0
 8005018:	d017      	beq.n	800504a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800501a:	4b4d      	ldr	r3, [pc, #308]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005022:	2b08      	cmp	r3, #8
 8005024:	d105      	bne.n	8005032 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005026:	4b4a      	ldr	r3, [pc, #296]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005032:	4b47      	ldr	r3, [pc, #284]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d11c      	bne.n	8005078 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503e:	4b44      	ldr	r3, [pc, #272]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d116      	bne.n	8005078 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504a:	4b41      	ldr	r3, [pc, #260]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_RCC_OscConfig+0x186>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d001      	beq.n	8005062 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e1d3      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b3b      	ldr	r3, [pc, #236]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4937      	ldr	r1, [pc, #220]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005076:	e03a      	b.n	80050ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005080:	4b34      	ldr	r3, [pc, #208]	@ (8005154 <HAL_RCC_OscConfig+0x278>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fe f94f 	bl	8003328 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800508e:	f7fe f94b 	bl	8003328 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e1b4      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ac:	4b28      	ldr	r3, [pc, #160]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4925      	ldr	r1, [pc, #148]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	600b      	str	r3, [r1, #0]
 80050c0:	e015      	b.n	80050ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c2:	4b24      	ldr	r3, [pc, #144]	@ (8005154 <HAL_RCC_OscConfig+0x278>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fe f92e 	bl	8003328 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d0:	f7fe f92a 	bl	8003328 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e193      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d036      	beq.n	8005168 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005102:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fe f90e 	bl	8003328 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005110:	f7fe f90a 	bl	8003328 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e173      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005122:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <HAL_RCC_OscConfig+0x274>)
 8005124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x234>
 800512e:	e01b      	b.n	8005168 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005130:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fe f8f7 	bl	8003328 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800513c:	e00e      	b.n	800515c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800513e:	f7fe f8f3 	bl	8003328 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d907      	bls.n	800515c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e15c      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
 8005150:	40023800 	.word	0x40023800
 8005154:	42470000 	.word	0x42470000
 8005158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800515c:	4b8a      	ldr	r3, [pc, #552]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800515e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ea      	bne.n	800513e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8097 	beq.w	80052a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517a:	4b83      	ldr	r3, [pc, #524]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	4b7f      	ldr	r3, [pc, #508]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	4a7e      	ldr	r2, [pc, #504]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005194:	6413      	str	r3, [r2, #64]	@ 0x40
 8005196:	4b7c      	ldr	r3, [pc, #496]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a6:	4b79      	ldr	r3, [pc, #484]	@ (800538c <HAL_RCC_OscConfig+0x4b0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d118      	bne.n	80051e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b2:	4b76      	ldr	r3, [pc, #472]	@ (800538c <HAL_RCC_OscConfig+0x4b0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a75      	ldr	r2, [pc, #468]	@ (800538c <HAL_RCC_OscConfig+0x4b0>)
 80051b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051be:	f7fe f8b3 	bl	8003328 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c6:	f7fe f8af 	bl	8003328 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e118      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d8:	4b6c      	ldr	r3, [pc, #432]	@ (800538c <HAL_RCC_OscConfig+0x4b0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0f0      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x31e>
 80051ec:	4b66      	ldr	r3, [pc, #408]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	4a65      	ldr	r2, [pc, #404]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f8:	e01c      	b.n	8005234 <HAL_RCC_OscConfig+0x358>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x340>
 8005202:	4b61      	ldr	r3, [pc, #388]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	4a60      	ldr	r2, [pc, #384]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	6713      	str	r3, [r2, #112]	@ 0x70
 800520e:	4b5e      	ldr	r3, [pc, #376]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	4a5d      	ldr	r2, [pc, #372]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	@ 0x70
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0x358>
 800521c:	4b5a      	ldr	r3, [pc, #360]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005220:	4a59      	ldr	r2, [pc, #356]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	@ 0x70
 8005228:	4b57      	ldr	r3, [pc, #348]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	4a56      	ldr	r2, [pc, #344]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800522e:	f023 0304 	bic.w	r3, r3, #4
 8005232:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fe f874 	bl	8003328 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005242:	e00a      	b.n	800525a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005244:	f7fe f870 	bl	8003328 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e0d7      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525a:	4b4b      	ldr	r3, [pc, #300]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ee      	beq.n	8005244 <HAL_RCC_OscConfig+0x368>
 8005266:	e014      	b.n	8005292 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fe f85e 	bl	8003328 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fe f85a 	bl	8003328 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e0c1      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005286:	4b40      	ldr	r3, [pc, #256]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1ee      	bne.n	8005270 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005298:	4b3b      	ldr	r3, [pc, #236]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	4a3a      	ldr	r2, [pc, #232]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800529e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80ad 	beq.w	8005408 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ae:	4b36      	ldr	r3, [pc, #216]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d060      	beq.n	800537c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d145      	bne.n	800534e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c2:	4b33      	ldr	r3, [pc, #204]	@ (8005390 <HAL_RCC_OscConfig+0x4b4>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fe f82e 	bl	8003328 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fe f82a 	bl	8003328 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e093      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e2:	4b29      	ldr	r3, [pc, #164]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	019b      	lsls	r3, r3, #6
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	3b01      	subs	r3, #1
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	061b      	lsls	r3, r3, #24
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005318:	071b      	lsls	r3, r3, #28
 800531a:	491b      	ldr	r1, [pc, #108]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 800531c:	4313      	orrs	r3, r2
 800531e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005320:	4b1b      	ldr	r3, [pc, #108]	@ (8005390 <HAL_RCC_OscConfig+0x4b4>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fd ffff 	bl	8003328 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532e:	f7fd fffb 	bl	8003328 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e064      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005340:	4b11      	ldr	r3, [pc, #68]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x452>
 800534c:	e05c      	b.n	8005408 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534e:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <HAL_RCC_OscConfig+0x4b4>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fd ffe8 	bl	8003328 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535c:	f7fd ffe4 	bl	8003328 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e04d      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536e:	4b06      	ldr	r3, [pc, #24]	@ (8005388 <HAL_RCC_OscConfig+0x4ac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x480>
 800537a:	e045      	b.n	8005408 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d107      	bne.n	8005394 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e040      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
 8005388:	40023800 	.word	0x40023800
 800538c:	40007000 	.word	0x40007000
 8005390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005394:	4b1f      	ldr	r3, [pc, #124]	@ (8005414 <HAL_RCC_OscConfig+0x538>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d030      	beq.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d129      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d122      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d119      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	3b01      	subs	r3, #1
 80053de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d10f      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800

08005418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e07b      	b.n	8005522 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d108      	bne.n	8005444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800543a:	d009      	beq.n	8005450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	61da      	str	r2, [r3, #28]
 8005442:	e005      	b.n	8005450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fd fbcc 	bl	8002c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d4:	ea42 0103 	orr.w	r1, r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	f003 0104 	and.w	r1, r3, #4
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	f003 0210 	and.w	r2, r3, #16
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b088      	sub	sp, #32
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_SPI_Transmit+0x22>
 8005548:	2302      	movs	r3, #2
 800554a:	e126      	b.n	800579a <HAL_SPI_Transmit+0x270>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005554:	f7fd fee8 	bl	8003328 <HAL_GetTick>
 8005558:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d002      	beq.n	8005570 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800556a:	2302      	movs	r3, #2
 800556c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800556e:	e10b      	b.n	8005788 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_SPI_Transmit+0x52>
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005580:	e102      	b.n	8005788 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2203      	movs	r2, #3
 8005586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c8:	d10f      	bne.n	80055ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f4:	2b40      	cmp	r3, #64	@ 0x40
 80055f6:	d007      	beq.n	8005608 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005610:	d14b      	bne.n	80056aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_SPI_Transmit+0xf6>
 800561a:	8afb      	ldrh	r3, [r7, #22]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d13e      	bne.n	800569e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	881a      	ldrh	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005630:	1c9a      	adds	r2, r3, #2
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005644:	e02b      	b.n	800569e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b02      	cmp	r3, #2
 8005652:	d112      	bne.n	800567a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	881a      	ldrh	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005678:	e011      	b.n	800569e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800567a:	f7fd fe55 	bl	8003328 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d803      	bhi.n	8005692 <HAL_SPI_Transmit+0x168>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d102      	bne.n	8005698 <HAL_SPI_Transmit+0x16e>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d102      	bne.n	800569e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800569c:	e074      	b.n	8005788 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1ce      	bne.n	8005646 <HAL_SPI_Transmit+0x11c>
 80056a8:	e04c      	b.n	8005744 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_SPI_Transmit+0x18e>
 80056b2:	8afb      	ldrh	r3, [r7, #22]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d140      	bne.n	800573a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	7812      	ldrb	r2, [r2, #0]
 80056c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056de:	e02c      	b.n	800573a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d113      	bne.n	8005716 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	7812      	ldrb	r2, [r2, #0]
 80056fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005714:	e011      	b.n	800573a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005716:	f7fd fe07 	bl	8003328 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d803      	bhi.n	800572e <HAL_SPI_Transmit+0x204>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d102      	bne.n	8005734 <HAL_SPI_Transmit+0x20a>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005738:	e026      	b.n	8005788 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1cd      	bne.n	80056e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fa55 	bl	8005bf8 <SPI_EndRxTxTransaction>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e000      	b.n	8005788 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005786:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005798:	7ffb      	ldrb	r3, [r7, #31]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b08c      	sub	sp, #48	@ 0x30
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057b0:	2301      	movs	r3, #1
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x26>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e18a      	b.n	8005ade <HAL_SPI_TransmitReceive+0x33c>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057d0:	f7fd fdaa 	bl	8003328 <HAL_GetTick>
 80057d4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057e6:	887b      	ldrh	r3, [r7, #2]
 80057e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d00f      	beq.n	8005812 <HAL_SPI_TransmitReceive+0x70>
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057f8:	d107      	bne.n	800580a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <HAL_SPI_TransmitReceive+0x68>
 8005802:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005806:	2b04      	cmp	r3, #4
 8005808:	d003      	beq.n	8005812 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800580a:	2302      	movs	r3, #2
 800580c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005810:	e15b      	b.n	8005aca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_SPI_TransmitReceive+0x82>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_SPI_TransmitReceive+0x82>
 800581e:	887b      	ldrh	r3, [r7, #2]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800582a:	e14e      	b.n	8005aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b04      	cmp	r3, #4
 8005836:	d003      	beq.n	8005840 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2205      	movs	r2, #5
 800583c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	887a      	ldrh	r2, [r7, #2]
 8005856:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	887a      	ldrh	r2, [r7, #2]
 8005862:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	887a      	ldrh	r2, [r7, #2]
 8005868:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005880:	2b40      	cmp	r3, #64	@ 0x40
 8005882:	d007      	beq.n	8005894 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800589c:	d178      	bne.n	8005990 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x10a>
 80058a6:	8b7b      	ldrh	r3, [r7, #26]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d166      	bne.n	800597a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	881a      	ldrh	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d0:	e053      	b.n	800597a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d11b      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x176>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x176>
 80058ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d113      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f4:	881a      	ldrh	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d119      	bne.n	800595a <HAL_SPI_TransmitReceive+0x1b8>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d014      	beq.n	800595a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593a:	b292      	uxth	r2, r2
 800593c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005942:	1c9a      	adds	r2, r3, #2
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005956:	2301      	movs	r3, #1
 8005958:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800595a:	f7fd fce5 	bl	8003328 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005966:	429a      	cmp	r2, r3
 8005968:	d807      	bhi.n	800597a <HAL_SPI_TransmitReceive+0x1d8>
 800596a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d003      	beq.n	800597a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005978:	e0a7      	b.n	8005aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1a6      	bne.n	80058d2 <HAL_SPI_TransmitReceive+0x130>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1a1      	bne.n	80058d2 <HAL_SPI_TransmitReceive+0x130>
 800598e:	e07c      	b.n	8005a8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_SPI_TransmitReceive+0x1fc>
 8005998:	8b7b      	ldrh	r3, [r7, #26]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d16b      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c4:	e057      	b.n	8005a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d11c      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x26c>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d017      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x26c>
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d114      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	7812      	ldrb	r2, [r2, #0]
 80059f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d119      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x2ae>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d014      	beq.n	8005a50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a50:	f7fd fc6a 	bl	8003328 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d803      	bhi.n	8005a68 <HAL_SPI_TransmitReceive+0x2c6>
 8005a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a66:	d102      	bne.n	8005a6e <HAL_SPI_TransmitReceive+0x2cc>
 8005a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005a74:	e029      	b.n	8005aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1a2      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x224>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d19d      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f8b2 	bl	8005bf8 <SPI_EndRxTxTransaction>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005aa6:	e010      	b.n	8005aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	e000      	b.n	8005aca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ac8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005ada:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3730      	adds	r7, #48	@ 0x30
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005af8:	f7fd fc16 	bl	8003328 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	4413      	add	r3, r2
 8005b06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b08:	f7fd fc0e 	bl	8003328 <HAL_GetTick>
 8005b0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b0e:	4b39      	ldr	r3, [pc, #228]	@ (8005bf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	015b      	lsls	r3, r3, #5
 8005b14:	0d1b      	lsrs	r3, r3, #20
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	fb02 f303 	mul.w	r3, r2, r3
 8005b1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b1e:	e054      	b.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b26:	d050      	beq.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b28:	f7fd fbfe 	bl	8003328 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d902      	bls.n	8005b3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d13d      	bne.n	8005bba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b56:	d111      	bne.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b60:	d004      	beq.n	8005b6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b6a:	d107      	bne.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b84:	d10f      	bne.n	8005ba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e017      	b.n	8005bea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	bf0c      	ite	eq
 8005bda:	2301      	moveq	r3, #1
 8005bdc:	2300      	movne	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d19b      	bne.n	8005b20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000040 	.word	0x20000040

08005bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c04:	4b1b      	ldr	r3, [pc, #108]	@ (8005c74 <SPI_EndRxTxTransaction+0x7c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1b      	ldr	r2, [pc, #108]	@ (8005c78 <SPI_EndRxTxTransaction+0x80>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	0d5b      	lsrs	r3, r3, #21
 8005c10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c14:	fb02 f303 	mul.w	r3, r2, r3
 8005c18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c22:	d112      	bne.n	8005c4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2180      	movs	r1, #128	@ 0x80
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff ff5a 	bl	8005ae8 <SPI_WaitFlagStateUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3e:	f043 0220 	orr.w	r2, r3, #32
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e00f      	b.n	8005c6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c60:	2b80      	cmp	r3, #128	@ 0x80
 8005c62:	d0f2      	beq.n	8005c4a <SPI_EndRxTxTransaction+0x52>
 8005c64:	e000      	b.n	8005c68 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c66:	bf00      	nop
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000040 	.word	0x20000040
 8005c78:	165e9f81 	.word	0x165e9f81

08005c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e041      	b.n	8005d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fc fff8 	bl	8002c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f000 fd5c 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d001      	beq.n	8005d34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e046      	b.n	8005dc2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a23      	ldr	r2, [pc, #140]	@ (8005dd0 <HAL_TIM_Base_Start+0xb4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d022      	beq.n	8005d8c <HAL_TIM_Base_Start+0x70>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4e:	d01d      	beq.n	8005d8c <HAL_TIM_Base_Start+0x70>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd4 <HAL_TIM_Base_Start+0xb8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_TIM_Base_Start+0x70>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd8 <HAL_TIM_Base_Start+0xbc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <HAL_TIM_Base_Start+0x70>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <HAL_TIM_Base_Start+0xc0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_TIM_Base_Start+0x70>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1b      	ldr	r2, [pc, #108]	@ (8005de0 <HAL_TIM_Base_Start+0xc4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_TIM_Base_Start+0x70>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a19      	ldr	r2, [pc, #100]	@ (8005de4 <HAL_TIM_Base_Start+0xc8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_TIM_Base_Start+0x70>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a18      	ldr	r2, [pc, #96]	@ (8005de8 <HAL_TIM_Base_Start+0xcc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d111      	bne.n	8005db0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b06      	cmp	r3, #6
 8005d9c:	d010      	beq.n	8005dc0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	e007      	b.n	8005dc0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40001800 	.word	0x40001800

08005dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d001      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e04e      	b.n	8005ea2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a23      	ldr	r2, [pc, #140]	@ (8005eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d022      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2e:	d01d      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d018      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1c      	ldr	r2, [pc, #112]	@ (8005ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00e      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d009      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x80>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a18      	ldr	r2, [pc, #96]	@ (8005ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d111      	bne.n	8005e90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b06      	cmp	r3, #6
 8005e7c:	d010      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8e:	e007      	b.n	8005ea0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40000c00 	.word	0x40000c00
 8005ec0:	40010400 	.word	0x40010400
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40001800 	.word	0x40001800

08005ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e041      	b.n	8005f62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f839 	bl	8005f6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f000 fc34 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <HAL_TIM_PWM_Start+0x24>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	bf14      	ite	ne
 8005f9c:	2301      	movne	r3, #1
 8005f9e:	2300      	moveq	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	e022      	b.n	8005fea <HAL_TIM_PWM_Start+0x6a>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d109      	bne.n	8005fbe <HAL_TIM_PWM_Start+0x3e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	bf14      	ite	ne
 8005fb6:	2301      	movne	r3, #1
 8005fb8:	2300      	moveq	r3, #0
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	e015      	b.n	8005fea <HAL_TIM_PWM_Start+0x6a>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d109      	bne.n	8005fd8 <HAL_TIM_PWM_Start+0x58>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	e008      	b.n	8005fea <HAL_TIM_PWM_Start+0x6a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e07c      	b.n	80060ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <HAL_TIM_PWM_Start+0x82>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006000:	e013      	b.n	800602a <HAL_TIM_PWM_Start+0xaa>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b04      	cmp	r3, #4
 8006006:	d104      	bne.n	8006012 <HAL_TIM_PWM_Start+0x92>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006010:	e00b      	b.n	800602a <HAL_TIM_PWM_Start+0xaa>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b08      	cmp	r3, #8
 8006016:	d104      	bne.n	8006022 <HAL_TIM_PWM_Start+0xa2>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006020:	e003      	b.n	800602a <HAL_TIM_PWM_Start+0xaa>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2201      	movs	r2, #1
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fe8a 	bl	8006d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2d      	ldr	r2, [pc, #180]	@ (80060f4 <HAL_TIM_PWM_Start+0x174>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_TIM_PWM_Start+0xcc>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a2c      	ldr	r2, [pc, #176]	@ (80060f8 <HAL_TIM_PWM_Start+0x178>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d101      	bne.n	8006050 <HAL_TIM_PWM_Start+0xd0>
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <HAL_TIM_PWM_Start+0xd2>
 8006050:	2300      	movs	r3, #0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d007      	beq.n	8006066 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006064:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a22      	ldr	r2, [pc, #136]	@ (80060f4 <HAL_TIM_PWM_Start+0x174>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d022      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x136>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006078:	d01d      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x136>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1f      	ldr	r2, [pc, #124]	@ (80060fc <HAL_TIM_PWM_Start+0x17c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d018      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x136>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1d      	ldr	r2, [pc, #116]	@ (8006100 <HAL_TIM_PWM_Start+0x180>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x136>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1c      	ldr	r2, [pc, #112]	@ (8006104 <HAL_TIM_PWM_Start+0x184>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00e      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x136>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a16      	ldr	r2, [pc, #88]	@ (80060f8 <HAL_TIM_PWM_Start+0x178>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d009      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x136>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a18      	ldr	r2, [pc, #96]	@ (8006108 <HAL_TIM_PWM_Start+0x188>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x136>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a16      	ldr	r2, [pc, #88]	@ (800610c <HAL_TIM_PWM_Start+0x18c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d111      	bne.n	80060da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b06      	cmp	r3, #6
 80060c6:	d010      	beq.n	80060ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d8:	e007      	b.n	80060ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800
 8006104:	40000c00 	.word	0x40000c00
 8006108:	40014000 	.word	0x40014000
 800610c:	40001800 	.word	0x40001800

08006110 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fe12 	bl	8006d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2e      	ldr	r2, [pc, #184]	@ (80061e8 <HAL_TIM_PWM_Stop+0xd8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIM_PWM_Stop+0x2c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2d      	ldr	r2, [pc, #180]	@ (80061ec <HAL_TIM_PWM_Stop+0xdc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d101      	bne.n	8006140 <HAL_TIM_PWM_Stop+0x30>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <HAL_TIM_PWM_Stop+0x32>
 8006140:	2300      	movs	r3, #0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d017      	beq.n	8006176 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a1a      	ldr	r2, [r3, #32]
 800614c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <HAL_TIM_PWM_Stop+0x66>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006160:	4013      	ands	r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <HAL_TIM_PWM_Stop+0x66>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006180:	4013      	ands	r3, r2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10f      	bne.n	80061a6 <HAL_TIM_PWM_Stop+0x96>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6a1a      	ldr	r2, [r3, #32]
 800618c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006190:	4013      	ands	r3, r2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d107      	bne.n	80061a6 <HAL_TIM_PWM_Stop+0x96>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_PWM_Stop+0xa6>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061b4:	e013      	b.n	80061de <HAL_TIM_PWM_Stop+0xce>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_PWM_Stop+0xb6>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061c4:	e00b      	b.n	80061de <HAL_TIM_PWM_Stop+0xce>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d104      	bne.n	80061d6 <HAL_TIM_PWM_Stop+0xc6>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061d4:	e003      	b.n	80061de <HAL_TIM_PWM_Stop+0xce>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40010000 	.word	0x40010000
 80061ec:	40010400 	.word	0x40010400

080061f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d122      	bne.n	800624c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b02      	cmp	r3, #2
 8006212:	d11b      	bne.n	800624c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0202 	mvn.w	r2, #2
 800621c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa81 	bl	800673a <HAL_TIM_IC_CaptureCallback>
 8006238:	e005      	b.n	8006246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa73 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fa84 	bl	800674e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b04      	cmp	r3, #4
 8006258:	d122      	bne.n	80062a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b04      	cmp	r3, #4
 8006266:	d11b      	bne.n	80062a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0204 	mvn.w	r2, #4
 8006270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa57 	bl	800673a <HAL_TIM_IC_CaptureCallback>
 800628c:	e005      	b.n	800629a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa49 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fa5a 	bl	800674e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d122      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d11b      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0208 	mvn.w	r2, #8
 80062c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2204      	movs	r2, #4
 80062ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa2d 	bl	800673a <HAL_TIM_IC_CaptureCallback>
 80062e0:	e005      	b.n	80062ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa1f 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fa30 	bl	800674e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d122      	bne.n	8006348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b10      	cmp	r3, #16
 800630e:	d11b      	bne.n	8006348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0210 	mvn.w	r2, #16
 8006318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2208      	movs	r2, #8
 800631e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa03 	bl	800673a <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f9f5 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fa06 	bl	800674e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10e      	bne.n	8006374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b01      	cmp	r3, #1
 8006362:	d107      	bne.n	8006374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0201 	mvn.w	r2, #1
 800636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9cf 	bl	8006712 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637e:	2b80      	cmp	r3, #128	@ 0x80
 8006380:	d10e      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638c:	2b80      	cmp	r3, #128	@ 0x80
 800638e:	d107      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fdd4 	bl	8006f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063aa:	2b40      	cmp	r3, #64	@ 0x40
 80063ac:	d10e      	bne.n	80063cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b8:	2b40      	cmp	r3, #64	@ 0x40
 80063ba:	d107      	bne.n	80063cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f9cb 	bl	8006762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d10e      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d107      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0220 	mvn.w	r2, #32
 80063f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fd9e 	bl	8006f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800641a:	2302      	movs	r3, #2
 800641c:	e0ae      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b0c      	cmp	r3, #12
 800642a:	f200 809f 	bhi.w	800656c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800642e:	a201      	add	r2, pc, #4	@ (adr r2, 8006434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006469 	.word	0x08006469
 8006438:	0800656d 	.word	0x0800656d
 800643c:	0800656d 	.word	0x0800656d
 8006440:	0800656d 	.word	0x0800656d
 8006444:	080064a9 	.word	0x080064a9
 8006448:	0800656d 	.word	0x0800656d
 800644c:	0800656d 	.word	0x0800656d
 8006450:	0800656d 	.word	0x0800656d
 8006454:	080064eb 	.word	0x080064eb
 8006458:	0800656d 	.word	0x0800656d
 800645c:	0800656d 	.word	0x0800656d
 8006460:	0800656d 	.word	0x0800656d
 8006464:	0800652b 	.word	0x0800652b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fa22 	bl	80068b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0208 	orr.w	r2, r2, #8
 8006482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0204 	bic.w	r2, r2, #4
 8006492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6999      	ldr	r1, [r3, #24]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	619a      	str	r2, [r3, #24]
      break;
 80064a6:	e064      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68b9      	ldr	r1, [r7, #8]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fa72 	bl	8006998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6999      	ldr	r1, [r3, #24]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	021a      	lsls	r2, r3, #8
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	619a      	str	r2, [r3, #24]
      break;
 80064e8:	e043      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fac7 	bl	8006a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0208 	orr.w	r2, r2, #8
 8006504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0204 	bic.w	r2, r2, #4
 8006514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69d9      	ldr	r1, [r3, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	61da      	str	r2, [r3, #28]
      break;
 8006528:	e023      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fb1b 	bl	8006b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69d9      	ldr	r1, [r3, #28]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	021a      	lsls	r2, r3, #8
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	61da      	str	r2, [r3, #28]
      break;
 800656a:	e002      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	75fb      	strb	r3, [r7, #23]
      break;
 8006570:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_TIM_ConfigClockSource+0x1c>
 800659c:	2302      	movs	r3, #2
 800659e:	e0b4      	b.n	800670a <HAL_TIM_ConfigClockSource+0x186>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d8:	d03e      	beq.n	8006658 <HAL_TIM_ConfigClockSource+0xd4>
 80065da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065de:	f200 8087 	bhi.w	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e6:	f000 8086 	beq.w	80066f6 <HAL_TIM_ConfigClockSource+0x172>
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ee:	d87f      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b70      	cmp	r3, #112	@ 0x70
 80065f2:	d01a      	beq.n	800662a <HAL_TIM_ConfigClockSource+0xa6>
 80065f4:	2b70      	cmp	r3, #112	@ 0x70
 80065f6:	d87b      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b60      	cmp	r3, #96	@ 0x60
 80065fa:	d050      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x11a>
 80065fc:	2b60      	cmp	r3, #96	@ 0x60
 80065fe:	d877      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b50      	cmp	r3, #80	@ 0x50
 8006602:	d03c      	beq.n	800667e <HAL_TIM_ConfigClockSource+0xfa>
 8006604:	2b50      	cmp	r3, #80	@ 0x50
 8006606:	d873      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006608:	2b40      	cmp	r3, #64	@ 0x40
 800660a:	d058      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x13a>
 800660c:	2b40      	cmp	r3, #64	@ 0x40
 800660e:	d86f      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006610:	2b30      	cmp	r3, #48	@ 0x30
 8006612:	d064      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15a>
 8006614:	2b30      	cmp	r3, #48	@ 0x30
 8006616:	d86b      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d060      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15a>
 800661c:	2b20      	cmp	r3, #32
 800661e:	d867      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d05c      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15a>
 8006624:	2b10      	cmp	r3, #16
 8006626:	d05a      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15a>
 8006628:	e062      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6899      	ldr	r1, [r3, #8]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f000 fb67 	bl	8006d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800664c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	609a      	str	r2, [r3, #8]
      break;
 8006656:	e04f      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6899      	ldr	r1, [r3, #8]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f000 fb50 	bl	8006d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800667a:	609a      	str	r2, [r3, #8]
      break;
 800667c:	e03c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6859      	ldr	r1, [r3, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	461a      	mov	r2, r3
 800668c:	f000 fac4 	bl	8006c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2150      	movs	r1, #80	@ 0x50
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fb1d 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 800669c:	e02c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 fae3 	bl	8006c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2160      	movs	r1, #96	@ 0x60
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fb0d 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 80066bc:	e01c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f000 faa4 	bl	8006c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2140      	movs	r1, #64	@ 0x40
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fafd 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 80066dc:	e00c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f000 faf4 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 80066ee:	e003      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      break;
 80066f4:	e000      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a40      	ldr	r2, [pc, #256]	@ (800688c <TIM_Base_SetConfig+0x114>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006796:	d00f      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a3d      	ldr	r2, [pc, #244]	@ (8006890 <TIM_Base_SetConfig+0x118>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00b      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a3c      	ldr	r2, [pc, #240]	@ (8006894 <TIM_Base_SetConfig+0x11c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d007      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a3b      	ldr	r2, [pc, #236]	@ (8006898 <TIM_Base_SetConfig+0x120>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a3a      	ldr	r2, [pc, #232]	@ (800689c <TIM_Base_SetConfig+0x124>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d108      	bne.n	80067ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2f      	ldr	r2, [pc, #188]	@ (800688c <TIM_Base_SetConfig+0x114>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d02b      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d8:	d027      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006890 <TIM_Base_SetConfig+0x118>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d023      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006894 <TIM_Base_SetConfig+0x11c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01f      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006898 <TIM_Base_SetConfig+0x120>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01b      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a29      	ldr	r2, [pc, #164]	@ (800689c <TIM_Base_SetConfig+0x124>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d017      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a28      	ldr	r2, [pc, #160]	@ (80068a0 <TIM_Base_SetConfig+0x128>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a27      	ldr	r2, [pc, #156]	@ (80068a4 <TIM_Base_SetConfig+0x12c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00f      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a26      	ldr	r2, [pc, #152]	@ (80068a8 <TIM_Base_SetConfig+0x130>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00b      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a25      	ldr	r2, [pc, #148]	@ (80068ac <TIM_Base_SetConfig+0x134>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d007      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a24      	ldr	r2, [pc, #144]	@ (80068b0 <TIM_Base_SetConfig+0x138>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d003      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a23      	ldr	r2, [pc, #140]	@ (80068b4 <TIM_Base_SetConfig+0x13c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d108      	bne.n	800683c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a0a      	ldr	r2, [pc, #40]	@ (800688c <TIM_Base_SetConfig+0x114>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_Base_SetConfig+0xf8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a0c      	ldr	r2, [pc, #48]	@ (800689c <TIM_Base_SetConfig+0x124>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d103      	bne.n	8006878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	615a      	str	r2, [r3, #20]
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40010000 	.word	0x40010000
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	40010400 	.word	0x40010400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800
 80068ac:	40001800 	.word	0x40001800
 80068b0:	40001c00 	.word	0x40001c00
 80068b4:	40002000 	.word	0x40002000

080068b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f023 0201 	bic.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0303 	bic.w	r3, r3, #3
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f023 0302 	bic.w	r3, r3, #2
 8006900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a20      	ldr	r2, [pc, #128]	@ (8006990 <TIM_OC1_SetConfig+0xd8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC1_SetConfig+0x64>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a1f      	ldr	r2, [pc, #124]	@ (8006994 <TIM_OC1_SetConfig+0xdc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10c      	bne.n	8006936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0308 	bic.w	r3, r3, #8
 8006922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 0304 	bic.w	r3, r3, #4
 8006934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a15      	ldr	r2, [pc, #84]	@ (8006990 <TIM_OC1_SetConfig+0xd8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_OC1_SetConfig+0x8e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a14      	ldr	r2, [pc, #80]	@ (8006994 <TIM_OC1_SetConfig+0xdc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d111      	bne.n	800696a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800694c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	621a      	str	r2, [r3, #32]
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40010000 	.word	0x40010000
 8006994:	40010400 	.word	0x40010400

08006998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0210 	bic.w	r2, r3, #16
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0320 	bic.w	r3, r3, #32
 80069e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a22      	ldr	r2, [pc, #136]	@ (8006a7c <TIM_OC2_SetConfig+0xe4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC2_SetConfig+0x68>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a21      	ldr	r2, [pc, #132]	@ (8006a80 <TIM_OC2_SetConfig+0xe8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10d      	bne.n	8006a1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	@ (8006a7c <TIM_OC2_SetConfig+0xe4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_OC2_SetConfig+0x94>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a16      	ldr	r2, [pc, #88]	@ (8006a80 <TIM_OC2_SetConfig+0xe8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d113      	bne.n	8006a54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40010400 	.word	0x40010400

08006a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a21      	ldr	r2, [pc, #132]	@ (8006b64 <TIM_OC3_SetConfig+0xe0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_OC3_SetConfig+0x66>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a20      	ldr	r2, [pc, #128]	@ (8006b68 <TIM_OC3_SetConfig+0xe4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d10d      	bne.n	8006b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a16      	ldr	r2, [pc, #88]	@ (8006b64 <TIM_OC3_SetConfig+0xe0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_OC3_SetConfig+0x92>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a15      	ldr	r2, [pc, #84]	@ (8006b68 <TIM_OC3_SetConfig+0xe4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d113      	bne.n	8006b3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	621a      	str	r2, [r3, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40010400 	.word	0x40010400

08006b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	031b      	lsls	r3, r3, #12
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a12      	ldr	r2, [pc, #72]	@ (8006c10 <TIM_OC4_SetConfig+0xa4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_OC4_SetConfig+0x68>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a11      	ldr	r2, [pc, #68]	@ (8006c14 <TIM_OC4_SetConfig+0xa8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d109      	bne.n	8006be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	019b      	lsls	r3, r3, #6
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40010000 	.word	0x40010000
 8006c14:	40010400 	.word	0x40010400

08006c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f023 0201 	bic.w	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 030a 	bic.w	r3, r3, #10
 8006c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b087      	sub	sp, #28
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0210 	bic.w	r2, r3, #16
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f043 0307 	orr.w	r3, r3, #7
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	bf00      	nop
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	021a      	lsls	r2, r3, #8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2201      	movs	r2, #1
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1a      	ldr	r2, [r3, #32]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	401a      	ands	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	fa01 f303 	lsl.w	r3, r1, r3
 8006d84:	431a      	orrs	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e05a      	b.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a21      	ldr	r2, [pc, #132]	@ (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d022      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfc:	d01d      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1d      	ldr	r2, [pc, #116]	@ (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d018      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d013      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1a      	ldr	r2, [pc, #104]	@ (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00e      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a18      	ldr	r2, [pc, #96]	@ (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d009      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a17      	ldr	r2, [pc, #92]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d004      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a15      	ldr	r2, [pc, #84]	@ (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d10c      	bne.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40010400 	.word	0x40010400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40001800 	.word	0x40001800

08006e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e03d      	b.n	8006f28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e03f      	b.n	8006fee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fb ffca 	bl	8002f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2224      	movs	r2, #36	@ 0x24
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f829 	bl	8006ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691a      	ldr	r2, [r3, #16]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695a      	ldr	r2, [r3, #20]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ffc:	b0c0      	sub	sp, #256	@ 0x100
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007014:	68d9      	ldr	r1, [r3, #12]
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	ea40 0301 	orr.w	r3, r0, r1
 8007020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	431a      	orrs	r2, r3
 8007030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	431a      	orrs	r2, r3
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007050:	f021 010c 	bic.w	r1, r1, #12
 8007054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800705e:	430b      	orrs	r3, r1
 8007060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800706e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007072:	6999      	ldr	r1, [r3, #24]
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	ea40 0301 	orr.w	r3, r0, r1
 800707e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b8f      	ldr	r3, [pc, #572]	@ (80072c4 <UART_SetConfig+0x2cc>)
 8007088:	429a      	cmp	r2, r3
 800708a:	d005      	beq.n	8007098 <UART_SetConfig+0xa0>
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b8d      	ldr	r3, [pc, #564]	@ (80072c8 <UART_SetConfig+0x2d0>)
 8007094:	429a      	cmp	r2, r3
 8007096:	d104      	bne.n	80070a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007098:	f7fd fd62 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 800709c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80070a0:	e003      	b.n	80070aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070a2:	f7fd fd49 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80070a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b4:	f040 810c 	bne.w	80072d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80070c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80070ca:	4622      	mov	r2, r4
 80070cc:	462b      	mov	r3, r5
 80070ce:	1891      	adds	r1, r2, r2
 80070d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80070d2:	415b      	adcs	r3, r3
 80070d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80070da:	4621      	mov	r1, r4
 80070dc:	eb12 0801 	adds.w	r8, r2, r1
 80070e0:	4629      	mov	r1, r5
 80070e2:	eb43 0901 	adc.w	r9, r3, r1
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070fa:	4690      	mov	r8, r2
 80070fc:	4699      	mov	r9, r3
 80070fe:	4623      	mov	r3, r4
 8007100:	eb18 0303 	adds.w	r3, r8, r3
 8007104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007108:	462b      	mov	r3, r5
 800710a:	eb49 0303 	adc.w	r3, r9, r3
 800710e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800711e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007126:	460b      	mov	r3, r1
 8007128:	18db      	adds	r3, r3, r3
 800712a:	653b      	str	r3, [r7, #80]	@ 0x50
 800712c:	4613      	mov	r3, r2
 800712e:	eb42 0303 	adc.w	r3, r2, r3
 8007132:	657b      	str	r3, [r7, #84]	@ 0x54
 8007134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800713c:	f7f9 f8b8 	bl	80002b0 <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4b61      	ldr	r3, [pc, #388]	@ (80072cc <UART_SetConfig+0x2d4>)
 8007146:	fba3 2302 	umull	r2, r3, r3, r2
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	011c      	lsls	r4, r3, #4
 800714e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007152:	2200      	movs	r2, #0
 8007154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007158:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800715c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007160:	4642      	mov	r2, r8
 8007162:	464b      	mov	r3, r9
 8007164:	1891      	adds	r1, r2, r2
 8007166:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007168:	415b      	adcs	r3, r3
 800716a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800716c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007170:	4641      	mov	r1, r8
 8007172:	eb12 0a01 	adds.w	sl, r2, r1
 8007176:	4649      	mov	r1, r9
 8007178:	eb43 0b01 	adc.w	fp, r3, r1
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800718c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007190:	4692      	mov	sl, r2
 8007192:	469b      	mov	fp, r3
 8007194:	4643      	mov	r3, r8
 8007196:	eb1a 0303 	adds.w	r3, sl, r3
 800719a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800719e:	464b      	mov	r3, r9
 80071a0:	eb4b 0303 	adc.w	r3, fp, r3
 80071a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80071b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80071bc:	460b      	mov	r3, r1
 80071be:	18db      	adds	r3, r3, r3
 80071c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071c2:	4613      	mov	r3, r2
 80071c4:	eb42 0303 	adc.w	r3, r2, r3
 80071c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80071ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80071d2:	f7f9 f86d 	bl	80002b0 <__aeabi_uldivmod>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	4b3b      	ldr	r3, [pc, #236]	@ (80072cc <UART_SetConfig+0x2d4>)
 80071de:	fba3 2301 	umull	r2, r3, r3, r1
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	2264      	movs	r2, #100	@ 0x64
 80071e6:	fb02 f303 	mul.w	r3, r2, r3
 80071ea:	1acb      	subs	r3, r1, r3
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80071f2:	4b36      	ldr	r3, [pc, #216]	@ (80072cc <UART_SetConfig+0x2d4>)
 80071f4:	fba3 2302 	umull	r2, r3, r3, r2
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007200:	441c      	add	r4, r3
 8007202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007206:	2200      	movs	r2, #0
 8007208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800720c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007214:	4642      	mov	r2, r8
 8007216:	464b      	mov	r3, r9
 8007218:	1891      	adds	r1, r2, r2
 800721a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800721c:	415b      	adcs	r3, r3
 800721e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007224:	4641      	mov	r1, r8
 8007226:	1851      	adds	r1, r2, r1
 8007228:	6339      	str	r1, [r7, #48]	@ 0x30
 800722a:	4649      	mov	r1, r9
 800722c:	414b      	adcs	r3, r1
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	f04f 0300 	mov.w	r3, #0
 8007238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800723c:	4659      	mov	r1, fp
 800723e:	00cb      	lsls	r3, r1, #3
 8007240:	4651      	mov	r1, sl
 8007242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007246:	4651      	mov	r1, sl
 8007248:	00ca      	lsls	r2, r1, #3
 800724a:	4610      	mov	r0, r2
 800724c:	4619      	mov	r1, r3
 800724e:	4603      	mov	r3, r0
 8007250:	4642      	mov	r2, r8
 8007252:	189b      	adds	r3, r3, r2
 8007254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007258:	464b      	mov	r3, r9
 800725a:	460a      	mov	r2, r1
 800725c:	eb42 0303 	adc.w	r3, r2, r3
 8007260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007270:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007278:	460b      	mov	r3, r1
 800727a:	18db      	adds	r3, r3, r3
 800727c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800727e:	4613      	mov	r3, r2
 8007280:	eb42 0303 	adc.w	r3, r2, r3
 8007284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800728a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800728e:	f7f9 f80f 	bl	80002b0 <__aeabi_uldivmod>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <UART_SetConfig+0x2d4>)
 8007298:	fba3 1302 	umull	r1, r3, r3, r2
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	2164      	movs	r1, #100	@ 0x64
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	3332      	adds	r3, #50	@ 0x32
 80072aa:	4a08      	ldr	r2, [pc, #32]	@ (80072cc <UART_SetConfig+0x2d4>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	f003 0207 	and.w	r2, r3, #7
 80072b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4422      	add	r2, r4
 80072be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072c0:	e106      	b.n	80074d0 <UART_SetConfig+0x4d8>
 80072c2:	bf00      	nop
 80072c4:	40011000 	.word	0x40011000
 80072c8:	40011400 	.word	0x40011400
 80072cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80072de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80072e2:	4642      	mov	r2, r8
 80072e4:	464b      	mov	r3, r9
 80072e6:	1891      	adds	r1, r2, r2
 80072e8:	6239      	str	r1, [r7, #32]
 80072ea:	415b      	adcs	r3, r3
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072f2:	4641      	mov	r1, r8
 80072f4:	1854      	adds	r4, r2, r1
 80072f6:	4649      	mov	r1, r9
 80072f8:	eb43 0501 	adc.w	r5, r3, r1
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	00eb      	lsls	r3, r5, #3
 8007306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800730a:	00e2      	lsls	r2, r4, #3
 800730c:	4614      	mov	r4, r2
 800730e:	461d      	mov	r5, r3
 8007310:	4643      	mov	r3, r8
 8007312:	18e3      	adds	r3, r4, r3
 8007314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007318:	464b      	mov	r3, r9
 800731a:	eb45 0303 	adc.w	r3, r5, r3
 800731e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800732e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800733e:	4629      	mov	r1, r5
 8007340:	008b      	lsls	r3, r1, #2
 8007342:	4621      	mov	r1, r4
 8007344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007348:	4621      	mov	r1, r4
 800734a:	008a      	lsls	r2, r1, #2
 800734c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007350:	f7f8 ffae 	bl	80002b0 <__aeabi_uldivmod>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4b60      	ldr	r3, [pc, #384]	@ (80074dc <UART_SetConfig+0x4e4>)
 800735a:	fba3 2302 	umull	r2, r3, r3, r2
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	011c      	lsls	r4, r3, #4
 8007362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007366:	2200      	movs	r2, #0
 8007368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800736c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007374:	4642      	mov	r2, r8
 8007376:	464b      	mov	r3, r9
 8007378:	1891      	adds	r1, r2, r2
 800737a:	61b9      	str	r1, [r7, #24]
 800737c:	415b      	adcs	r3, r3
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007384:	4641      	mov	r1, r8
 8007386:	1851      	adds	r1, r2, r1
 8007388:	6139      	str	r1, [r7, #16]
 800738a:	4649      	mov	r1, r9
 800738c:	414b      	adcs	r3, r1
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800739c:	4659      	mov	r1, fp
 800739e:	00cb      	lsls	r3, r1, #3
 80073a0:	4651      	mov	r1, sl
 80073a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073a6:	4651      	mov	r1, sl
 80073a8:	00ca      	lsls	r2, r1, #3
 80073aa:	4610      	mov	r0, r2
 80073ac:	4619      	mov	r1, r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	4642      	mov	r2, r8
 80073b2:	189b      	adds	r3, r3, r2
 80073b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073b8:	464b      	mov	r3, r9
 80073ba:	460a      	mov	r2, r1
 80073bc:	eb42 0303 	adc.w	r3, r2, r3
 80073c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80073dc:	4649      	mov	r1, r9
 80073de:	008b      	lsls	r3, r1, #2
 80073e0:	4641      	mov	r1, r8
 80073e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073e6:	4641      	mov	r1, r8
 80073e8:	008a      	lsls	r2, r1, #2
 80073ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80073ee:	f7f8 ff5f 	bl	80002b0 <__aeabi_uldivmod>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	4b38      	ldr	r3, [pc, #224]	@ (80074dc <UART_SetConfig+0x4e4>)
 80073fa:	fba3 2301 	umull	r2, r3, r3, r1
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	2264      	movs	r2, #100	@ 0x64
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	1acb      	subs	r3, r1, r3
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	3332      	adds	r3, #50	@ 0x32
 800740c:	4a33      	ldr	r2, [pc, #204]	@ (80074dc <UART_SetConfig+0x4e4>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007418:	441c      	add	r4, r3
 800741a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800741e:	2200      	movs	r2, #0
 8007420:	673b      	str	r3, [r7, #112]	@ 0x70
 8007422:	677a      	str	r2, [r7, #116]	@ 0x74
 8007424:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	1891      	adds	r1, r2, r2
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	415b      	adcs	r3, r3
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007438:	4641      	mov	r1, r8
 800743a:	1851      	adds	r1, r2, r1
 800743c:	6039      	str	r1, [r7, #0]
 800743e:	4649      	mov	r1, r9
 8007440:	414b      	adcs	r3, r1
 8007442:	607b      	str	r3, [r7, #4]
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007450:	4659      	mov	r1, fp
 8007452:	00cb      	lsls	r3, r1, #3
 8007454:	4651      	mov	r1, sl
 8007456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800745a:	4651      	mov	r1, sl
 800745c:	00ca      	lsls	r2, r1, #3
 800745e:	4610      	mov	r0, r2
 8007460:	4619      	mov	r1, r3
 8007462:	4603      	mov	r3, r0
 8007464:	4642      	mov	r2, r8
 8007466:	189b      	adds	r3, r3, r2
 8007468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800746a:	464b      	mov	r3, r9
 800746c:	460a      	mov	r2, r1
 800746e:	eb42 0303 	adc.w	r3, r2, r3
 8007472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	663b      	str	r3, [r7, #96]	@ 0x60
 800747e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	f04f 0300 	mov.w	r3, #0
 8007488:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800748c:	4649      	mov	r1, r9
 800748e:	008b      	lsls	r3, r1, #2
 8007490:	4641      	mov	r1, r8
 8007492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007496:	4641      	mov	r1, r8
 8007498:	008a      	lsls	r2, r1, #2
 800749a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800749e:	f7f8 ff07 	bl	80002b0 <__aeabi_uldivmod>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4b0d      	ldr	r3, [pc, #52]	@ (80074dc <UART_SetConfig+0x4e4>)
 80074a8:	fba3 1302 	umull	r1, r3, r3, r2
 80074ac:	095b      	lsrs	r3, r3, #5
 80074ae:	2164      	movs	r1, #100	@ 0x64
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	3332      	adds	r3, #50	@ 0x32
 80074ba:	4a08      	ldr	r2, [pc, #32]	@ (80074dc <UART_SetConfig+0x4e4>)
 80074bc:	fba2 2303 	umull	r2, r3, r2, r3
 80074c0:	095b      	lsrs	r3, r3, #5
 80074c2:	f003 020f 	and.w	r2, r3, #15
 80074c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4422      	add	r2, r4
 80074ce:	609a      	str	r2, [r3, #8]
}
 80074d0:	bf00      	nop
 80074d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80074d6:	46bd      	mov	sp, r7
 80074d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074dc:	51eb851f 	.word	0x51eb851f

080074e0 <std>:
 80074e0:	2300      	movs	r3, #0
 80074e2:	b510      	push	{r4, lr}
 80074e4:	4604      	mov	r4, r0
 80074e6:	e9c0 3300 	strd	r3, r3, [r0]
 80074ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074ee:	6083      	str	r3, [r0, #8]
 80074f0:	8181      	strh	r1, [r0, #12]
 80074f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074f4:	81c2      	strh	r2, [r0, #14]
 80074f6:	6183      	str	r3, [r0, #24]
 80074f8:	4619      	mov	r1, r3
 80074fa:	2208      	movs	r2, #8
 80074fc:	305c      	adds	r0, #92	@ 0x5c
 80074fe:	f000 f9f9 	bl	80078f4 <memset>
 8007502:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <std+0x58>)
 8007504:	6263      	str	r3, [r4, #36]	@ 0x24
 8007506:	4b0d      	ldr	r3, [pc, #52]	@ (800753c <std+0x5c>)
 8007508:	62a3      	str	r3, [r4, #40]	@ 0x28
 800750a:	4b0d      	ldr	r3, [pc, #52]	@ (8007540 <std+0x60>)
 800750c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800750e:	4b0d      	ldr	r3, [pc, #52]	@ (8007544 <std+0x64>)
 8007510:	6323      	str	r3, [r4, #48]	@ 0x30
 8007512:	4b0d      	ldr	r3, [pc, #52]	@ (8007548 <std+0x68>)
 8007514:	6224      	str	r4, [r4, #32]
 8007516:	429c      	cmp	r4, r3
 8007518:	d006      	beq.n	8007528 <std+0x48>
 800751a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800751e:	4294      	cmp	r4, r2
 8007520:	d002      	beq.n	8007528 <std+0x48>
 8007522:	33d0      	adds	r3, #208	@ 0xd0
 8007524:	429c      	cmp	r4, r3
 8007526:	d105      	bne.n	8007534 <std+0x54>
 8007528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800752c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007530:	f000 ba58 	b.w	80079e4 <__retarget_lock_init_recursive>
 8007534:	bd10      	pop	{r4, pc}
 8007536:	bf00      	nop
 8007538:	08007745 	.word	0x08007745
 800753c:	08007767 	.word	0x08007767
 8007540:	0800779f 	.word	0x0800779f
 8007544:	080077c3 	.word	0x080077c3
 8007548:	20000540 	.word	0x20000540

0800754c <stdio_exit_handler>:
 800754c:	4a02      	ldr	r2, [pc, #8]	@ (8007558 <stdio_exit_handler+0xc>)
 800754e:	4903      	ldr	r1, [pc, #12]	@ (800755c <stdio_exit_handler+0x10>)
 8007550:	4803      	ldr	r0, [pc, #12]	@ (8007560 <stdio_exit_handler+0x14>)
 8007552:	f000 b869 	b.w	8007628 <_fwalk_sglue>
 8007556:	bf00      	nop
 8007558:	2000004c 	.word	0x2000004c
 800755c:	08008285 	.word	0x08008285
 8007560:	2000005c 	.word	0x2000005c

08007564 <cleanup_stdio>:
 8007564:	6841      	ldr	r1, [r0, #4]
 8007566:	4b0c      	ldr	r3, [pc, #48]	@ (8007598 <cleanup_stdio+0x34>)
 8007568:	4299      	cmp	r1, r3
 800756a:	b510      	push	{r4, lr}
 800756c:	4604      	mov	r4, r0
 800756e:	d001      	beq.n	8007574 <cleanup_stdio+0x10>
 8007570:	f000 fe88 	bl	8008284 <_fflush_r>
 8007574:	68a1      	ldr	r1, [r4, #8]
 8007576:	4b09      	ldr	r3, [pc, #36]	@ (800759c <cleanup_stdio+0x38>)
 8007578:	4299      	cmp	r1, r3
 800757a:	d002      	beq.n	8007582 <cleanup_stdio+0x1e>
 800757c:	4620      	mov	r0, r4
 800757e:	f000 fe81 	bl	8008284 <_fflush_r>
 8007582:	68e1      	ldr	r1, [r4, #12]
 8007584:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <cleanup_stdio+0x3c>)
 8007586:	4299      	cmp	r1, r3
 8007588:	d004      	beq.n	8007594 <cleanup_stdio+0x30>
 800758a:	4620      	mov	r0, r4
 800758c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007590:	f000 be78 	b.w	8008284 <_fflush_r>
 8007594:	bd10      	pop	{r4, pc}
 8007596:	bf00      	nop
 8007598:	20000540 	.word	0x20000540
 800759c:	200005a8 	.word	0x200005a8
 80075a0:	20000610 	.word	0x20000610

080075a4 <global_stdio_init.part.0>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	4b0b      	ldr	r3, [pc, #44]	@ (80075d4 <global_stdio_init.part.0+0x30>)
 80075a8:	4c0b      	ldr	r4, [pc, #44]	@ (80075d8 <global_stdio_init.part.0+0x34>)
 80075aa:	4a0c      	ldr	r2, [pc, #48]	@ (80075dc <global_stdio_init.part.0+0x38>)
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	4620      	mov	r0, r4
 80075b0:	2200      	movs	r2, #0
 80075b2:	2104      	movs	r1, #4
 80075b4:	f7ff ff94 	bl	80074e0 <std>
 80075b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075bc:	2201      	movs	r2, #1
 80075be:	2109      	movs	r1, #9
 80075c0:	f7ff ff8e 	bl	80074e0 <std>
 80075c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075c8:	2202      	movs	r2, #2
 80075ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ce:	2112      	movs	r1, #18
 80075d0:	f7ff bf86 	b.w	80074e0 <std>
 80075d4:	20000678 	.word	0x20000678
 80075d8:	20000540 	.word	0x20000540
 80075dc:	0800754d 	.word	0x0800754d

080075e0 <__sfp_lock_acquire>:
 80075e0:	4801      	ldr	r0, [pc, #4]	@ (80075e8 <__sfp_lock_acquire+0x8>)
 80075e2:	f000 ba00 	b.w	80079e6 <__retarget_lock_acquire_recursive>
 80075e6:	bf00      	nop
 80075e8:	20000681 	.word	0x20000681

080075ec <__sfp_lock_release>:
 80075ec:	4801      	ldr	r0, [pc, #4]	@ (80075f4 <__sfp_lock_release+0x8>)
 80075ee:	f000 b9fb 	b.w	80079e8 <__retarget_lock_release_recursive>
 80075f2:	bf00      	nop
 80075f4:	20000681 	.word	0x20000681

080075f8 <__sinit>:
 80075f8:	b510      	push	{r4, lr}
 80075fa:	4604      	mov	r4, r0
 80075fc:	f7ff fff0 	bl	80075e0 <__sfp_lock_acquire>
 8007600:	6a23      	ldr	r3, [r4, #32]
 8007602:	b11b      	cbz	r3, 800760c <__sinit+0x14>
 8007604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007608:	f7ff bff0 	b.w	80075ec <__sfp_lock_release>
 800760c:	4b04      	ldr	r3, [pc, #16]	@ (8007620 <__sinit+0x28>)
 800760e:	6223      	str	r3, [r4, #32]
 8007610:	4b04      	ldr	r3, [pc, #16]	@ (8007624 <__sinit+0x2c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1f5      	bne.n	8007604 <__sinit+0xc>
 8007618:	f7ff ffc4 	bl	80075a4 <global_stdio_init.part.0>
 800761c:	e7f2      	b.n	8007604 <__sinit+0xc>
 800761e:	bf00      	nop
 8007620:	08007565 	.word	0x08007565
 8007624:	20000678 	.word	0x20000678

08007628 <_fwalk_sglue>:
 8007628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800762c:	4607      	mov	r7, r0
 800762e:	4688      	mov	r8, r1
 8007630:	4614      	mov	r4, r2
 8007632:	2600      	movs	r6, #0
 8007634:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007638:	f1b9 0901 	subs.w	r9, r9, #1
 800763c:	d505      	bpl.n	800764a <_fwalk_sglue+0x22>
 800763e:	6824      	ldr	r4, [r4, #0]
 8007640:	2c00      	cmp	r4, #0
 8007642:	d1f7      	bne.n	8007634 <_fwalk_sglue+0xc>
 8007644:	4630      	mov	r0, r6
 8007646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800764a:	89ab      	ldrh	r3, [r5, #12]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d907      	bls.n	8007660 <_fwalk_sglue+0x38>
 8007650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007654:	3301      	adds	r3, #1
 8007656:	d003      	beq.n	8007660 <_fwalk_sglue+0x38>
 8007658:	4629      	mov	r1, r5
 800765a:	4638      	mov	r0, r7
 800765c:	47c0      	blx	r8
 800765e:	4306      	orrs	r6, r0
 8007660:	3568      	adds	r5, #104	@ 0x68
 8007662:	e7e9      	b.n	8007638 <_fwalk_sglue+0x10>

08007664 <iprintf>:
 8007664:	b40f      	push	{r0, r1, r2, r3}
 8007666:	b507      	push	{r0, r1, r2, lr}
 8007668:	4906      	ldr	r1, [pc, #24]	@ (8007684 <iprintf+0x20>)
 800766a:	ab04      	add	r3, sp, #16
 800766c:	6808      	ldr	r0, [r1, #0]
 800766e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007672:	6881      	ldr	r1, [r0, #8]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	f000 fadb 	bl	8007c30 <_vfiprintf_r>
 800767a:	b003      	add	sp, #12
 800767c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007680:	b004      	add	sp, #16
 8007682:	4770      	bx	lr
 8007684:	20000058 	.word	0x20000058

08007688 <_puts_r>:
 8007688:	6a03      	ldr	r3, [r0, #32]
 800768a:	b570      	push	{r4, r5, r6, lr}
 800768c:	6884      	ldr	r4, [r0, #8]
 800768e:	4605      	mov	r5, r0
 8007690:	460e      	mov	r6, r1
 8007692:	b90b      	cbnz	r3, 8007698 <_puts_r+0x10>
 8007694:	f7ff ffb0 	bl	80075f8 <__sinit>
 8007698:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800769a:	07db      	lsls	r3, r3, #31
 800769c:	d405      	bmi.n	80076aa <_puts_r+0x22>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	0598      	lsls	r0, r3, #22
 80076a2:	d402      	bmi.n	80076aa <_puts_r+0x22>
 80076a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076a6:	f000 f99e 	bl	80079e6 <__retarget_lock_acquire_recursive>
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	0719      	lsls	r1, r3, #28
 80076ae:	d502      	bpl.n	80076b6 <_puts_r+0x2e>
 80076b0:	6923      	ldr	r3, [r4, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d135      	bne.n	8007722 <_puts_r+0x9a>
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	f000 f8c5 	bl	8007848 <__swsetup_r>
 80076be:	b380      	cbz	r0, 8007722 <_puts_r+0x9a>
 80076c0:	f04f 35ff 	mov.w	r5, #4294967295
 80076c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076c6:	07da      	lsls	r2, r3, #31
 80076c8:	d405      	bmi.n	80076d6 <_puts_r+0x4e>
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	059b      	lsls	r3, r3, #22
 80076ce:	d402      	bmi.n	80076d6 <_puts_r+0x4e>
 80076d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076d2:	f000 f989 	bl	80079e8 <__retarget_lock_release_recursive>
 80076d6:	4628      	mov	r0, r5
 80076d8:	bd70      	pop	{r4, r5, r6, pc}
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da04      	bge.n	80076e8 <_puts_r+0x60>
 80076de:	69a2      	ldr	r2, [r4, #24]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	dc17      	bgt.n	8007714 <_puts_r+0x8c>
 80076e4:	290a      	cmp	r1, #10
 80076e6:	d015      	beq.n	8007714 <_puts_r+0x8c>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	6022      	str	r2, [r4, #0]
 80076ee:	7019      	strb	r1, [r3, #0]
 80076f0:	68a3      	ldr	r3, [r4, #8]
 80076f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076f6:	3b01      	subs	r3, #1
 80076f8:	60a3      	str	r3, [r4, #8]
 80076fa:	2900      	cmp	r1, #0
 80076fc:	d1ed      	bne.n	80076da <_puts_r+0x52>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da11      	bge.n	8007726 <_puts_r+0x9e>
 8007702:	4622      	mov	r2, r4
 8007704:	210a      	movs	r1, #10
 8007706:	4628      	mov	r0, r5
 8007708:	f000 f85f 	bl	80077ca <__swbuf_r>
 800770c:	3001      	adds	r0, #1
 800770e:	d0d7      	beq.n	80076c0 <_puts_r+0x38>
 8007710:	250a      	movs	r5, #10
 8007712:	e7d7      	b.n	80076c4 <_puts_r+0x3c>
 8007714:	4622      	mov	r2, r4
 8007716:	4628      	mov	r0, r5
 8007718:	f000 f857 	bl	80077ca <__swbuf_r>
 800771c:	3001      	adds	r0, #1
 800771e:	d1e7      	bne.n	80076f0 <_puts_r+0x68>
 8007720:	e7ce      	b.n	80076c0 <_puts_r+0x38>
 8007722:	3e01      	subs	r6, #1
 8007724:	e7e4      	b.n	80076f0 <_puts_r+0x68>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	220a      	movs	r2, #10
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	e7ee      	b.n	8007710 <_puts_r+0x88>
	...

08007734 <puts>:
 8007734:	4b02      	ldr	r3, [pc, #8]	@ (8007740 <puts+0xc>)
 8007736:	4601      	mov	r1, r0
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	f7ff bfa5 	b.w	8007688 <_puts_r>
 800773e:	bf00      	nop
 8007740:	20000058 	.word	0x20000058

08007744 <__sread>:
 8007744:	b510      	push	{r4, lr}
 8007746:	460c      	mov	r4, r1
 8007748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774c:	f000 f8fc 	bl	8007948 <_read_r>
 8007750:	2800      	cmp	r0, #0
 8007752:	bfab      	itete	ge
 8007754:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007756:	89a3      	ldrhlt	r3, [r4, #12]
 8007758:	181b      	addge	r3, r3, r0
 800775a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800775e:	bfac      	ite	ge
 8007760:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007762:	81a3      	strhlt	r3, [r4, #12]
 8007764:	bd10      	pop	{r4, pc}

08007766 <__swrite>:
 8007766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776a:	461f      	mov	r7, r3
 800776c:	898b      	ldrh	r3, [r1, #12]
 800776e:	05db      	lsls	r3, r3, #23
 8007770:	4605      	mov	r5, r0
 8007772:	460c      	mov	r4, r1
 8007774:	4616      	mov	r6, r2
 8007776:	d505      	bpl.n	8007784 <__swrite+0x1e>
 8007778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777c:	2302      	movs	r3, #2
 800777e:	2200      	movs	r2, #0
 8007780:	f000 f8d0 	bl	8007924 <_lseek_r>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800778a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	4632      	mov	r2, r6
 8007792:	463b      	mov	r3, r7
 8007794:	4628      	mov	r0, r5
 8007796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800779a:	f000 b8e7 	b.w	800796c <_write_r>

0800779e <__sseek>:
 800779e:	b510      	push	{r4, lr}
 80077a0:	460c      	mov	r4, r1
 80077a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a6:	f000 f8bd 	bl	8007924 <_lseek_r>
 80077aa:	1c43      	adds	r3, r0, #1
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	bf15      	itete	ne
 80077b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077ba:	81a3      	strheq	r3, [r4, #12]
 80077bc:	bf18      	it	ne
 80077be:	81a3      	strhne	r3, [r4, #12]
 80077c0:	bd10      	pop	{r4, pc}

080077c2 <__sclose>:
 80077c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c6:	f000 b89d 	b.w	8007904 <_close_r>

080077ca <__swbuf_r>:
 80077ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077cc:	460e      	mov	r6, r1
 80077ce:	4614      	mov	r4, r2
 80077d0:	4605      	mov	r5, r0
 80077d2:	b118      	cbz	r0, 80077dc <__swbuf_r+0x12>
 80077d4:	6a03      	ldr	r3, [r0, #32]
 80077d6:	b90b      	cbnz	r3, 80077dc <__swbuf_r+0x12>
 80077d8:	f7ff ff0e 	bl	80075f8 <__sinit>
 80077dc:	69a3      	ldr	r3, [r4, #24]
 80077de:	60a3      	str	r3, [r4, #8]
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	071a      	lsls	r2, r3, #28
 80077e4:	d501      	bpl.n	80077ea <__swbuf_r+0x20>
 80077e6:	6923      	ldr	r3, [r4, #16]
 80077e8:	b943      	cbnz	r3, 80077fc <__swbuf_r+0x32>
 80077ea:	4621      	mov	r1, r4
 80077ec:	4628      	mov	r0, r5
 80077ee:	f000 f82b 	bl	8007848 <__swsetup_r>
 80077f2:	b118      	cbz	r0, 80077fc <__swbuf_r+0x32>
 80077f4:	f04f 37ff 	mov.w	r7, #4294967295
 80077f8:	4638      	mov	r0, r7
 80077fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	6922      	ldr	r2, [r4, #16]
 8007800:	1a98      	subs	r0, r3, r2
 8007802:	6963      	ldr	r3, [r4, #20]
 8007804:	b2f6      	uxtb	r6, r6
 8007806:	4283      	cmp	r3, r0
 8007808:	4637      	mov	r7, r6
 800780a:	dc05      	bgt.n	8007818 <__swbuf_r+0x4e>
 800780c:	4621      	mov	r1, r4
 800780e:	4628      	mov	r0, r5
 8007810:	f000 fd38 	bl	8008284 <_fflush_r>
 8007814:	2800      	cmp	r0, #0
 8007816:	d1ed      	bne.n	80077f4 <__swbuf_r+0x2a>
 8007818:	68a3      	ldr	r3, [r4, #8]
 800781a:	3b01      	subs	r3, #1
 800781c:	60a3      	str	r3, [r4, #8]
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	6022      	str	r2, [r4, #0]
 8007824:	701e      	strb	r6, [r3, #0]
 8007826:	6962      	ldr	r2, [r4, #20]
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	429a      	cmp	r2, r3
 800782c:	d004      	beq.n	8007838 <__swbuf_r+0x6e>
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	07db      	lsls	r3, r3, #31
 8007832:	d5e1      	bpl.n	80077f8 <__swbuf_r+0x2e>
 8007834:	2e0a      	cmp	r6, #10
 8007836:	d1df      	bne.n	80077f8 <__swbuf_r+0x2e>
 8007838:	4621      	mov	r1, r4
 800783a:	4628      	mov	r0, r5
 800783c:	f000 fd22 	bl	8008284 <_fflush_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	d0d9      	beq.n	80077f8 <__swbuf_r+0x2e>
 8007844:	e7d6      	b.n	80077f4 <__swbuf_r+0x2a>
	...

08007848 <__swsetup_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4b29      	ldr	r3, [pc, #164]	@ (80078f0 <__swsetup_r+0xa8>)
 800784c:	4605      	mov	r5, r0
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	460c      	mov	r4, r1
 8007852:	b118      	cbz	r0, 800785c <__swsetup_r+0x14>
 8007854:	6a03      	ldr	r3, [r0, #32]
 8007856:	b90b      	cbnz	r3, 800785c <__swsetup_r+0x14>
 8007858:	f7ff fece 	bl	80075f8 <__sinit>
 800785c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007860:	0719      	lsls	r1, r3, #28
 8007862:	d422      	bmi.n	80078aa <__swsetup_r+0x62>
 8007864:	06da      	lsls	r2, r3, #27
 8007866:	d407      	bmi.n	8007878 <__swsetup_r+0x30>
 8007868:	2209      	movs	r2, #9
 800786a:	602a      	str	r2, [r5, #0]
 800786c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007870:	81a3      	strh	r3, [r4, #12]
 8007872:	f04f 30ff 	mov.w	r0, #4294967295
 8007876:	e033      	b.n	80078e0 <__swsetup_r+0x98>
 8007878:	0758      	lsls	r0, r3, #29
 800787a:	d512      	bpl.n	80078a2 <__swsetup_r+0x5a>
 800787c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800787e:	b141      	cbz	r1, 8007892 <__swsetup_r+0x4a>
 8007880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007884:	4299      	cmp	r1, r3
 8007886:	d002      	beq.n	800788e <__swsetup_r+0x46>
 8007888:	4628      	mov	r0, r5
 800788a:	f000 f8af 	bl	80079ec <_free_r>
 800788e:	2300      	movs	r3, #0
 8007890:	6363      	str	r3, [r4, #52]	@ 0x34
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	2300      	movs	r3, #0
 800789c:	6063      	str	r3, [r4, #4]
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f043 0308 	orr.w	r3, r3, #8
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	b94b      	cbnz	r3, 80078c2 <__swsetup_r+0x7a>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b8:	d003      	beq.n	80078c2 <__swsetup_r+0x7a>
 80078ba:	4621      	mov	r1, r4
 80078bc:	4628      	mov	r0, r5
 80078be:	f000 fd2f 	bl	8008320 <__smakebuf_r>
 80078c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078c6:	f013 0201 	ands.w	r2, r3, #1
 80078ca:	d00a      	beq.n	80078e2 <__swsetup_r+0x9a>
 80078cc:	2200      	movs	r2, #0
 80078ce:	60a2      	str	r2, [r4, #8]
 80078d0:	6962      	ldr	r2, [r4, #20]
 80078d2:	4252      	negs	r2, r2
 80078d4:	61a2      	str	r2, [r4, #24]
 80078d6:	6922      	ldr	r2, [r4, #16]
 80078d8:	b942      	cbnz	r2, 80078ec <__swsetup_r+0xa4>
 80078da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078de:	d1c5      	bne.n	800786c <__swsetup_r+0x24>
 80078e0:	bd38      	pop	{r3, r4, r5, pc}
 80078e2:	0799      	lsls	r1, r3, #30
 80078e4:	bf58      	it	pl
 80078e6:	6962      	ldrpl	r2, [r4, #20]
 80078e8:	60a2      	str	r2, [r4, #8]
 80078ea:	e7f4      	b.n	80078d6 <__swsetup_r+0x8e>
 80078ec:	2000      	movs	r0, #0
 80078ee:	e7f7      	b.n	80078e0 <__swsetup_r+0x98>
 80078f0:	20000058 	.word	0x20000058

080078f4 <memset>:
 80078f4:	4402      	add	r2, r0
 80078f6:	4603      	mov	r3, r0
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d100      	bne.n	80078fe <memset+0xa>
 80078fc:	4770      	bx	lr
 80078fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007902:	e7f9      	b.n	80078f8 <memset+0x4>

08007904 <_close_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d06      	ldr	r5, [pc, #24]	@ (8007920 <_close_r+0x1c>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7fb fbfd 	bl	800310e <_close>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_close_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_close_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	2000067c 	.word	0x2000067c

08007924 <_lseek_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d07      	ldr	r5, [pc, #28]	@ (8007944 <_lseek_r+0x20>)
 8007928:	4604      	mov	r4, r0
 800792a:	4608      	mov	r0, r1
 800792c:	4611      	mov	r1, r2
 800792e:	2200      	movs	r2, #0
 8007930:	602a      	str	r2, [r5, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f7fb fc12 	bl	800315c <_lseek>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_lseek_r+0x1e>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_lseek_r+0x1e>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	2000067c 	.word	0x2000067c

08007948 <_read_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	@ (8007968 <_read_r+0x20>)
 800794c:	4604      	mov	r4, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7fb fba0 	bl	800309c <_read>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_read_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_read_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	2000067c 	.word	0x2000067c

0800796c <_write_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4d07      	ldr	r5, [pc, #28]	@ (800798c <_write_r+0x20>)
 8007970:	4604      	mov	r4, r0
 8007972:	4608      	mov	r0, r1
 8007974:	4611      	mov	r1, r2
 8007976:	2200      	movs	r2, #0
 8007978:	602a      	str	r2, [r5, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f7fb fbab 	bl	80030d6 <_write>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_write_r+0x1e>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_write_r+0x1e>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	2000067c 	.word	0x2000067c

08007990 <__errno>:
 8007990:	4b01      	ldr	r3, [pc, #4]	@ (8007998 <__errno+0x8>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20000058 	.word	0x20000058

0800799c <__libc_init_array>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	4d0d      	ldr	r5, [pc, #52]	@ (80079d4 <__libc_init_array+0x38>)
 80079a0:	4c0d      	ldr	r4, [pc, #52]	@ (80079d8 <__libc_init_array+0x3c>)
 80079a2:	1b64      	subs	r4, r4, r5
 80079a4:	10a4      	asrs	r4, r4, #2
 80079a6:	2600      	movs	r6, #0
 80079a8:	42a6      	cmp	r6, r4
 80079aa:	d109      	bne.n	80079c0 <__libc_init_array+0x24>
 80079ac:	4d0b      	ldr	r5, [pc, #44]	@ (80079dc <__libc_init_array+0x40>)
 80079ae:	4c0c      	ldr	r4, [pc, #48]	@ (80079e0 <__libc_init_array+0x44>)
 80079b0:	f000 fd24 	bl	80083fc <_init>
 80079b4:	1b64      	subs	r4, r4, r5
 80079b6:	10a4      	asrs	r4, r4, #2
 80079b8:	2600      	movs	r6, #0
 80079ba:	42a6      	cmp	r6, r4
 80079bc:	d105      	bne.n	80079ca <__libc_init_array+0x2e>
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c4:	4798      	blx	r3
 80079c6:	3601      	adds	r6, #1
 80079c8:	e7ee      	b.n	80079a8 <__libc_init_array+0xc>
 80079ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ce:	4798      	blx	r3
 80079d0:	3601      	adds	r6, #1
 80079d2:	e7f2      	b.n	80079ba <__libc_init_array+0x1e>
 80079d4:	08008508 	.word	0x08008508
 80079d8:	08008508 	.word	0x08008508
 80079dc:	08008508 	.word	0x08008508
 80079e0:	0800850c 	.word	0x0800850c

080079e4 <__retarget_lock_init_recursive>:
 80079e4:	4770      	bx	lr

080079e6 <__retarget_lock_acquire_recursive>:
 80079e6:	4770      	bx	lr

080079e8 <__retarget_lock_release_recursive>:
 80079e8:	4770      	bx	lr
	...

080079ec <_free_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4605      	mov	r5, r0
 80079f0:	2900      	cmp	r1, #0
 80079f2:	d041      	beq.n	8007a78 <_free_r+0x8c>
 80079f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079f8:	1f0c      	subs	r4, r1, #4
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfb8      	it	lt
 80079fe:	18e4      	addlt	r4, r4, r3
 8007a00:	f000 f8e0 	bl	8007bc4 <__malloc_lock>
 8007a04:	4a1d      	ldr	r2, [pc, #116]	@ (8007a7c <_free_r+0x90>)
 8007a06:	6813      	ldr	r3, [r2, #0]
 8007a08:	b933      	cbnz	r3, 8007a18 <_free_r+0x2c>
 8007a0a:	6063      	str	r3, [r4, #4]
 8007a0c:	6014      	str	r4, [r2, #0]
 8007a0e:	4628      	mov	r0, r5
 8007a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a14:	f000 b8dc 	b.w	8007bd0 <__malloc_unlock>
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	d908      	bls.n	8007a2e <_free_r+0x42>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	1821      	adds	r1, r4, r0
 8007a20:	428b      	cmp	r3, r1
 8007a22:	bf01      	itttt	eq
 8007a24:	6819      	ldreq	r1, [r3, #0]
 8007a26:	685b      	ldreq	r3, [r3, #4]
 8007a28:	1809      	addeq	r1, r1, r0
 8007a2a:	6021      	streq	r1, [r4, #0]
 8007a2c:	e7ed      	b.n	8007a0a <_free_r+0x1e>
 8007a2e:	461a      	mov	r2, r3
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	b10b      	cbz	r3, 8007a38 <_free_r+0x4c>
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	d9fa      	bls.n	8007a2e <_free_r+0x42>
 8007a38:	6811      	ldr	r1, [r2, #0]
 8007a3a:	1850      	adds	r0, r2, r1
 8007a3c:	42a0      	cmp	r0, r4
 8007a3e:	d10b      	bne.n	8007a58 <_free_r+0x6c>
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	4401      	add	r1, r0
 8007a44:	1850      	adds	r0, r2, r1
 8007a46:	4283      	cmp	r3, r0
 8007a48:	6011      	str	r1, [r2, #0]
 8007a4a:	d1e0      	bne.n	8007a0e <_free_r+0x22>
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	6053      	str	r3, [r2, #4]
 8007a52:	4408      	add	r0, r1
 8007a54:	6010      	str	r0, [r2, #0]
 8007a56:	e7da      	b.n	8007a0e <_free_r+0x22>
 8007a58:	d902      	bls.n	8007a60 <_free_r+0x74>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	602b      	str	r3, [r5, #0]
 8007a5e:	e7d6      	b.n	8007a0e <_free_r+0x22>
 8007a60:	6820      	ldr	r0, [r4, #0]
 8007a62:	1821      	adds	r1, r4, r0
 8007a64:	428b      	cmp	r3, r1
 8007a66:	bf04      	itt	eq
 8007a68:	6819      	ldreq	r1, [r3, #0]
 8007a6a:	685b      	ldreq	r3, [r3, #4]
 8007a6c:	6063      	str	r3, [r4, #4]
 8007a6e:	bf04      	itt	eq
 8007a70:	1809      	addeq	r1, r1, r0
 8007a72:	6021      	streq	r1, [r4, #0]
 8007a74:	6054      	str	r4, [r2, #4]
 8007a76:	e7ca      	b.n	8007a0e <_free_r+0x22>
 8007a78:	bd38      	pop	{r3, r4, r5, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000688 	.word	0x20000688

08007a80 <sbrk_aligned>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	4e0f      	ldr	r6, [pc, #60]	@ (8007ac0 <sbrk_aligned+0x40>)
 8007a84:	460c      	mov	r4, r1
 8007a86:	6831      	ldr	r1, [r6, #0]
 8007a88:	4605      	mov	r5, r0
 8007a8a:	b911      	cbnz	r1, 8007a92 <sbrk_aligned+0x12>
 8007a8c:	f000 fca6 	bl	80083dc <_sbrk_r>
 8007a90:	6030      	str	r0, [r6, #0]
 8007a92:	4621      	mov	r1, r4
 8007a94:	4628      	mov	r0, r5
 8007a96:	f000 fca1 	bl	80083dc <_sbrk_r>
 8007a9a:	1c43      	adds	r3, r0, #1
 8007a9c:	d103      	bne.n	8007aa6 <sbrk_aligned+0x26>
 8007a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	bd70      	pop	{r4, r5, r6, pc}
 8007aa6:	1cc4      	adds	r4, r0, #3
 8007aa8:	f024 0403 	bic.w	r4, r4, #3
 8007aac:	42a0      	cmp	r0, r4
 8007aae:	d0f8      	beq.n	8007aa2 <sbrk_aligned+0x22>
 8007ab0:	1a21      	subs	r1, r4, r0
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 fc92 	bl	80083dc <_sbrk_r>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d1f2      	bne.n	8007aa2 <sbrk_aligned+0x22>
 8007abc:	e7ef      	b.n	8007a9e <sbrk_aligned+0x1e>
 8007abe:	bf00      	nop
 8007ac0:	20000684 	.word	0x20000684

08007ac4 <_malloc_r>:
 8007ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac8:	1ccd      	adds	r5, r1, #3
 8007aca:	f025 0503 	bic.w	r5, r5, #3
 8007ace:	3508      	adds	r5, #8
 8007ad0:	2d0c      	cmp	r5, #12
 8007ad2:	bf38      	it	cc
 8007ad4:	250c      	movcc	r5, #12
 8007ad6:	2d00      	cmp	r5, #0
 8007ad8:	4606      	mov	r6, r0
 8007ada:	db01      	blt.n	8007ae0 <_malloc_r+0x1c>
 8007adc:	42a9      	cmp	r1, r5
 8007ade:	d904      	bls.n	8007aea <_malloc_r+0x26>
 8007ae0:	230c      	movs	r3, #12
 8007ae2:	6033      	str	r3, [r6, #0]
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bc0 <_malloc_r+0xfc>
 8007aee:	f000 f869 	bl	8007bc4 <__malloc_lock>
 8007af2:	f8d8 3000 	ldr.w	r3, [r8]
 8007af6:	461c      	mov	r4, r3
 8007af8:	bb44      	cbnz	r4, 8007b4c <_malloc_r+0x88>
 8007afa:	4629      	mov	r1, r5
 8007afc:	4630      	mov	r0, r6
 8007afe:	f7ff ffbf 	bl	8007a80 <sbrk_aligned>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	4604      	mov	r4, r0
 8007b06:	d158      	bne.n	8007bba <_malloc_r+0xf6>
 8007b08:	f8d8 4000 	ldr.w	r4, [r8]
 8007b0c:	4627      	mov	r7, r4
 8007b0e:	2f00      	cmp	r7, #0
 8007b10:	d143      	bne.n	8007b9a <_malloc_r+0xd6>
 8007b12:	2c00      	cmp	r4, #0
 8007b14:	d04b      	beq.n	8007bae <_malloc_r+0xea>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	4639      	mov	r1, r7
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	eb04 0903 	add.w	r9, r4, r3
 8007b20:	f000 fc5c 	bl	80083dc <_sbrk_r>
 8007b24:	4581      	cmp	r9, r0
 8007b26:	d142      	bne.n	8007bae <_malloc_r+0xea>
 8007b28:	6821      	ldr	r1, [r4, #0]
 8007b2a:	1a6d      	subs	r5, r5, r1
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7ff ffa6 	bl	8007a80 <sbrk_aligned>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d03a      	beq.n	8007bae <_malloc_r+0xea>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	442b      	add	r3, r5
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	bb62      	cbnz	r2, 8007ba0 <_malloc_r+0xdc>
 8007b46:	f8c8 7000 	str.w	r7, [r8]
 8007b4a:	e00f      	b.n	8007b6c <_malloc_r+0xa8>
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	1b52      	subs	r2, r2, r5
 8007b50:	d420      	bmi.n	8007b94 <_malloc_r+0xd0>
 8007b52:	2a0b      	cmp	r2, #11
 8007b54:	d917      	bls.n	8007b86 <_malloc_r+0xc2>
 8007b56:	1961      	adds	r1, r4, r5
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	6025      	str	r5, [r4, #0]
 8007b5c:	bf18      	it	ne
 8007b5e:	6059      	strne	r1, [r3, #4]
 8007b60:	6863      	ldr	r3, [r4, #4]
 8007b62:	bf08      	it	eq
 8007b64:	f8c8 1000 	streq.w	r1, [r8]
 8007b68:	5162      	str	r2, [r4, r5]
 8007b6a:	604b      	str	r3, [r1, #4]
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f000 f82f 	bl	8007bd0 <__malloc_unlock>
 8007b72:	f104 000b 	add.w	r0, r4, #11
 8007b76:	1d23      	adds	r3, r4, #4
 8007b78:	f020 0007 	bic.w	r0, r0, #7
 8007b7c:	1ac2      	subs	r2, r0, r3
 8007b7e:	bf1c      	itt	ne
 8007b80:	1a1b      	subne	r3, r3, r0
 8007b82:	50a3      	strne	r3, [r4, r2]
 8007b84:	e7af      	b.n	8007ae6 <_malloc_r+0x22>
 8007b86:	6862      	ldr	r2, [r4, #4]
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	bf0c      	ite	eq
 8007b8c:	f8c8 2000 	streq.w	r2, [r8]
 8007b90:	605a      	strne	r2, [r3, #4]
 8007b92:	e7eb      	b.n	8007b6c <_malloc_r+0xa8>
 8007b94:	4623      	mov	r3, r4
 8007b96:	6864      	ldr	r4, [r4, #4]
 8007b98:	e7ae      	b.n	8007af8 <_malloc_r+0x34>
 8007b9a:	463c      	mov	r4, r7
 8007b9c:	687f      	ldr	r7, [r7, #4]
 8007b9e:	e7b6      	b.n	8007b0e <_malloc_r+0x4a>
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	d1fb      	bne.n	8007ba0 <_malloc_r+0xdc>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6053      	str	r3, [r2, #4]
 8007bac:	e7de      	b.n	8007b6c <_malloc_r+0xa8>
 8007bae:	230c      	movs	r3, #12
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f000 f80c 	bl	8007bd0 <__malloc_unlock>
 8007bb8:	e794      	b.n	8007ae4 <_malloc_r+0x20>
 8007bba:	6005      	str	r5, [r0, #0]
 8007bbc:	e7d6      	b.n	8007b6c <_malloc_r+0xa8>
 8007bbe:	bf00      	nop
 8007bc0:	20000688 	.word	0x20000688

08007bc4 <__malloc_lock>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	@ (8007bcc <__malloc_lock+0x8>)
 8007bc6:	f7ff bf0e 	b.w	80079e6 <__retarget_lock_acquire_recursive>
 8007bca:	bf00      	nop
 8007bcc:	20000680 	.word	0x20000680

08007bd0 <__malloc_unlock>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	@ (8007bd8 <__malloc_unlock+0x8>)
 8007bd2:	f7ff bf09 	b.w	80079e8 <__retarget_lock_release_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	20000680 	.word	0x20000680

08007bdc <__sfputc_r>:
 8007bdc:	6893      	ldr	r3, [r2, #8]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	b410      	push	{r4}
 8007be4:	6093      	str	r3, [r2, #8]
 8007be6:	da08      	bge.n	8007bfa <__sfputc_r+0x1e>
 8007be8:	6994      	ldr	r4, [r2, #24]
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	db01      	blt.n	8007bf2 <__sfputc_r+0x16>
 8007bee:	290a      	cmp	r1, #10
 8007bf0:	d103      	bne.n	8007bfa <__sfputc_r+0x1e>
 8007bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf6:	f7ff bde8 	b.w	80077ca <__swbuf_r>
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	1c58      	adds	r0, r3, #1
 8007bfe:	6010      	str	r0, [r2, #0]
 8007c00:	7019      	strb	r1, [r3, #0]
 8007c02:	4608      	mov	r0, r1
 8007c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <__sfputs_r>:
 8007c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	460f      	mov	r7, r1
 8007c10:	4614      	mov	r4, r2
 8007c12:	18d5      	adds	r5, r2, r3
 8007c14:	42ac      	cmp	r4, r5
 8007c16:	d101      	bne.n	8007c1c <__sfputs_r+0x12>
 8007c18:	2000      	movs	r0, #0
 8007c1a:	e007      	b.n	8007c2c <__sfputs_r+0x22>
 8007c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c20:	463a      	mov	r2, r7
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff ffda 	bl	8007bdc <__sfputc_r>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d1f3      	bne.n	8007c14 <__sfputs_r+0xa>
 8007c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c30 <_vfiprintf_r>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	460d      	mov	r5, r1
 8007c36:	b09d      	sub	sp, #116	@ 0x74
 8007c38:	4614      	mov	r4, r2
 8007c3a:	4698      	mov	r8, r3
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	b118      	cbz	r0, 8007c48 <_vfiprintf_r+0x18>
 8007c40:	6a03      	ldr	r3, [r0, #32]
 8007c42:	b90b      	cbnz	r3, 8007c48 <_vfiprintf_r+0x18>
 8007c44:	f7ff fcd8 	bl	80075f8 <__sinit>
 8007c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c4a:	07d9      	lsls	r1, r3, #31
 8007c4c:	d405      	bmi.n	8007c5a <_vfiprintf_r+0x2a>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	059a      	lsls	r2, r3, #22
 8007c52:	d402      	bmi.n	8007c5a <_vfiprintf_r+0x2a>
 8007c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c56:	f7ff fec6 	bl	80079e6 <__retarget_lock_acquire_recursive>
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	071b      	lsls	r3, r3, #28
 8007c5e:	d501      	bpl.n	8007c64 <_vfiprintf_r+0x34>
 8007c60:	692b      	ldr	r3, [r5, #16]
 8007c62:	b99b      	cbnz	r3, 8007c8c <_vfiprintf_r+0x5c>
 8007c64:	4629      	mov	r1, r5
 8007c66:	4630      	mov	r0, r6
 8007c68:	f7ff fdee 	bl	8007848 <__swsetup_r>
 8007c6c:	b170      	cbz	r0, 8007c8c <_vfiprintf_r+0x5c>
 8007c6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c70:	07dc      	lsls	r4, r3, #31
 8007c72:	d504      	bpl.n	8007c7e <_vfiprintf_r+0x4e>
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	b01d      	add	sp, #116	@ 0x74
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	89ab      	ldrh	r3, [r5, #12]
 8007c80:	0598      	lsls	r0, r3, #22
 8007c82:	d4f7      	bmi.n	8007c74 <_vfiprintf_r+0x44>
 8007c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c86:	f7ff feaf 	bl	80079e8 <__retarget_lock_release_recursive>
 8007c8a:	e7f3      	b.n	8007c74 <_vfiprintf_r+0x44>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c90:	2320      	movs	r3, #32
 8007c92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c9a:	2330      	movs	r3, #48	@ 0x30
 8007c9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e4c <_vfiprintf_r+0x21c>
 8007ca0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ca4:	f04f 0901 	mov.w	r9, #1
 8007ca8:	4623      	mov	r3, r4
 8007caa:	469a      	mov	sl, r3
 8007cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cb0:	b10a      	cbz	r2, 8007cb6 <_vfiprintf_r+0x86>
 8007cb2:	2a25      	cmp	r2, #37	@ 0x25
 8007cb4:	d1f9      	bne.n	8007caa <_vfiprintf_r+0x7a>
 8007cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8007cba:	d00b      	beq.n	8007cd4 <_vfiprintf_r+0xa4>
 8007cbc:	465b      	mov	r3, fp
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7ff ffa1 	bl	8007c0a <__sfputs_r>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f000 80a7 	beq.w	8007e1c <_vfiprintf_r+0x1ec>
 8007cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cd0:	445a      	add	r2, fp
 8007cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 809f 	beq.w	8007e1c <_vfiprintf_r+0x1ec>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ce8:	f10a 0a01 	add.w	sl, sl, #1
 8007cec:	9304      	str	r3, [sp, #16]
 8007cee:	9307      	str	r3, [sp, #28]
 8007cf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cf6:	4654      	mov	r4, sl
 8007cf8:	2205      	movs	r2, #5
 8007cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cfe:	4853      	ldr	r0, [pc, #332]	@ (8007e4c <_vfiprintf_r+0x21c>)
 8007d00:	f7f8 fa86 	bl	8000210 <memchr>
 8007d04:	9a04      	ldr	r2, [sp, #16]
 8007d06:	b9d8      	cbnz	r0, 8007d40 <_vfiprintf_r+0x110>
 8007d08:	06d1      	lsls	r1, r2, #27
 8007d0a:	bf44      	itt	mi
 8007d0c:	2320      	movmi	r3, #32
 8007d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d12:	0713      	lsls	r3, r2, #28
 8007d14:	bf44      	itt	mi
 8007d16:	232b      	movmi	r3, #43	@ 0x2b
 8007d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d22:	d015      	beq.n	8007d50 <_vfiprintf_r+0x120>
 8007d24:	9a07      	ldr	r2, [sp, #28]
 8007d26:	4654      	mov	r4, sl
 8007d28:	2000      	movs	r0, #0
 8007d2a:	f04f 0c0a 	mov.w	ip, #10
 8007d2e:	4621      	mov	r1, r4
 8007d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d34:	3b30      	subs	r3, #48	@ 0x30
 8007d36:	2b09      	cmp	r3, #9
 8007d38:	d94b      	bls.n	8007dd2 <_vfiprintf_r+0x1a2>
 8007d3a:	b1b0      	cbz	r0, 8007d6a <_vfiprintf_r+0x13a>
 8007d3c:	9207      	str	r2, [sp, #28]
 8007d3e:	e014      	b.n	8007d6a <_vfiprintf_r+0x13a>
 8007d40:	eba0 0308 	sub.w	r3, r0, r8
 8007d44:	fa09 f303 	lsl.w	r3, r9, r3
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	46a2      	mov	sl, r4
 8007d4e:	e7d2      	b.n	8007cf6 <_vfiprintf_r+0xc6>
 8007d50:	9b03      	ldr	r3, [sp, #12]
 8007d52:	1d19      	adds	r1, r3, #4
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	9103      	str	r1, [sp, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bfbb      	ittet	lt
 8007d5c:	425b      	neglt	r3, r3
 8007d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d62:	9307      	strge	r3, [sp, #28]
 8007d64:	9307      	strlt	r3, [sp, #28]
 8007d66:	bfb8      	it	lt
 8007d68:	9204      	strlt	r2, [sp, #16]
 8007d6a:	7823      	ldrb	r3, [r4, #0]
 8007d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d6e:	d10a      	bne.n	8007d86 <_vfiprintf_r+0x156>
 8007d70:	7863      	ldrb	r3, [r4, #1]
 8007d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d74:	d132      	bne.n	8007ddc <_vfiprintf_r+0x1ac>
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	1d1a      	adds	r2, r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	9203      	str	r2, [sp, #12]
 8007d7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d82:	3402      	adds	r4, #2
 8007d84:	9305      	str	r3, [sp, #20]
 8007d86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e5c <_vfiprintf_r+0x22c>
 8007d8a:	7821      	ldrb	r1, [r4, #0]
 8007d8c:	2203      	movs	r2, #3
 8007d8e:	4650      	mov	r0, sl
 8007d90:	f7f8 fa3e 	bl	8000210 <memchr>
 8007d94:	b138      	cbz	r0, 8007da6 <_vfiprintf_r+0x176>
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	eba0 000a 	sub.w	r0, r0, sl
 8007d9c:	2240      	movs	r2, #64	@ 0x40
 8007d9e:	4082      	lsls	r2, r0
 8007da0:	4313      	orrs	r3, r2
 8007da2:	3401      	adds	r4, #1
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007daa:	4829      	ldr	r0, [pc, #164]	@ (8007e50 <_vfiprintf_r+0x220>)
 8007dac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007db0:	2206      	movs	r2, #6
 8007db2:	f7f8 fa2d 	bl	8000210 <memchr>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d03f      	beq.n	8007e3a <_vfiprintf_r+0x20a>
 8007dba:	4b26      	ldr	r3, [pc, #152]	@ (8007e54 <_vfiprintf_r+0x224>)
 8007dbc:	bb1b      	cbnz	r3, 8007e06 <_vfiprintf_r+0x1d6>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	3307      	adds	r3, #7
 8007dc2:	f023 0307 	bic.w	r3, r3, #7
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dcc:	443b      	add	r3, r7
 8007dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd0:	e76a      	b.n	8007ca8 <_vfiprintf_r+0x78>
 8007dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	2001      	movs	r0, #1
 8007dda:	e7a8      	b.n	8007d2e <_vfiprintf_r+0xfe>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	3401      	adds	r4, #1
 8007de0:	9305      	str	r3, [sp, #20]
 8007de2:	4619      	mov	r1, r3
 8007de4:	f04f 0c0a 	mov.w	ip, #10
 8007de8:	4620      	mov	r0, r4
 8007dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dee:	3a30      	subs	r2, #48	@ 0x30
 8007df0:	2a09      	cmp	r2, #9
 8007df2:	d903      	bls.n	8007dfc <_vfiprintf_r+0x1cc>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0c6      	beq.n	8007d86 <_vfiprintf_r+0x156>
 8007df8:	9105      	str	r1, [sp, #20]
 8007dfa:	e7c4      	b.n	8007d86 <_vfiprintf_r+0x156>
 8007dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e00:	4604      	mov	r4, r0
 8007e02:	2301      	movs	r3, #1
 8007e04:	e7f0      	b.n	8007de8 <_vfiprintf_r+0x1b8>
 8007e06:	ab03      	add	r3, sp, #12
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	462a      	mov	r2, r5
 8007e0c:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <_vfiprintf_r+0x228>)
 8007e0e:	a904      	add	r1, sp, #16
 8007e10:	4630      	mov	r0, r6
 8007e12:	f3af 8000 	nop.w
 8007e16:	4607      	mov	r7, r0
 8007e18:	1c78      	adds	r0, r7, #1
 8007e1a:	d1d6      	bne.n	8007dca <_vfiprintf_r+0x19a>
 8007e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e1e:	07d9      	lsls	r1, r3, #31
 8007e20:	d405      	bmi.n	8007e2e <_vfiprintf_r+0x1fe>
 8007e22:	89ab      	ldrh	r3, [r5, #12]
 8007e24:	059a      	lsls	r2, r3, #22
 8007e26:	d402      	bmi.n	8007e2e <_vfiprintf_r+0x1fe>
 8007e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e2a:	f7ff fddd 	bl	80079e8 <__retarget_lock_release_recursive>
 8007e2e:	89ab      	ldrh	r3, [r5, #12]
 8007e30:	065b      	lsls	r3, r3, #25
 8007e32:	f53f af1f 	bmi.w	8007c74 <_vfiprintf_r+0x44>
 8007e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e38:	e71e      	b.n	8007c78 <_vfiprintf_r+0x48>
 8007e3a:	ab03      	add	r3, sp, #12
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	462a      	mov	r2, r5
 8007e40:	4b05      	ldr	r3, [pc, #20]	@ (8007e58 <_vfiprintf_r+0x228>)
 8007e42:	a904      	add	r1, sp, #16
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 f879 	bl	8007f3c <_printf_i>
 8007e4a:	e7e4      	b.n	8007e16 <_vfiprintf_r+0x1e6>
 8007e4c:	080084cc 	.word	0x080084cc
 8007e50:	080084d6 	.word	0x080084d6
 8007e54:	00000000 	.word	0x00000000
 8007e58:	08007c0b 	.word	0x08007c0b
 8007e5c:	080084d2 	.word	0x080084d2

08007e60 <_printf_common>:
 8007e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e64:	4616      	mov	r6, r2
 8007e66:	4698      	mov	r8, r3
 8007e68:	688a      	ldr	r2, [r1, #8]
 8007e6a:	690b      	ldr	r3, [r1, #16]
 8007e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	bfb8      	it	lt
 8007e74:	4613      	movlt	r3, r2
 8007e76:	6033      	str	r3, [r6, #0]
 8007e78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	b10a      	cbz	r2, 8007e86 <_printf_common+0x26>
 8007e82:	3301      	adds	r3, #1
 8007e84:	6033      	str	r3, [r6, #0]
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	0699      	lsls	r1, r3, #26
 8007e8a:	bf42      	ittt	mi
 8007e8c:	6833      	ldrmi	r3, [r6, #0]
 8007e8e:	3302      	addmi	r3, #2
 8007e90:	6033      	strmi	r3, [r6, #0]
 8007e92:	6825      	ldr	r5, [r4, #0]
 8007e94:	f015 0506 	ands.w	r5, r5, #6
 8007e98:	d106      	bne.n	8007ea8 <_printf_common+0x48>
 8007e9a:	f104 0a19 	add.w	sl, r4, #25
 8007e9e:	68e3      	ldr	r3, [r4, #12]
 8007ea0:	6832      	ldr	r2, [r6, #0]
 8007ea2:	1a9b      	subs	r3, r3, r2
 8007ea4:	42ab      	cmp	r3, r5
 8007ea6:	dc26      	bgt.n	8007ef6 <_printf_common+0x96>
 8007ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	3b00      	subs	r3, #0
 8007eb0:	bf18      	it	ne
 8007eb2:	2301      	movne	r3, #1
 8007eb4:	0692      	lsls	r2, r2, #26
 8007eb6:	d42b      	bmi.n	8007f10 <_printf_common+0xb0>
 8007eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ebc:	4641      	mov	r1, r8
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	47c8      	blx	r9
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	d01e      	beq.n	8007f04 <_printf_common+0xa4>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	6922      	ldr	r2, [r4, #16]
 8007eca:	f003 0306 	and.w	r3, r3, #6
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	bf02      	ittt	eq
 8007ed2:	68e5      	ldreq	r5, [r4, #12]
 8007ed4:	6833      	ldreq	r3, [r6, #0]
 8007ed6:	1aed      	subeq	r5, r5, r3
 8007ed8:	68a3      	ldr	r3, [r4, #8]
 8007eda:	bf0c      	ite	eq
 8007edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee0:	2500      	movne	r5, #0
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	bfc4      	itt	gt
 8007ee6:	1a9b      	subgt	r3, r3, r2
 8007ee8:	18ed      	addgt	r5, r5, r3
 8007eea:	2600      	movs	r6, #0
 8007eec:	341a      	adds	r4, #26
 8007eee:	42b5      	cmp	r5, r6
 8007ef0:	d11a      	bne.n	8007f28 <_printf_common+0xc8>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e008      	b.n	8007f08 <_printf_common+0xa8>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4652      	mov	r2, sl
 8007efa:	4641      	mov	r1, r8
 8007efc:	4638      	mov	r0, r7
 8007efe:	47c8      	blx	r9
 8007f00:	3001      	adds	r0, #1
 8007f02:	d103      	bne.n	8007f0c <_printf_common+0xac>
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295
 8007f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	e7c6      	b.n	8007e9e <_printf_common+0x3e>
 8007f10:	18e1      	adds	r1, r4, r3
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	2030      	movs	r0, #48	@ 0x30
 8007f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f1a:	4422      	add	r2, r4
 8007f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f24:	3302      	adds	r3, #2
 8007f26:	e7c7      	b.n	8007eb8 <_printf_common+0x58>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	4641      	mov	r1, r8
 8007f2e:	4638      	mov	r0, r7
 8007f30:	47c8      	blx	r9
 8007f32:	3001      	adds	r0, #1
 8007f34:	d0e6      	beq.n	8007f04 <_printf_common+0xa4>
 8007f36:	3601      	adds	r6, #1
 8007f38:	e7d9      	b.n	8007eee <_printf_common+0x8e>
	...

08007f3c <_printf_i>:
 8007f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	7e0f      	ldrb	r7, [r1, #24]
 8007f42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f44:	2f78      	cmp	r7, #120	@ 0x78
 8007f46:	4691      	mov	r9, r2
 8007f48:	4680      	mov	r8, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	469a      	mov	sl, r3
 8007f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f52:	d807      	bhi.n	8007f64 <_printf_i+0x28>
 8007f54:	2f62      	cmp	r7, #98	@ 0x62
 8007f56:	d80a      	bhi.n	8007f6e <_printf_i+0x32>
 8007f58:	2f00      	cmp	r7, #0
 8007f5a:	f000 80d2 	beq.w	8008102 <_printf_i+0x1c6>
 8007f5e:	2f58      	cmp	r7, #88	@ 0x58
 8007f60:	f000 80b9 	beq.w	80080d6 <_printf_i+0x19a>
 8007f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f6c:	e03a      	b.n	8007fe4 <_printf_i+0xa8>
 8007f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f72:	2b15      	cmp	r3, #21
 8007f74:	d8f6      	bhi.n	8007f64 <_printf_i+0x28>
 8007f76:	a101      	add	r1, pc, #4	@ (adr r1, 8007f7c <_printf_i+0x40>)
 8007f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f7c:	08007fd5 	.word	0x08007fd5
 8007f80:	08007fe9 	.word	0x08007fe9
 8007f84:	08007f65 	.word	0x08007f65
 8007f88:	08007f65 	.word	0x08007f65
 8007f8c:	08007f65 	.word	0x08007f65
 8007f90:	08007f65 	.word	0x08007f65
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007f65 	.word	0x08007f65
 8007f9c:	08007f65 	.word	0x08007f65
 8007fa0:	08007f65 	.word	0x08007f65
 8007fa4:	08007f65 	.word	0x08007f65
 8007fa8:	080080e9 	.word	0x080080e9
 8007fac:	08008013 	.word	0x08008013
 8007fb0:	080080a3 	.word	0x080080a3
 8007fb4:	08007f65 	.word	0x08007f65
 8007fb8:	08007f65 	.word	0x08007f65
 8007fbc:	0800810b 	.word	0x0800810b
 8007fc0:	08007f65 	.word	0x08007f65
 8007fc4:	08008013 	.word	0x08008013
 8007fc8:	08007f65 	.word	0x08007f65
 8007fcc:	08007f65 	.word	0x08007f65
 8007fd0:	080080ab 	.word	0x080080ab
 8007fd4:	6833      	ldr	r3, [r6, #0]
 8007fd6:	1d1a      	adds	r2, r3, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6032      	str	r2, [r6, #0]
 8007fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e09d      	b.n	8008124 <_printf_i+0x1e8>
 8007fe8:	6833      	ldr	r3, [r6, #0]
 8007fea:	6820      	ldr	r0, [r4, #0]
 8007fec:	1d19      	adds	r1, r3, #4
 8007fee:	6031      	str	r1, [r6, #0]
 8007ff0:	0606      	lsls	r6, r0, #24
 8007ff2:	d501      	bpl.n	8007ff8 <_printf_i+0xbc>
 8007ff4:	681d      	ldr	r5, [r3, #0]
 8007ff6:	e003      	b.n	8008000 <_printf_i+0xc4>
 8007ff8:	0645      	lsls	r5, r0, #25
 8007ffa:	d5fb      	bpl.n	8007ff4 <_printf_i+0xb8>
 8007ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008000:	2d00      	cmp	r5, #0
 8008002:	da03      	bge.n	800800c <_printf_i+0xd0>
 8008004:	232d      	movs	r3, #45	@ 0x2d
 8008006:	426d      	negs	r5, r5
 8008008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800800c:	4859      	ldr	r0, [pc, #356]	@ (8008174 <_printf_i+0x238>)
 800800e:	230a      	movs	r3, #10
 8008010:	e011      	b.n	8008036 <_printf_i+0xfa>
 8008012:	6821      	ldr	r1, [r4, #0]
 8008014:	6833      	ldr	r3, [r6, #0]
 8008016:	0608      	lsls	r0, r1, #24
 8008018:	f853 5b04 	ldr.w	r5, [r3], #4
 800801c:	d402      	bmi.n	8008024 <_printf_i+0xe8>
 800801e:	0649      	lsls	r1, r1, #25
 8008020:	bf48      	it	mi
 8008022:	b2ad      	uxthmi	r5, r5
 8008024:	2f6f      	cmp	r7, #111	@ 0x6f
 8008026:	4853      	ldr	r0, [pc, #332]	@ (8008174 <_printf_i+0x238>)
 8008028:	6033      	str	r3, [r6, #0]
 800802a:	bf14      	ite	ne
 800802c:	230a      	movne	r3, #10
 800802e:	2308      	moveq	r3, #8
 8008030:	2100      	movs	r1, #0
 8008032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008036:	6866      	ldr	r6, [r4, #4]
 8008038:	60a6      	str	r6, [r4, #8]
 800803a:	2e00      	cmp	r6, #0
 800803c:	bfa2      	ittt	ge
 800803e:	6821      	ldrge	r1, [r4, #0]
 8008040:	f021 0104 	bicge.w	r1, r1, #4
 8008044:	6021      	strge	r1, [r4, #0]
 8008046:	b90d      	cbnz	r5, 800804c <_printf_i+0x110>
 8008048:	2e00      	cmp	r6, #0
 800804a:	d04b      	beq.n	80080e4 <_printf_i+0x1a8>
 800804c:	4616      	mov	r6, r2
 800804e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008052:	fb03 5711 	mls	r7, r3, r1, r5
 8008056:	5dc7      	ldrb	r7, [r0, r7]
 8008058:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800805c:	462f      	mov	r7, r5
 800805e:	42bb      	cmp	r3, r7
 8008060:	460d      	mov	r5, r1
 8008062:	d9f4      	bls.n	800804e <_printf_i+0x112>
 8008064:	2b08      	cmp	r3, #8
 8008066:	d10b      	bne.n	8008080 <_printf_i+0x144>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	07df      	lsls	r7, r3, #31
 800806c:	d508      	bpl.n	8008080 <_printf_i+0x144>
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	6861      	ldr	r1, [r4, #4]
 8008072:	4299      	cmp	r1, r3
 8008074:	bfde      	ittt	le
 8008076:	2330      	movle	r3, #48	@ 0x30
 8008078:	f806 3c01 	strble.w	r3, [r6, #-1]
 800807c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008080:	1b92      	subs	r2, r2, r6
 8008082:	6122      	str	r2, [r4, #16]
 8008084:	f8cd a000 	str.w	sl, [sp]
 8008088:	464b      	mov	r3, r9
 800808a:	aa03      	add	r2, sp, #12
 800808c:	4621      	mov	r1, r4
 800808e:	4640      	mov	r0, r8
 8008090:	f7ff fee6 	bl	8007e60 <_printf_common>
 8008094:	3001      	adds	r0, #1
 8008096:	d14a      	bne.n	800812e <_printf_i+0x1f2>
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	b004      	add	sp, #16
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	f043 0320 	orr.w	r3, r3, #32
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	4833      	ldr	r0, [pc, #204]	@ (8008178 <_printf_i+0x23c>)
 80080ac:	2778      	movs	r7, #120	@ 0x78
 80080ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	6831      	ldr	r1, [r6, #0]
 80080b6:	061f      	lsls	r7, r3, #24
 80080b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80080bc:	d402      	bmi.n	80080c4 <_printf_i+0x188>
 80080be:	065f      	lsls	r7, r3, #25
 80080c0:	bf48      	it	mi
 80080c2:	b2ad      	uxthmi	r5, r5
 80080c4:	6031      	str	r1, [r6, #0]
 80080c6:	07d9      	lsls	r1, r3, #31
 80080c8:	bf44      	itt	mi
 80080ca:	f043 0320 	orrmi.w	r3, r3, #32
 80080ce:	6023      	strmi	r3, [r4, #0]
 80080d0:	b11d      	cbz	r5, 80080da <_printf_i+0x19e>
 80080d2:	2310      	movs	r3, #16
 80080d4:	e7ac      	b.n	8008030 <_printf_i+0xf4>
 80080d6:	4827      	ldr	r0, [pc, #156]	@ (8008174 <_printf_i+0x238>)
 80080d8:	e7e9      	b.n	80080ae <_printf_i+0x172>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	f023 0320 	bic.w	r3, r3, #32
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	e7f6      	b.n	80080d2 <_printf_i+0x196>
 80080e4:	4616      	mov	r6, r2
 80080e6:	e7bd      	b.n	8008064 <_printf_i+0x128>
 80080e8:	6833      	ldr	r3, [r6, #0]
 80080ea:	6825      	ldr	r5, [r4, #0]
 80080ec:	6961      	ldr	r1, [r4, #20]
 80080ee:	1d18      	adds	r0, r3, #4
 80080f0:	6030      	str	r0, [r6, #0]
 80080f2:	062e      	lsls	r6, r5, #24
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	d501      	bpl.n	80080fc <_printf_i+0x1c0>
 80080f8:	6019      	str	r1, [r3, #0]
 80080fa:	e002      	b.n	8008102 <_printf_i+0x1c6>
 80080fc:	0668      	lsls	r0, r5, #25
 80080fe:	d5fb      	bpl.n	80080f8 <_printf_i+0x1bc>
 8008100:	8019      	strh	r1, [r3, #0]
 8008102:	2300      	movs	r3, #0
 8008104:	6123      	str	r3, [r4, #16]
 8008106:	4616      	mov	r6, r2
 8008108:	e7bc      	b.n	8008084 <_printf_i+0x148>
 800810a:	6833      	ldr	r3, [r6, #0]
 800810c:	1d1a      	adds	r2, r3, #4
 800810e:	6032      	str	r2, [r6, #0]
 8008110:	681e      	ldr	r6, [r3, #0]
 8008112:	6862      	ldr	r2, [r4, #4]
 8008114:	2100      	movs	r1, #0
 8008116:	4630      	mov	r0, r6
 8008118:	f7f8 f87a 	bl	8000210 <memchr>
 800811c:	b108      	cbz	r0, 8008122 <_printf_i+0x1e6>
 800811e:	1b80      	subs	r0, r0, r6
 8008120:	6060      	str	r0, [r4, #4]
 8008122:	6863      	ldr	r3, [r4, #4]
 8008124:	6123      	str	r3, [r4, #16]
 8008126:	2300      	movs	r3, #0
 8008128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800812c:	e7aa      	b.n	8008084 <_printf_i+0x148>
 800812e:	6923      	ldr	r3, [r4, #16]
 8008130:	4632      	mov	r2, r6
 8008132:	4649      	mov	r1, r9
 8008134:	4640      	mov	r0, r8
 8008136:	47d0      	blx	sl
 8008138:	3001      	adds	r0, #1
 800813a:	d0ad      	beq.n	8008098 <_printf_i+0x15c>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	079b      	lsls	r3, r3, #30
 8008140:	d413      	bmi.n	800816a <_printf_i+0x22e>
 8008142:	68e0      	ldr	r0, [r4, #12]
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	4298      	cmp	r0, r3
 8008148:	bfb8      	it	lt
 800814a:	4618      	movlt	r0, r3
 800814c:	e7a6      	b.n	800809c <_printf_i+0x160>
 800814e:	2301      	movs	r3, #1
 8008150:	4632      	mov	r2, r6
 8008152:	4649      	mov	r1, r9
 8008154:	4640      	mov	r0, r8
 8008156:	47d0      	blx	sl
 8008158:	3001      	adds	r0, #1
 800815a:	d09d      	beq.n	8008098 <_printf_i+0x15c>
 800815c:	3501      	adds	r5, #1
 800815e:	68e3      	ldr	r3, [r4, #12]
 8008160:	9903      	ldr	r1, [sp, #12]
 8008162:	1a5b      	subs	r3, r3, r1
 8008164:	42ab      	cmp	r3, r5
 8008166:	dcf2      	bgt.n	800814e <_printf_i+0x212>
 8008168:	e7eb      	b.n	8008142 <_printf_i+0x206>
 800816a:	2500      	movs	r5, #0
 800816c:	f104 0619 	add.w	r6, r4, #25
 8008170:	e7f5      	b.n	800815e <_printf_i+0x222>
 8008172:	bf00      	nop
 8008174:	080084dd 	.word	0x080084dd
 8008178:	080084ee 	.word	0x080084ee

0800817c <__sflush_r>:
 800817c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008184:	0716      	lsls	r6, r2, #28
 8008186:	4605      	mov	r5, r0
 8008188:	460c      	mov	r4, r1
 800818a:	d454      	bmi.n	8008236 <__sflush_r+0xba>
 800818c:	684b      	ldr	r3, [r1, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	dc02      	bgt.n	8008198 <__sflush_r+0x1c>
 8008192:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	dd48      	ble.n	800822a <__sflush_r+0xae>
 8008198:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800819a:	2e00      	cmp	r6, #0
 800819c:	d045      	beq.n	800822a <__sflush_r+0xae>
 800819e:	2300      	movs	r3, #0
 80081a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80081a4:	682f      	ldr	r7, [r5, #0]
 80081a6:	6a21      	ldr	r1, [r4, #32]
 80081a8:	602b      	str	r3, [r5, #0]
 80081aa:	d030      	beq.n	800820e <__sflush_r+0x92>
 80081ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	0759      	lsls	r1, r3, #29
 80081b2:	d505      	bpl.n	80081c0 <__sflush_r+0x44>
 80081b4:	6863      	ldr	r3, [r4, #4]
 80081b6:	1ad2      	subs	r2, r2, r3
 80081b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081ba:	b10b      	cbz	r3, 80081c0 <__sflush_r+0x44>
 80081bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081c4:	6a21      	ldr	r1, [r4, #32]
 80081c6:	4628      	mov	r0, r5
 80081c8:	47b0      	blx	r6
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	d106      	bne.n	80081de <__sflush_r+0x62>
 80081d0:	6829      	ldr	r1, [r5, #0]
 80081d2:	291d      	cmp	r1, #29
 80081d4:	d82b      	bhi.n	800822e <__sflush_r+0xb2>
 80081d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008280 <__sflush_r+0x104>)
 80081d8:	410a      	asrs	r2, r1
 80081da:	07d6      	lsls	r6, r2, #31
 80081dc:	d427      	bmi.n	800822e <__sflush_r+0xb2>
 80081de:	2200      	movs	r2, #0
 80081e0:	6062      	str	r2, [r4, #4]
 80081e2:	04d9      	lsls	r1, r3, #19
 80081e4:	6922      	ldr	r2, [r4, #16]
 80081e6:	6022      	str	r2, [r4, #0]
 80081e8:	d504      	bpl.n	80081f4 <__sflush_r+0x78>
 80081ea:	1c42      	adds	r2, r0, #1
 80081ec:	d101      	bne.n	80081f2 <__sflush_r+0x76>
 80081ee:	682b      	ldr	r3, [r5, #0]
 80081f0:	b903      	cbnz	r3, 80081f4 <__sflush_r+0x78>
 80081f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80081f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081f6:	602f      	str	r7, [r5, #0]
 80081f8:	b1b9      	cbz	r1, 800822a <__sflush_r+0xae>
 80081fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081fe:	4299      	cmp	r1, r3
 8008200:	d002      	beq.n	8008208 <__sflush_r+0x8c>
 8008202:	4628      	mov	r0, r5
 8008204:	f7ff fbf2 	bl	80079ec <_free_r>
 8008208:	2300      	movs	r3, #0
 800820a:	6363      	str	r3, [r4, #52]	@ 0x34
 800820c:	e00d      	b.n	800822a <__sflush_r+0xae>
 800820e:	2301      	movs	r3, #1
 8008210:	4628      	mov	r0, r5
 8008212:	47b0      	blx	r6
 8008214:	4602      	mov	r2, r0
 8008216:	1c50      	adds	r0, r2, #1
 8008218:	d1c9      	bne.n	80081ae <__sflush_r+0x32>
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0c6      	beq.n	80081ae <__sflush_r+0x32>
 8008220:	2b1d      	cmp	r3, #29
 8008222:	d001      	beq.n	8008228 <__sflush_r+0xac>
 8008224:	2b16      	cmp	r3, #22
 8008226:	d11e      	bne.n	8008266 <__sflush_r+0xea>
 8008228:	602f      	str	r7, [r5, #0]
 800822a:	2000      	movs	r0, #0
 800822c:	e022      	b.n	8008274 <__sflush_r+0xf8>
 800822e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008232:	b21b      	sxth	r3, r3
 8008234:	e01b      	b.n	800826e <__sflush_r+0xf2>
 8008236:	690f      	ldr	r7, [r1, #16]
 8008238:	2f00      	cmp	r7, #0
 800823a:	d0f6      	beq.n	800822a <__sflush_r+0xae>
 800823c:	0793      	lsls	r3, r2, #30
 800823e:	680e      	ldr	r6, [r1, #0]
 8008240:	bf08      	it	eq
 8008242:	694b      	ldreq	r3, [r1, #20]
 8008244:	600f      	str	r7, [r1, #0]
 8008246:	bf18      	it	ne
 8008248:	2300      	movne	r3, #0
 800824a:	eba6 0807 	sub.w	r8, r6, r7
 800824e:	608b      	str	r3, [r1, #8]
 8008250:	f1b8 0f00 	cmp.w	r8, #0
 8008254:	dde9      	ble.n	800822a <__sflush_r+0xae>
 8008256:	6a21      	ldr	r1, [r4, #32]
 8008258:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800825a:	4643      	mov	r3, r8
 800825c:	463a      	mov	r2, r7
 800825e:	4628      	mov	r0, r5
 8008260:	47b0      	blx	r6
 8008262:	2800      	cmp	r0, #0
 8008264:	dc08      	bgt.n	8008278 <__sflush_r+0xfc>
 8008266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800826a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800826e:	81a3      	strh	r3, [r4, #12]
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008278:	4407      	add	r7, r0
 800827a:	eba8 0800 	sub.w	r8, r8, r0
 800827e:	e7e7      	b.n	8008250 <__sflush_r+0xd4>
 8008280:	dfbffffe 	.word	0xdfbffffe

08008284 <_fflush_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	690b      	ldr	r3, [r1, #16]
 8008288:	4605      	mov	r5, r0
 800828a:	460c      	mov	r4, r1
 800828c:	b913      	cbnz	r3, 8008294 <_fflush_r+0x10>
 800828e:	2500      	movs	r5, #0
 8008290:	4628      	mov	r0, r5
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	b118      	cbz	r0, 800829e <_fflush_r+0x1a>
 8008296:	6a03      	ldr	r3, [r0, #32]
 8008298:	b90b      	cbnz	r3, 800829e <_fflush_r+0x1a>
 800829a:	f7ff f9ad 	bl	80075f8 <__sinit>
 800829e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0f3      	beq.n	800828e <_fflush_r+0xa>
 80082a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80082a8:	07d0      	lsls	r0, r2, #31
 80082aa:	d404      	bmi.n	80082b6 <_fflush_r+0x32>
 80082ac:	0599      	lsls	r1, r3, #22
 80082ae:	d402      	bmi.n	80082b6 <_fflush_r+0x32>
 80082b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082b2:	f7ff fb98 	bl	80079e6 <__retarget_lock_acquire_recursive>
 80082b6:	4628      	mov	r0, r5
 80082b8:	4621      	mov	r1, r4
 80082ba:	f7ff ff5f 	bl	800817c <__sflush_r>
 80082be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082c0:	07da      	lsls	r2, r3, #31
 80082c2:	4605      	mov	r5, r0
 80082c4:	d4e4      	bmi.n	8008290 <_fflush_r+0xc>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	059b      	lsls	r3, r3, #22
 80082ca:	d4e1      	bmi.n	8008290 <_fflush_r+0xc>
 80082cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ce:	f7ff fb8b 	bl	80079e8 <__retarget_lock_release_recursive>
 80082d2:	e7dd      	b.n	8008290 <_fflush_r+0xc>

080082d4 <__swhatbuf_r>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	460c      	mov	r4, r1
 80082d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082dc:	2900      	cmp	r1, #0
 80082de:	b096      	sub	sp, #88	@ 0x58
 80082e0:	4615      	mov	r5, r2
 80082e2:	461e      	mov	r6, r3
 80082e4:	da0d      	bge.n	8008302 <__swhatbuf_r+0x2e>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082ec:	f04f 0100 	mov.w	r1, #0
 80082f0:	bf14      	ite	ne
 80082f2:	2340      	movne	r3, #64	@ 0x40
 80082f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082f8:	2000      	movs	r0, #0
 80082fa:	6031      	str	r1, [r6, #0]
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	b016      	add	sp, #88	@ 0x58
 8008300:	bd70      	pop	{r4, r5, r6, pc}
 8008302:	466a      	mov	r2, sp
 8008304:	f000 f848 	bl	8008398 <_fstat_r>
 8008308:	2800      	cmp	r0, #0
 800830a:	dbec      	blt.n	80082e6 <__swhatbuf_r+0x12>
 800830c:	9901      	ldr	r1, [sp, #4]
 800830e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008312:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008316:	4259      	negs	r1, r3
 8008318:	4159      	adcs	r1, r3
 800831a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800831e:	e7eb      	b.n	80082f8 <__swhatbuf_r+0x24>

08008320 <__smakebuf_r>:
 8008320:	898b      	ldrh	r3, [r1, #12]
 8008322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008324:	079d      	lsls	r5, r3, #30
 8008326:	4606      	mov	r6, r0
 8008328:	460c      	mov	r4, r1
 800832a:	d507      	bpl.n	800833c <__smakebuf_r+0x1c>
 800832c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	6123      	str	r3, [r4, #16]
 8008334:	2301      	movs	r3, #1
 8008336:	6163      	str	r3, [r4, #20]
 8008338:	b003      	add	sp, #12
 800833a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800833c:	ab01      	add	r3, sp, #4
 800833e:	466a      	mov	r2, sp
 8008340:	f7ff ffc8 	bl	80082d4 <__swhatbuf_r>
 8008344:	9f00      	ldr	r7, [sp, #0]
 8008346:	4605      	mov	r5, r0
 8008348:	4639      	mov	r1, r7
 800834a:	4630      	mov	r0, r6
 800834c:	f7ff fbba 	bl	8007ac4 <_malloc_r>
 8008350:	b948      	cbnz	r0, 8008366 <__smakebuf_r+0x46>
 8008352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008356:	059a      	lsls	r2, r3, #22
 8008358:	d4ee      	bmi.n	8008338 <__smakebuf_r+0x18>
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	f043 0302 	orr.w	r3, r3, #2
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	e7e2      	b.n	800832c <__smakebuf_r+0xc>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	6020      	str	r0, [r4, #0]
 800836a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800836e:	81a3      	strh	r3, [r4, #12]
 8008370:	9b01      	ldr	r3, [sp, #4]
 8008372:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008376:	b15b      	cbz	r3, 8008390 <__smakebuf_r+0x70>
 8008378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800837c:	4630      	mov	r0, r6
 800837e:	f000 f81d 	bl	80083bc <_isatty_r>
 8008382:	b128      	cbz	r0, 8008390 <__smakebuf_r+0x70>
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	431d      	orrs	r5, r3
 8008394:	81a5      	strh	r5, [r4, #12]
 8008396:	e7cf      	b.n	8008338 <__smakebuf_r+0x18>

08008398 <_fstat_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d07      	ldr	r5, [pc, #28]	@ (80083b8 <_fstat_r+0x20>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	602b      	str	r3, [r5, #0]
 80083a6:	f7fa febe 	bl	8003126 <_fstat>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	d102      	bne.n	80083b4 <_fstat_r+0x1c>
 80083ae:	682b      	ldr	r3, [r5, #0]
 80083b0:	b103      	cbz	r3, 80083b4 <_fstat_r+0x1c>
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	bd38      	pop	{r3, r4, r5, pc}
 80083b6:	bf00      	nop
 80083b8:	2000067c 	.word	0x2000067c

080083bc <_isatty_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d06      	ldr	r5, [pc, #24]	@ (80083d8 <_isatty_r+0x1c>)
 80083c0:	2300      	movs	r3, #0
 80083c2:	4604      	mov	r4, r0
 80083c4:	4608      	mov	r0, r1
 80083c6:	602b      	str	r3, [r5, #0]
 80083c8:	f7fa febd 	bl	8003146 <_isatty>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_isatty_r+0x1a>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_isatty_r+0x1a>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	2000067c 	.word	0x2000067c

080083dc <_sbrk_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4d06      	ldr	r5, [pc, #24]	@ (80083f8 <_sbrk_r+0x1c>)
 80083e0:	2300      	movs	r3, #0
 80083e2:	4604      	mov	r4, r0
 80083e4:	4608      	mov	r0, r1
 80083e6:	602b      	str	r3, [r5, #0]
 80083e8:	f7fa fec6 	bl	8003178 <_sbrk>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d102      	bne.n	80083f6 <_sbrk_r+0x1a>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	b103      	cbz	r3, 80083f6 <_sbrk_r+0x1a>
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	2000067c 	.word	0x2000067c

080083fc <_init>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	bf00      	nop
 8008400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008402:	bc08      	pop	{r3}
 8008404:	469e      	mov	lr, r3
 8008406:	4770      	bx	lr

08008408 <_fini>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	bf00      	nop
 800840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840e:	bc08      	pop	{r3}
 8008410:	469e      	mov	lr, r3
 8008412:	4770      	bx	lr
