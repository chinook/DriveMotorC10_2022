
DriveMoteurC10_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080052b4  080052b4  000062b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c4  080052c4  00007050  2**0
                  CONTENTS
  4 .ARM          00000008  080052c4  080052c4  000062c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052cc  080052cc  00007050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080052d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000050  08005324  00007050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08005324  000072ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee5e  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002354  00000000  00000000  00015ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00018238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b41  00000000  00000000  000190b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022843  00000000  00000000  00019bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100f9  00000000  00000000  0003c43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3fa5  00000000  00000000  0004c535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001204da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d48  00000000  00000000  00120520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00124268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000050 	.word	0x20000050
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800529c 	.word	0x0800529c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000054 	.word	0x20000054
 8000200:	0800529c 	.word	0x0800529c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ExecuteStateMachine>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t flag_buttons = 0;

void ExecuteStateMachine() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	// Check timers

	if (timer50ms_flag) {
 80004f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000630 <ExecuteStateMachine+0x13c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d016      	beq.n	800052e <ExecuteStateMachine+0x3a>
		timer50ms_flag = 0;
 8000500:	4b4b      	ldr	r3, [pc, #300]	@ (8000630 <ExecuteStateMachine+0x13c>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]

		flag_buttons = 1;
 8000506:	4b4b      	ldr	r3, [pc, #300]	@ (8000634 <ExecuteStateMachine+0x140>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
		flag_can_tx_send = 1;
 800050c:	4b4a      	ldr	r3, [pc, #296]	@ (8000638 <ExecuteStateMachine+0x144>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
		flag_pitch_control = 1;
 8000512:	4b4a      	ldr	r3, [pc, #296]	@ (800063c <ExecuteStateMachine+0x148>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
		flag_mast_control = 1;
 8000518:	4b49      	ldr	r3, [pc, #292]	@ (8000640 <ExecuteStateMachine+0x14c>)
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]

		if (flag_drive_fault == 1) {
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <ExecuteStateMachine+0x150>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d103      	bne.n	800052e <ExecuteStateMachine+0x3a>
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 8000526:	2108      	movs	r1, #8
 8000528:	4847      	ldr	r0, [pc, #284]	@ (8000648 <ExecuteStateMachine+0x154>)
 800052a:	f003 f85e 	bl	80035ea <HAL_GPIO_TogglePin>
		}
	}
	if (timer100ms_flag) {
 800052e:	4b47      	ldr	r3, [pc, #284]	@ (800064c <ExecuteStateMachine+0x158>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <ExecuteStateMachine+0x48>
		timer100ms_flag = 0;
 8000536:	4b45      	ldr	r3, [pc, #276]	@ (800064c <ExecuteStateMachine+0x158>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]

	}

	if (timer250ms_flag) {
 800053c:	4b44      	ldr	r3, [pc, #272]	@ (8000650 <ExecuteStateMachine+0x15c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <ExecuteStateMachine+0x56>
		timer250ms_flag = 0;
 8000544:	4b42      	ldr	r3, [pc, #264]	@ (8000650 <ExecuteStateMachine+0x15c>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]

	}

	if (timer500ms_flag) {
 800054a:	4b42      	ldr	r3, [pc, #264]	@ (8000654 <ExecuteStateMachine+0x160>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00a      	beq.n	8000568 <ExecuteStateMachine+0x74>
		timer500ms_flag = 0;
 8000552:	4b40      	ldr	r3, [pc, #256]	@ (8000654 <ExecuteStateMachine+0x160>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]

		if (flag_drive_fault == 0) {
 8000558:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <ExecuteStateMachine+0x150>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <ExecuteStateMachine+0x74>
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 8000560:	2108      	movs	r1, #8
 8000562:	4839      	ldr	r0, [pc, #228]	@ (8000648 <ExecuteStateMachine+0x154>)
 8000564:	f003 f841 	bl	80035ea <HAL_GPIO_TogglePin>
		}
	}

	// Check for ROPS or emergency stop flags
	if (b_rops) {
 8000568:	4b3b      	ldr	r3, [pc, #236]	@ (8000658 <ExecuteStateMachine+0x164>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <ExecuteStateMachine+0x82>
		current_state = STATE_ROPS;
 8000570:	4b3a      	ldr	r3, [pc, #232]	@ (800065c <ExecuteStateMachine+0x168>)
 8000572:	2205      	movs	r2, #5
 8000574:	601a      	str	r2, [r3, #0]
	}
	if (b_emergency_stop) {
 8000576:	4b3a      	ldr	r3, [pc, #232]	@ (8000660 <ExecuteStateMachine+0x16c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <ExecuteStateMachine+0x90>
		current_state = STATE_EMERGENCY_STOP;
 800057e:	4b37      	ldr	r3, [pc, #220]	@ (800065c <ExecuteStateMachine+0x168>)
 8000580:	2206      	movs	r2, #6
 8000582:	601a      	str	r2, [r3, #0]
	}

	switch (current_state) {
 8000584:	4b35      	ldr	r3, [pc, #212]	@ (800065c <ExecuteStateMachine+0x168>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b06      	cmp	r3, #6
 800058a:	d813      	bhi.n	80005b4 <ExecuteStateMachine+0xc0>
 800058c:	2b06      	cmp	r3, #6
 800058e:	d846      	bhi.n	800061e <ExecuteStateMachine+0x12a>
 8000590:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <ExecuteStateMachine+0xa4>)
 8000592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000596:	bf00      	nop
 8000598:	080005bb 	.word	0x080005bb
 800059c:	080005c7 	.word	0x080005c7
 80005a0:	080005d3 	.word	0x080005d3
 80005a4:	080005df 	.word	0x080005df
 80005a8:	080005eb 	.word	0x080005eb
 80005ac:	080005f7 	.word	0x080005f7
 80005b0:	08000603 	.word	0x08000603
 80005b4:	2bff      	cmp	r3, #255	@ 0xff
 80005b6:	d02a      	beq.n	800060e <ExecuteStateMachine+0x11a>
 80005b8:	e031      	b.n	800061e <ExecuteStateMachine+0x12a>
	case STATE_INIT:
		current_state = DoStateInit();
 80005ba:	f000 f853 	bl	8000664 <DoStateInit>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a26      	ldr	r2, [pc, #152]	@ (800065c <ExecuteStateMachine+0x168>)
 80005c2:	6013      	str	r3, [r2, #0]
		break;
 80005c4:	e031      	b.n	800062a <ExecuteStateMachine+0x136>

	case STATE_ASSESS_PUSH_BUTTONS:
		current_state = DoStateAssessPushButtons();
 80005c6:	f000 f8b1 	bl	800072c <DoStateAssessPushButtons>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a23      	ldr	r2, [pc, #140]	@ (800065c <ExecuteStateMachine+0x168>)
 80005ce:	6013      	str	r3, [r2, #0]
		break;
 80005d0:	e02b      	b.n	800062a <ExecuteStateMachine+0x136>

	case STATE_PITCH_CONTROL:
		current_state = DoStatePitchControl();
 80005d2:	f000 f8e7 	bl	80007a4 <DoStatePitchControl>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <ExecuteStateMachine+0x168>)
 80005da:	6013      	str	r3, [r2, #0]
		break;
 80005dc:	e025      	b.n	800062a <ExecuteStateMachine+0x136>

	case STATE_MAST_CONTROL:
		current_state = DoStateMastControl();
 80005de:	f000 f8e9 	bl	80007b4 <DoStateMastControl>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a1d      	ldr	r2, [pc, #116]	@ (800065c <ExecuteStateMachine+0x168>)
 80005e6:	6013      	str	r3, [r2, #0]
		break;
 80005e8:	e01f      	b.n	800062a <ExecuteStateMachine+0x136>

	case STATE_CAN:
		current_state = DoStateCAN();
 80005ea:	f000 f8f5 	bl	80007d8 <DoStateCAN>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a1a      	ldr	r2, [pc, #104]	@ (800065c <ExecuteStateMachine+0x168>)
 80005f2:	6013      	str	r3, [r2, #0]
		break;
 80005f4:	e019      	b.n	800062a <ExecuteStateMachine+0x136>

	case STATE_ROPS:
		current_state = DoStateROPS();
 80005f6:	f000 f941 	bl	800087c <DoStateROPS>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a17      	ldr	r2, [pc, #92]	@ (800065c <ExecuteStateMachine+0x168>)
 80005fe:	6013      	str	r3, [r2, #0]
		break;
 8000600:	e013      	b.n	800062a <ExecuteStateMachine+0x136>

	case STATE_EMERGENCY_STOP:
		current_state = DoStateEmergencyStop();
 8000602:	f000 f989 	bl	8000918 <DoStateEmergencyStop>
 8000606:	4603      	mov	r3, r0
 8000608:	4a14      	ldr	r2, [pc, #80]	@ (800065c <ExecuteStateMachine+0x168>)
 800060a:	6013      	str	r3, [r2, #0]
		break;
 800060c:	e00d      	b.n	800062a <ExecuteStateMachine+0x136>

	case STATE_ERROR:
		DoStateError();
 800060e:	f000 f993 	bl	8000938 <DoStateError>
		// In case we exit error handler, restart the state machine
		current_state = DoStateInit();
 8000612:	f000 f827 	bl	8000664 <DoStateInit>
 8000616:	4603      	mov	r3, r0
 8000618:	4a10      	ldr	r2, [pc, #64]	@ (800065c <ExecuteStateMachine+0x168>)
 800061a:	6013      	str	r3, [r2, #0]
		break;
 800061c:	e005      	b.n	800062a <ExecuteStateMachine+0x136>

	default:
		current_state = DoStateInit();
 800061e:	f000 f821 	bl	8000664 <DoStateInit>
 8000622:	4603      	mov	r3, r0
 8000624:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <ExecuteStateMachine+0x168>)
 8000626:	6013      	str	r3, [r2, #0]
		break;
 8000628:	bf00      	nop
	};
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000029c 	.word	0x2000029c
 8000634:	20000254 	.word	0x20000254
 8000638:	200001c6 	.word	0x200001c6
 800063c:	200001c7 	.word	0x200001c7
 8000640:	200001c8 	.word	0x200001c8
 8000644:	20000292 	.word	0x20000292
 8000648:	40020c00 	.word	0x40020c00
 800064c:	2000029d 	.word	0x2000029d
 8000650:	2000029e 	.word	0x2000029e
 8000654:	2000029f 	.word	0x2000029f
 8000658:	200001c4 	.word	0x200001c4
 800065c:	20000210 	.word	0x20000210
 8000660:	200001c5 	.word	0x200001c5

08000664 <DoStateInit>:

uint32_t DoStateInit() {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	b_rops = 0;
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <DoStateInit+0xa8>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
	b_emergency_stop = 0;
 800066e:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <DoStateInit+0xac>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]

	flag_can_tx_send = 0;
 8000674:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <DoStateInit+0xb0>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]

	can1_recv_flag = 0;
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <DoStateInit+0xb4>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
	flag_can_tx_send = 0;
 8000680:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <DoStateInit+0xb0>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]

	flag_send_drive_pitch_config = 0;
 8000686:	4b25      	ldr	r3, [pc, #148]	@ (800071c <DoStateInit+0xb8>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	flag_send_drive_mast_config = 0;
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <DoStateInit+0xbc>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]

	memset(&can_tx_data, 0, sizeof(CAN_TX_Data));
 8000692:	221c      	movs	r2, #28
 8000694:	2100      	movs	r1, #0
 8000696:	4823      	ldr	r0, [pc, #140]	@ (8000724 <DoStateInit+0xc0>)
 8000698:	f004 fdd4 	bl	8005244 <memset>

	InitDrives();
 800069c:	f000 fe10 	bl	80012c0 <InitDrives>

	// Initialize the motor control values
	motorss.motors[DRIVE1].enabled = 0;
 80006a0:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <DoStateInit+0xc4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	motorss.motors[DRIVE1].request_enable = 0;
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <DoStateInit+0xc4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	705a      	strb	r2, [r3, #1]
	motorss.motors[DRIVE1].request_disable = 0;
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <DoStateInit+0xc4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	709a      	strb	r2, [r3, #2]
	motorss.motors[DRIVE1].mode = MODE_MANUAL;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <DoStateInit+0xc4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	70da      	strb	r2, [r3, #3]
	motorss.motors[DRIVE1].auto_command = 0;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <DoStateInit+0xc4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
	motorss.motors[DRIVE1].manual_command = 0;
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <DoStateInit+0xc4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
	motorss.motors[DRIVE1].direction = DIR_STOP;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <DoStateInit+0xc4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	711a      	strb	r2, [r3, #4]
	motorss.motors[DRIVE1].prev_direction = DIR_STOP;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <DoStateInit+0xc4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	715a      	strb	r2, [r3, #5]

	motorss.motors[DRIVE1].enabled = 0;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <DoStateInit+0xc4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
	motorss.motors[DRIVE1].request_enable = 0;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <DoStateInit+0xc4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	705a      	strb	r2, [r3, #1]
	motorss.motors[DRIVE1].request_disable = 0;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <DoStateInit+0xc4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	709a      	strb	r2, [r3, #2]
	motorss.motors[DRIVE1].mode = MODE_MANUAL;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <DoStateInit+0xc4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	70da      	strb	r2, [r3, #3]
	motorss.motors[DRIVE1].auto_command = 0;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <DoStateInit+0xc4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
	motorss.motors[DRIVE1].manual_command = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <DoStateInit+0xc4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
	motorss.motors[DRIVE1].direction = DIR_STOP;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <DoStateInit+0xc4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	711a      	strb	r2, [r3, #4]
	motorss.motors[DRIVE1].prev_direction = DIR_STOP;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <DoStateInit+0xc4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	715a      	strb	r2, [r3, #5]

	motorss.motors[DRIVE1].enabled = 0;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <DoStateInit+0xc4>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]

	return STATE_ASSESS_PUSH_BUTTONS;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200001c4 	.word	0x200001c4
 8000710:	200001c5 	.word	0x200001c5
 8000714:	200001c6 	.word	0x200001c6
 8000718:	200001d8 	.word	0x200001d8
 800071c:	200001c9 	.word	0x200001c9
 8000720:	200001ca 	.word	0x200001ca
 8000724:	20000214 	.word	0x20000214
 8000728:	20000230 	.word	0x20000230

0800072c <DoStateAssessPushButtons>:

uint32_t DoStateAssessPushButtons() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if (1) {
		flag_buttons = 0;
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <DoStateAssessPushButtons+0x60>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]

		//CheckDriveStatusRegister(DRIVE1);
		if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) == GPIO_PIN_RESET) {
 8000736:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073a:	4815      	ldr	r0, [pc, #84]	@ (8000790 <DoStateAssessPushButtons+0x64>)
 800073c:	f002 ff24 	bl	8003588 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10d      	bne.n	8000762 <DoStateAssessPushButtons+0x36>
			motor_pitch_on = 0;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <DoStateAssessPushButtons+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2104      	movs	r1, #4
 8000750:	4811      	ldr	r0, [pc, #68]	@ (8000798 <DoStateAssessPushButtons+0x6c>)
 8000752:	f002 ff31 	bl	80035b8 <HAL_GPIO_WritePin>
			flag_drive_fault = 0;
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <DoStateAssessPushButtons+0x70>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]

			//ResetDriveStatusRegister(DRIVE1);
			//DisableDrive(DRIVE1);

			InitDrives();
 800075c:	f000 fdb0 	bl	80012c0 <InitDrives>
 8000760:	e011      	b.n	8000786 <DoStateAssessPushButtons+0x5a>

		} else if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin) == GPIO_PIN_RESET) {
 8000762:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000766:	480a      	ldr	r0, [pc, #40]	@ (8000790 <DoStateAssessPushButtons+0x64>)
 8000768:	f002 ff0e 	bl	8003588 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d109      	bne.n	8000786 <DoStateAssessPushButtons+0x5a>
			EnableDrive(DRIVE1);
 8000772:	2000      	movs	r0, #0
 8000774:	f001 f8a8 	bl	80018c8 <EnableDrive>
			DirectionDrive(DRIVE1, 0);
 8000778:	2100      	movs	r1, #0
 800077a:	2000      	movs	r0, #0
 800077c:	f001 f8d8 	bl	8001930 <DirectionDrive>

			HAL_TIM_Base_Start_IT(&htim4); // motor_pitch_on = 1 after 3ms
 8000780:	4807      	ldr	r0, [pc, #28]	@ (80007a0 <DoStateAssessPushButtons+0x74>)
 8000782:	f004 f935 	bl	80049f0 <HAL_TIM_Base_Start_IT>
		 speed_stepper_motor_pitch--;
		 }
		 }*/
	}

	return STATE_PITCH_CONTROL;
 8000786:	2302      	movs	r3, #2
}
 8000788:	4618      	mov	r0, r3
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000254 	.word	0x20000254
 8000790:	40021000 	.word	0x40021000
 8000794:	20000280 	.word	0x20000280
 8000798:	40020c00 	.word	0x40020c00
 800079c:	20000292 	.word	0x20000292
 80007a0:	2000017c 	.word	0x2000017c

080007a4 <DoStatePitchControl>:

uint32_t DoStatePitchControl() {
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

	return STATE_MAST_CONTROL;
 80007a8:	2303      	movs	r3, #3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <DoStateMastControl>:

uint32_t DoStateMastControl() {
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	if (flag_mast_control == 1) {
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <DoStateMastControl+0x20>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d102      	bne.n	80007c6 <DoStateMastControl+0x12>
		flag_mast_control = 0;
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <DoStateMastControl+0x20>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]

	}
	return STATE_CAN;
 80007c6:	2304      	movs	r3, #4
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	200001c8 	.word	0x200001c8

080007d8 <DoStateCAN>:

uint32_t DoStateCAN() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
	if (flag_can_tx_send) // Sent every 50ms
 80007de:	4b23      	ldr	r3, [pc, #140]	@ (800086c <DoStateCAN+0x94>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d03d      	beq.n	8000862 <DoStateCAN+0x8a>
	{
		flag_can_tx_send = 0;
 80007e6:	4b21      	ldr	r3, [pc, #132]	@ (800086c <DoStateCAN+0x94>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]

		uint32_t pitch_mode = can_tx_data.pitch_motor_mode_feedback;
 80007ec:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <DoStateCAN+0x98>)
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	60fb      	str	r3, [r7, #12]
		uint32_t pitch_mode_msg = ((pitch_mode == MODE_MANUAL) ?
		MOTOR_MODE_MANUAL :
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <DoStateCAN+0x24>
 80007f8:	2300      	movs	r3, #0
 80007fa:	e000      	b.n	80007fe <DoStateCAN+0x26>
 80007fc:	2302      	movs	r3, #2
		uint32_t pitch_mode_msg = ((pitch_mode == MODE_MANUAL) ?
 80007fe:	607b      	str	r3, [r7, #4]
																	MOTOR_MODE_AUTOMATIC);
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_PITCH_MODE, (uint8_t*) &pitch_mode_msg, 4, 0);
 8000800:	1d39      	adds	r1, r7, #4
 8000802:	2300      	movs	r3, #0
 8000804:	2204      	movs	r2, #4
 8000806:	2021      	movs	r0, #33	@ 0x21
 8000808:	f000 f9b0 	bl	8000b6c <TransmitCAN>

		uint32_t mast_mode = can_tx_data.mast_motor_mode_feedback;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <DoStateCAN+0x98>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	60bb      	str	r3, [r7, #8]
		uint32_t mast_mode_msg = ((mast_mode == MODE_MANUAL) ?
		MOTOR_MODE_MANUAL :
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <DoStateCAN+0x44>
 8000818:	2300      	movs	r3, #0
 800081a:	e000      	b.n	800081e <DoStateCAN+0x46>
 800081c:	2302      	movs	r3, #2
		uint32_t mast_mode_msg = ((mast_mode == MODE_MANUAL) ?
 800081e:	603b      	str	r3, [r7, #0]
																MOTOR_MODE_AUTOMATIC);
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_MAST_MODE, (uint8_t*) &mast_mode_msg, 4, 0);
 8000820:	4639      	mov	r1, r7
 8000822:	2300      	movs	r3, #0
 8000824:	2204      	movs	r2, #4
 8000826:	2022      	movs	r0, #34	@ 0x22
 8000828:	f000 f9a0 	bl	8000b6c <TransmitCAN>

		static float test = 0;
		static float debug_log_4_value = 0;
		debug_log_4_value = debug_log_4_value + test;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <DoStateCAN+0x9c>)
 800082e:	ed93 7a00 	vldr	s14, [r3]
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <DoStateCAN+0xa0>)
 8000834:	edd3 7a00 	vldr	s15, [r3]
 8000838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800083c:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <DoStateCAN+0x9c>)
 800083e:	edc3 7a00 	vstr	s15, [r3]
		TransmitCAN(CAN_ID_MARIO_VAL_DEBUG_LOG_4, (uint8_t*) &debug_log_4_value, 4, 0);
 8000842:	2300      	movs	r3, #0
 8000844:	2204      	movs	r2, #4
 8000846:	490b      	ldr	r1, [pc, #44]	@ (8000874 <DoStateCAN+0x9c>)
 8000848:	204f      	movs	r0, #79	@ 0x4f
 800084a:	f000 f98f 	bl	8000b6c <TransmitCAN>
		test++;
 800084e:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <DoStateCAN+0xa0>)
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <DoStateCAN+0xa0>)
 800085e:	edc3 7a00 	vstr	s15, [r3]
		 */

	}

	// return STATE_PITCH_CONTROL;
	return STATE_ASSESS_PUSH_BUTTONS;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001c6 	.word	0x200001c6
 8000870:	20000214 	.word	0x20000214
 8000874:	20000258 	.word	0x20000258
 8000878:	2000025c 	.word	0x2000025c

0800087c <DoStateROPS>:

uint32_t DoStateROPS() {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	while (b_rops) {
 8000880:	e030      	b.n	80008e4 <DoStateROPS+0x68>
		//delay_us(10);
		if (timer50ms_flag) {
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <DoStateROPS+0x78>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d008      	beq.n	800089c <DoStateROPS+0x20>
			timer50ms_flag = 0;
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <DoStateROPS+0x78>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]

			flag_pitch_control = 1;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <DoStateROPS+0x7c>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
			flag_mast_control = 1;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <DoStateROPS+0x80>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
			// flag_can_tx_send = 1;
		}
		if (timer100ms_flag) {
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <DoStateROPS+0x84>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <DoStateROPS+0x2e>
			timer100ms_flag = 0;
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <DoStateROPS+0x84>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

		}

		if (timer250ms_flag) {
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <DoStateROPS+0x88>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d005      	beq.n	80008be <DoStateROPS+0x42>
			timer250ms_flag = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <DoStateROPS+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]

			flag_can_tx_send = 1;
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <DoStateROPS+0x8c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
		}
// Check timers
		if (timer500ms_flag) {
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <DoStateROPS+0x90>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d006      	beq.n	80008d4 <DoStateROPS+0x58>
			timer500ms_flag = 0;
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <DoStateROPS+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 80008cc:	2108      	movs	r1, #8
 80008ce:	4810      	ldr	r0, [pc, #64]	@ (8000910 <DoStateROPS+0x94>)
 80008d0:	f002 fe8b 	bl	80035ea <HAL_GPIO_TogglePin>
		// Safety check, if we have a command from MARIO, make sure drive is enabled
		//if (motors.motors[DRIVE_PITCH].auto_command && !motors.motors[DRIVE_PITCH].enabled)
		//	motors.motors[DRIVE_PITCH].request_enable = 1;
		//motors.motors[DRIVE_PITCH].mode = MODE_AUTOMATIC;

		DoStateAssessPushButtons();
 80008d4:	f7ff ff2a 	bl	800072c <DoStateAssessPushButtons>
		DoStatePitchControl();
 80008d8:	f7ff ff64 	bl	80007a4 <DoStatePitchControl>
		DoStateMastControl();
 80008dc:	f7ff ff6a 	bl	80007b4 <DoStateMastControl>
		DoStateCAN();
 80008e0:	f7ff ff7a 	bl	80007d8 <DoStateCAN>
	while (b_rops) {
 80008e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <DoStateROPS+0x98>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1ca      	bne.n	8000882 <DoStateROPS+0x6>
	}

	return STATE_PITCH_CONTROL;
 80008ec:	2302      	movs	r3, #2
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000029c 	.word	0x2000029c
 80008f8:	200001c7 	.word	0x200001c7
 80008fc:	200001c8 	.word	0x200001c8
 8000900:	2000029d 	.word	0x2000029d
 8000904:	2000029e 	.word	0x2000029e
 8000908:	200001c6 	.word	0x200001c6
 800090c:	2000029f 	.word	0x2000029f
 8000910:	40020c00 	.word	0x40020c00
 8000914:	200001c4 	.word	0x200001c4

08000918 <DoStateEmergencyStop>:

uint32_t DoStateEmergencyStop() {
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	while (b_emergency_stop) {
 800091c:	bf00      	nop
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <DoStateEmergencyStop+0x1c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1fb      	bne.n	800091e <DoStateEmergencyStop+0x6>

	}

	return STATE_PITCH_CONTROL;
 8000926:	2302      	movs	r3, #2
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	200001c5 	.word	0x200001c5

08000938 <DoStateError>:

void DoStateError() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	Error_Handler();
 800093c:	f000 fcba 	bl	80012b4 <Error_Handler>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <SetMotorMode>:

//uint16_t test_debug_log_can_message[200] = {0};
//uint8_t test_debug_log_can_message_counter = 0;
void SetMotorMode(DRIVE_MOTOR motor, uint32_t can_value) {
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	603b      	str	r3, [r7, #0]
	 } else {
	 test_debug_log_can_message_counter++;
	 }
	 test_debug_log_can_message[test_debug_log_can_message_counter] = can_value; */

	uint32_t motor_mode = MODE_MANUAL;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_MODE_MANUAL) {
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <SetMotorMode+0x22>
		motor_mode = MODE_MANUAL;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e004      	b.n	8000970 <SetMotorMode+0x2c>
	} else if (can_value == MOTOR_MODE_AUTOMATIC) {
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d10b      	bne.n	8000984 <SetMotorMode+0x40>
		motor_mode = MODE_AUTOMATIC;
 800096c:	2301      	movs	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
	} else {
		return; // Do not set motor mode if mode value from CAN is invalid
	}

	motorss.motors[motor].mode = motor_mode;
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	b2d1      	uxtb	r1, r2
 8000976:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <SetMotorMode+0x4c>)
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	4413      	add	r3, r2
 800097c:	3303      	adds	r3, #3
 800097e:	460a      	mov	r2, r1
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e000      	b.n	8000986 <SetMotorMode+0x42>
		return; // Do not set motor mode if mode value from CAN is invalid
 8000984:	bf00      	nop
}
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	20000230 	.word	0x20000230

08000994 <SetMotorDirection>:

void SetMotorDirection(DRIVE_MOTOR motor, int32_t can_value) {
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	603b      	str	r3, [r7, #0]
	 } else {
	 test_debug_log_can_message_counter++;
	 }
	 test_debug_log_can_message[test_debug_log_can_message_counter] = can_value;*/

	uint32_t motor_direction = DIR_INVALID;
 80009a6:	2303      	movs	r3, #3
 80009a8:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_DIRECTION_STOP)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d102      	bne.n	80009b6 <SetMotorDirection+0x22>
		motor_direction = DIR_STOP;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	e00a      	b.n	80009cc <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_LEFT)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <SetMotorDirection+0x2e>
		motor_direction = DIR_LEFT;
 80009bc:	2301      	movs	r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e004      	b.n	80009cc <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_RIGHT)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d10b      	bne.n	80009e0 <SetMotorDirection+0x4c>
		motor_direction = DIR_RIGHT;
 80009c8:	2302      	movs	r3, #2
 80009ca:	60fb      	str	r3, [r7, #12]
	else
		return;

	motorss.motors[motor].direction = motor_direction;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	b2d1      	uxtb	r1, r2
 80009d2:	4a06      	ldr	r2, [pc, #24]	@ (80009ec <SetMotorDirection+0x58>)
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	4413      	add	r3, r2
 80009d8:	3304      	adds	r3, #4
 80009da:	460a      	mov	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e000      	b.n	80009e2 <SetMotorDirection+0x4e>
		return;
 80009e0:	bf00      	nop

	// Check change of direction
	//CheckChangeDirectionMotor(motor);
}
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000230 	.word	0x20000230

080009f0 <ProcessCanMessage>:

void ProcessCanMessage() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) == GPIO_PIN_RESET) {
 80009f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009fa:	4836      	ldr	r0, [pc, #216]	@ (8000ad4 <ProcessCanMessage+0xe4>)
 80009fc:	f002 fdc4 	bl	8003588 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d060      	beq.n	8000ac8 <ProcessCanMessage+0xd8>
		return 0;
	}
	if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin) == GPIO_PIN_RESET) {
 8000a06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0a:	4832      	ldr	r0, [pc, #200]	@ (8000ad4 <ProcessCanMessage+0xe4>)
 8000a0c:	f002 fdbc 	bl	8003588 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d05a      	beq.n	8000acc <ProcessCanMessage+0xdc>
	} BytesToType;
	static BytesToType bytesToType;

	// Technically CAN data can be 8 bytes but we only send 4-bytes data to the motor driver
	// uint32_t upper_can_data = rxData[4] | (rxData[5] << 8) | (rxData[6] << 16) | (rxData[7] << 24);
	uint32_t can_data = rxData[0] | (rxData[1] << 8) | (rxData[2] << 16)
 8000a16:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <ProcessCanMessage+0xe8>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <ProcessCanMessage+0xe8>)
 8000a1e:	785b      	ldrb	r3, [r3, #1]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	431a      	orrs	r2, r3
 8000a24:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <ProcessCanMessage+0xe8>)
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	431a      	orrs	r2, r3
			| (rxData[3] << 24);
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <ProcessCanMessage+0xe8>)
 8000a2e:	78db      	ldrb	r3, [r3, #3]
 8000a30:	061b      	lsls	r3, r3, #24
 8000a32:	4313      	orrs	r3, r2
	uint32_t can_data = rxData[0] | (rxData[1] << 8) | (rxData[2] << 16)
 8000a34:	607b      	str	r3, [r7, #4]

	//
	// Motor Modes
	//
	// TODO: (Marc) Should one have precedence over the other ? What if steering wheel sets mode that is then overwritten by mario ?
	if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_MODE) {
 8000a36:	4b29      	ldr	r3, [pc, #164]	@ (8000adc <ProcessCanMessage+0xec>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b11      	cmp	r3, #17
 8000a3c:	d104      	bne.n	8000a48 <ProcessCanMessage+0x58>
		SetMotorMode(DRIVE1, can_data);
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff ff7f 	bl	8000944 <SetMotorMode>
 8000a46:	e042      	b.n	8000ace <ProcessCanMessage+0xde>
	} else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_MODE) {
 8000a48:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <ProcessCanMessage+0xec>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b12      	cmp	r3, #18
 8000a4e:	d104      	bne.n	8000a5a <ProcessCanMessage+0x6a>
		SetMotorMode(DRIVE1, can_data);
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff ff76 	bl	8000944 <SetMotorMode>
 8000a58:	e039      	b.n	8000ace <ProcessCanMessage+0xde>
	}
	//
	// MARIO Manual motor commands
	//
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_DIRECTION) {
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <ProcessCanMessage+0xec>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b13      	cmp	r3, #19
 8000a60:	d105      	bne.n	8000a6e <ProcessCanMessage+0x7e>
		SetMotorDirection(DRIVE1, can_data);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4619      	mov	r1, r3
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff ff94 	bl	8000994 <SetMotorDirection>
 8000a6c:	e02f      	b.n	8000ace <ProcessCanMessage+0xde>

	} else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_DIRECTION) {
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <ProcessCanMessage+0xec>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b14      	cmp	r3, #20
 8000a74:	d105      	bne.n	8000a82 <ProcessCanMessage+0x92>
		SetMotorDirection(DRIVE1, can_data);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ff8a 	bl	8000994 <SetMotorDirection>
 8000a80:	e025      	b.n	8000ace <ProcessCanMessage+0xde>
	}
	//
	// MARIO Automatic motor commands
	//
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_SPEED) {
 8000a82:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <ProcessCanMessage+0xec>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b15      	cmp	r3, #21
 8000a88:	d106      	bne.n	8000a98 <ProcessCanMessage+0xa8>
		can_data = (can_data & 0xFF); //SUPER IMPORTANT
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	607b      	str	r3, [r7, #4]

		//speed_stepper_motor_pitch = 100;
		speed_stepper_motor_pitch = can_data;
 8000a90:	4a13      	ldr	r2, [pc, #76]	@ (8000ae0 <ProcessCanMessage+0xf0>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	e01a      	b.n	8000ace <ProcessCanMessage+0xde>
	 motors.pitch_motor.request_disable = 1;
	 motors.mast_motor.request_disable = 1;

	 DoStateInit();
	 }*/
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_ROPS) {
 8000a98:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <ProcessCanMessage+0xec>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d116      	bne.n	8000ace <ProcessCanMessage+0xde>
		uint8_t rops_data = (can_data & 0xFF);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	70fb      	strb	r3, [r7, #3]
		if (rops_data == ROPS_ENABLE)
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d103      	bne.n	8000ab2 <ProcessCanMessage+0xc2>
			b_rops = 1;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <ProcessCanMessage+0xf4>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e00d      	b.n	8000ace <ProcessCanMessage+0xde>
		else if (rops_data == ROPS_DISABLE)
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d103      	bne.n	8000ac0 <ProcessCanMessage+0xd0>
			b_rops = 0;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <ProcessCanMessage+0xf4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	e006      	b.n	8000ace <ProcessCanMessage+0xde>
		else {
			// Unknown value for ROPS command, assume cmd was to activate ROPS
			b_rops = 1;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <ProcessCanMessage+0xf4>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e002      	b.n	8000ace <ProcessCanMessage+0xde>
		return 0;
 8000ac8:	bf00      	nop
 8000aca:	e000      	b.n	8000ace <ProcessCanMessage+0xde>
		return 0;
 8000acc:	bf00      	nop
		}
	} else {
		// Unknown CAN ID
	}
}
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	200001d0 	.word	0x200001d0
 8000adc:	200001f4 	.word	0x200001f4
 8000ae0:	200001cc 	.word	0x200001cc
 8000ae4:	200001c4 	.word	0x200001c4

08000ae8 <CAN_ReceiveFifoCallback>:

void CAN_ReceiveFifoCallback(CAN_HandleTypeDef *hcan, uint32_t fifo) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]

	uint32_t num_messages = HAL_CAN_GetRxFifoFillLevel(hcan, fifo);
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f002 f82e 	bl	8002b56 <HAL_CAN_GetRxFifoFillLevel>
 8000afa:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < num_messages; ++i) {
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e00f      	b.n	8000b22 <CAN_ReceiveFifoCallback+0x3a>
		if (HAL_CAN_GetRxMessage(hcan, fifo, &pRxHeader, rxData) != HAL_OK) {
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <CAN_ReceiveFifoCallback+0x4c>)
 8000b04:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <CAN_ReceiveFifoCallback+0x50>)
 8000b06:	6839      	ldr	r1, [r7, #0]
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f001 ff02 	bl	8002912 <HAL_CAN_GetRxMessage>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <CAN_ReceiveFifoCallback+0x30>
			Error_Handler();
 8000b14:	f000 fbce 	bl	80012b4 <Error_Handler>
		}

		ProcessCanMessage();
 8000b18:	f7ff ff6a 	bl	80009f0 <ProcessCanMessage>
	for (int i = 0; i < num_messages; ++i) {
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d8eb      	bhi.n	8000b02 <CAN_ReceiveFifoCallback+0x1a>
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200001d0 	.word	0x200001d0
 8000b38:	200001f4 	.word	0x200001f4

08000b3c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO0);
 8000b44:	2100      	movs	r1, #0
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffce 	bl	8000ae8 <CAN_ReceiveFifoCallback>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO1);
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffc2 	bl	8000ae8 <CAN_ReceiveFifoCallback>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <TransmitCAN>:

HAL_StatusTypeDef TransmitCAN(uint32_t id, uint8_t *buf, uint8_t size,
		uint8_t with_priority) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	4611      	mov	r1, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	71bb      	strb	r3, [r7, #6]
	// CAN_TxHeaderTypeDef msg;
	pTxHeader.StdId = id;
 8000b82:	4a27      	ldr	r2, [pc, #156]	@ (8000c20 <TransmitCAN+0xb4>)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6013      	str	r3, [r2, #0]
	pTxHeader.IDE = CAN_ID_STD;
 8000b88:	4b25      	ldr	r3, [pc, #148]	@ (8000c20 <TransmitCAN+0xb4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR = CAN_RTR_DATA;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <TransmitCAN+0xb4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
	pTxHeader.DLC = size; // Number of bytes to send
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4a22      	ldr	r2, [pc, #136]	@ (8000c20 <TransmitCAN+0xb4>)
 8000b98:	6113      	str	r3, [r2, #16]
	pTxHeader.TransmitGlobalTime = DISABLE;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <TransmitCAN+0xb4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	751a      	strb	r2, [r3, #20]

	uint8_t found_mailbox = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 10; ++i) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	e00b      	b.n	8000bc2 <TransmitCAN+0x56>
		// Check that mailbox is available for tx
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0) {
 8000baa:	481e      	ldr	r0, [pc, #120]	@ (8000c24 <TransmitCAN+0xb8>)
 8000bac:	f001 fe7c 	bl	80028a8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <TransmitCAN+0x50>
			found_mailbox = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	75fb      	strb	r3, [r7, #23]
			break;
 8000bba:	e005      	b.n	8000bc8 <TransmitCAN+0x5c>
	for (int i = 0; i < 10; ++i) {
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	2b09      	cmp	r3, #9
 8000bc6:	ddf0      	ble.n	8000baa <TransmitCAN+0x3e>
	if (!found_mailbox) {
		// TODO: (Marc) Should really be the error led once it's been soldered
		//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
	}

	if (with_priority) {
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d010      	beq.n	8000bf0 <TransmitCAN+0x84>
		// If message is important, make sure no other messages are queud to ensure it will be sent after any other
		// values that could override it.
		for (int i = 0; i < 10; ++i) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	e008      	b.n	8000be6 <TransmitCAN+0x7a>
			// Check that all 3 mailboxes are empty
			if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 3)
 8000bd4:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <TransmitCAN+0xb8>)
 8000bd6:	f001 fe67 	bl	80028a8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	d006      	beq.n	8000bee <TransmitCAN+0x82>
		for (int i = 0; i < 10; ++i) {
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	3301      	adds	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	2b09      	cmp	r3, #9
 8000bea:	ddf3      	ble.n	8000bd4 <TransmitCAN+0x68>
 8000bec:	e000      	b.n	8000bf0 <TransmitCAN+0x84>
				break;
 8000bee:	bf00      	nop
			//delay_us(50);
		}
	}

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, buf, &mb);
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	490a      	ldr	r1, [pc, #40]	@ (8000c20 <TransmitCAN+0xb4>)
 8000bf8:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <TransmitCAN+0xb8>)
 8000bfa:	f001 fd85 	bl	8002708 <HAL_CAN_AddTxMessage>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK) {
 8000c02:	7dbb      	ldrb	r3, [r7, #22]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <TransmitCAN+0xa0>
		return ret;
 8000c08:	7dbb      	ldrb	r3, [r7, #22]
 8000c0a:	e005      	b.n	8000c18 <TransmitCAN+0xac>
	}

	// Update the CAN led
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <TransmitCAN+0xbc>)
 8000c12:	f002 fcd1 	bl	80035b8 <HAL_GPIO_WritePin>
	// ToggleLed(LED_CAN);
	return ret;
 8000c16:	7dbb      	ldrb	r3, [r7, #22]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200001dc 	.word	0x200001dc
 8000c24:	2000006c 	.word	0x2000006c
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c30:	f001 fab6 	bl	80021a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c34:	f000 f814 	bl	8000c60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c38:	f000 fa2c 	bl	8001094 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000c3c:	f000 f87e 	bl	8000d3c <MX_CAN1_Init>
	MX_SPI1_Init();
 8000c40:	f000 f906 	bl	8000e50 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000c44:	f000 f93a 	bl	8000ebc <MX_TIM2_Init>
	MX_TIM4_Init();
 8000c48:	f000 f9d6 	bl	8000ff8 <MX_TIM4_Init>
	MX_TIM3_Init();
 8000c4c:	f000 f984 	bl	8000f58 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	current_state = STATE_INIT;
 8000c50:	4b02      	ldr	r3, [pc, #8]	@ (8000c5c <main+0x30>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		ExecuteStateMachine();
 8000c56:	f7ff fc4d 	bl	80004f4 <ExecuteStateMachine>
 8000c5a:	e7fc      	b.n	8000c56 <main+0x2a>
 8000c5c:	20000210 	.word	0x20000210

08000c60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b094      	sub	sp, #80	@ 0x50
 8000c64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2234      	movs	r2, #52	@ 0x34
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 fae8 	bl	8005244 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <SystemClock_Config+0xd4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8c:	4a29      	ldr	r2, [pc, #164]	@ (8000d34 <SystemClock_Config+0xd4>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <SystemClock_Config+0xd4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <SystemClock_Config+0xd8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cac:	4a22      	ldr	r2, [pc, #136]	@ (8000d38 <SystemClock_Config+0xd8>)
 8000cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <SystemClock_Config+0xd8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 128;
 8000cd8:	2380      	movs	r3, #128	@ 0x80
 8000cda:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 ff3f 	bl	8003b70 <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x9c>
		Error_Handler();
 8000cf8:	f000 fadc 	bl	80012b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d00:	2302      	movs	r3, #2
 8000d02:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d0c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d12:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 fc98 	bl	8003650 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xca>
		Error_Handler();
 8000d26:	f000 fac5 	bl	80012b4 <Error_Handler>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	@ 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007000 	.word	0x40007000

08000d3c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	@ 0x50
 8000d40:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000d42:	4b41      	ldr	r3, [pc, #260]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d44:	4a41      	ldr	r2, [pc, #260]	@ (8000e4c <MX_CAN1_Init+0x110>)
 8000d46:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 8;
 8000d48:	4b3f      	ldr	r3, [pc, #252]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8000d54:	4b3c      	ldr	r3, [pc, #240]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d5a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d5e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000d62:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000d64:	4b38      	ldr	r3, [pc, #224]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d66:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000d6a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d6c:	4b36      	ldr	r3, [pc, #216]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000d72:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000d78:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000d7e:	4b32      	ldr	r3, [pc, #200]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d84:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000d90:	482d      	ldr	r0, [pc, #180]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000d92:	f001 fa9b 	bl	80022cc <HAL_CAN_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_CAN1_Init+0x64>
		Error_Handler();
 8000d9c:	f000 fa8a 	bl	80012b4 <Error_Handler>
	 }
	 */

	CAN_FilterTypeDef sf_fifo0;
	// All common bits go into the ID register
	sf_fifo0.FilterIdHigh = DRIVEMOTOR_FIFO0_RX_FILTER_ID_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sf_fifo0.FilterIdLow = DRIVEMOTOR_FIFO0_RX_FILTER_ID_LOW;
 8000da4:	2360      	movs	r3, #96	@ 0x60
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Which bits to compare for filter
	sf_fifo0.FilterMaskIdHigh = 0x0000;
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	@ 0x30
	sf_fifo0.FilterMaskIdLow = (FIFO0_RX_FILTER_MASK_LOW & 0x07FF);
 8000dac:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34

	sf_fifo0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sf_fifo0.FilterBank = 0; // Which filter to use from the assigned ones
 8000db6:	2300      	movs	r3, #0
 8000db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sf_fifo0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	643b      	str	r3, [r7, #64]	@ 0x40
	sf_fifo0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	647b      	str	r3, [r7, #68]	@ 0x44
	sf_fifo0.FilterActivation = CAN_FILTER_ENABLE;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
	sf_fifo0.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8000dc6:	230e      	movs	r3, #14
 8000dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo0) != HAL_OK) {
 8000dca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481d      	ldr	r0, [pc, #116]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000dd2:	f001 fb77 	bl	80024c4 <HAL_CAN_ConfigFilter>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_CAN1_Init+0xa4>
		Error_Handler();
 8000ddc:	f000 fa6a 	bl	80012b4 <Error_Handler>
	// All common bits go into the ID register
	//sf_fifo1.FilterIdHigh = 0x0000;
	//sf_fifo1.FilterIdLow = 0x0000;
	//sf_fifo1.FilterMaskIdHigh = 0x0000;
	//sf_fifo1.FilterMaskIdLow = 0x0000;
	sf_fifo1.FilterIdHigh = DRIVEMOTOR_FIFO1_RX_FILTER_ID_HIGH;
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
	sf_fifo1.FilterIdLow = DRIVEMOTOR_FIFO1_RX_FILTER_ID_LOW;
 8000de4:	2370      	movs	r3, #112	@ 0x70
 8000de6:	607b      	str	r3, [r7, #4]

	// Which bits to compare for filter
	sf_fifo1.FilterMaskIdHigh = 0x0000;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
	sf_fifo1.FilterMaskIdLow = (FIFO1_RX_FILTER_MASK_LOW & 0x7FF);
 8000dec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000df0:	60fb      	str	r3, [r7, #12]

	sf_fifo1.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
	sf_fifo1.FilterBank = 1; // Which filter to use from the assigned ones
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
	sf_fifo1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
	sf_fifo1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
	sf_fifo1.FilterActivation = CAN_FILTER_ENABLE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
	sf_fifo1.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8000e06:	230e      	movs	r3, #14
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo1) != HAL_OK) {
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480e      	ldr	r0, [pc, #56]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000e10:	f001 fb58 	bl	80024c4 <HAL_CAN_ConfigFilter>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_CAN1_Init+0xe2>
		Error_Handler();
 8000e1a:	f000 fa4b 	bl	80012b4 <Error_Handler>

	//if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
	//{
	//	  Error_Handler();
	//}
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000e1e:	480a      	ldr	r0, [pc, #40]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000e20:	f001 fc2e 	bl	8002680 <HAL_CAN_Start>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_CAN1_Init+0xf2>
		Error_Handler();
 8000e2a:	f000 fa43 	bl	80012b4 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 8000e2e:	2112      	movs	r1, #18
 8000e30:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_CAN1_Init+0x10c>)
 8000e32:	f001 feb8 	bl	8002ba6 <HAL_CAN_ActivateNotification>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_CAN1_Init+0x104>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
		Error_Handler();
 8000e3c:	f000 fa3a 	bl	80012b4 <Error_Handler>
	 }
	 */

	/* USER CODE END CAN1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3750      	adds	r7, #80	@ 0x50
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000006c 	.word	0x2000006c
 8000e4c:	40006400 	.word	0x40006400

08000e50 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000e54:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e56:	4a18      	ldr	r2, [pc, #96]	@ (8000eb8 <MX_SPI1_Init+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e60:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e80:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e84:	2220      	movs	r2, #32
 8000e86:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e94:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000e9c:	220a      	movs	r2, #10
 8000e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000ea0:	4804      	ldr	r0, [pc, #16]	@ (8000eb4 <MX_SPI1_Init+0x64>)
 8000ea2:	f003 f903 	bl	80040ac <HAL_SPI_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000eac:	f000 fa02 	bl	80012b4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000094 	.word	0x20000094
 8000eb8:	40013000 	.word	0x40013000

08000ebc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000eda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ede:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 5;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10;
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000eee:	220a      	movs	r2, #10
 8000ef0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000efe:	4815      	ldr	r0, [pc, #84]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000f00:	f003 fd26 	bl	8004950 <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x52>
		Error_Handler();
 8000f0a:	f000 f9d3 	bl	80012b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f12:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480e      	ldr	r0, [pc, #56]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000f1c:	f003 fec8 	bl	8004cb0 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0x6e>
		Error_Handler();
 8000f26:	f000 f9c5 	bl	80012b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000f38:	f004 f8f4 	bl	8005124 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0x8a>
		Error_Handler();
 8000f42:	f000 f9b7 	bl	80012b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8000f46:	4803      	ldr	r0, [pc, #12]	@ (8000f54 <MX_TIM2_Init+0x98>)
 8000f48:	f003 fd52 	bl	80049f0 <HAL_TIM_Base_Start_IT>

	/* USER CODE END TIM2_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000ec 	.word	0x200000ec

08000f58 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000f76:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff4 <MX_TIM3_Init+0x9c>)
 8000f78:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 63;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000f7c:	223f      	movs	r2, #63	@ 0x3f
 8000f7e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000f88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f8c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000f9a:	4815      	ldr	r0, [pc, #84]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000f9c:	f003 fcd8 	bl	8004950 <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x52>
		Error_Handler();
 8000fa6:	f000 f985 	bl	80012b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fae:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480e      	ldr	r0, [pc, #56]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000fb8:	f003 fe7a 	bl	8004cb0 <HAL_TIM_ConfigClockSource>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8000fc2:	f000 f977 	bl	80012b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000fd4:	f004 f8a6 	bl	8005124 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM3_Init+0x8a>
		Error_Handler();
 8000fde:	f000 f969 	bl	80012b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000fe2:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <MX_TIM3_Init+0x98>)
 8000fe4:	f003 fd04 	bl	80049f0 <HAL_TIM_Base_Start_IT>
	/* USER CODE END TIM3_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000134 	.word	0x20000134
 8000ff4:	40000400 	.word	0x40000400

08000ff8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_TIM4_Init+0x94>)
 8001016:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <MX_TIM4_Init+0x98>)
 8001018:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 63;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_TIM4_Init+0x94>)
 800101c:	223f      	movs	r2, #63	@ 0x3f
 800101e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_TIM4_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 24999;
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_TIM4_Init+0x94>)
 8001028:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 800102c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_TIM4_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_TIM4_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800103a:	4814      	ldr	r0, [pc, #80]	@ (800108c <MX_TIM4_Init+0x94>)
 800103c:	f003 fc88 	bl	8004950 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM4_Init+0x52>
		Error_Handler();
 8001046:	f000 f935 	bl	80012b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_TIM4_Init+0x94>)
 8001058:	f003 fe2a 	bl	8004cb0 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8001062:	f000 f927 	bl	80012b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_TIM4_Init+0x94>)
 8001074:	f004 f856 	bl	8005124 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM4_Init+0x8a>
		Error_Handler();
 800107e:	f000 f919 	bl	80012b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000017c 	.word	0x2000017c
 8001090:	40000800 	.word	0x40000800

08001094 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b67      	ldr	r3, [pc, #412]	@ (800124c <MX_GPIO_Init+0x1b8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a66      	ldr	r2, [pc, #408]	@ (800124c <MX_GPIO_Init+0x1b8>)
 80010b4:	f043 0310 	orr.w	r3, r3, #16
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b64      	ldr	r3, [pc, #400]	@ (800124c <MX_GPIO_Init+0x1b8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b60      	ldr	r3, [pc, #384]	@ (800124c <MX_GPIO_Init+0x1b8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a5f      	ldr	r2, [pc, #380]	@ (800124c <MX_GPIO_Init+0x1b8>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b5d      	ldr	r3, [pc, #372]	@ (800124c <MX_GPIO_Init+0x1b8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b59      	ldr	r3, [pc, #356]	@ (800124c <MX_GPIO_Init+0x1b8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a58      	ldr	r2, [pc, #352]	@ (800124c <MX_GPIO_Init+0x1b8>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b56      	ldr	r3, [pc, #344]	@ (800124c <MX_GPIO_Init+0x1b8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b52      	ldr	r3, [pc, #328]	@ (800124c <MX_GPIO_Init+0x1b8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a51      	ldr	r2, [pc, #324]	@ (800124c <MX_GPIO_Init+0x1b8>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b4f      	ldr	r3, [pc, #316]	@ (800124c <MX_GPIO_Init+0x1b8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b4b      	ldr	r3, [pc, #300]	@ (800124c <MX_GPIO_Init+0x1b8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a4a      	ldr	r2, [pc, #296]	@ (800124c <MX_GPIO_Init+0x1b8>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b48      	ldr	r3, [pc, #288]	@ (800124c <MX_GPIO_Init+0x1b8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001136:	2200      	movs	r2, #0
 8001138:	f64f 41e2 	movw	r1, #64738	@ 0xfce2
 800113c:	4844      	ldr	r0, [pc, #272]	@ (8001250 <MX_GPIO_Init+0x1bc>)
 800113e:	f002 fa3b 	bl	80035b8 <HAL_GPIO_WritePin>
			FT_RESET_Pin | SPI_CS2_Pin | SPI_CS1_Pin | BIN2_1_Pin | BIN1_1_Pin | DIR1_Pin
					| STEP1_Pin | RESET1_Pin | nSLEEP1_Pin | STEP2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001142:	2200      	movs	r2, #0
 8001144:	2137      	movs	r1, #55	@ 0x37
 8001146:	4843      	ldr	r0, [pc, #268]	@ (8001254 <MX_GPIO_Init+0x1c0>)
 8001148:	f002 fa36 	bl	80035b8 <HAL_GPIO_WritePin>
			BIN2_2_Pin | BIN1_2_Pin | DIR2_Pin | nSLEEP2_Pin | RESET2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800114c:	2200      	movs	r2, #0
 800114e:	21ff      	movs	r1, #255	@ 0xff
 8001150:	4841      	ldr	r0, [pc, #260]	@ (8001258 <MX_GPIO_Init+0x1c4>)
 8001152:	f002 fa31 	bl	80035b8 <HAL_GPIO_WritePin>
			LED_WARNING_Pin | LED_ERROR_Pin | LED_CANB_Pin | LED_CANA_Pin | LED1_Pin
					| LED2_Pin | LED4_Pin | LED3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : nSTALL2_Pin nFAULT2_Pin */
	GPIO_InitStruct.Pin = nSTALL2_Pin | nFAULT2_Pin;
 8001156:	2318      	movs	r3, #24
 8001158:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4839      	ldr	r0, [pc, #228]	@ (8001250 <MX_GPIO_Init+0x1bc>)
 800116a:	f002 f879 	bl	8003260 <HAL_GPIO_Init>

	/*Configure GPIO pins : FT_RESET_Pin BIN2_1_Pin BIN1_1_Pin DIR1_Pin
	 STEP1_Pin RESET1_Pin nSLEEP1_Pin STEP2_Pin */
	GPIO_InitStruct.Pin = FT_RESET_Pin | BIN2_1_Pin | BIN1_1_Pin | DIR1_Pin | STEP1_Pin
 800116e:	f64f 4322 	movw	r3, #64546	@ 0xfc22
 8001172:	617b      	str	r3, [r7, #20]
			| RESET1_Pin | nSLEEP1_Pin | STEP2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4832      	ldr	r0, [pc, #200]	@ (8001250 <MX_GPIO_Init+0x1bc>)
 8001188:	f002 f86a 	bl	8003260 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI_CS2_Pin SPI_CS1_Pin */
	GPIO_InitStruct.Pin = SPI_CS2_Pin | SPI_CS1_Pin;
 800118c:	23c0      	movs	r3, #192	@ 0xc0
 800118e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	482b      	ldr	r0, [pc, #172]	@ (8001250 <MX_GPIO_Init+0x1bc>)
 80011a4:	f002 f85c 	bl	8003260 <HAL_GPIO_Init>

	/*Configure GPIO pins : BIN2_2_Pin BIN1_2_Pin DIR2_Pin nSLEEP2_Pin
	 RESET2_Pin */
	GPIO_InitStruct.Pin = BIN2_2_Pin | BIN1_2_Pin | DIR2_Pin | nSLEEP2_Pin | RESET2_Pin;
 80011a8:	2337      	movs	r3, #55	@ 0x37
 80011aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4825      	ldr	r0, [pc, #148]	@ (8001254 <MX_GPIO_Init+0x1c0>)
 80011c0:	f002 f84e 	bl	8003260 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 80011d4:	230f      	movs	r3, #15
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	481f      	ldr	r0, [pc, #124]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80011e0:	f002 f83e 	bl	8003260 <HAL_GPIO_Init>

	/*Configure GPIO pins : nSTALL1_Pin nFAULT1_Pin */
	GPIO_InitStruct.Pin = nSTALL1_Pin | nFAULT1_Pin;
 80011e4:	2306      	movs	r3, #6
 80011e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	481a      	ldr	r0, [pc, #104]	@ (8001260 <MX_GPIO_Init+0x1cc>)
 80011f8:	f002 f832 	bl	8003260 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2_Pin PB1_Pin */
	GPIO_InitStruct.Pin = PB2_Pin | PB1_Pin;
 80011fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001200:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001202:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001206:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	480f      	ldr	r0, [pc, #60]	@ (8001250 <MX_GPIO_Init+0x1bc>)
 8001214:	f002 f824 	bl	8003260 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_WARNING_Pin LED_ERROR_Pin LED_CANB_Pin LED_CANA_Pin
	 LED1_Pin LED2_Pin LED4_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED_WARNING_Pin | LED_ERROR_Pin | LED_CANB_Pin | LED_CANA_Pin
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	617b      	str	r3, [r7, #20]
			| LED1_Pin | LED2_Pin | LED4_Pin | LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480a      	ldr	r0, [pc, #40]	@ (8001258 <MX_GPIO_Init+0x1c4>)
 8001230:	f002 f816 	bl	8003260 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2101      	movs	r1, #1
 8001238:	2017      	movs	r0, #23
 800123a:	f001 ffda 	bl	80031f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800123e:	2017      	movs	r0, #23
 8001240:	f001 fff3 	bl	800322a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	@ 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40021000 	.word	0x40021000
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400

08001264 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI Line External Interrupt ISR Handler CallBack
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) // PushButton 1
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001274:	d106      	bne.n	8001284 <HAL_GPIO_EXTI_Callback+0x20>
	{
		//HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
		pb1_value = 1;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <HAL_GPIO_EXTI_Callback+0x40>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
		pb1_update = 1;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_GPIO_EXTI_Callback+0x44>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
		pb2_value = 1;
		pb2_update = 1;
	}

}
 8001282:	e009      	b.n	8001298 <HAL_GPIO_EXTI_Callback+0x34>
	else if (GPIO_Pin == GPIO_PIN_8) // PushButton 2
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800128a:	d105      	bne.n	8001298 <HAL_GPIO_EXTI_Callback+0x34>
		pb2_value = 1;
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <HAL_GPIO_EXTI_Callback+0x48>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
		pb2_update = 1;
 8001292:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000250 	.word	0x20000250
 80012a8:	20000252 	.word	0x20000252
 80012ac:	20000251 	.word	0x20000251
 80012b0:	20000253 	.word	0x20000253

080012b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <Error_Handler+0x8>

080012c0 <InitDrives>:

void InitRegValuesStepperDefault(DRIVE_MOTOR drive_index);

SPI_HandleTypeDef *hspi = &hspi1;

void InitDrives() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	UnselectDriveCS();
 80012c4:	f000 fa42 	bl	800174c <UnselectDriveCS>

	InitDriveMotor(DRIVE1);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 f803 	bl	80012d4 <InitDriveMotor>
	//InitDriveMotor(DRIVE2);
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <InitDriveMotor>:

void InitDriveMotor(DRIVE_MOTOR drive_index) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	// Reset drive
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	4936      	ldr	r1, [pc, #216]	@ (80013bc <InitDriveMotor+0xe8>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	79fa      	ldrb	r2, [r7, #7]
 80012f0:	4933      	ldr	r1, [pc, #204]	@ (80013c0 <InitDriveMotor+0xec>)
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	440b      	add	r3, r1
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	4619      	mov	r1, r3
 8001302:	f002 f959 	bl	80035b8 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_SET);
	HAL_Delay(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f000 ffbc 	bl	8002284 <HAL_Delay>
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	492b      	ldr	r1, [pc, #172]	@ (80013bc <InitDriveMotor+0xe8>)
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	4928      	ldr	r1, [pc, #160]	@ (80013c0 <InitDriveMotor+0xec>)
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	f002 f942 	bl	80035b8 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_RESET);
	// Disable sleeping
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_SLEEP],
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	4921      	ldr	r1, [pc, #132]	@ (80013bc <InitDriveMotor+0xe8>)
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	3304      	adds	r3, #4
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	491d      	ldr	r1, [pc, #116]	@ (80013c0 <InitDriveMotor+0xec>)
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	440b      	add	r3, r1
 8001354:	3302      	adds	r3, #2
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	f002 f92c 	bl	80035b8 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_SLEEP], GPIO_PIN_SET);
	// CS à LOW
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	4916      	ldr	r1, [pc, #88]	@ (80013bc <InitDriveMotor+0xe8>)
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3308      	adds	r3, #8
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	4912      	ldr	r1, [pc, #72]	@ (80013c0 <InitDriveMotor+0xec>)
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	440b      	add	r3, r1
 8001380:	3304      	adds	r3, #4
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	f002 f916 	bl	80035b8 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);

	HAL_Delay(5); //wait for everything to setup : DRV8711 recommend 1ms
 800138c:	2005      	movs	r0, #5
 800138e:	f000 ff79 	bl	8002284 <HAL_Delay>

	// init register for a stepper motor
	InitRegValuesStepper(drive_index);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fb9b 	bl	8001ad0 <InitRegValuesStepper>

	//seulement pour debug SPI : ne pas utiliser pour tester un moteur
	//InitRegValuesStepperDefault(drive_index); //WARNING : TORQUE IS SET TO MAXIMUM

	// Send regs over SPI
	SendDriveRegisters(drive_index);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f811 	bl	80013c4 <SendDriveRegisters>

	// Verify if chip setup is good
	ReadAndVerifyDriveRegisters(drive_index);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f82f 	bl	8001408 <ReadAndVerifyDriveRegisters>

	CheckDriveStatusRegister(drive_index);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fa67 	bl	8001880 <CheckDriveStatusRegister>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000028 	.word	0x20000028

080013c4 <SendDriveRegisters>:

// Send every register to the drive
void SendDriveRegisters(DRIVE_MOTOR drive_index) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	// Écrire tous les registres sauf STATUS (registre 0x07)
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e010      	b.n	80013f6 <SendDriveRegisters+0x32>
		uint16_t reg_config = ReadRegConfig(drive_index, reg);
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f9e2 	bl	80017a4 <ReadRegConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	81bb      	strh	r3, [r7, #12]
		WriteSPI(drive_index, reg, reg_config);
 80013e4:	89ba      	ldrh	r2, [r7, #12]
 80013e6:	7bf9      	ldrb	r1, [r7, #15]
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f840 	bl	8001470 <WriteSPI>
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) {
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	3301      	adds	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b06      	cmp	r3, #6
 80013fa:	d9eb      	bls.n	80013d4 <SendDriveRegisters+0x10>
	}
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <ReadAndVerifyDriveRegisters>:

void ReadAndVerifyDriveRegisters(DRIVE_MOTOR drive_index) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	uint8_t error_detected = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]

	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) { // Skip STATUS (0x07)
 8001416:	2300      	movs	r3, #0
 8001418:	73bb      	strb	r3, [r7, #14]
 800141a:	e01e      	b.n	800145a <ReadAndVerifyDriveRegisters+0x52>
		uint16_t received_data = ReadSPI(drive_index, reg);
 800141c:	7bba      	ldrb	r2, [r7, #14]
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f8be 	bl	80015a4 <ReadSPI>
 8001428:	4603      	mov	r3, r0
 800142a:	81bb      	strh	r3, [r7, #12]
		uint16_t expected_data = ReadRegConfig(drive_index, reg);
 800142c:	7bba      	ldrb	r2, [r7, #14]
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f9b6 	bl	80017a4 <ReadRegConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	817b      	strh	r3, [r7, #10]

		if (received_data != expected_data) {
 800143c:	89ba      	ldrh	r2, [r7, #12]
 800143e:	897b      	ldrh	r3, [r7, #10]
 8001440:	429a      	cmp	r2, r3
 8001442:	d007      	beq.n	8001454 <ReadAndVerifyDriveRegisters+0x4c>
			HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	2104      	movs	r1, #4
 8001448:	4808      	ldr	r0, [pc, #32]	@ (800146c <ReadAndVerifyDriveRegisters+0x64>)
 800144a:	f002 f8b5 	bl	80035b8 <HAL_GPIO_WritePin>
			error_detected += 1;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	3301      	adds	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) { // Skip STATUS (0x07)
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	3301      	adds	r3, #1
 8001458:	73bb      	strb	r3, [r7, #14]
 800145a:	7bbb      	ldrb	r3, [r7, #14]
 800145c:	2b06      	cmp	r3, #6
 800145e:	d9dd      	bls.n	800141c <ReadAndVerifyDriveRegisters+0x14>
		}
	}
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020c00 	.word	0x40020c00

08001470 <WriteSPI>:

uint32_t WriteSPI(DRIVE_MOTOR drive_index, uint8_t reg, uint16_t reg_config) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	460b      	mov	r3, r1
 800147c:	71bb      	strb	r3, [r7, #6]
 800147e:	4613      	mov	r3, r2
 8001480:	80bb      	strh	r3, [r7, #4]
	uint16_t data = (reg << 12) & 0x7000; //registre
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	031b      	lsls	r3, r3, #12
 8001486:	b29b      	uxth	r3, r3
 8001488:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800148c:	81fb      	strh	r3, [r7, #14]
	data = data | (reg_config & 0x0FFF); //config
 800148e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001496:	b21a      	sxth	r2, r3
 8001498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800149c:	4313      	orrs	r3, r2
 800149e:	b21b      	sxth	r3, r3
 80014a0:	81fb      	strh	r3, [r7, #14]
	data = data & 0x7FFF; //écriture
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014a8:	81fb      	strh	r3, [r7, #14]
	uint16_t expected_data = data & 0x0FFF;
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b0:	81bb      	strh	r3, [r7, #12]

	TransmitSPI(drive_index, data);
 80014b2:	89fa      	ldrh	r2, [r7, #14]
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f835 	bl	8001528 <TransmitSPI>
	uint16_t received_data = ReadSPI(drive_index, reg);
 80014be:	79ba      	ldrb	r2, [r7, #6]
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 f86d 	bl	80015a4 <ReadSPI>
 80014ca:	4603      	mov	r3, r0
 80014cc:	817b      	strh	r3, [r7, #10]

	if (received_data != expected_data) {
 80014ce:	897a      	ldrh	r2, [r7, #10]
 80014d0:	89bb      	ldrh	r3, [r7, #12]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d01e      	beq.n	8001514 <WriteSPI+0xa4>
		TransmitSPI(drive_index, data);
 80014d6:	89fa      	ldrh	r2, [r7, #14]
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f823 	bl	8001528 <TransmitSPI>
		received_data = ReadSPI(drive_index, reg);
 80014e2:	79ba      	ldrb	r2, [r7, #6]
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f85b 	bl	80015a4 <ReadSPI>
 80014ee:	4603      	mov	r3, r0
 80014f0:	817b      	strh	r3, [r7, #10]
		if (received_data != expected_data) {
 80014f2:	897a      	ldrh	r2, [r7, #10]
 80014f4:	89bb      	ldrh	r3, [r7, #12]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d00c      	beq.n	8001514 <WriteSPI+0xa4>
			HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2104      	movs	r1, #4
 80014fe:	4808      	ldr	r0, [pc, #32]	@ (8001520 <WriteSPI+0xb0>)
 8001500:	f002 f85a 	bl	80035b8 <HAL_GPIO_WritePin>
			spi_error++;
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <WriteSPI+0xb4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <WriteSPI+0xb4>)
 800150c:	6013      	str	r3, [r2, #0]
			return spi_error;
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <WriteSPI+0xb4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	e000      	b.n	8001516 <WriteSPI+0xa6>
		}
	}
	return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40020c00 	.word	0x40020c00
 8001524:	20000284 	.word	0x20000284

08001528 <TransmitSPI>:

void TransmitSPI(DRIVE_MOTOR drive_index, uint16_t data) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	80bb      	strh	r3, [r7, #4]
	// Convertir en 2 octets MSB-first
	uint8_t tx_data[2] = { (data >> 8) & 0xFF, data & 0xFF };
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	733b      	strb	r3, [r7, #12]
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	737b      	strb	r3, [r7, #13]

	//On écrie sur la puce :
	tx_data[0] = tx_data[0] & 0x7F;
 8001548:	7b3b      	ldrb	r3, [r7, #12]
 800154a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800154e:	b2db      	uxtb	r3, r3
 8001550:	733b      	strb	r3, [r7, #12]

	// Sélectionner la puce (CS à HIGH avant la transmission)
	SelectDriveCS(drive_index);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 f8ad 	bl	80016b4 <SelectDriveCS>

	// Transmettre le message
	uint8_t err = HAL_SPI_Transmit(hspi, tx_data, 2, HAL_MAX_DELAY);
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <TransmitSPI+0x70>)
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	f107 010c 	add.w	r1, r7, #12
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	2202      	movs	r2, #2
 8001568:	f002 fe29 	bl	80041be <HAL_SPI_Transmit>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	if (err != HAL_OK) {
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <TransmitSPI+0x62>
		// SPI erreur → allumer LED de diagnostic
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	2104      	movs	r1, #4
 800157a:	4808      	ldr	r0, [pc, #32]	@ (800159c <TransmitSPI+0x74>)
 800157c:	f002 f81c 	bl	80035b8 <HAL_GPIO_WritePin>
		hal_spi_transmit_error++;
 8001580:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <TransmitSPI+0x78>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a06      	ldr	r2, [pc, #24]	@ (80015a0 <TransmitSPI+0x78>)
 8001588:	6013      	str	r3, [r2, #0]
	}

	// Désélectionner les puces (CS à LOW après la transmission)
	UnselectDriveCS();
 800158a:	f000 f8df 	bl	800174c <UnselectDriveCS>
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000003c 	.word	0x2000003c
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	20000288 	.word	0x20000288

080015a4 <ReadSPI>:

uint16_t ReadSPI(DRIVE_MOTOR drive_index, uint8_t reg) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
	// Construire la commande de lecture : bit 15 = 1, reg sur bits 14–12
	uint16_t read_cmd = (1 << 15) | (reg << 12);
 80015b4:	79bb      	ldrb	r3, [r7, #6]
 80015b6:	031b      	lsls	r3, r3, #12
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	81bb      	strh	r3, [r7, #12]

	uint16_t received_data = TransmitReceiveSPI(drive_index, read_cmd);
 80015c6:	89ba      	ldrh	r2, [r7, #12]
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f827 	bl	8001620 <TransmitReceiveSPI>
 80015d2:	4603      	mov	r3, r0
 80015d4:	81fb      	strh	r3, [r7, #14]

	if ((reg == DRV8711_TORQUE_REG)
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d10e      	bne.n	80015fa <ReadSPI+0x56>
			&& (ReadRegConfig(drive_index, reg) & 0b010000000000)) { // datasheet bit 10 on register 1 always return 0
 80015dc:	79ba      	ldrb	r2, [r7, #6]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f8de 	bl	80017a4 <ReadRegConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <ReadSPI+0x56>
		received_data = received_data | 0b010000000000;
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f8:	81fb      	strh	r3, [r7, #14]
	}
	if ((reg == DRV8711_CTRL_REG) && (received_data & 0b000000000100)) { // datasheet bit 2 on register 0 clear after write
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10a      	bne.n	8001616 <ReadSPI+0x72>
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <ReadSPI+0x72>
		received_data = received_data & 0b111111111011;
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	051b      	lsls	r3, r3, #20
 8001612:	0d1b      	lsrs	r3, r3, #20
 8001614:	81fb      	strh	r3, [r7, #14]
	}

	return received_data;
 8001616:	89fb      	ldrh	r3, [r7, #14]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <TransmitReceiveSPI>:

uint16_t TransmitReceiveSPI(DRIVE_MOTOR drive_index, uint16_t data) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af02      	add	r7, sp, #8
 8001626:	4603      	mov	r3, r0
 8001628:	460a      	mov	r2, r1
 800162a:	71fb      	strb	r3, [r7, #7]
 800162c:	4613      	mov	r3, r2
 800162e:	80bb      	strh	r3, [r7, #4]
	// Convertir en 2 octets MSB-first
	uint8_t tx_data[2] = { (data >> 8) & 0xFF, data & 0xFF };
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	b29b      	uxth	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	743b      	strb	r3, [r7, #16]
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	747b      	strb	r3, [r7, #17]

	uint8_t rx_data[2] = { 0 };
 8001640:	2300      	movs	r3, #0
 8001642:	81bb      	strh	r3, [r7, #12]

	// Sélectionner la puce (CS à HIGH avant la transmission)
	SelectDriveCS(drive_index);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f834 	bl	80016b4 <SelectDriveCS>

	// Transmettre le message
	uint8_t err = HAL_SPI_TransmitReceive(hspi, tx_data, rx_data, 2,
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <TransmitReceiveSPI+0x88>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	f107 020c 	add.w	r2, r7, #12
 8001654:	f107 0110 	add.w	r1, r7, #16
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2302      	movs	r3, #2
 8001660:	f002 fef1 	bl	8004446 <HAL_SPI_TransmitReceive>
 8001664:	4603      	mov	r3, r0
 8001666:	75fb      	strb	r3, [r7, #23]
	HAL_MAX_DELAY);

	if (err != HAL_OK) {
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <TransmitReceiveSPI+0x62>
		// SPI erreur → allumer LED de diagnostic
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2104      	movs	r1, #4
 8001672:	480e      	ldr	r0, [pc, #56]	@ (80016ac <TransmitReceiveSPI+0x8c>)
 8001674:	f001 ffa0 	bl	80035b8 <HAL_GPIO_WritePin>
		hal_spi_transmitreceive_error++;
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <TransmitReceiveSPI+0x90>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	4a0c      	ldr	r2, [pc, #48]	@ (80016b0 <TransmitReceiveSPI+0x90>)
 8001680:	6013      	str	r3, [r2, #0]
	}

	// Désélectionner les puces (CS à LOW après la transmission)
	UnselectDriveCS();
 8001682:	f000 f863 	bl	800174c <UnselectDriveCS>

	// Reconstruire la valeur lue
	uint16_t received_data = ((uint16_t) rx_data[0] << 8) | rx_data[1];
 8001686:	7b3b      	ldrb	r3, [r7, #12]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	7b7b      	ldrb	r3, [r7, #13]
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	82bb      	strh	r3, [r7, #20]
	 //HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
	 //flag_drive_fault = 1;
	 }*/

	// Extraire seulement les 12 bits de data
	return received_data & 0x0FFF;
 8001696:	8abb      	ldrh	r3, [r7, #20]
 8001698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169c:	b29b      	uxth	r3, r3

}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000003c 	.word	0x2000003c
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	2000028c 	.word	0x2000028c

080016b4 <SelectDriveCS>:

void SelectDriveCS(DRIVE_MOTOR drive_index) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	e037      	b.n	8001734 <SelectDriveCS+0x80>
		if (num != drive_index) {
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d016      	beq.n	80016fa <SelectDriveCS+0x46>
			// Désélectionner la puce (CS à LOW après la transmission)
			HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS], drive_pins[num][DRIVE_CS],
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	491d      	ldr	r1, [pc, #116]	@ (8001744 <SelectDriveCS+0x90>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	3308      	adds	r3, #8
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	4919      	ldr	r1, [pc, #100]	@ (8001748 <SelectDriveCS+0x94>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	440b      	add	r3, r1
 80016ec:	3304      	adds	r3, #4
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f001 ff60 	bl	80035b8 <HAL_GPIO_WritePin>
 80016f8:	e019      	b.n	800172e <SelectDriveCS+0x7a>
					GPIO_PIN_RESET);
		} else if (num == drive_index) {
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d115      	bne.n	800172e <SelectDriveCS+0x7a>
			// Sélectionner la puce (CS à HIGH avant la transmission)
			HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS], drive_pins[num][DRIVE_CS],
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	490f      	ldr	r1, [pc, #60]	@ (8001744 <SelectDriveCS+0x90>)
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	3308      	adds	r3, #8
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	490c      	ldr	r1, [pc, #48]	@ (8001748 <SelectDriveCS+0x94>)
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	440b      	add	r3, r1
 8001722:	3304      	adds	r3, #4
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	4619      	mov	r1, r3
 800172a:	f001 ff45 	bl	80035b8 <HAL_GPIO_WritePin>
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	3301      	adds	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d9c4      	bls.n	80016c4 <SelectDriveCS+0x10>
					GPIO_PIN_SET);
		}
	}
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	20000028 	.word	0x20000028

0800174c <UnselectDriveCS>:

void UnselectDriveCS() {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	e018      	b.n	800178a <UnselectDriveCS+0x3e>
		// Désélectionner la puce (CS à LOW après la transmission)
		HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS], drive_pins[num][DRIVE_CS],
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	4910      	ldr	r1, [pc, #64]	@ (800179c <UnselectDriveCS+0x50>)
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	3308      	adds	r3, #8
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <UnselectDriveCS+0x54>)
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	440b      	add	r3, r1
 8001778:	3304      	adds	r3, #4
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	f001 ff1a 	bl	80035b8 <HAL_GPIO_WritePin>
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	3301      	adds	r3, #1
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d9e3      	bls.n	8001758 <UnselectDriveCS+0xc>
				GPIO_PIN_RESET);
	}
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000028 	.word	0x20000028

080017a4 <ReadRegConfig>:

uint16_t ReadRegConfig(DRIVE_MOTOR drive_index, uint8_t reg) {
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
	uint16_t reg_data = -1;
 80017b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017b8:	81fb      	strh	r3, [r7, #14]

	switch (reg) {
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	2b07      	cmp	r3, #7
 80017be:	d852      	bhi.n	8001866 <ReadRegConfig+0xc2>
 80017c0:	a201      	add	r2, pc, #4	@ (adr r2, 80017c8 <ReadRegConfig+0x24>)
 80017c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c6:	bf00      	nop
 80017c8:	080017e9 	.word	0x080017e9
 80017cc:	080017f7 	.word	0x080017f7
 80017d0:	08001807 	.word	0x08001807
 80017d4:	08001817 	.word	0x08001817
 80017d8:	08001827 	.word	0x08001827
 80017dc:	08001837 	.word	0x08001837
 80017e0:	08001847 	.word	0x08001847
 80017e4:	08001857 	.word	0x08001857
	case 0:
		reg_data = drive_regs[drive_index].ctrl_reg.reg;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4a24      	ldr	r2, [pc, #144]	@ (800187c <ReadRegConfig+0xd8>)
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	81fb      	strh	r3, [r7, #14]
		break;
 80017f4:	e03a      	b.n	800186c <ReadRegConfig+0xc8>
	case 1:
		reg_data = drive_regs[drive_index].torque_reg.reg;
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4a20      	ldr	r2, [pc, #128]	@ (800187c <ReadRegConfig+0xd8>)
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	4413      	add	r3, r2
 80017fe:	3302      	adds	r3, #2
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	81fb      	strh	r3, [r7, #14]
		break;
 8001804:	e032      	b.n	800186c <ReadRegConfig+0xc8>
	case 2:
		reg_data = drive_regs[drive_index].off_reg.reg;
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	4a1c      	ldr	r2, [pc, #112]	@ (800187c <ReadRegConfig+0xd8>)
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	81fb      	strh	r3, [r7, #14]
		break;
 8001814:	e02a      	b.n	800186c <ReadRegConfig+0xc8>
	case 3:
		reg_data = drive_regs[drive_index].blank_reg.reg;
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	4a18      	ldr	r2, [pc, #96]	@ (800187c <ReadRegConfig+0xd8>)
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	3306      	adds	r3, #6
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	81fb      	strh	r3, [r7, #14]
		break;
 8001824:	e022      	b.n	800186c <ReadRegConfig+0xc8>
	case 4:
		reg_data = drive_regs[drive_index].decay_reg.reg;
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4a14      	ldr	r2, [pc, #80]	@ (800187c <ReadRegConfig+0xd8>)
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	4413      	add	r3, r2
 800182e:	3308      	adds	r3, #8
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	81fb      	strh	r3, [r7, #14]
		break;
 8001834:	e01a      	b.n	800186c <ReadRegConfig+0xc8>
	case 5:
		reg_data = drive_regs[drive_index].stall_reg.reg;
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4a10      	ldr	r2, [pc, #64]	@ (800187c <ReadRegConfig+0xd8>)
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4413      	add	r3, r2
 800183e:	330a      	adds	r3, #10
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	81fb      	strh	r3, [r7, #14]
		break;
 8001844:	e012      	b.n	800186c <ReadRegConfig+0xc8>
	case 6:
		reg_data = drive_regs[drive_index].drive_reg.reg;
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4a0c      	ldr	r2, [pc, #48]	@ (800187c <ReadRegConfig+0xd8>)
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	330c      	adds	r3, #12
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	81fb      	strh	r3, [r7, #14]
		break;
 8001854:	e00a      	b.n	800186c <ReadRegConfig+0xc8>
	case 7:
		reg_data = drive_regs[drive_index].status_reg.reg;
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4a08      	ldr	r2, [pc, #32]	@ (800187c <ReadRegConfig+0xd8>)
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	4413      	add	r3, r2
 800185e:	330e      	adds	r3, #14
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	81fb      	strh	r3, [r7, #14]
		break;
 8001864:	e002      	b.n	800186c <ReadRegConfig+0xc8>
	default:
		reg_data = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	81fb      	strh	r3, [r7, #14]
		break;
 800186a:	bf00      	nop
	}
	return reg_data;
 800186c:	89fb      	ldrh	r3, [r7, #14]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000260 	.word	0x20000260

08001880 <CheckDriveStatusRegister>:
 *   → Bit 10 (UVLO) = 1 → tension trop faible
 *   → Tous les autres bits = 0 → pas de défaut détecté sur les ponts A/B
 */
static uint16_t last_status = 0;
uint8_t flag_drive_fault = 0;
uint8_t CheckDriveStatusRegister(DRIVE_MOTOR drive_index) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	uint16_t status = ReadSPI(drive_index, DRV8711_STATUS_REG);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2107      	movs	r1, #7
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe88 	bl	80015a4 <ReadSPI>
 8001894:	4603      	mov	r3, r0
 8001896:	81fb      	strh	r3, [r7, #14]

	if (status != 0x0000) {
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <CheckDriveStatusRegister+0x2e>
		// Une ou plusieurs erreurs détectées → flag drive en faute
		last_status = status;
 800189e:	4a08      	ldr	r2, [pc, #32]	@ (80018c0 <CheckDriveStatusRegister+0x40>)
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	8013      	strh	r3, [r2, #0]
		flag_drive_fault = 1;
 80018a4:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <CheckDriveStatusRegister+0x44>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
		return 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e003      	b.n	80018b6 <CheckDriveStatusRegister+0x36>
	} else {
		// Pas d'erreur
		flag_drive_fault = 0;
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <CheckDriveStatusRegister+0x44>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
		return 0;
 80018b4:	2300      	movs	r3, #0
	}
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000290 	.word	0x20000290
 80018c4:	20000292 	.word	0x20000292

080018c8 <EnableDrive>:

void ResetDriveStatusRegister(DRIVE_MOTOR drive_index) {
	WriteSPI(drive_index, DRV8711_STATUS_REG, 0);
}

void EnableDrive(DRIVE_MOTOR drive_index) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
	if (CheckDriveStatusRegister(drive_index) != 0) {
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ffd3 	bl	8001880 <CheckDriveStatusRegister>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d121      	bne.n	8001924 <EnableDrive+0x5c>
		return;
	}

	uint16_t reg_config = ReadRegConfig(drive_index, 0);
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <ReadRegConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	81fb      	strh	r3, [r7, #14]
	reg_config = reg_config | 0x0001;
 80018ee:	89fb      	ldrh	r3, [r7, #14]
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	81fb      	strh	r3, [r7, #14]

	WriteSPI(drive_index, DRV8711_CTRL_REG, reg_config);
 80018f6:	89fa      	ldrh	r2, [r7, #14]
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fdb7 	bl	8001470 <WriteSPI>

	drive_regs[drive_index].ctrl_reg.enbl = 1;
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4a09      	ldr	r2, [pc, #36]	@ (800192c <EnableDrive+0x64>)
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	441a      	add	r2, r3
 800190a:	7813      	ldrb	r3, [r2, #0]
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	7013      	strb	r3, [r2, #0]

	ReadAndVerifyDriveRegisters(drive_index);
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fd77 	bl	8001408 <ReadAndVerifyDriveRegisters>
	CheckDriveStatusRegister(drive_index);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ffaf 	bl	8001880 <CheckDriveStatusRegister>
 8001922:	e000      	b.n	8001926 <EnableDrive+0x5e>
		return;
 8001924:	bf00      	nop
}
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000260 	.word	0x20000260

08001930 <DirectionDrive>:

	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_STEP],
			drive_pins[drive_index][DRIVE_STEP], GPIO_PIN_SET);
}

void DirectionDrive(DRIVE_MOTOR drive_index, uint8_t dir) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	if (CheckDriveStatusRegister(drive_index) != 0) {
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff9c 	bl	8001880 <CheckDriveStatusRegister>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d161      	bne.n	8001a12 <DirectionDrive+0xe2>
		return;
	}
	uint16_t reg_config = ReadRegConfig(drive_index, 0);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff26 	bl	80017a4 <ReadRegConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	81fb      	strh	r3, [r7, #14]

	if (drive_regs[drive_index].ctrl_reg.rdir != 0) {
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4a30      	ldr	r2, [pc, #192]	@ (8001a20 <DirectionDrive+0xf0>)
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d018      	beq.n	80019a2 <DirectionDrive+0x72>
		drive_regs[drive_index].ctrl_reg.rdir = 0;
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4a2b      	ldr	r2, [pc, #172]	@ (8001a20 <DirectionDrive+0xf0>)
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	441a      	add	r2, r3
 8001978:	7813      	ldrb	r3, [r2, #0]
 800197a:	f36f 0341 	bfc	r3, #1, #1
 800197e:	7013      	strb	r3, [r2, #0]
		reg_config = ReadRegConfig(drive_index, 0);
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff0d 	bl	80017a4 <ReadRegConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	81fb      	strh	r3, [r7, #14]
		WriteSPI(drive_index, DRV8711_CTRL_REG, reg_config);
 800198e:	89fa      	ldrh	r2, [r7, #14]
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fd6b 	bl	8001470 <WriteSPI>
		ReadAndVerifyDriveRegisters(drive_index);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fd33 	bl	8001408 <ReadAndVerifyDriveRegisters>
	}

	if (dir == 0) {
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d116      	bne.n	80019d6 <DirectionDrive+0xa6>
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_DIR],
 80019a8:	79fa      	ldrb	r2, [r7, #7]
 80019aa:	491e      	ldr	r1, [pc, #120]	@ (8001a24 <DirectionDrive+0xf4>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	3310      	adds	r3, #16
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	491a      	ldr	r1, [pc, #104]	@ (8001a28 <DirectionDrive+0xf8>)
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	440b      	add	r3, r1
 80019c8:	3308      	adds	r3, #8
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	f001 fdf2 	bl	80035b8 <HAL_GPIO_WritePin>
 80019d4:	e018      	b.n	8001a08 <DirectionDrive+0xd8>
				drive_pins[drive_index][DRIVE_DIR], GPIO_PIN_RESET);
	} else if (dir == 1) {
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d11c      	bne.n	8001a16 <DirectionDrive+0xe6>
		HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_DIR],
 80019dc:	79fa      	ldrb	r2, [r7, #7]
 80019de:	4911      	ldr	r1, [pc, #68]	@ (8001a24 <DirectionDrive+0xf4>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3310      	adds	r3, #16
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	490d      	ldr	r1, [pc, #52]	@ (8001a28 <DirectionDrive+0xf8>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	440b      	add	r3, r1
 80019fc:	3308      	adds	r3, #8
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4619      	mov	r1, r3
 8001a04:	f001 fdd8 	bl	80035b8 <HAL_GPIO_WritePin>
				drive_pins[drive_index][DRIVE_DIR], GPIO_PIN_SET);
	} else {
		return;
	}

	CheckDriveStatusRegister(drive_index);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff38 	bl	8001880 <CheckDriveStatusRegister>
 8001a10:	e002      	b.n	8001a18 <DirectionDrive+0xe8>
		return;
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <DirectionDrive+0xe8>
		return;
 8001a16:	bf00      	nop
}
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000260 	.word	0x20000260
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000028 	.word	0x20000028

08001a2c <StepFunction>:
uint32_t max_speed = (uint32_t) ((0xFF * 0.00000002) + (0xFF * 0.0000005)) * 1000000;
#define SPEED 500
uint32_t half_speed = SPEED >> 1;  // Divides by 2
uint32_t counter = 0;
uint32_t one_turn_counter = 0;
void StepFunction() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

	if (counter >= SPEED) { //0
 8001a30:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <StepFunction+0x8c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a38:	d31f      	bcc.n	8001a7a <StepFunction+0x4e>
		counter = 0;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <StepFunction+0x8c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
		if (motor_pitch_on == 1) {
 8001a40:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <StepFunction+0x90>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d135      	bne.n	8001ab4 <StepFunction+0x88>
			if (one_turn_counter >= 200) {
 8001a48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <StepFunction+0x94>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8001a4e:	d906      	bls.n	8001a5e <StepFunction+0x32>
				motor_pitch_on = 0;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <StepFunction+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
				one_turn_counter = 0;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <StepFunction+0x94>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e004      	b.n	8001a68 <StepFunction+0x3c>
				//CheckDriveStatusRegister(DRIVE1);
				//ReadAndVerifyDriveRegisters(DRIVE1);
			} else {
				one_turn_counter++;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <StepFunction+0x94>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a16      	ldr	r2, [pc, #88]	@ (8001ac0 <StepFunction+0x94>)
 8001a66:	6013      	str	r3, [r2, #0]
			}
			//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(drive_ports[DRIVE1][DRIVE_STEP],
 8001a68:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <StepFunction+0x98>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <StepFunction+0x9c>)
 8001a6e:	88d1      	ldrh	r1, [r2, #6]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fda0 	bl	80035b8 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_RESET);
		}
	} else {
		counter++;
	}
}
 8001a78:	e01c      	b.n	8001ab4 <StepFunction+0x88>
	} else if (counter == half_speed) {
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <StepFunction+0x8c>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <StepFunction+0xa0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d111      	bne.n	8001aaa <StepFunction+0x7e>
		counter++;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <StepFunction+0x8c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <StepFunction+0x8c>)
 8001a8e:	6013      	str	r3, [r2, #0]
		if (motor_pitch_on == 1) {
 8001a90:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <StepFunction+0x90>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10d      	bne.n	8001ab4 <StepFunction+0x88>
			HAL_GPIO_WritePin(drive_ports[DRIVE1][DRIVE_STEP],
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <StepFunction+0x98>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <StepFunction+0x9c>)
 8001a9e:	88d1      	ldrh	r1, [r2, #6]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fd88 	bl	80035b8 <HAL_GPIO_WritePin>
}
 8001aa8:	e004      	b.n	8001ab4 <StepFunction+0x88>
		counter++;
 8001aaa:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <StepFunction+0x8c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4a01      	ldr	r2, [pc, #4]	@ (8001ab8 <StepFunction+0x8c>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000294 	.word	0x20000294
 8001abc:	20000280 	.word	0x20000280
 8001ac0:	20000298 	.word	0x20000298
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000028 	.word	0x20000028
 8001acc:	20000040 	.word	0x20000040

08001ad0 <InitRegValuesStepper>:

void InitRegValuesStepper(DRIVE_MOTOR drive_index) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
//
// ───── CTRL REGISTER (0x00) ─────────────────────────────────────────────
// Contrôle principal du moteur (activation, direction, step, mode de microstep)
//
	drive_regs[drive_index].ctrl_reg.enbl = 0;
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4a6b      	ldr	r2, [pc, #428]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	441a      	add	r2, r3
 8001ae2:	7813      	ldrb	r3, [r2, #0]
 8001ae4:	f36f 0300 	bfc	r3, #0, #1
 8001ae8:	7013      	strb	r3, [r2, #0]
// ENBL : Active la sortie du driver
// 0 = désactivé (sorties en haute impédance), 1 = activé
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.rdir = 0;
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4a67      	ldr	r2, [pc, #412]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	441a      	add	r2, r3
 8001af2:	7813      	ldrb	r3, [r2, #0]
 8001af4:	f36f 0341 	bfc	r3, #1, #1
 8001af8:	7013      	strb	r3, [r2, #0]
// RDIR : Direction contrôlée par pin DIR si = 0, sinon inversée
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.rstep = 0;
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4a63      	ldr	r2, [pc, #396]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	441a      	add	r2, r3
 8001b02:	7813      	ldrb	r3, [r2, #0]
 8001b04:	f36f 0382 	bfc	r3, #2, #1
 8001b08:	7013      	strb	r3, [r2, #0]
// RSTEP : 1: Indexer will advance one step; automatically cleared after write
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.mode = 0b0001;
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4a5f      	ldr	r2, [pc, #380]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	441a      	add	r2, r3
 8001b12:	7813      	ldrb	r3, [r2, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	f361 03c6 	bfi	r3, r1, #3, #4
 8001b1a:	7013      	strb	r3, [r2, #0]
// MODE : Réglage du microstepping (0 = full step, jusqu’à 0b1000 = 1/256)
// Par défaut DRV8711 : 0b0000 (full step)

	drive_regs[drive_index].ctrl_reg.extstall = 0;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	441a      	add	r2, r3
 8001b24:	7813      	ldrb	r3, [r2, #0]
 8001b26:	f36f 13c7 	bfc	r3, #7, #1
 8001b2a:	7013      	strb	r3, [r2, #0]
// EXTSTALL : 0 = Stall détecté en interne, 1 = via pin externe
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.isgain = 0b00;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4a57      	ldr	r2, [pc, #348]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	441a      	add	r2, r3
 8001b34:	7853      	ldrb	r3, [r2, #1]
 8001b36:	f36f 0301 	bfc	r3, #0, #2
 8001b3a:	7053      	strb	r3, [r2, #1]
// ISGAIN : Gain du senseur de courant (00 = 5, 01 = 10, 10 = 20, 11 = 40)
// Par défaut DRV8711 : 0b00 (gain de 5)

	drive_regs[drive_index].ctrl_reg.dtime = 0b00;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4a53      	ldr	r2, [pc, #332]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	441a      	add	r2, r3
 8001b44:	7853      	ldrb	r3, [r2, #1]
 8001b46:	f36f 0383 	bfc	r3, #2, #2
 8001b4a:	7053      	strb	r3, [r2, #1]

//
// ───── TORQUE REGISTER (0x01) ───────────────────────────────────────────
// Détermine le courant de phase appliqué
//
	drive_regs[drive_index].torque_reg.torque = 13; // 100% de puissance avec isgain à 20
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	4a4f      	ldr	r2, [pc, #316]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	3302      	adds	r3, #2
 8001b56:	220d      	movs	r2, #13
 8001b58:	701a      	strb	r2, [r3, #0]
// TORQUE : Niveau de couple (0–255), proportionnel au courant de sortie
// Par défaut DRV8711 : 0xFF (255)

	drive_regs[drive_index].torque_reg.smplth = 0b000;
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	441a      	add	r2, r3
 8001b62:	78d3      	ldrb	r3, [r2, #3]
 8001b64:	f36f 0302 	bfc	r3, #0, #3
 8001b68:	70d3      	strb	r3, [r2, #3]

//
// ───── OFF REGISTER (0x02) ──────────────────────────────────────────────
// Temps d’arrêt de PWM et mode PWM
//
	drive_regs[drive_index].off_reg.toff = 0x00;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4a47      	ldr	r2, [pc, #284]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	3304      	adds	r3, #4
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
// TOFF : Temps mort (0 = désactivé, >0 = en pas de 500ns)
// Par défaut DRV8711 : 0x30 (24 = 12 µs)

	drive_regs[drive_index].off_reg.pwmmode = 0;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	4a44      	ldr	r2, [pc, #272]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	441a      	add	r2, r3
 8001b80:	7953      	ldrb	r3, [r2, #5]
 8001b82:	f36f 0300 	bfc	r3, #0, #1
 8001b86:	7153      	strb	r3, [r2, #5]
// Par défaut DRV8711 : 0

//// ───── BLANK REGISTER (0x03) ────────────────────────────────────────────
// Temps de masquage de détection de courant après une commutation
//
	drive_regs[drive_index].blank_reg.tblank = 0x00;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	4a40      	ldr	r2, [pc, #256]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	4413      	add	r3, r2
 8001b90:	3306      	adds	r3, #6
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
// TBLANK : Masque de courant (en pas de 20ns) - — 0x80 = 2.56 µs
// Par défaut DRV8711 : 0x80

	drive_regs[drive_index].blank_reg.abt = 1;
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4a3c      	ldr	r2, [pc, #240]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	441a      	add	r2, r3
 8001b9e:	79d3      	ldrb	r3, [r2, #7]
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	71d3      	strb	r3, [r2, #7]

//
// ───── DECAY REGISTER (0x04) ────────────────────────────────────────────
// Contrôle le mode de "décroissance" du courant moteur
//
	drive_regs[drive_index].decay_reg.tdecay = 0x10;
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4a38      	ldr	r2, [pc, #224]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	3308      	adds	r3, #8
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	701a      	strb	r2, [r3, #0]
// TDECAY : temps avant transition entre fast et slow decay (500ns steps)
// Par défaut DRV8711 : 0x10 (8 µs)

	drive_regs[drive_index].decay_reg.decmod = 0b101;
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4a35      	ldr	r2, [pc, #212]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	f103 0208 	add.w	r2, r3, #8
 8001bc0:	7853      	ldrb	r3, [r2, #1]
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	f361 0302 	bfi	r3, r1, #0, #3
 8001bc8:	7053      	strb	r3, [r2, #1]

//
// ───── STALL REGISTER (0x05) ────────────────────────────────────────────
// Détection de blocage moteur (optionnel)
//
	drive_regs[drive_index].stall_reg.sdthr = 0x3F; //0xFF
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	4413      	add	r3, r2
 8001bd2:	330a      	adds	r3, #10
 8001bd4:	223f      	movs	r2, #63	@ 0x3f
 8001bd6:	701a      	strb	r2, [r3, #0]
// SDTHR : Seuil de BEMF pour détecter un blocage
// Par défaut DRV8711 : 0x40

	drive_regs[drive_index].stall_reg.sdcnt = 0b00; //0b11
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	4a2c      	ldr	r2, [pc, #176]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	f103 0208 	add.w	r2, r3, #8
 8001be4:	78d3      	ldrb	r3, [r2, #3]
 8001be6:	f36f 0301 	bfc	r3, #0, #2
 8001bea:	70d3      	strb	r3, [r2, #3]
// SDCNT : nombre de pas requis avant détection (00 = 2, ..., 11 = 8 pas)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].stall_reg.vdiv = 0b10;
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	4a27      	ldr	r2, [pc, #156]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f103 0208 	add.w	r2, r3, #8
 8001bf8:	78d3      	ldrb	r3, [r2, #3]
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	f361 0383 	bfi	r3, r1, #2, #2
 8001c00:	70d3      	strb	r3, [r2, #3]

//
// ───── DRIVE REGISTER (0x06) ────────────────────────────────────────────
// Réglage de la puissance des transistors MOSFET (gate drive)
//
	drive_regs[drive_index].drive_reg.ocpth = 0b00; //00
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4a21      	ldr	r2, [pc, #132]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	4413      	add	r3, r2
 8001c0a:	f103 0208 	add.w	r2, r3, #8
 8001c0e:	7913      	ldrb	r3, [r2, #4]
 8001c10:	f36f 0301 	bfc	r3, #0, #2
 8001c14:	7113      	strb	r3, [r2, #4]
// OCPTH : OCP threshold (00 = 250mV, 01 = 500mV, 10 = 750mV, 11 = 1000mV)
// Par défaut DRV8711 : 0b01

	drive_regs[drive_index].drive_reg.ocpdeg = 0b10; //10
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f103 0208 	add.w	r2, r3, #8
 8001c22:	7913      	ldrb	r3, [r2, #4]
 8001c24:	2102      	movs	r1, #2
 8001c26:	f361 0383 	bfi	r3, r1, #2, #2
 8001c2a:	7113      	strb	r3, [r2, #4]
// OCPDEG : OCP deglitch time (00 = 1 µs, 01 = 2 µs, 10 = 4 µs, 11 = 8 µs)
// Par défaut DRV8711 : 0b10

	drive_regs[drive_index].drive_reg.tdriven = 0b10; //10
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4a17      	ldr	r2, [pc, #92]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	4413      	add	r3, r2
 8001c34:	f103 0208 	add.w	r2, r3, #8
 8001c38:	7913      	ldrb	r3, [r2, #4]
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	f361 1305 	bfi	r3, r1, #4, #2
 8001c40:	7113      	strb	r3, [r2, #4]
// TDRIVEN : Low-side gate drive time (00 = 250ns, 01 = 500ns, 10 = 1us, 11 = 2us)
// Par défaut DRV8711 : 0b01

	drive_regs[drive_index].drive_reg.tdrivep = 0b10; //10
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	f103 0208 	add.w	r2, r3, #8
 8001c4e:	7913      	ldrb	r3, [r2, #4]
 8001c50:	2102      	movs	r1, #2
 8001c52:	f361 1387 	bfi	r3, r1, #6, #2
 8001c56:	7113      	strb	r3, [r2, #4]
// TDRIVEP : High-side gate drive time (00 = 250ns, 01 = 500ns, 10 = 1us, 11 = 2us)
// Par défaut DRV8711 : 0b01

	drive_regs[drive_index].drive_reg.idriven = 0b00; //11
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4413      	add	r3, r2
 8001c60:	f103 0208 	add.w	r2, r3, #8
 8001c64:	7953      	ldrb	r3, [r2, #5]
 8001c66:	f36f 0301 	bfc	r3, #0, #2
 8001c6a:	7153      	strb	r3, [r2, #5]
// IDRIVEP : Low-side gate drive peak current peak (sink) (00 = 100mA, 01 = 200mA, 10 = 300mA, 11 = 400mA)
// Par défaut DRV8711 : 0b10

	drive_regs[drive_index].drive_reg.idrivep = 0b00; //11
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <InitRegValuesStepper+0x1bc>)
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	f103 0208 	add.w	r2, r3, #8
 8001c78:	7953      	ldrb	r3, [r2, #5]
 8001c7a:	f36f 0383 	bfc	r3, #2, #2
 8001c7e:	7153      	strb	r3, [r2, #5]
// IDRIVEP : High-side gate drive peak current peak (source) (00 = 50mA, 01 = 100mA, 10 = 150mA, 11 = 200mA)
// Par défaut DRV8711 : 0b10
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20000260 	.word	0x20000260

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <HAL_MspInit+0x90>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	4a20      	ldr	r2, [pc, #128]	@ (8001d20 <HAL_MspInit+0x90>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <HAL_MspInit+0x90>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <HAL_MspInit+0x90>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a19      	ldr	r2, [pc, #100]	@ (8001d20 <HAL_MspInit+0x90>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <HAL_MspInit+0x90>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	f06f 000b 	mvn.w	r0, #11
 8001cd6:	f001 fa8c 	bl	80031f2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2101      	movs	r1, #1
 8001cde:	f06f 000a 	mvn.w	r0, #10
 8001ce2:	f001 fa86 	bl	80031f2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2101      	movs	r1, #1
 8001cea:	f06f 0009 	mvn.w	r0, #9
 8001cee:	f001 fa80 	bl	80031f2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	f06f 0004 	mvn.w	r0, #4
 8001cfa:	f001 fa7a 	bl	80031f2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2101      	movs	r1, #1
 8001d02:	f06f 0003 	mvn.w	r0, #3
 8001d06:	f001 fa74 	bl	80031f2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	f06f 0001 	mvn.w	r0, #1
 8001d12:	f001 fa6e 	bl	80031f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	@ 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <HAL_CAN_MspInit+0xa4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d13c      	bne.n	8001dc0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_CAN_MspInit+0xa8>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dcc <HAL_CAN_MspInit+0xa8>)
 8001d50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d56:	4b1d      	ldr	r3, [pc, #116]	@ (8001dcc <HAL_CAN_MspInit+0xa8>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_CAN_MspInit+0xa8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a18      	ldr	r2, [pc, #96]	@ (8001dcc <HAL_CAN_MspInit+0xa8>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <HAL_CAN_MspInit+0xa8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d90:	2309      	movs	r3, #9
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480d      	ldr	r0, [pc, #52]	@ (8001dd0 <HAL_CAN_MspInit+0xac>)
 8001d9c:	f001 fa60 	bl	8003260 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2101      	movs	r1, #1
 8001da4:	2014      	movs	r0, #20
 8001da6:	f001 fa24 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001daa:	2014      	movs	r0, #20
 8001dac:	f001 fa3d 	bl	800322a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2101      	movs	r1, #1
 8001db4:	2015      	movs	r0, #21
 8001db6:	f001 fa1c 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001dba:	2015      	movs	r0, #21
 8001dbc:	f001 fa35 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40006400 	.word	0x40006400
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a21      	ldr	r2, [pc, #132]	@ (8001e78 <HAL_SPI_MspInit+0xa4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d13b      	bne.n	8001e6e <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <HAL_SPI_MspInit+0xa8>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001e7c <HAL_SPI_MspInit+0xa8>)
 8001e00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_SPI_MspInit+0xa8>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_SPI_MspInit+0xa8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a18      	ldr	r2, [pc, #96]	@ (8001e7c <HAL_SPI_MspInit+0xa8>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <HAL_SPI_MspInit+0xa8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e2e:	23a0      	movs	r3, #160	@ 0xa0
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	480d      	ldr	r0, [pc, #52]	@ (8001e80 <HAL_SPI_MspInit+0xac>)
 8001e4a:	f001 fa09 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e4e:	2340      	movs	r3, #64	@ 0x40
 8001e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5e:	2305      	movs	r3, #5
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	@ (8001e80 <HAL_SPI_MspInit+0xac>)
 8001e6a:	f001 f9f9 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e6e:	bf00      	nop
 8001e70:	3728      	adds	r7, #40	@ 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40013000 	.word	0x40013000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020000 	.word	0x40020000

08001e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	@ 0x30
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea4:	d135      	bne.n	8001f12 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	4b37      	ldr	r3, [pc, #220]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4a36      	ldr	r2, [pc, #216]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	4b30      	ldr	r3, [pc, #192]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a2f      	ldr	r2, [pc, #188]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4824      	ldr	r0, [pc, #144]	@ (8001f8c <HAL_TIM_Base_MspInit+0x108>)
 8001efc:	f001 f9b0 	bl	8003260 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	201c      	movs	r0, #28
 8001f06:	f001 f974 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f0a:	201c      	movs	r0, #28
 8001f0c:	f001 f98d 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f10:	e036      	b.n	8001f80 <HAL_TIM_Base_MspInit+0xfc>
  else if(htim_base->Instance==TIM3)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <HAL_TIM_Base_MspInit+0x10c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d116      	bne.n	8001f4a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	4a18      	ldr	r2, [pc, #96]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2c:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	201d      	movs	r0, #29
 8001f3e:	f001 f958 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f42:	201d      	movs	r0, #29
 8001f44:	f001 f971 	bl	800322a <HAL_NVIC_EnableIRQ>
}
 8001f48:	e01a      	b.n	8001f80 <HAL_TIM_Base_MspInit+0xfc>
  else if(htim_base->Instance==TIM4)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <HAL_TIM_Base_MspInit+0x110>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d115      	bne.n	8001f80 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <HAL_TIM_Base_MspInit+0x104>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	201e      	movs	r0, #30
 8001f76:	f001 f93c 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f7a:	201e      	movs	r0, #30
 8001f7c:	f001 f955 	bl	800322a <HAL_NVIC_EnableIRQ>
}
 8001f80:	bf00      	nop
 8001f82:	3730      	adds	r7, #48	@ 0x30
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <NMI_Handler+0x4>

08001fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <MemManage_Handler+0x4>

08001fb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fee:	f000 f929 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <CAN1_RX0_IRQHandler+0x10>)
 8001ffe:	f000 fdf8 	bl	8002bf2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000006c 	.word	0x2000006c

0800200c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <CAN1_RX1_IRQHandler+0x10>)
 8002012:	f000 fdee 	bl	8002bf2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000006c 	.word	0x2000006c

08002020 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_Pin);
 8002024:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002028:	f001 fafa 	bl	8003620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_Pin);
 800202c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002030:	f001 faf6 	bl	8003620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

	// HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}

08002038 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800203c:	4803      	ldr	r0, [pc, #12]	@ (800204c <TIM2_IRQHandler+0x14>)
 800203e:	f002 fd47 	bl	8004ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

	StepFunction();
 8002042:	f7ff fcf3 	bl	8001a2c <StepFunction>

  /* USER CODE END TIM2_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200000ec 	.word	0x200000ec

08002050 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002054:	4824      	ldr	r0, [pc, #144]	@ (80020e8 <TIM3_IRQHandler+0x98>)
 8002056:	f002 fd3b 	bl	8004ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if (counter_50ms > 50) {
 800205a:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <TIM3_IRQHandler+0x9c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b32      	cmp	r3, #50	@ 0x32
 8002060:	d906      	bls.n	8002070 <TIM3_IRQHandler+0x20>
		counter_50ms = 0;
 8002062:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <TIM3_IRQHandler+0x9c>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
		timer50ms_flag = 1;
 8002068:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <TIM3_IRQHandler+0xa0>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e005      	b.n	800207c <TIM3_IRQHandler+0x2c>
	} else {
		counter_50ms++;
 8002070:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <TIM3_IRQHandler+0x9c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b1c      	ldr	r3, [pc, #112]	@ (80020ec <TIM3_IRQHandler+0x9c>)
 800207a:	701a      	strb	r2, [r3, #0]
	}

	if (counter_100ms > 100) {
 800207c:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <TIM3_IRQHandler+0xa4>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b64      	cmp	r3, #100	@ 0x64
 8002082:	d906      	bls.n	8002092 <TIM3_IRQHandler+0x42>
		counter_100ms = 0;
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <TIM3_IRQHandler+0xa4>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
		timer100ms_flag = 1;
 800208a:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <TIM3_IRQHandler+0xa8>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e005      	b.n	800209e <TIM3_IRQHandler+0x4e>
	} else {
		counter_100ms++;
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <TIM3_IRQHandler+0xa4>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <TIM3_IRQHandler+0xa4>)
 800209c:	701a      	strb	r2, [r3, #0]
	}

	if (counter_250ms > 250) {
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <TIM3_IRQHandler+0xac>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2bfa      	cmp	r3, #250	@ 0xfa
 80020a4:	d906      	bls.n	80020b4 <TIM3_IRQHandler+0x64>
		counter_250ms = 0;
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <TIM3_IRQHandler+0xac>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
		timer250ms_flag = 1;
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <TIM3_IRQHandler+0xb0>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e005      	b.n	80020c0 <TIM3_IRQHandler+0x70>
	} else {
		counter_250ms++;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <TIM3_IRQHandler+0xac>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <TIM3_IRQHandler+0xac>)
 80020be:	701a      	strb	r2, [r3, #0]
	}

	if (counter_500ms > 500) {
 80020c0:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <TIM3_IRQHandler+0xb4>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020c8:	d906      	bls.n	80020d8 <TIM3_IRQHandler+0x88>
		counter_500ms = 0;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <TIM3_IRQHandler+0xb4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	801a      	strh	r2, [r3, #0]
		timer500ms_flag = 1;
 80020d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <TIM3_IRQHandler+0xb8>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
	} else {
		counter_500ms++;
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80020d6:	e005      	b.n	80020e4 <TIM3_IRQHandler+0x94>
		counter_500ms++;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <TIM3_IRQHandler+0xb4>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <TIM3_IRQHandler+0xb4>)
 80020e2:	801a      	strh	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000134 	.word	0x20000134
 80020ec:	200002a0 	.word	0x200002a0
 80020f0:	2000029c 	.word	0x2000029c
 80020f4:	200002a1 	.word	0x200002a1
 80020f8:	2000029d 	.word	0x2000029d
 80020fc:	200002a2 	.word	0x200002a2
 8002100:	2000029e 	.word	0x2000029e
 8002104:	200002a4 	.word	0x200002a4
 8002108:	2000029f 	.word	0x2000029f

0800210c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002110:	4803      	ldr	r0, [pc, #12]	@ (8002120 <TIM4_IRQHandler+0x14>)
 8002112:	f002 fcdd 	bl	8004ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

	motor_pitch_on = 1;                 // your action
 8002116:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <TIM4_IRQHandler+0x18>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
	//HAL_TIM_Base_Stop_IT(&htim4);       // stop generating further IRQs
	//__HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);  // ensure UIF is cleared

  /* USER CODE END TIM4_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000017c 	.word	0x2000017c
 8002124:	20000280 	.word	0x20000280

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	@ (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800214c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002184 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002150:	480d      	ldr	r0, [pc, #52]	@ (8002188 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002152:	490e      	ldr	r1, [pc, #56]	@ (800218c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002154:	4a0e      	ldr	r2, [pc, #56]	@ (8002190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002158:	e002      	b.n	8002160 <LoopCopyDataInit>

0800215a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215e:	3304      	adds	r3, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002164:	d3f9      	bcc.n	800215a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002166:	4a0b      	ldr	r2, [pc, #44]	@ (8002194 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002168:	4c0b      	ldr	r4, [pc, #44]	@ (8002198 <LoopFillZerobss+0x26>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800216c:	e001      	b.n	8002172 <LoopFillZerobss>

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002170:	3204      	adds	r2, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002176:	f7ff ffd7 	bl	8002128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217a:	f003 f86b 	bl	8005254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217e:	f7fe fd55 	bl	8000c2c <main>
  bx  lr    
 8002182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800218c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8002190:	080052d4 	.word	0x080052d4
  ldr r2, =_sbss
 8002194:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8002198:	200002ac 	.word	0x200002ac

0800219c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800219c:	e7fe      	b.n	800219c <ADC_IRQHandler>
	...

080021a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <HAL_Init+0x40>)
 80021aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <HAL_Init+0x40>)
 80021b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	@ (80021e0 <HAL_Init+0x40>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f001 f807 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	200f      	movs	r0, #15
 80021d0:	f000 f808 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff fd5c 	bl	8001c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f001 f81f 	bl	8003246 <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f000 ffe7 	bl	80031f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	@ (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000044 	.word	0x20000044
 800223c:	2000004c 	.word	0x2000004c
 8002240:	20000048 	.word	0x20000048

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000004c 	.word	0x2000004c
 8002268:	200002a8 	.word	0x200002a8

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	200002a8 	.word	0x200002a8

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff ffee 	bl	800226c <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffde 	bl	800226c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000004c 	.word	0x2000004c

080022cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0ed      	b.n	80024ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff fd1a 	bl	8001d24 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002300:	f7ff ffb4 	bl	800226c <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002306:	e012      	b.n	800232e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002308:	f7ff ffb0 	bl	800226c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b0a      	cmp	r3, #10
 8002314:	d90b      	bls.n	800232e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2205      	movs	r2, #5
 8002326:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0c5      	b.n	80024ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0e5      	beq.n	8002308 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0202 	bic.w	r2, r2, #2
 800234a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800234c:	f7ff ff8e 	bl	800226c <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002352:	e012      	b.n	800237a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002354:	f7ff ff8a 	bl	800226c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b0a      	cmp	r3, #10
 8002360:	d90b      	bls.n	800237a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2205      	movs	r2, #5
 8002372:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e09f      	b.n	80024ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e5      	bne.n	8002354 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7e1b      	ldrb	r3, [r3, #24]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d108      	bne.n	80023a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e007      	b.n	80023b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7e5b      	ldrb	r3, [r3, #25]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e007      	b.n	80023dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7e9b      	ldrb	r3, [r3, #26]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d108      	bne.n	80023f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0220 	orr.w	r2, r2, #32
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e007      	b.n	8002406 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0220 	bic.w	r2, r2, #32
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7edb      	ldrb	r3, [r3, #27]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d108      	bne.n	8002420 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0210 	bic.w	r2, r2, #16
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e007      	b.n	8002430 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0210 	orr.w	r2, r2, #16
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7f1b      	ldrb	r3, [r3, #28]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d108      	bne.n	800244a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0208 	orr.w	r2, r2, #8
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e007      	b.n	800245a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0208 	bic.w	r2, r2, #8
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7f5b      	ldrb	r3, [r3, #29]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0204 	orr.w	r2, r2, #4
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e007      	b.n	8002484 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0204 	bic.w	r2, r2, #4
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	ea42 0103 	orr.w	r1, r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	1e5a      	subs	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d003      	beq.n	80024e4 <HAL_CAN_ConfigFilter+0x20>
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	f040 80be 	bne.w	8002660 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80024e4:	4b65      	ldr	r3, [pc, #404]	@ (800267c <HAL_CAN_ConfigFilter+0x1b8>)
 80024e6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024fe:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	431a      	orrs	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2201      	movs	r2, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	43db      	mvns	r3, r3
 8002536:	401a      	ands	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d123      	bne.n	800258e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	401a      	ands	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002568:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	3248      	adds	r2, #72	@ 0x48
 800256e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002582:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002584:	6939      	ldr	r1, [r7, #16]
 8002586:	3348      	adds	r3, #72	@ 0x48
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d122      	bne.n	80025dc <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	431a      	orrs	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	3248      	adds	r2, #72	@ 0x48
 80025bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025d2:	6939      	ldr	r1, [r7, #16]
 80025d4:	3348      	adds	r3, #72	@ 0x48
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	440b      	add	r3, r1
 80025da:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	401a      	ands	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80025f6:	e007      	b.n	8002608 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	431a      	orrs	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002622:	e007      	b.n	8002634 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	431a      	orrs	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	431a      	orrs	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002652:	f023 0201 	bic.w	r2, r3, #1
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e006      	b.n	800266e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40006400 	.word	0x40006400

08002680 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d12e      	bne.n	80026f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026ac:	f7ff fdde 	bl	800226c <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026b2:	e012      	b.n	80026da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026b4:	f7ff fdda 	bl	800226c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b0a      	cmp	r3, #10
 80026c0:	d90b      	bls.n	80026da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2205      	movs	r2, #5
 80026d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e012      	b.n	8002700 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1e5      	bne.n	80026b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e006      	b.n	8002700 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
  }
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002726:	7ffb      	ldrb	r3, [r7, #31]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d003      	beq.n	8002734 <HAL_CAN_AddTxMessage+0x2c>
 800272c:	7ffb      	ldrb	r3, [r7, #31]
 800272e:	2b02      	cmp	r3, #2
 8002730:	f040 80ad 	bne.w	800288e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002744:	2b00      	cmp	r3, #0
 8002746:	d105      	bne.n	8002754 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8095 	beq.w	800287e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	0e1b      	lsrs	r3, r3, #24
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800275e:	2201      	movs	r2, #1
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10d      	bne.n	800278c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800277a:	68f9      	ldr	r1, [r7, #12]
 800277c:	6809      	ldr	r1, [r1, #0]
 800277e:	431a      	orrs	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3318      	adds	r3, #24
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	440b      	add	r3, r1
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e00f      	b.n	80027ac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002796:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027a0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3318      	adds	r3, #24
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	440b      	add	r3, r1
 80027aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3318      	adds	r3, #24
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	440b      	add	r3, r1
 80027bc:	3304      	adds	r3, #4
 80027be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	7d1b      	ldrb	r3, [r3, #20]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d111      	bne.n	80027ec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3318      	adds	r3, #24
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6811      	ldr	r1, [r2, #0]
 80027dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3318      	adds	r3, #24
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	440b      	add	r3, r1
 80027e8:	3304      	adds	r3, #4
 80027ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3307      	adds	r3, #7
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	061a      	lsls	r2, r3, #24
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3306      	adds	r3, #6
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3305      	adds	r3, #5
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	4313      	orrs	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	3204      	adds	r2, #4
 800280c:	7812      	ldrb	r2, [r2, #0]
 800280e:	4610      	mov	r0, r2
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	6811      	ldr	r1, [r2, #0]
 8002814:	ea43 0200 	orr.w	r2, r3, r0
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	440b      	add	r3, r1
 800281e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002822:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3303      	adds	r3, #3
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	061a      	lsls	r2, r3, #24
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3302      	adds	r3, #2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3301      	adds	r3, #1
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	4313      	orrs	r3, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	4610      	mov	r0, r2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	6811      	ldr	r1, [r2, #0]
 800284a:	ea43 0200 	orr.w	r2, r3, r0
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	440b      	add	r3, r1
 8002854:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002858:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	3318      	adds	r3, #24
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	4413      	add	r3, r2
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	6811      	ldr	r1, [r2, #0]
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3318      	adds	r3, #24
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	440b      	add	r3, r1
 8002878:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e00e      	b.n	800289c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e006      	b.n	800289c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	3724      	adds	r7, #36	@ 0x24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ba:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80028bc:	7afb      	ldrb	r3, [r7, #11]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d002      	beq.n	80028c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d11d      	bne.n	8002904 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3301      	adds	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3301      	adds	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3301      	adds	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002904:	68fb      	ldr	r3, [r7, #12]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002912:	b480      	push	{r7}
 8002914:	b087      	sub	sp, #28
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002926:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d003      	beq.n	8002936 <HAL_CAN_GetRxMessage+0x24>
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	2b02      	cmp	r3, #2
 8002932:	f040 8103 	bne.w	8002b3c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10e      	bne.n	800295a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0f7      	b.n	8002b4a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0e8      	b.n	8002b4a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	331b      	adds	r3, #27
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4413      	add	r3, r2
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0204 	and.w	r2, r3, #4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	331b      	adds	r3, #27
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	4413      	add	r3, r2
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0d5b      	lsrs	r3, r3, #21
 80029a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e00b      	b.n	80029c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	331b      	adds	r3, #27
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	4413      	add	r3, r2
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	08db      	lsrs	r3, r3, #3
 80029c0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	331b      	adds	r3, #27
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	4413      	add	r3, r2
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0202 	and.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	331b      	adds	r3, #27
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	4413      	add	r3, r2
 80029ea:	3304      	adds	r3, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2208      	movs	r2, #8
 80029fa:	611a      	str	r2, [r3, #16]
 80029fc:	e00b      	b.n	8002a16 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	331b      	adds	r3, #27
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	4413      	add	r3, r2
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 020f 	and.w	r2, r3, #15
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	331b      	adds	r3, #27
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	4413      	add	r3, r2
 8002a22:	3304      	adds	r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	331b      	adds	r3, #27
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	4413      	add	r3, r2
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0c1b      	lsrs	r3, r3, #16
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0a1a      	lsrs	r2, r3, #8
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0c1a      	lsrs	r2, r3, #16
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0e1a      	lsrs	r2, r3, #24
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	3303      	adds	r3, #3
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	3304      	adds	r3, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0a1a      	lsrs	r2, r3, #8
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	3305      	adds	r3, #5
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0c1a      	lsrs	r2, r3, #16
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	3306      	adds	r3, #6
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0e1a      	lsrs	r2, r3, #24
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	3307      	adds	r3, #7
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d108      	bne.n	8002b28 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0220 	orr.w	r2, r2, #32
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	e007      	b.n	8002b38 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0220 	orr.w	r2, r2, #32
 8002b36:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e006      	b.n	8002b4a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d002      	beq.n	8002b78 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d10f      	bne.n	8002b98 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e005      	b.n	8002b98 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002b98:	68fb      	ldr	r3, [r7, #12]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d002      	beq.n	8002bc4 <HAL_CAN_ActivateNotification+0x1e>
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d109      	bne.n	8002bd8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6959      	ldr	r1, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e006      	b.n	8002be6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b08a      	sub	sp, #40	@ 0x28
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d07c      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d023      	beq.n	8002c8a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f983 	bl	8002f60 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c5a:	e016      	b.n	8002c8a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6e:	e00c      	b.n	8002c8a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c82:	e002      	b.n	8002c8a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f989 	bl	8002f9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d024      	beq.n	8002cde <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f963 	bl	8002f74 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cae:	e016      	b.n	8002cde <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc2:	e00c      	b.n	8002cde <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	e002      	b.n	8002cde <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f969 	bl	8002fb0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d024      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cf0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f943 	bl	8002f88 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d02:	e016      	b.n	8002d32 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	e00c      	b.n	8002d32 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2a:	e002      	b.n	8002d32 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f949 	bl	8002fc4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00c      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2210      	movs	r2, #16
 8002d54:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2208      	movs	r2, #8
 8002d70:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f930 	bl	8002fd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd fed3 	bl	8000b3c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00c      	beq.n	8002dba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2210      	movs	r2, #16
 8002db8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f908 	bl	8002fec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fd fead 	bl	8000b54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2210      	movs	r2, #16
 8002e14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8f2 	bl	8003000 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d006      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2208      	movs	r2, #8
 8002e36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f8eb 	bl	8003014 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d07b      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d072      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d043      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d03e      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ec0:	2b60      	cmp	r3, #96	@ 0x60
 8002ec2:	d02b      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x32a>
 8002ec4:	2b60      	cmp	r3, #96	@ 0x60
 8002ec6:	d82e      	bhi.n	8002f26 <HAL_CAN_IRQHandler+0x334>
 8002ec8:	2b50      	cmp	r3, #80	@ 0x50
 8002eca:	d022      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x320>
 8002ecc:	2b50      	cmp	r3, #80	@ 0x50
 8002ece:	d82a      	bhi.n	8002f26 <HAL_CAN_IRQHandler+0x334>
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d019      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x316>
 8002ed4:	2b40      	cmp	r3, #64	@ 0x40
 8002ed6:	d826      	bhi.n	8002f26 <HAL_CAN_IRQHandler+0x334>
 8002ed8:	2b30      	cmp	r3, #48	@ 0x30
 8002eda:	d010      	beq.n	8002efe <HAL_CAN_IRQHandler+0x30c>
 8002edc:	2b30      	cmp	r3, #48	@ 0x30
 8002ede:	d822      	bhi.n	8002f26 <HAL_CAN_IRQHandler+0x334>
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d002      	beq.n	8002eea <HAL_CAN_IRQHandler+0x2f8>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d005      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ee8:	e01d      	b.n	8002f26 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ef2:	e019      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	f043 0310 	orr.w	r3, r3, #16
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002efc:	e014      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	f043 0320 	orr.w	r3, r3, #32
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f06:	e00f      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f10:	e00a      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f1a:	e005      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f24:	e000      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f868 	bl	8003028 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3728      	adds	r7, #40	@ 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800306c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306e:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	60d3      	str	r3, [r2, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	@ (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db0b      	blt.n	80030ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4907      	ldr	r1, [pc, #28]	@ (80030d8 <__NVIC_EnableIRQ+0x38>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100

080030dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	@ (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	@ (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f1c3 0307 	rsb	r3, r3, #7
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf28      	it	cs
 800314e:	2304      	movcs	r3, #4
 8003150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3304      	adds	r3, #4
 8003156:	2b06      	cmp	r3, #6
 8003158:	d902      	bls.n	8003160 <NVIC_EncodePriority+0x30>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b03      	subs	r3, #3
 800315e:	e000      	b.n	8003162 <NVIC_EncodePriority+0x32>
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003178:	f04f 31ff 	mov.w	r1, #4294967295
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43d9      	mvns	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	4313      	orrs	r3, r2
         );
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	@ 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a8:	d301      	bcc.n	80031ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00f      	b.n	80031ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ae:	4a0a      	ldr	r2, [pc, #40]	@ (80031d8 <SysTick_Config+0x40>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b6:	210f      	movs	r1, #15
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	f7ff ff8e 	bl	80030dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c0:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <SysTick_Config+0x40>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c6:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <SysTick_Config+0x40>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	e000e010 	.word	0xe000e010

080031dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff29 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003204:	f7ff ff3e 	bl	8003084 <__NVIC_GetPriorityGrouping>
 8003208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff ff8e 	bl	8003130 <NVIC_EncodePriority>
 8003214:	4602      	mov	r2, r0
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff5d 	bl	80030dc <__NVIC_SetPriority>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff31 	bl	80030a0 <__NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ffa2 	bl	8003198 <SysTick_Config>
 8003254:	4603      	mov	r3, r0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	@ 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e165      	b.n	8003548 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	429a      	cmp	r2, r3
 8003296:	f040 8154 	bne.w	8003542 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d005      	beq.n	80032b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d130      	bne.n	8003314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 0201 	and.w	r2, r3, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b03      	cmp	r3, #3
 800331e:	d017      	beq.n	8003350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d123      	bne.n	80033a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	220f      	movs	r2, #15
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	69b9      	ldr	r1, [r7, #24]
 80033a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0203 	and.w	r2, r3, #3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80ae 	beq.w	8003542 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003560 <HAL_GPIO_Init+0x300>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003560 <HAL_GPIO_Init+0x300>)
 80033f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003560 <HAL_GPIO_Init+0x300>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003402:	4a58      	ldr	r2, [pc, #352]	@ (8003564 <HAL_GPIO_Init+0x304>)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a4f      	ldr	r2, [pc, #316]	@ (8003568 <HAL_GPIO_Init+0x308>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d025      	beq.n	800347a <HAL_GPIO_Init+0x21a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4e      	ldr	r2, [pc, #312]	@ (800356c <HAL_GPIO_Init+0x30c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01f      	beq.n	8003476 <HAL_GPIO_Init+0x216>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4d      	ldr	r2, [pc, #308]	@ (8003570 <HAL_GPIO_Init+0x310>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_Init+0x212>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4c      	ldr	r2, [pc, #304]	@ (8003574 <HAL_GPIO_Init+0x314>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x20e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4b      	ldr	r2, [pc, #300]	@ (8003578 <HAL_GPIO_Init+0x318>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x20a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4a      	ldr	r2, [pc, #296]	@ (800357c <HAL_GPIO_Init+0x31c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x206>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a49      	ldr	r2, [pc, #292]	@ (8003580 <HAL_GPIO_Init+0x320>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x202>
 800345e:	2306      	movs	r3, #6
 8003460:	e00c      	b.n	800347c <HAL_GPIO_Init+0x21c>
 8003462:	2307      	movs	r3, #7
 8003464:	e00a      	b.n	800347c <HAL_GPIO_Init+0x21c>
 8003466:	2305      	movs	r3, #5
 8003468:	e008      	b.n	800347c <HAL_GPIO_Init+0x21c>
 800346a:	2304      	movs	r3, #4
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x21c>
 800346e:	2303      	movs	r3, #3
 8003470:	e004      	b.n	800347c <HAL_GPIO_Init+0x21c>
 8003472:	2302      	movs	r3, #2
 8003474:	e002      	b.n	800347c <HAL_GPIO_Init+0x21c>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_GPIO_Init+0x21c>
 800347a:	2300      	movs	r3, #0
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	f002 0203 	and.w	r2, r2, #3
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	4093      	lsls	r3, r2
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800348c:	4935      	ldr	r1, [pc, #212]	@ (8003564 <HAL_GPIO_Init+0x304>)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	3302      	adds	r3, #2
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349a:	4b3a      	ldr	r3, [pc, #232]	@ (8003584 <HAL_GPIO_Init+0x324>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034be:	4a31      	ldr	r2, [pc, #196]	@ (8003584 <HAL_GPIO_Init+0x324>)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003584 <HAL_GPIO_Init+0x324>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e8:	4a26      	ldr	r2, [pc, #152]	@ (8003584 <HAL_GPIO_Init+0x324>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ee:	4b25      	ldr	r3, [pc, #148]	@ (8003584 <HAL_GPIO_Init+0x324>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003512:	4a1c      	ldr	r2, [pc, #112]	@ (8003584 <HAL_GPIO_Init+0x324>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003518:	4b1a      	ldr	r3, [pc, #104]	@ (8003584 <HAL_GPIO_Init+0x324>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800353c:	4a11      	ldr	r2, [pc, #68]	@ (8003584 <HAL_GPIO_Init+0x324>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3301      	adds	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	f67f ae96 	bls.w	800327c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3724      	adds	r7, #36	@ 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40013800 	.word	0x40013800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	40020800 	.word	0x40020800
 8003574:	40020c00 	.word	0x40020c00
 8003578:	40021000 	.word	0x40021000
 800357c:	40021400 	.word	0x40021400
 8003580:	40021800 	.word	0x40021800
 8003584:	40013c00 	.word	0x40013c00

08003588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e001      	b.n	80035aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035d4:	e003      	b.n	80035de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	041a      	lsls	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	619a      	str	r2, [r3, #24]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035fc:	887a      	ldrh	r2, [r7, #2]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4013      	ands	r3, r2
 8003602:	041a      	lsls	r2, r3, #16
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	43d9      	mvns	r1, r3
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	400b      	ands	r3, r1
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800362a:	4b08      	ldr	r3, [pc, #32]	@ (800364c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003636:	4a05      	ldr	r2, [pc, #20]	@ (800364c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fe10 	bl	8001264 <HAL_GPIO_EXTI_Callback>
  }
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40013c00 	.word	0x40013c00

08003650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0cc      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b68      	ldr	r3, [pc, #416]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d90c      	bls.n	800368c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b65      	ldr	r3, [pc, #404]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b63      	ldr	r3, [pc, #396]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0b8      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a4:	4b59      	ldr	r3, [pc, #356]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a58      	ldr	r2, [pc, #352]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036bc:	4b53      	ldr	r3, [pc, #332]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a52      	ldr	r2, [pc, #328]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4b50      	ldr	r3, [pc, #320]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	494d      	ldr	r1, [pc, #308]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d044      	beq.n	8003770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b47      	ldr	r3, [pc, #284]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d119      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e07f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d003      	beq.n	800370e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370a:	2b03      	cmp	r3, #3
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	4b3f      	ldr	r3, [pc, #252]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e067      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372e:	4b37      	ldr	r3, [pc, #220]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4934      	ldr	r1, [pc, #208]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003740:	f7fe fd94 	bl	800226c <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	e00a      	b.n	800375e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fe fd90 	bl	800226c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e04f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 020c 	and.w	r2, r3, #12
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	429a      	cmp	r2, r3
 800376e:	d1eb      	bne.n	8003748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003770:	4b25      	ldr	r3, [pc, #148]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d20c      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b22      	ldr	r3, [pc, #136]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b20      	ldr	r3, [pc, #128]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e032      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a4:	4b19      	ldr	r3, [pc, #100]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4916      	ldr	r1, [pc, #88]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c2:	4b12      	ldr	r3, [pc, #72]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	490e      	ldr	r1, [pc, #56]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037d6:	f000 f821 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490a      	ldr	r1, [pc, #40]	@ (8003810 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	4a09      	ldr	r2, [pc, #36]	@ (8003814 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037f2:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fcf4 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023c00 	.word	0x40023c00
 800380c:	40023800 	.word	0x40023800
 8003810:	080052b4 	.word	0x080052b4
 8003814:	20000044 	.word	0x20000044
 8003818:	20000048 	.word	0x20000048

0800381c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003820:	b0a6      	sub	sp, #152	@ 0x98
 8003822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003842:	4bc8      	ldr	r3, [pc, #800]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b0c      	cmp	r3, #12
 800384c:	f200 817e 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x330>
 8003850:	a201      	add	r2, pc, #4	@ (adr r2, 8003858 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	0800388d 	.word	0x0800388d
 800385c:	08003b4d 	.word	0x08003b4d
 8003860:	08003b4d 	.word	0x08003b4d
 8003864:	08003b4d 	.word	0x08003b4d
 8003868:	08003895 	.word	0x08003895
 800386c:	08003b4d 	.word	0x08003b4d
 8003870:	08003b4d 	.word	0x08003b4d
 8003874:	08003b4d 	.word	0x08003b4d
 8003878:	0800389d 	.word	0x0800389d
 800387c:	08003b4d 	.word	0x08003b4d
 8003880:	08003b4d 	.word	0x08003b4d
 8003884:	08003b4d 	.word	0x08003b4d
 8003888:	08003a07 	.word	0x08003a07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4bb6      	ldr	r3, [pc, #728]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x34c>)
 800388e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003892:	e15f      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003894:	4bb5      	ldr	r3, [pc, #724]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 8003896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800389a:	e15b      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800389c:	4bb1      	ldr	r3, [pc, #708]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a8:	4bae      	ldr	r3, [pc, #696]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d031      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b4:	4bab      	ldr	r3, [pc, #684]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	2200      	movs	r2, #0
 80038bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80038c8:	2300      	movs	r3, #0
 80038ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80038cc:	4ba7      	ldr	r3, [pc, #668]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 80038ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80038d2:	462a      	mov	r2, r5
 80038d4:	fb03 f202 	mul.w	r2, r3, r2
 80038d8:	2300      	movs	r3, #0
 80038da:	4621      	mov	r1, r4
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	4aa2      	ldr	r2, [pc, #648]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 80038e4:	4621      	mov	r1, r4
 80038e6:	fba1 1202 	umull	r1, r2, r1, r2
 80038ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038ec:	460a      	mov	r2, r1
 80038ee:	67ba      	str	r2, [r7, #120]	@ 0x78
 80038f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80038f2:	4413      	add	r3, r2
 80038f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038fa:	2200      	movs	r2, #0
 80038fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003900:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003904:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003908:	f7fc fc7c 	bl	8000204 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003916:	e064      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003918:	4b92      	ldr	r3, [pc, #584]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	2200      	movs	r2, #0
 8003920:	653b      	str	r3, [r7, #80]	@ 0x50
 8003922:	657a      	str	r2, [r7, #84]	@ 0x54
 8003924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800392c:	2300      	movs	r3, #0
 800392e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003930:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003934:	4622      	mov	r2, r4
 8003936:	462b      	mov	r3, r5
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003946:	0150      	lsls	r0, r2, #5
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4621      	mov	r1, r4
 800394e:	1a51      	subs	r1, r2, r1
 8003950:	6139      	str	r1, [r7, #16]
 8003952:	4629      	mov	r1, r5
 8003954:	eb63 0301 	sbc.w	r3, r3, r1
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003966:	4659      	mov	r1, fp
 8003968:	018b      	lsls	r3, r1, #6
 800396a:	4651      	mov	r1, sl
 800396c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003970:	4651      	mov	r1, sl
 8003972:	018a      	lsls	r2, r1, #6
 8003974:	4651      	mov	r1, sl
 8003976:	ebb2 0801 	subs.w	r8, r2, r1
 800397a:	4659      	mov	r1, fp
 800397c:	eb63 0901 	sbc.w	r9, r3, r1
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003990:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003994:	4690      	mov	r8, r2
 8003996:	4699      	mov	r9, r3
 8003998:	4623      	mov	r3, r4
 800399a:	eb18 0303 	adds.w	r3, r8, r3
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	462b      	mov	r3, r5
 80039a2:	eb49 0303 	adc.w	r3, r9, r3
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039b4:	4629      	mov	r1, r5
 80039b6:	028b      	lsls	r3, r1, #10
 80039b8:	4621      	mov	r1, r4
 80039ba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039be:	4621      	mov	r1, r4
 80039c0:	028a      	lsls	r2, r1, #10
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ca:	2200      	movs	r2, #0
 80039cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80039d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039d4:	f7fc fc16 	bl	8000204 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4613      	mov	r3, r2
 80039de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039e2:	4b60      	ldr	r3, [pc, #384]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	3301      	adds	r3, #1
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80039f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a04:	e0a6      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a06:	4b57      	ldr	r3, [pc, #348]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a12:	4b54      	ldr	r3, [pc, #336]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d02a      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1e:	4b51      	ldr	r3, [pc, #324]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	099b      	lsrs	r3, r3, #6
 8003a24:	2200      	movs	r2, #0
 8003a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a30:	2100      	movs	r1, #0
 8003a32:	4b4e      	ldr	r3, [pc, #312]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a34:	fb03 f201 	mul.w	r2, r3, r1
 8003a38:	2300      	movs	r3, #0
 8003a3a:	fb00 f303 	mul.w	r3, r0, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a4a      	ldr	r2, [pc, #296]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a42:	fba0 1202 	umull	r1, r2, r0, r2
 8003a46:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a48:	460a      	mov	r2, r1
 8003a4a:	673a      	str	r2, [r7, #112]	@ 0x70
 8003a4c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a4e:	4413      	add	r3, r2
 8003a50:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a56:	2200      	movs	r2, #0
 8003a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a5a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003a60:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003a64:	f7fc fbce 	bl	8000204 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a72:	e05b      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a74:	4b3b      	ldr	r3, [pc, #236]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	f04f 0000 	mov.w	r0, #0
 8003a98:	f04f 0100 	mov.w	r1, #0
 8003a9c:	0159      	lsls	r1, r3, #5
 8003a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa2:	0150      	lsls	r0, r2, #5
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aae:	4649      	mov	r1, r9
 8003ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8003acc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	00eb      	lsls	r3, r5, #3
 8003ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ade:	00e2      	lsls	r2, r4, #3
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	18e3      	adds	r3, r4, r3
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb45 0303 	adc.w	r3, r5, r3
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afe:	4629      	mov	r1, r5
 8003b00:	028b      	lsls	r3, r1, #10
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b08:	4621      	mov	r1, r4
 8003b0a:	028a      	lsls	r2, r1, #10
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b14:	2200      	movs	r2, #0
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	61fa      	str	r2, [r7, #28]
 8003b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1e:	f7fc fb71 	bl	8000204 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4613      	mov	r3, r2
 8003b28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	0f1b      	lsrs	r3, r3, #28
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b4a:	e003      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3798      	adds	r7, #152	@ 0x98
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	017d7840 	.word	0x017d7840

08003b70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e28d      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8083 	beq.w	8003c96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b90:	4b94      	ldr	r3, [pc, #592]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d019      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b9c:	4b91      	ldr	r3, [pc, #580]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d112      	bne.n	8003be8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4b88      	ldr	r3, [pc, #544]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bce:	d10b      	bne.n	8003be8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	4b84      	ldr	r3, [pc, #528]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d05b      	beq.n	8003c94 <HAL_RCC_OscConfig+0x124>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d157      	bne.n	8003c94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e25a      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCC_OscConfig+0x90>
 8003bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a7b      	ldr	r2, [pc, #492]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e01d      	b.n	8003c3c <HAL_RCC_OscConfig+0xcc>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0xb4>
 8003c0a:	4b76      	ldr	r3, [pc, #472]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a75      	ldr	r2, [pc, #468]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b73      	ldr	r3, [pc, #460]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a72      	ldr	r2, [pc, #456]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0xcc>
 8003c24:	4b6f      	ldr	r3, [pc, #444]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6e      	ldr	r2, [pc, #440]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b6c      	ldr	r3, [pc, #432]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6b      	ldr	r2, [pc, #428]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe fb12 	bl	800226c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fb0e 	bl	800226c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	@ 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e21f      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b61      	ldr	r3, [pc, #388]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0xdc>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fafe 	bl	800226c <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe fafa 	bl	800226c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	@ 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e20b      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	4b57      	ldr	r3, [pc, #348]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x104>
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d06f      	beq.n	8003d82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ca2:	4b50      	ldr	r3, [pc, #320]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d017      	beq.n	8003cde <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cae:	4b4d      	ldr	r3, [pc, #308]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
        || \
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cba:	4b4a      	ldr	r3, [pc, #296]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc6:	4b47      	ldr	r3, [pc, #284]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d11c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b44      	ldr	r3, [pc, #272]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d116      	bne.n	8003d0c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x186>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e1d3      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4937      	ldr	r1, [pc, #220]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	e03a      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d020      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d14:	4b34      	ldr	r3, [pc, #208]	@ (8003de8 <HAL_RCC_OscConfig+0x278>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1a:	f7fe faa7 	bl	800226c <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d22:	f7fe faa3 	bl	800226c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e1b4      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	4b2b      	ldr	r3, [pc, #172]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d40:	4b28      	ldr	r3, [pc, #160]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4925      	ldr	r1, [pc, #148]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]
 8003d54:	e015      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d56:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_RCC_OscConfig+0x278>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fa86 	bl	800226c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d64:	f7fe fa82 	bl	800226c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e193      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d036      	beq.n	8003dfc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d96:	4b15      	ldr	r3, [pc, #84]	@ (8003dec <HAL_RCC_OscConfig+0x27c>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fe fa66 	bl	800226c <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da4:	f7fe fa62 	bl	800226c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e173      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x234>
 8003dc2:	e01b      	b.n	8003dfc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc4:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fe fa4f 	bl	800226c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	e00e      	b.n	8003df0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fe fa4b 	bl	800226c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d907      	bls.n	8003df0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e15c      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	42470000 	.word	0x42470000
 8003dec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	4b8a      	ldr	r3, [pc, #552]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ea      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8097 	beq.w	8003f38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0e:	4b83      	ldr	r3, [pc, #524]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	4a7e      	ldr	r2, [pc, #504]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3a:	4b79      	ldr	r3, [pc, #484]	@ (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d118      	bne.n	8003e78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e46:	4b76      	ldr	r3, [pc, #472]	@ (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a75      	ldr	r2, [pc, #468]	@ (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e52:	f7fe fa0b 	bl	800226c <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5a:	f7fe fa07 	bl	800226c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e118      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d106      	bne.n	8003e8e <HAL_RCC_OscConfig+0x31e>
 8003e80:	4b66      	ldr	r3, [pc, #408]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e84:	4a65      	ldr	r2, [pc, #404]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8c:	e01c      	b.n	8003ec8 <HAL_RCC_OscConfig+0x358>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x340>
 8003e96:	4b61      	ldr	r3, [pc, #388]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9a:	4a60      	ldr	r2, [pc, #384]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	4a5d      	ldr	r2, [pc, #372]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0x358>
 8003eb0:	4b5a      	ldr	r3, [pc, #360]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb4:	4a59      	ldr	r2, [pc, #356]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ebc:	4b57      	ldr	r3, [pc, #348]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec0:	4a56      	ldr	r2, [pc, #344]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ec2:	f023 0304 	bic.w	r3, r3, #4
 8003ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fe f9cc 	bl	800226c <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fe f9c8 	bl	800226c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0d7      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	4b4b      	ldr	r3, [pc, #300]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ee      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x368>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fe f9b6 	bl	800226c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fe f9b2 	bl	800226c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0c1      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1a:	4b40      	ldr	r3, [pc, #256]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1ee      	bne.n	8003f04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	4a3a      	ldr	r2, [pc, #232]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80ad 	beq.w	800409c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f42:	4b36      	ldr	r3, [pc, #216]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d060      	beq.n	8004010 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d145      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b33      	ldr	r3, [pc, #204]	@ (8004024 <HAL_RCC_OscConfig+0x4b4>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe f986 	bl	800226c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe f982 	bl	800226c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e093      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	4b29      	ldr	r3, [pc, #164]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	019b      	lsls	r3, r3, #6
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	061b      	lsls	r3, r3, #24
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	071b      	lsls	r3, r3, #28
 8003fae:	491b      	ldr	r1, [pc, #108]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004024 <HAL_RCC_OscConfig+0x4b4>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fe f957 	bl	800226c <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fe f953 	bl	800226c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e064      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd4:	4b11      	ldr	r3, [pc, #68]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x452>
 8003fe0:	e05c      	b.n	800409c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <HAL_RCC_OscConfig+0x4b4>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe f940 	bl	800226c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe f93c 	bl	800226c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e04d      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	4b06      	ldr	r3, [pc, #24]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x480>
 800400e:	e045      	b.n	800409c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e040      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
 800401c:	40023800 	.word	0x40023800
 8004020:	40007000 	.word	0x40007000
 8004024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004028:	4b1f      	ldr	r3, [pc, #124]	@ (80040a8 <HAL_RCC_OscConfig+0x538>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d030      	beq.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d129      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d122      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800405e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004060:	4293      	cmp	r3, r2
 8004062:	d119      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	3b01      	subs	r3, #1
 8004072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d10f      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07b      	b.n	80041b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d108      	bne.n	80040d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ce:	d009      	beq.n	80040e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	61da      	str	r2, [r3, #28]
 80040d6:	e005      	b.n	80040e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fd fe68 	bl	8001dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800411a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004168:	ea42 0103 	orr.w	r1, r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	f003 0104 	and.w	r1, r3, #4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	f003 0210 	and.w	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b088      	sub	sp, #32
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ce:	f7fe f84d 	bl	800226c <HAL_GetTick>
 80041d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d001      	beq.n	80041e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
 80041e6:	e12a      	b.n	800443e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_SPI_Transmit+0x36>
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e122      	b.n	800443e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_SPI_Transmit+0x48>
 8004202:	2302      	movs	r3, #2
 8004204:	e11b      	b.n	800443e <HAL_SPI_Transmit+0x280>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2203      	movs	r2, #3
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004254:	d10f      	bne.n	8004276 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004280:	2b40      	cmp	r3, #64	@ 0x40
 8004282:	d007      	beq.n	8004294 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800429c:	d152      	bne.n	8004344 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Transmit+0xee>
 80042a6:	8b7b      	ldrh	r3, [r7, #26]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d145      	bne.n	8004338 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	1c9a      	adds	r2, r3, #2
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042d0:	e032      	b.n	8004338 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d112      	bne.n	8004306 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004304:	e018      	b.n	8004338 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004306:	f7fd ffb1 	bl	800226c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d803      	bhi.n	800431e <HAL_SPI_Transmit+0x160>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d102      	bne.n	8004324 <HAL_SPI_Transmit+0x166>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e082      	b.n	800443e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1c7      	bne.n	80042d2 <HAL_SPI_Transmit+0x114>
 8004342:	e053      	b.n	80043ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SPI_Transmit+0x194>
 800434c:	8b7b      	ldrh	r3, [r7, #26]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d147      	bne.n	80043e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004378:	e033      	b.n	80043e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d113      	bne.n	80043b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043ae:	e018      	b.n	80043e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b0:	f7fd ff5c 	bl	800226c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d803      	bhi.n	80043c8 <HAL_SPI_Transmit+0x20a>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d102      	bne.n	80043ce <HAL_SPI_Transmit+0x210>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e02d      	b.n	800443e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1c6      	bne.n	800437a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fa59 	bl	80048a8 <SPI_EndRxTxTransaction>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800443c:	2300      	movs	r3, #0
  }
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08a      	sub	sp, #40	@ 0x28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004454:	2301      	movs	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004458:	f7fd ff08 	bl	800226c <HAL_GetTick>
 800445c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004464:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800446c:	887b      	ldrh	r3, [r7, #2]
 800446e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004470:	7ffb      	ldrb	r3, [r7, #31]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d00c      	beq.n	8004490 <HAL_SPI_TransmitReceive+0x4a>
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800447c:	d106      	bne.n	800448c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <HAL_SPI_TransmitReceive+0x46>
 8004486:	7ffb      	ldrb	r3, [r7, #31]
 8004488:	2b04      	cmp	r3, #4
 800448a:	d001      	beq.n	8004490 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
 800448e:	e17f      	b.n	8004790 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_SPI_TransmitReceive+0x5c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_SPI_TransmitReceive+0x5c>
 800449c:	887b      	ldrh	r3, [r7, #2]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e174      	b.n	8004790 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_SPI_TransmitReceive+0x6e>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e16d      	b.n	8004790 <HAL_SPI_TransmitReceive+0x34a>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d003      	beq.n	80044d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2205      	movs	r2, #5
 80044cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	887a      	ldrh	r2, [r7, #2]
 80044e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	887a      	ldrh	r2, [r7, #2]
 80044e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	887a      	ldrh	r2, [r7, #2]
 80044f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	887a      	ldrh	r2, [r7, #2]
 80044f8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d007      	beq.n	8004524 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800452c:	d17e      	bne.n	800462c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_SPI_TransmitReceive+0xf6>
 8004536:	8afb      	ldrh	r3, [r7, #22]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d16c      	bne.n	8004616 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	1c9a      	adds	r2, r3, #2
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004560:	e059      	b.n	8004616 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d11b      	bne.n	80045a8 <HAL_SPI_TransmitReceive+0x162>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <HAL_SPI_TransmitReceive+0x162>
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	2b01      	cmp	r3, #1
 800457e:	d113      	bne.n	80045a8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	881a      	ldrh	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d119      	bne.n	80045ea <HAL_SPI_TransmitReceive+0x1a4>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d014      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ca:	b292      	uxth	r2, r2
 80045cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	1c9a      	adds	r2, r3, #2
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045e6:	2301      	movs	r3, #1
 80045e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045ea:	f7fd fe3f 	bl	800226c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d80d      	bhi.n	8004616 <HAL_SPI_TransmitReceive+0x1d0>
 80045fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d009      	beq.n	8004616 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e0bc      	b.n	8004790 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1a0      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x11c>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d19b      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x11c>
 800462a:	e082      	b.n	8004732 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_SPI_TransmitReceive+0x1f4>
 8004634:	8afb      	ldrh	r3, [r7, #22]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d171      	bne.n	800471e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004660:	e05d      	b.n	800471e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
      {
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d11c      	bne.n	80046aa <HAL_SPI_TransmitReceive+0x264>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d017      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x264>
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	2b01      	cmp	r3, #1
 800467e:	d114      	bne.n	80046aa <HAL_SPI_TransmitReceive+0x264>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	7812      	ldrb	r2, [r2, #0]
 800468c:	701a      	strb	r2, [r3, #0]
        hspi->TxXferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30
        /* Next Data is a reception (Rx). Tx not allowed */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        txallowed = 0U;

 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
      {
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d119      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x2a6>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d014      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x2a6>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
        hspi->pRxBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	639a      	str	r2, [r3, #56]	@ 0x38
        /* Next Data is a Transmission (Tx). Tx is allowed */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        txallowed = 1U;
      }
 80046e8:	2301      	movs	r3, #1
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
      {
 80046ec:	f7fd fdbe 	bl	800226c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d803      	bhi.n	8004704 <HAL_SPI_TransmitReceive+0x2be>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d102      	bne.n	800470a <HAL_SPI_TransmitReceive+0x2c4>
 8004704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <HAL_SPI_TransmitReceive+0x2d8>
        hspi->State = HAL_SPI_STATE_READY;
        __HAL_UNLOCK(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        return HAL_TIMEOUT;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
 800471a:	2303      	movs	r3, #3
 800471c:	e038      	b.n	8004790 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d19c      	bne.n	8004662 <HAL_SPI_TransmitReceive+0x21c>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d197      	bne.n	8004662 <HAL_SPI_TransmitReceive+0x21c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
  {
 8004732:	6a3a      	ldr	r2, [r7, #32]
 8004734:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f8b6 	bl	80048a8 <SPI_EndRxTxTransaction>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x30e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    __HAL_UNLOCK(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }
 8004750:	2301      	movs	r3, #1
 8004752:	e01d      	b.n	8004790 <HAL_SPI_TransmitReceive+0x34a>

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
  {
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <HAL_SPI_TransmitReceive+0x32c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]


  hspi->State = HAL_SPI_STATE_READY;
  /* Unlock the process */
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);

 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  {
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_SPI_TransmitReceive+0x348>
    return HAL_ERROR;
  }
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_SPI_TransmitReceive+0x34a>
  else
  {
    return HAL_OK;
  }
 800478e:	2300      	movs	r3, #0
}

 8004790:	4618      	mov	r0, r3
 8004792:	3728      	adds	r7, #40	@ 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <SPI_WaitFlagStateUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint32_t count;
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
  tmp_tickstart = HAL_GetTick();
 80047a8:	f7fd fd60 	bl	800226c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	61fb      	str	r3, [r7, #28]

 80047b8:	f7fd fd58 	bl	800226c <HAL_GetTick>
 80047bc:	61b8      	str	r0, [r7, #24]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

 80047be:	4b39      	ldr	r3, [pc, #228]	@ (80048a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	015b      	lsls	r3, r3, #5
 80047c4:	0d1b      	lsrs	r3, r3, #20
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	fb02 f303 	mul.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
  {
 80047ce:	e055      	b.n	800487c <SPI_WaitFlagStateUntilTimeout+0xe4>
    if (Timeout != HAL_MAX_DELAY)
    {
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d051      	beq.n	800487c <SPI_WaitFlagStateUntilTimeout+0xe4>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
      {
 80047d8:	f7fd fd48 	bl	800226c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d902      	bls.n	80047ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13d      	bne.n	800486a <SPI_WaitFlagStateUntilTimeout+0xd2>
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047fc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004806:	d111      	bne.n	800482c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004810:	d004      	beq.n	800481c <SPI_WaitFlagStateUntilTimeout+0x84>
        {
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800481a:	d107      	bne.n	800482c <SPI_WaitFlagStateUntilTimeout+0x94>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800482a:	601a      	str	r2, [r3, #0]

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
        {
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004834:	d10f      	bne.n	8004856 <SPI_WaitFlagStateUntilTimeout+0xbe>
          SPI_RESET_CRC(hspi);
        }
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004854:	601a      	str	r2, [r3, #0]

        hspi->State = HAL_SPI_STATE_READY;

 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);

 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
      }
 8004866:	2303      	movs	r3, #3
 8004868:	e018      	b.n	800489c <SPI_WaitFlagStateUntilTimeout+0x104>
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <SPI_WaitFlagStateUntilTimeout+0xde>
        tmp_timeout = 0U;
      }
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e002      	b.n	800487c <SPI_WaitFlagStateUntilTimeout+0xe4>
      else
      {
        count--;
      }
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	3b01      	subs	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
  {
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4013      	ands	r3, r2
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	429a      	cmp	r2, r3
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	429a      	cmp	r2, r3
 8004898:	d19a      	bne.n	80047d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
}
 800489a:	2300      	movs	r3, #0

 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000044 	.word	0x20000044

080048a8 <SPI_EndRxTxTransaction>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint32_t count;
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
  {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2201      	movs	r2, #1
 80048bc:	2102      	movs	r1, #2
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff ff6a 	bl	8004798 <SPI_WaitFlagStateUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <SPI_EndRxTxTransaction+0x32>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
 80048d6:	2303      	movs	r3, #3
 80048d8:	e032      	b.n	8004940 <SPI_EndRxTxTransaction+0x98>

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
 80048da:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <SPI_EndRxTxTransaction+0xa0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1b      	ldr	r2, [pc, #108]	@ (800494c <SPI_EndRxTxTransaction+0xa4>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	0d5b      	lsrs	r3, r3, #21
 80048e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	617b      	str	r3, [r7, #20]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048f8:	d112      	bne.n	8004920 <SPI_EndRxTxTransaction+0x78>
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
    {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2200      	movs	r2, #0
 8004902:	2180      	movs	r1, #128	@ 0x80
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff ff47 	bl	8004798 <SPI_WaitFlagStateUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d016      	beq.n	800493e <SPI_EndRxTxTransaction+0x96>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
 800491c:	2303      	movs	r3, #3
 800491e:	e00f      	b.n	8004940 <SPI_EndRxTxTransaction+0x98>
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
      {
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <SPI_EndRxTxTransaction+0x94>
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	3b01      	subs	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
  }
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d0f2      	beq.n	8004920 <SPI_EndRxTxTransaction+0x78>
 800493a:	e000      	b.n	800493e <SPI_EndRxTxTransaction+0x96>
      }
 800493c:	bf00      	nop

  return HAL_OK;
}
 800493e:	2300      	movs	r3, #0

 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000044 	.word	0x20000044
 800494c:	165e9f81 	.word	0x165e9f81

08004950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e041      	b.n	80049e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fd fa84 	bl	8001e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f000 fa88 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d001      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e04e      	b.n	8004aa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a23      	ldr	r2, [pc, #140]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d022      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x80>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a32:	d01d      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x80>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x80>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1e      	ldr	r2, [pc, #120]	@ (8004abc <HAL_TIM_Base_Start_IT+0xcc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x80>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x80>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x80>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a19      	ldr	r2, [pc, #100]	@ (8004ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x80>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a18      	ldr	r2, [pc, #96]	@ (8004acc <HAL_TIM_Base_Start_IT+0xdc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d111      	bne.n	8004a94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b06      	cmp	r3, #6
 8004a80:	d010      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0201 	orr.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a92:	e007      	b.n	8004aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40010400 	.word	0x40010400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40001800 	.word	0x40001800

08004ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d020      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01b      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0202 	mvn.w	r2, #2
 8004b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f9a3 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f995 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f9a6 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d020      	beq.n	8004b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01b      	beq.n	8004b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0204 	mvn.w	r2, #4
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f97d 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f96f 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f980 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d020      	beq.n	8004bcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01b      	beq.n	8004bcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0208 	mvn.w	r2, #8
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f957 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f949 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f95a 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d020      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0210 	mvn.w	r2, #16
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2208      	movs	r2, #8
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f931 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f923 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f934 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0201 	mvn.w	r2, #1
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f901 	bl	8004e3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fae8 	bl	8005230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f905 	bl	8004e8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0220 	mvn.w	r2, #32
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 faba 	bl	800521c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x1c>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e0b4      	b.n	8004e36 <HAL_TIM_ConfigClockSource+0x186>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d04:	d03e      	beq.n	8004d84 <HAL_TIM_ConfigClockSource+0xd4>
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d0a:	f200 8087 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d12:	f000 8086 	beq.w	8004e22 <HAL_TIM_ConfigClockSource+0x172>
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1a:	d87f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b70      	cmp	r3, #112	@ 0x70
 8004d1e:	d01a      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0xa6>
 8004d20:	2b70      	cmp	r3, #112	@ 0x70
 8004d22:	d87b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b60      	cmp	r3, #96	@ 0x60
 8004d26:	d050      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x11a>
 8004d28:	2b60      	cmp	r3, #96	@ 0x60
 8004d2a:	d877      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b50      	cmp	r3, #80	@ 0x50
 8004d2e:	d03c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0xfa>
 8004d30:	2b50      	cmp	r3, #80	@ 0x50
 8004d32:	d873      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b40      	cmp	r3, #64	@ 0x40
 8004d36:	d058      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x13a>
 8004d38:	2b40      	cmp	r3, #64	@ 0x40
 8004d3a:	d86f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b30      	cmp	r3, #48	@ 0x30
 8004d3e:	d064      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d40:	2b30      	cmp	r3, #48	@ 0x30
 8004d42:	d86b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d060      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d867      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05c      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d05a      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d54:	e062      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d66:	f000 f9bd 	bl	80050e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	609a      	str	r2, [r3, #8]
      break;
 8004d82:	e04f      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d94:	f000 f9a6 	bl	80050e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004da6:	609a      	str	r2, [r3, #8]
      break;
 8004da8:	e03c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 f91a 	bl	8004ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2150      	movs	r1, #80	@ 0x50
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f973 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e02c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 f939 	bl	800504e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2160      	movs	r1, #96	@ 0x60
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f963 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 8004de8:	e01c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 f8fa 	bl	8004ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2140      	movs	r1, #64	@ 0x40
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f953 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 8004e08:	e00c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 f94a 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 8004e1a:	e003      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	e000      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a43      	ldr	r2, [pc, #268]	@ (8004fc4 <TIM_Base_SetConfig+0x120>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d013      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec2:	d00f      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a40      	ldr	r2, [pc, #256]	@ (8004fc8 <TIM_Base_SetConfig+0x124>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a3f      	ldr	r2, [pc, #252]	@ (8004fcc <TIM_Base_SetConfig+0x128>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8004fd0 <TIM_Base_SetConfig+0x12c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3d      	ldr	r2, [pc, #244]	@ (8004fd4 <TIM_Base_SetConfig+0x130>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d108      	bne.n	8004ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a32      	ldr	r2, [pc, #200]	@ (8004fc4 <TIM_Base_SetConfig+0x120>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d02b      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f04:	d027      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc8 <TIM_Base_SetConfig+0x124>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d023      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2e      	ldr	r2, [pc, #184]	@ (8004fcc <TIM_Base_SetConfig+0x128>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01f      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd0 <TIM_Base_SetConfig+0x12c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01b      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd4 <TIM_Base_SetConfig+0x130>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d017      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd8 <TIM_Base_SetConfig+0x134>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2a      	ldr	r2, [pc, #168]	@ (8004fdc <TIM_Base_SetConfig+0x138>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00f      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a29      	ldr	r2, [pc, #164]	@ (8004fe0 <TIM_Base_SetConfig+0x13c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00b      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a28      	ldr	r2, [pc, #160]	@ (8004fe4 <TIM_Base_SetConfig+0x140>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a27      	ldr	r2, [pc, #156]	@ (8004fe8 <TIM_Base_SetConfig+0x144>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d003      	beq.n	8004f56 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a26      	ldr	r2, [pc, #152]	@ (8004fec <TIM_Base_SetConfig+0x148>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d108      	bne.n	8004f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc4 <TIM_Base_SetConfig+0x120>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_Base_SetConfig+0xf2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a10      	ldr	r2, [pc, #64]	@ (8004fd4 <TIM_Base_SetConfig+0x130>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d103      	bne.n	8004f9e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f043 0204 	orr.w	r2, r3, #4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40010000 	.word	0x40010000
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40000c00 	.word	0x40000c00
 8004fd4:	40010400 	.word	0x40010400
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800
 8004fe4:	40001800 	.word	0x40001800
 8004fe8:	40001c00 	.word	0x40001c00
 8004fec:	40002000 	.word	0x40002000

08004ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0201 	bic.w	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800501a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f023 030a 	bic.w	r3, r3, #10
 800502c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504e:	b480      	push	{r7}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 0210 	bic.w	r2, r3, #16
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800508a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f043 0307 	orr.w	r3, r3, #7
 80050d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	021a      	lsls	r2, r3, #8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	431a      	orrs	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4313      	orrs	r3, r2
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	609a      	str	r2, [r3, #8]
}
 8005118:	bf00      	nop
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005138:	2302      	movs	r3, #2
 800513a:	e05a      	b.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a21      	ldr	r2, [pc, #132]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d022      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005188:	d01d      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1d      	ldr	r2, [pc, #116]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d018      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1b      	ldr	r2, [pc, #108]	@ (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1a      	ldr	r2, [pc, #104]	@ (800520c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00e      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a18      	ldr	r2, [pc, #96]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d009      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a17      	ldr	r2, [pc, #92]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a15      	ldr	r2, [pc, #84]	@ (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10c      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40010400 	.word	0x40010400
 8005214:	40014000 	.word	0x40014000
 8005218:	40001800 	.word	0x40001800

0800521c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <memset>:
 8005244:	4402      	add	r2, r0
 8005246:	4603      	mov	r3, r0
 8005248:	4293      	cmp	r3, r2
 800524a:	d100      	bne.n	800524e <memset+0xa>
 800524c:	4770      	bx	lr
 800524e:	f803 1b01 	strb.w	r1, [r3], #1
 8005252:	e7f9      	b.n	8005248 <memset+0x4>

08005254 <__libc_init_array>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4d0d      	ldr	r5, [pc, #52]	@ (800528c <__libc_init_array+0x38>)
 8005258:	4c0d      	ldr	r4, [pc, #52]	@ (8005290 <__libc_init_array+0x3c>)
 800525a:	1b64      	subs	r4, r4, r5
 800525c:	10a4      	asrs	r4, r4, #2
 800525e:	2600      	movs	r6, #0
 8005260:	42a6      	cmp	r6, r4
 8005262:	d109      	bne.n	8005278 <__libc_init_array+0x24>
 8005264:	4d0b      	ldr	r5, [pc, #44]	@ (8005294 <__libc_init_array+0x40>)
 8005266:	4c0c      	ldr	r4, [pc, #48]	@ (8005298 <__libc_init_array+0x44>)
 8005268:	f000 f818 	bl	800529c <_init>
 800526c:	1b64      	subs	r4, r4, r5
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	2600      	movs	r6, #0
 8005272:	42a6      	cmp	r6, r4
 8005274:	d105      	bne.n	8005282 <__libc_init_array+0x2e>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	f855 3b04 	ldr.w	r3, [r5], #4
 800527c:	4798      	blx	r3
 800527e:	3601      	adds	r6, #1
 8005280:	e7ee      	b.n	8005260 <__libc_init_array+0xc>
 8005282:	f855 3b04 	ldr.w	r3, [r5], #4
 8005286:	4798      	blx	r3
 8005288:	3601      	adds	r6, #1
 800528a:	e7f2      	b.n	8005272 <__libc_init_array+0x1e>
 800528c:	080052cc 	.word	0x080052cc
 8005290:	080052cc 	.word	0x080052cc
 8005294:	080052cc 	.word	0x080052cc
 8005298:	080052d0 	.word	0x080052d0

0800529c <_init>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr

080052a8 <_fini>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr
