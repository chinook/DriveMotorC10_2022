
DriveMoteurC10_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000543c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005600  08005600  00006600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005610  08005610  0000704c  2**0
                  CONTENTS
  4 .ARM          00000008  08005610  08005610  00006610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005618  08005618  0000704c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005618  08005618  00006618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800561c  0800561c  0000661c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08005620  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000004c  0800566c  0000704c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800566c  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1cb  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023df  00000000  00000000  00016247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00018628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b92  00000000  00000000  00019510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022830  00000000  00000000  0001a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001047d  00000000  00000000  0003c8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d401c  00000000  00000000  0004cd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f2c  00000000  00000000  00120db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00124cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000004c 	.word	0x2000004c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080055e8 	.word	0x080055e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000050 	.word	0x20000050
 8000200:	080055e8 	.word	0x080055e8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ExecuteStateMachine>:
uint8_t flag_buttons = 0;
uint8_t timer50ms_flag = 0;
uint8_t timer250ms_counter = 0;
uint8_t timer500ms_counter = 0;

void ExecuteStateMachine() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	// Check timers
	if (timer500ms_counter >= 10) {
 80004f8:	4b52      	ldr	r3, [pc, #328]	@ (8000644 <ExecuteStateMachine+0x150>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b09      	cmp	r3, #9
 80004fe:	d90a      	bls.n	8000516 <ExecuteStateMachine+0x22>

		timer500ms_counter = 0;
 8000500:	4b50      	ldr	r3, [pc, #320]	@ (8000644 <ExecuteStateMachine+0x150>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]

		if (flag_drive_fault == 0) {
 8000506:	4b50      	ldr	r3, [pc, #320]	@ (8000648 <ExecuteStateMachine+0x154>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d103      	bne.n	8000516 <ExecuteStateMachine+0x22>
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 800050e:	2108      	movs	r1, #8
 8000510:	484e      	ldr	r0, [pc, #312]	@ (800064c <ExecuteStateMachine+0x158>)
 8000512:	f003 f9a8 	bl	8003866 <HAL_GPIO_TogglePin>
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);

		 printf("Echo SPI : %02X %02X\n", rx[0], rx[1]);
		 */
	}
	if (timer50ms_flag) {
 8000516:	4b4e      	ldr	r3, [pc, #312]	@ (8000650 <ExecuteStateMachine+0x15c>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d022      	beq.n	8000564 <ExecuteStateMachine+0x70>
		timer50ms_flag = 0;
 800051e:	4b4c      	ldr	r3, [pc, #304]	@ (8000650 <ExecuteStateMachine+0x15c>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
		timer250ms_counter++;
 8000524:	4b4b      	ldr	r3, [pc, #300]	@ (8000654 <ExecuteStateMachine+0x160>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b49      	ldr	r3, [pc, #292]	@ (8000654 <ExecuteStateMachine+0x160>)
 800052e:	701a      	strb	r2, [r3, #0]
		timer500ms_counter++;
 8000530:	4b44      	ldr	r3, [pc, #272]	@ (8000644 <ExecuteStateMachine+0x150>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <ExecuteStateMachine+0x150>)
 800053a:	701a      	strb	r2, [r3, #0]

		flag_buttons = 1;
 800053c:	4b46      	ldr	r3, [pc, #280]	@ (8000658 <ExecuteStateMachine+0x164>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
		flag_can_tx_send = 1;
 8000542:	4b46      	ldr	r3, [pc, #280]	@ (800065c <ExecuteStateMachine+0x168>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
		flag_pitch_control = 1;
 8000548:	4b45      	ldr	r3, [pc, #276]	@ (8000660 <ExecuteStateMachine+0x16c>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
		flag_mast_control = 1;
 800054e:	4b45      	ldr	r3, [pc, #276]	@ (8000664 <ExecuteStateMachine+0x170>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]

		if (flag_drive_fault == 1) {
 8000554:	4b3c      	ldr	r3, [pc, #240]	@ (8000648 <ExecuteStateMachine+0x154>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d103      	bne.n	8000564 <ExecuteStateMachine+0x70>
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 800055c:	2108      	movs	r1, #8
 800055e:	483b      	ldr	r0, [pc, #236]	@ (800064c <ExecuteStateMachine+0x158>)
 8000560:	f003 f981 	bl	8003866 <HAL_GPIO_TogglePin>
		}
	}
	if (timer250ms_counter >= 5) {
 8000564:	4b3b      	ldr	r3, [pc, #236]	@ (8000654 <ExecuteStateMachine+0x160>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b04      	cmp	r3, #4
 800056a:	d908      	bls.n	800057e <ExecuteStateMachine+0x8a>
		timer250ms_counter = 0;
 800056c:	4b39      	ldr	r3, [pc, #228]	@ (8000654 <ExecuteStateMachine+0x160>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]

		//flag_can_tx_send = 1;

		flag_send_drive_pitch_config = 1;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <ExecuteStateMachine+0x174>)
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
		flag_send_drive_mast_config = 1;
 8000578:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <ExecuteStateMachine+0x178>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]

	}

	// Check for ROPS or emergency stop flags
	if (b_rops) {
 800057e:	4b3c      	ldr	r3, [pc, #240]	@ (8000670 <ExecuteStateMachine+0x17c>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <ExecuteStateMachine+0x98>
		current_state = STATE_ROPS;
 8000586:	4b3b      	ldr	r3, [pc, #236]	@ (8000674 <ExecuteStateMachine+0x180>)
 8000588:	2205      	movs	r2, #5
 800058a:	601a      	str	r2, [r3, #0]
	}
	if (b_emergency_stop) {
 800058c:	4b3a      	ldr	r3, [pc, #232]	@ (8000678 <ExecuteStateMachine+0x184>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <ExecuteStateMachine+0xa6>
		current_state = STATE_EMERGENCY_STOP;
 8000594:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <ExecuteStateMachine+0x180>)
 8000596:	2206      	movs	r2, #6
 8000598:	601a      	str	r2, [r3, #0]
	}

	switch (current_state) {
 800059a:	4b36      	ldr	r3, [pc, #216]	@ (8000674 <ExecuteStateMachine+0x180>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d812      	bhi.n	80005c8 <ExecuteStateMachine+0xd4>
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d845      	bhi.n	8000632 <ExecuteStateMachine+0x13e>
 80005a6:	a201      	add	r2, pc, #4	@ (adr r2, 80005ac <ExecuteStateMachine+0xb8>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005cf 	.word	0x080005cf
 80005b0:	080005db 	.word	0x080005db
 80005b4:	080005e7 	.word	0x080005e7
 80005b8:	080005f3 	.word	0x080005f3
 80005bc:	080005ff 	.word	0x080005ff
 80005c0:	0800060b 	.word	0x0800060b
 80005c4:	08000617 	.word	0x08000617
 80005c8:	2bff      	cmp	r3, #255	@ 0xff
 80005ca:	d02a      	beq.n	8000622 <ExecuteStateMachine+0x12e>
 80005cc:	e031      	b.n	8000632 <ExecuteStateMachine+0x13e>
	case STATE_INIT:
		current_state = DoStateInit();
 80005ce:	f000 f855 	bl	800067c <DoStateInit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a27      	ldr	r2, [pc, #156]	@ (8000674 <ExecuteStateMachine+0x180>)
 80005d6:	6013      	str	r3, [r2, #0]
		break;
 80005d8:	e031      	b.n	800063e <ExecuteStateMachine+0x14a>

	case STATE_ASSESS_PUSH_BUTTONS:
		current_state = DoStateAssessPushButtons();
 80005da:	f000 f8c3 	bl	8000764 <DoStateAssessPushButtons>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a24      	ldr	r2, [pc, #144]	@ (8000674 <ExecuteStateMachine+0x180>)
 80005e2:	6013      	str	r3, [r2, #0]
		break;
 80005e4:	e02b      	b.n	800063e <ExecuteStateMachine+0x14a>

	case STATE_PITCH_CONTROL:
		current_state = DoStatePitchControl();
 80005e6:	f000 f941 	bl	800086c <DoStatePitchControl>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <ExecuteStateMachine+0x180>)
 80005ee:	6013      	str	r3, [r2, #0]
		break;
 80005f0:	e025      	b.n	800063e <ExecuteStateMachine+0x14a>

	case STATE_MAST_CONTROL:
		current_state = DoStateMastControl();
 80005f2:	f000 f943 	bl	800087c <DoStateMastControl>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000674 <ExecuteStateMachine+0x180>)
 80005fa:	6013      	str	r3, [r2, #0]
		break;
 80005fc:	e01f      	b.n	800063e <ExecuteStateMachine+0x14a>

	case STATE_CAN:
		current_state = DoStateCAN();
 80005fe:	f000 f945 	bl	800088c <DoStateCAN>
 8000602:	4603      	mov	r3, r0
 8000604:	4a1b      	ldr	r2, [pc, #108]	@ (8000674 <ExecuteStateMachine+0x180>)
 8000606:	6013      	str	r3, [r2, #0]
		break;
 8000608:	e019      	b.n	800063e <ExecuteStateMachine+0x14a>

	case STATE_ROPS:
		current_state = DoStateROPS();
 800060a:	f000 f991 	bl	8000930 <DoStateROPS>
 800060e:	4603      	mov	r3, r0
 8000610:	4a18      	ldr	r2, [pc, #96]	@ (8000674 <ExecuteStateMachine+0x180>)
 8000612:	6013      	str	r3, [r2, #0]
		break;
 8000614:	e013      	b.n	800063e <ExecuteStateMachine+0x14a>

	case STATE_EMERGENCY_STOP:
		current_state = DoStateEmergencyStop();
 8000616:	f000 f9cf 	bl	80009b8 <DoStateEmergencyStop>
 800061a:	4603      	mov	r3, r0
 800061c:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <ExecuteStateMachine+0x180>)
 800061e:	6013      	str	r3, [r2, #0]
		break;
 8000620:	e00d      	b.n	800063e <ExecuteStateMachine+0x14a>

	case STATE_ERROR:
		DoStateError();
 8000622:	f000 f9d9 	bl	80009d8 <DoStateError>
		// In case we exit error handler, restart the state machine
		current_state = DoStateInit();
 8000626:	f000 f829 	bl	800067c <DoStateInit>
 800062a:	4603      	mov	r3, r0
 800062c:	4a11      	ldr	r2, [pc, #68]	@ (8000674 <ExecuteStateMachine+0x180>)
 800062e:	6013      	str	r3, [r2, #0]
		break;
 8000630:	e005      	b.n	800063e <ExecuteStateMachine+0x14a>

	default:
		current_state = DoStateInit();
 8000632:	f000 f823 	bl	800067c <DoStateInit>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0e      	ldr	r2, [pc, #56]	@ (8000674 <ExecuteStateMachine+0x180>)
 800063a:	6013      	str	r3, [r2, #0]
		break;
 800063c:	bf00      	nop
	};
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000377 	.word	0x20000377
 8000648:	200003a1 	.word	0x200003a1
 800064c:	40020c00 	.word	0x40020c00
 8000650:	20000375 	.word	0x20000375
 8000654:	20000376 	.word	0x20000376
 8000658:	20000374 	.word	0x20000374
 800065c:	200002e5 	.word	0x200002e5
 8000660:	200002e6 	.word	0x200002e6
 8000664:	200002e7 	.word	0x200002e7
 8000668:	200002e8 	.word	0x200002e8
 800066c:	200002e9 	.word	0x200002e9
 8000670:	200002e0 	.word	0x200002e0
 8000674:	20000330 	.word	0x20000330
 8000678:	200002e1 	.word	0x200002e1

0800067c <DoStateInit>:

uint32_t DoStateInit() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	b_rops = 0;
 8000680:	4b2e      	ldr	r3, [pc, #184]	@ (800073c <DoStateInit+0xc0>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
	b_emergency_stop = 0;
 8000686:	4b2e      	ldr	r3, [pc, #184]	@ (8000740 <DoStateInit+0xc4>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]

	b_timer500ms_flag = 0;
 800068c:	4b2d      	ldr	r3, [pc, #180]	@ (8000744 <DoStateInit+0xc8>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
	b_timer50ms_flag = 0;
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <DoStateInit+0xcc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	flag_can_tx_send = 0;
 8000698:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <DoStateInit+0xd0>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]

	can1_recv_flag = 0;
 800069e:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <DoStateInit+0xd4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
	flag_can_tx_send = 0;
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <DoStateInit+0xd0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]

	flag_send_drive_pitch_config = 0;
 80006aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <DoStateInit+0xd8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
	flag_send_drive_mast_config = 0;
 80006b0:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <DoStateInit+0xdc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

	memset(&can_tx_data, 0, sizeof(CAN_TX_Data));
 80006b6:	221c      	movs	r2, #28
 80006b8:	2100      	movs	r1, #0
 80006ba:	4828      	ldr	r0, [pc, #160]	@ (800075c <DoStateInit+0xe0>)
 80006bc:	f004 ff68 	bl	8005590 <memset>

	InitDrives();
 80006c0:	f000 ff4e 	bl	8001560 <InitDrives>

	// Initialize the motor control values
	motorss.motors[DRIVE1].enabled = 0;
 80006c4:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <DoStateInit+0xe4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	motorss.motors[DRIVE1].request_enable = 0;
 80006ca:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <DoStateInit+0xe4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	705a      	strb	r2, [r3, #1]
	motorss.motors[DRIVE1].request_disable = 0;
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <DoStateInit+0xe4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	709a      	strb	r2, [r3, #2]
	motorss.motors[DRIVE1].mode = MODE_MANUAL;
 80006d6:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <DoStateInit+0xe4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	70da      	strb	r2, [r3, #3]
	motorss.motors[DRIVE1].auto_command = 0;
 80006dc:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <DoStateInit+0xe4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
	motorss.motors[DRIVE1].manual_command = 0;
 80006e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <DoStateInit+0xe4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
	motorss.motors[DRIVE1].direction = DIR_STOP;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <DoStateInit+0xe4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	711a      	strb	r2, [r3, #4]
	motorss.motors[DRIVE1].prev_direction = DIR_STOP;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <DoStateInit+0xe4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	715a      	strb	r2, [r3, #5]

	motorss.motors[DRIVE2].enabled = 0;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <DoStateInit+0xe4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	741a      	strb	r2, [r3, #16]
	motorss.motors[DRIVE2].request_enable = 0;
 80006fa:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <DoStateInit+0xe4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	745a      	strb	r2, [r3, #17]
	motorss.motors[DRIVE2].request_disable = 0;
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <DoStateInit+0xe4>)
 8000702:	2200      	movs	r2, #0
 8000704:	749a      	strb	r2, [r3, #18]
	motorss.motors[DRIVE2].mode = MODE_MANUAL;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <DoStateInit+0xe4>)
 8000708:	2200      	movs	r2, #0
 800070a:	74da      	strb	r2, [r3, #19]
	motorss.motors[DRIVE2].auto_command = 0;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <DoStateInit+0xe4>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
	motorss.motors[DRIVE2].manual_command = 0;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <DoStateInit+0xe4>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
	motorss.motors[DRIVE2].direction = DIR_STOP;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <DoStateInit+0xe4>)
 800071a:	2200      	movs	r2, #0
 800071c:	751a      	strb	r2, [r3, #20]
	motorss.motors[DRIVE2].prev_direction = DIR_STOP;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <DoStateInit+0xe4>)
 8000720:	2200      	movs	r2, #0
 8000722:	755a      	strb	r2, [r3, #21]
	// HAL_GPIO_WritePin(TEST_BIN2_GPIO_Port, TEST_BIN2_Pin, GPIO_PIN_SET);

	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);

	motorss.motors[DRIVE1].enabled = 0;
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <DoStateInit+0xe4>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]

	//SetDirection(DRIVE_PITCH, motors.pitch_motor.manual_direction);
	//delay_us(10);
	DisableDrive(DRIVE1);
 800072a:	2000      	movs	r0, #0
 800072c:	f001 fa38 	bl	8001ba0 <DisableDrive>
	//delay_us(10);
	DisableDrive(DRIVE2);
 8000730:	2001      	movs	r0, #1
 8000732:	f001 fa35 	bl	8001ba0 <DisableDrive>

	//delay_us(10);
	//ResetStatusRegisters(DRIVE_PITCH);
	//delay_us(10);

	return STATE_ASSESS_PUSH_BUTTONS;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200002e0 	.word	0x200002e0
 8000740:	200002e1 	.word	0x200002e1
 8000744:	200002e2 	.word	0x200002e2
 8000748:	200002e3 	.word	0x200002e3
 800074c:	200002e5 	.word	0x200002e5
 8000750:	200002f8 	.word	0x200002f8
 8000754:	200002e8 	.word	0x200002e8
 8000758:	200002e9 	.word	0x200002e9
 800075c:	20000334 	.word	0x20000334
 8000760:	20000350 	.word	0x20000350

08000764 <DoStateAssessPushButtons>:

uint32_t DoStateAssessPushButtons() {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
	if (1) {
		flag_buttons = 0;
 800076a:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <DoStateAssessPushButtons+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]

		CheckDriveStatusRegister(DRIVE1);
 8000770:	2000      	movs	r0, #0
 8000772:	f001 f9bd 	bl	8001af0 <CheckDriveStatusRegister>
		if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) == GPIO_PIN_RESET) {
 8000776:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800077a:	4820      	ldr	r0, [pc, #128]	@ (80007fc <DoStateAssessPushButtons+0x98>)
 800077c:	f003 f842 	bl	8003804 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d10e      	bne.n	80007a4 <DoStateAssessPushButtons+0x40>
			motor_pitch_on = 0;
 8000786:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <DoStateAssessPushButtons+0x9c>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]

			WriteSPI(DRIVE1, 7, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2107      	movs	r1, #7
 8000790:	2000      	movs	r0, #0
 8000792:	f000 ffdd 	bl	8001750 <WriteSPI>
			DisableDrive(DRIVE1);
 8000796:	2000      	movs	r0, #0
 8000798:	f001 fa02 	bl	8001ba0 <DisableDrive>
			//ResetDrive(DRIVE1);

			InitDriveMotor(DRIVE1);
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fee9 	bl	8001574 <InitDriveMotor>
 80007a2:	e023      	b.n	80007ec <DoStateAssessPushButtons+0x88>

		} else if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin) == GPIO_PIN_RESET) {
 80007a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a8:	4814      	ldr	r0, [pc, #80]	@ (80007fc <DoStateAssessPushButtons+0x98>)
 80007aa:	f003 f82b 	bl	8003804 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d11b      	bne.n	80007ec <DoStateAssessPushButtons+0x88>
			EnableDrive(DRIVE1);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f001 f9b9 	bl	8001b2c <EnableDrive>

			CheckDriveStatusRegister(DRIVE1);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f001 f998 	bl	8001af0 <CheckDriveStatusRegister>

			uint16_t reg_config = ReadSPI(DRIVE1, 0);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fff1 	bl	80017aa <ReadSPI>
 80007c8:	4603      	mov	r3, r0
 80007ca:	80fb      	strh	r3, [r7, #6]
			reg_config = ReadSPI(DRIVE1, 2);
 80007cc:	2102      	movs	r1, #2
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 ffeb 	bl	80017aa <ReadSPI>
 80007d4:	4603      	mov	r3, r0
 80007d6:	80fb      	strh	r3, [r7, #6]

			DirectionDrive(DRIVE1, 1);
 80007d8:	2101      	movs	r1, #1
 80007da:	2000      	movs	r0, #0
 80007dc:	f001 fa1a 	bl	8001c14 <DirectionDrive>

			motor_pitch_on = 1;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <DoStateAssessPushButtons+0x9c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]

			ReadAndVerifyDriveRegisters(DRIVE1);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 ff64 	bl	80016b4 <ReadAndVerifyDriveRegisters>
		 speed_stepper_motor_pitch--;
		 }
		 }*/
	}

	return STATE_PITCH_CONTROL;
 80007ec:	2302      	movs	r3, #2
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000374 	.word	0x20000374
 80007fc:	40021000 	.word	0x40021000
 8000800:	200003a0 	.word	0x200003a0

08000804 <CheckChangeDirectionMotor>:
	}

	return 0; // Indicates nothing changed
}

uint8_t CheckChangeDirectionMotor(DRIVE_MOTOR motor) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	if (motor != DRIVE1 && motor != DRIVE2)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <CheckChangeDirectionMotor+0x1a>
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d001      	beq.n	800081e <CheckChangeDirectionMotor+0x1a>
		return 0;
 800081a:	2300      	movs	r3, #0
 800081c:	e01d      	b.n	800085a <CheckChangeDirectionMotor+0x56>

	// Check for change of direction
	if (motorss.motors[motor].direction
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4a11      	ldr	r2, [pc, #68]	@ (8000868 <CheckChangeDirectionMotor+0x64>)
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4413      	add	r3, r2
 8000826:	3304      	adds	r3, #4
 8000828:	781a      	ldrb	r2, [r3, #0]
			!= motorss.motors[motor].prev_direction) {
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	490e      	ldr	r1, [pc, #56]	@ (8000868 <CheckChangeDirectionMotor+0x64>)
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	440b      	add	r3, r1
 8000832:	3305      	adds	r3, #5
 8000834:	781b      	ldrb	r3, [r3, #0]
	if (motorss.motors[motor].direction
 8000836:	429a      	cmp	r2, r3
 8000838:	d00e      	beq.n	8000858 <CheckChangeDirectionMotor+0x54>
		//SetDirection(motor, motorss.motors[motor].direction);
		//delay_us(20);

		motorss.motors[motor].prev_direction = motorss.motors[motor].direction;
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	490a      	ldr	r1, [pc, #40]	@ (8000868 <CheckChangeDirectionMotor+0x64>)
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	440a      	add	r2, r1
 8000844:	3204      	adds	r2, #4
 8000846:	7811      	ldrb	r1, [r2, #0]
 8000848:	4a07      	ldr	r2, [pc, #28]	@ (8000868 <CheckChangeDirectionMotor+0x64>)
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	4413      	add	r3, r2
 800084e:	3305      	adds	r3, #5
 8000850:	460a      	mov	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]

		return 1; // Indicates direction changed
 8000854:	2301      	movs	r3, #1
 8000856:	e000      	b.n	800085a <CheckChangeDirectionMotor+0x56>
	}

	return 0; // Indicates direction did not change
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000350 	.word	0x20000350

0800086c <DoStatePitchControl>:


uint32_t DoStatePitchControl() {
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
	return STATE_MAST_CONTROL;
 8000870:	2303      	movs	r3, #3
	if (fault) {
		ResetStatusRegisters(DRIVE2); //nul
	}

	return STATE_MAST_CONTROL;
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DoStateMastControl>:

uint32_t DoStateMastControl() {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	return STATE_CAN;
 8000880:	2304      	movs	r3, #4
	if (fault) {
		ResetStatusRegisters(DRIVE1); //nul
	}

	return STATE_CAN;
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DoStateCAN>:

uint32_t DoStateCAN() {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
	if (flag_can_tx_send) // Sent every 50ms
 8000892:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <DoStateCAN+0x94>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d03d      	beq.n	8000916 <DoStateCAN+0x8a>
	{
		flag_can_tx_send = 0;
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <DoStateCAN+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]

		uint32_t pitch_mode = can_tx_data.pitch_motor_mode_feedback;
 80008a0:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <DoStateCAN+0x98>)
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	60fb      	str	r3, [r7, #12]
		uint32_t pitch_mode_msg = (
				(pitch_mode == MODE_MANUAL) ?
						MOTOR_MODE_MANUAL : MOTOR_MODE_AUTOMATIC);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <DoStateCAN+0x24>
 80008ac:	2300      	movs	r3, #0
 80008ae:	e000      	b.n	80008b2 <DoStateCAN+0x26>
 80008b0:	2302      	movs	r3, #2
		uint32_t pitch_mode_msg = (
 80008b2:	607b      	str	r3, [r7, #4]
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_PITCH_MODE,
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	2300      	movs	r3, #0
 80008b8:	2204      	movs	r2, #4
 80008ba:	2021      	movs	r0, #33	@ 0x21
 80008bc:	f000 f9c6 	bl	8000c4c <TransmitCAN>
				(uint8_t*) &pitch_mode_msg, 4, 0);

		uint32_t mast_mode = can_tx_data.mast_motor_mode_feedback;
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <DoStateCAN+0x98>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	60bb      	str	r3, [r7, #8]
		uint32_t mast_mode_msg = (
				(mast_mode == MODE_MANUAL) ?
						MOTOR_MODE_MANUAL : MOTOR_MODE_AUTOMATIC);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <DoStateCAN+0x44>
 80008cc:	2300      	movs	r3, #0
 80008ce:	e000      	b.n	80008d2 <DoStateCAN+0x46>
 80008d0:	2302      	movs	r3, #2
		uint32_t mast_mode_msg = (
 80008d2:	603b      	str	r3, [r7, #0]
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_MAST_MODE,
 80008d4:	4639      	mov	r1, r7
 80008d6:	2300      	movs	r3, #0
 80008d8:	2204      	movs	r2, #4
 80008da:	2022      	movs	r0, #34	@ 0x22
 80008dc:	f000 f9b6 	bl	8000c4c <TransmitCAN>
				(uint8_t*) &mast_mode_msg, 4, 0);

		static float test = 0;
		static float debug_log_4_value = 0;
		debug_log_4_value = debug_log_4_value + test;
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <DoStateCAN+0x9c>)
 80008e2:	ed93 7a00 	vldr	s14, [r3]
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <DoStateCAN+0xa0>)
 80008e8:	edd3 7a00 	vldr	s15, [r3]
 80008ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <DoStateCAN+0x9c>)
 80008f2:	edc3 7a00 	vstr	s15, [r3]
		TransmitCAN(CAN_ID_MARIO_VAL_DEBUG_LOG_4, (uint8_t*) &debug_log_4_value,
 80008f6:	2300      	movs	r3, #0
 80008f8:	2204      	movs	r2, #4
 80008fa:	490b      	ldr	r1, [pc, #44]	@ (8000928 <DoStateCAN+0x9c>)
 80008fc:	204f      	movs	r0, #79	@ 0x4f
 80008fe:	f000 f9a5 	bl	8000c4c <TransmitCAN>
				4, 0);
		test++;
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <DoStateCAN+0xa0>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800090c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <DoStateCAN+0xa0>)
 8000912:	edc3 7a00 	vstr	s15, [r3]
		 */

	}

	// return STATE_PITCH_CONTROL;
	return STATE_ASSESS_PUSH_BUTTONS;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200002e5 	.word	0x200002e5
 8000924:	20000334 	.word	0x20000334
 8000928:	20000378 	.word	0x20000378
 800092c:	2000037c 	.word	0x2000037c

08000930 <DoStateROPS>:

uint32_t DoStateROPS() {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	while (b_rops) {
 8000934:	e029      	b.n	800098a <DoStateROPS+0x5a>
		//delay_us(10);

		// Check timers
		if (b_timer500ms_flag) {
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <DoStateROPS+0x68>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d006      	beq.n	800094c <DoStateROPS+0x1c>
			b_timer500ms_flag = 0;
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <DoStateROPS+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 8000944:	2108      	movs	r1, #8
 8000946:	4815      	ldr	r0, [pc, #84]	@ (800099c <DoStateROPS+0x6c>)
 8000948:	f002 ff8d 	bl	8003866 <HAL_GPIO_TogglePin>
		}
		if (b_timer50ms_flag) {
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <DoStateROPS+0x70>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d008      	beq.n	8000966 <DoStateROPS+0x36>
			b_timer50ms_flag = 0;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <DoStateROPS+0x70>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
			flag_pitch_control = 1;
 800095a:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <DoStateROPS+0x74>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
			flag_mast_control = 1;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <DoStateROPS+0x78>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
			// flag_can_tx_send = 1;
		}
		if (b_timer250ms_flag) {
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <DoStateROPS+0x7c>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d005      	beq.n	800097a <DoStateROPS+0x4a>
			b_timer250ms_flag = 0;
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <DoStateROPS+0x7c>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]

			flag_can_tx_send = 1;
 8000974:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <DoStateROPS+0x80>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
		// Safety check, if we have a command from MARIO, make sure drive is enabled
		//if (motors.motors[DRIVE_PITCH].auto_command && !motors.motors[DRIVE_PITCH].enabled)
		//	motors.motors[DRIVE_PITCH].request_enable = 1;
		//motors.motors[DRIVE_PITCH].mode = MODE_AUTOMATIC;

		DoStateAssessPushButtons();
 800097a:	f7ff fef3 	bl	8000764 <DoStateAssessPushButtons>
		DoStatePitchControl();
 800097e:	f7ff ff75 	bl	800086c <DoStatePitchControl>
		DoStateMastControl();
 8000982:	f7ff ff7b 	bl	800087c <DoStateMastControl>
		DoStateCAN();
 8000986:	f7ff ff81 	bl	800088c <DoStateCAN>
	while (b_rops) {
 800098a:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <DoStateROPS+0x84>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1d1      	bne.n	8000936 <DoStateROPS+0x6>
	}

	return STATE_PITCH_CONTROL;
 8000992:	2302      	movs	r3, #2
}
 8000994:	4618      	mov	r0, r3
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200002e2 	.word	0x200002e2
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	200002e3 	.word	0x200002e3
 80009a4:	200002e6 	.word	0x200002e6
 80009a8:	200002e7 	.word	0x200002e7
 80009ac:	200002e4 	.word	0x200002e4
 80009b0:	200002e5 	.word	0x200002e5
 80009b4:	200002e0 	.word	0x200002e0

080009b8 <DoStateEmergencyStop>:

uint32_t DoStateEmergencyStop() {
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	while (b_emergency_stop) {
 80009bc:	bf00      	nop
 80009be:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <DoStateEmergencyStop+0x1c>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1fb      	bne.n	80009be <DoStateEmergencyStop+0x6>

	}

	return STATE_PITCH_CONTROL;
 80009c6:	2302      	movs	r3, #2
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	200002e1 	.word	0x200002e1

080009d8 <DoStateError>:

void DoStateError() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	Error_Handler();
 80009dc:	f000 fdba 	bl	8001554 <Error_Handler>
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SetMotorMode>:

//uint16_t test_debug_log_can_message[200] = {0};
//uint8_t test_debug_log_can_message_counter = 0;
void SetMotorMode(DRIVE_MOTOR motor, uint32_t can_value) {
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	603b      	str	r3, [r7, #0]
	 } else {
	 test_debug_log_can_message_counter++;
	 }
	 test_debug_log_can_message[test_debug_log_can_message_counter] = can_value; */

	uint32_t motor_mode = MODE_MANUAL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_MODE_MANUAL) {
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <SetMotorMode+0x22>
		motor_mode = MODE_MANUAL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e004      	b.n	8000a10 <SetMotorMode+0x2c>
	} else if (can_value == MOTOR_MODE_AUTOMATIC) {
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d10b      	bne.n	8000a24 <SetMotorMode+0x40>
		motor_mode = MODE_AUTOMATIC;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
	} else {
		return; // Do not set motor mode if mode value from CAN is invalid
	}

	motorss.motors[motor].mode = motor_mode;
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	b2d1      	uxtb	r1, r2
 8000a16:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <SetMotorMode+0x4c>)
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	4413      	add	r3, r2
 8000a1c:	3303      	adds	r3, #3
 8000a1e:	460a      	mov	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	e000      	b.n	8000a26 <SetMotorMode+0x42>
		return; // Do not set motor mode if mode value from CAN is invalid
 8000a24:	bf00      	nop
}
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	20000350 	.word	0x20000350

08000a34 <SetMotorDirection>:

void SetMotorDirection(DRIVE_MOTOR motor, int32_t can_value) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	603b      	str	r3, [r7, #0]
	 } else {
	 test_debug_log_can_message_counter++;
	 }
	 test_debug_log_can_message[test_debug_log_can_message_counter] = can_value;*/

	uint32_t motor_direction = DIR_INVALID;
 8000a46:	2303      	movs	r3, #3
 8000a48:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_DIRECTION_STOP)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d102      	bne.n	8000a56 <SetMotorDirection+0x22>
		motor_direction = DIR_STOP;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	e00a      	b.n	8000a6c <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_LEFT)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <SetMotorDirection+0x2e>
		motor_direction = DIR_LEFT;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	e004      	b.n	8000a6c <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_RIGHT)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d10f      	bne.n	8000a88 <SetMotorDirection+0x54>
		motor_direction = DIR_RIGHT;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
	else
		return;

	motorss.motors[motor].direction = motor_direction;
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	b2d1      	uxtb	r1, r2
 8000a72:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <SetMotorDirection+0x5c>)
 8000a74:	011b      	lsls	r3, r3, #4
 8000a76:	4413      	add	r3, r2
 8000a78:	3304      	adds	r3, #4
 8000a7a:	460a      	mov	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]

	// Check change of direction
	CheckChangeDirectionMotor(motor);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff febf 	bl	8000804 <CheckChangeDirectionMotor>
 8000a86:	e000      	b.n	8000a8a <SetMotorDirection+0x56>
		return;
 8000a88:	bf00      	nop
}
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000350 	.word	0x20000350

08000a94 <ProcessCanMessage>:

void ProcessCanMessage() {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) == GPIO_PIN_RESET) {
 8000a9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a9e:	4836      	ldr	r0, [pc, #216]	@ (8000b78 <ProcessCanMessage+0xe4>)
 8000aa0:	f002 feb0 	bl	8003804 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d060      	beq.n	8000b6c <ProcessCanMessage+0xd8>
		return 0;
	}
	if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin) == GPIO_PIN_RESET) {
 8000aaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aae:	4832      	ldr	r0, [pc, #200]	@ (8000b78 <ProcessCanMessage+0xe4>)
 8000ab0:	f002 fea8 	bl	8003804 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d05a      	beq.n	8000b70 <ProcessCanMessage+0xdc>
	} BytesToType;
	static BytesToType bytesToType;

	// Technically CAN data can be 8 bytes but we only send 4-bytes data to the motor driver
	// uint32_t upper_can_data = rxData[4] | (rxData[5] << 8) | (rxData[6] << 16) | (rxData[7] << 24);
	uint32_t can_data = rxData[0] | (rxData[1] << 8) | (rxData[2] << 16)
 8000aba:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <ProcessCanMessage+0xe8>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b7c <ProcessCanMessage+0xe8>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <ProcessCanMessage+0xe8>)
 8000aca:	789b      	ldrb	r3, [r3, #2]
 8000acc:	041b      	lsls	r3, r3, #16
 8000ace:	431a      	orrs	r2, r3
			| (rxData[3] << 24);
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <ProcessCanMessage+0xe8>)
 8000ad2:	78db      	ldrb	r3, [r3, #3]
 8000ad4:	061b      	lsls	r3, r3, #24
 8000ad6:	4313      	orrs	r3, r2
	uint32_t can_data = rxData[0] | (rxData[1] << 8) | (rxData[2] << 16)
 8000ad8:	607b      	str	r3, [r7, #4]

	//
	// Motor Modes
	//
	// TODO: (Marc) Should one have precedence over the other ? What if steering wheel sets mode that is then overwritten by mario ?
	if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_MODE) {
 8000ada:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <ProcessCanMessage+0xec>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b11      	cmp	r3, #17
 8000ae0:	d104      	bne.n	8000aec <ProcessCanMessage+0x58>
		SetMotorMode(DRIVE2, can_data);
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ff7d 	bl	80009e4 <SetMotorMode>
 8000aea:	e042      	b.n	8000b72 <ProcessCanMessage+0xde>
	} else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_MODE) {
 8000aec:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <ProcessCanMessage+0xec>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b12      	cmp	r3, #18
 8000af2:	d104      	bne.n	8000afe <ProcessCanMessage+0x6a>
		SetMotorMode(DRIVE1, can_data);
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff ff74 	bl	80009e4 <SetMotorMode>
 8000afc:	e039      	b.n	8000b72 <ProcessCanMessage+0xde>
	}
	//
	// MARIO Manual motor commands
	//
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_DIRECTION) {
 8000afe:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <ProcessCanMessage+0xec>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b13      	cmp	r3, #19
 8000b04:	d105      	bne.n	8000b12 <ProcessCanMessage+0x7e>
		SetMotorDirection(DRIVE1, can_data);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff ff92 	bl	8000a34 <SetMotorDirection>
 8000b10:	e02f      	b.n	8000b72 <ProcessCanMessage+0xde>


	} else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_DIRECTION) {
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <ProcessCanMessage+0xec>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b14      	cmp	r3, #20
 8000b18:	d105      	bne.n	8000b26 <ProcessCanMessage+0x92>
		SetMotorDirection(DRIVE1, can_data);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f7ff ff88 	bl	8000a34 <SetMotorDirection>
 8000b24:	e025      	b.n	8000b72 <ProcessCanMessage+0xde>
	}
	//
	// MARIO Automatic motor commands
	//
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_SPEED) {
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <ProcessCanMessage+0xec>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b15      	cmp	r3, #21
 8000b2c:	d106      	bne.n	8000b3c <ProcessCanMessage+0xa8>
		can_data = (can_data & 0xFF); //SUPER IMPORTANT
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	607b      	str	r3, [r7, #4]

		//speed_stepper_motor_pitch = 100;
		speed_stepper_motor_pitch = can_data;
 8000b34:	4a13      	ldr	r2, [pc, #76]	@ (8000b84 <ProcessCanMessage+0xf0>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e01a      	b.n	8000b72 <ProcessCanMessage+0xde>
	 motors.pitch_motor.request_disable = 1;
	 motors.mast_motor.request_disable = 1;

	 DoStateInit();
	 }*/
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_ROPS) {
 8000b3c:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <ProcessCanMessage+0xec>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d116      	bne.n	8000b72 <ProcessCanMessage+0xde>
		uint8_t rops_data = (can_data & 0xFF);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	70fb      	strb	r3, [r7, #3]
		if (rops_data == ROPS_ENABLE)
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d103      	bne.n	8000b56 <ProcessCanMessage+0xc2>
			b_rops = 1;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <ProcessCanMessage+0xf4>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e00d      	b.n	8000b72 <ProcessCanMessage+0xde>
		else if (rops_data == ROPS_DISABLE)
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d103      	bne.n	8000b64 <ProcessCanMessage+0xd0>
			b_rops = 0;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <ProcessCanMessage+0xf4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e006      	b.n	8000b72 <ProcessCanMessage+0xde>
		else {
			// Unknown value for ROPS command, assume cmd was to activate ROPS
			b_rops = 1;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <ProcessCanMessage+0xf4>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e002      	b.n	8000b72 <ProcessCanMessage+0xde>
		return 0;
 8000b6c:	bf00      	nop
 8000b6e:	e000      	b.n	8000b72 <ProcessCanMessage+0xde>
		return 0;
 8000b70:	bf00      	nop
		}
	} else {
		// Unknown CAN ID
	}
}
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	200002f0 	.word	0x200002f0
 8000b80:	20000314 	.word	0x20000314
 8000b84:	200002ec 	.word	0x200002ec
 8000b88:	200002e0 	.word	0x200002e0

08000b8c <CAN_ReceiveFifoCallback>:

void CAN_ReceiveFifoCallback(CAN_HandleTypeDef *hcan, uint32_t fifo) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]

	uint32_t num_messages = HAL_CAN_GetRxFifoFillLevel(hcan, fifo);
 8000b96:	6839      	ldr	r1, [r7, #0]
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f002 f938 	bl	8002e0e <HAL_CAN_GetRxFifoFillLevel>
 8000b9e:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < num_messages; ++i) {
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	e00f      	b.n	8000bc6 <CAN_ReceiveFifoCallback+0x3a>
		if (HAL_CAN_GetRxMessage(hcan, fifo, &pRxHeader, rxData) != HAL_OK) {
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <CAN_ReceiveFifoCallback+0x4c>)
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <CAN_ReceiveFifoCallback+0x50>)
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f002 f80c 	bl	8002bca <HAL_CAN_GetRxMessage>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <CAN_ReceiveFifoCallback+0x30>
			Error_Handler();
 8000bb8:	f000 fccc 	bl	8001554 <Error_Handler>
		}

		ProcessCanMessage();
 8000bbc:	f7ff ff6a 	bl	8000a94 <ProcessCanMessage>
	for (int i = 0; i < num_messages; ++i) {
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d8eb      	bhi.n	8000ba6 <CAN_ReceiveFifoCallback+0x1a>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200002f0 	.word	0x200002f0
 8000bdc:	20000314 	.word	0x20000314

08000be0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffce 	bl	8000b8c <CAN_ReceiveFifoCallback>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO1);
 8000c00:	2101      	movs	r1, #1
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffc2 	bl	8000b8c <CAN_ReceiveFifoCallback>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_CAN_RxFifo0FullCallback>:

// CAN error callbacks
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_CAN_RxFifo1FullCallback>:

void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <TransmitCAN>:

HAL_StatusTypeDef TransmitCAN(uint32_t id, uint8_t *buf, uint8_t size,
		uint8_t with_priority) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	71bb      	strb	r3, [r7, #6]
	// CAN_TxHeaderTypeDef msg;
	pTxHeader.StdId = id;
 8000c62:	4a27      	ldr	r2, [pc, #156]	@ (8000d00 <TransmitCAN+0xb4>)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6013      	str	r3, [r2, #0]
	pTxHeader.IDE = CAN_ID_STD;
 8000c68:	4b25      	ldr	r3, [pc, #148]	@ (8000d00 <TransmitCAN+0xb4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR = CAN_RTR_DATA;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <TransmitCAN+0xb4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
	pTxHeader.DLC = size; // Number of bytes to send
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4a22      	ldr	r2, [pc, #136]	@ (8000d00 <TransmitCAN+0xb4>)
 8000c78:	6113      	str	r3, [r2, #16]
	pTxHeader.TransmitGlobalTime = DISABLE;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <TransmitCAN+0xb4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	751a      	strb	r2, [r3, #20]

	uint8_t found_mailbox = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 10; ++i) {
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
 8000c88:	e00b      	b.n	8000ca2 <TransmitCAN+0x56>
		// Check that mailbox is available for tx
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0) {
 8000c8a:	481e      	ldr	r0, [pc, #120]	@ (8000d04 <TransmitCAN+0xb8>)
 8000c8c:	f001 ff68 	bl	8002b60 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <TransmitCAN+0x50>
			found_mailbox = 1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	75fb      	strb	r3, [r7, #23]
			break;
 8000c9a:	e005      	b.n	8000ca8 <TransmitCAN+0x5c>
	for (int i = 0; i < 10; ++i) {
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	2b09      	cmp	r3, #9
 8000ca6:	ddf0      	ble.n	8000c8a <TransmitCAN+0x3e>
	if (!found_mailbox) {
		// TODO: (Marc) Should really be the error led once it's been soldered
		//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
	}

	if (with_priority) {
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d010      	beq.n	8000cd0 <TransmitCAN+0x84>
		// If message is important, make sure no other messages are queud to ensure it will be sent after any other
		// values that could override it.
		for (int i = 0; i < 10; ++i) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	e008      	b.n	8000cc6 <TransmitCAN+0x7a>
			// Check that all 3 mailboxes are empty
			if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 3)
 8000cb4:	4813      	ldr	r0, [pc, #76]	@ (8000d04 <TransmitCAN+0xb8>)
 8000cb6:	f001 ff53 	bl	8002b60 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d006      	beq.n	8000cce <TransmitCAN+0x82>
		for (int i = 0; i < 10; ++i) {
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	ddf3      	ble.n	8000cb4 <TransmitCAN+0x68>
 8000ccc:	e000      	b.n	8000cd0 <TransmitCAN+0x84>
				break;
 8000cce:	bf00      	nop
			//delay_us(50);
		}
	}

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, buf, &mb);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	490a      	ldr	r1, [pc, #40]	@ (8000d00 <TransmitCAN+0xb4>)
 8000cd8:	480a      	ldr	r0, [pc, #40]	@ (8000d04 <TransmitCAN+0xb8>)
 8000cda:	f001 fe71 	bl	80029c0 <HAL_CAN_AddTxMessage>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK) {
 8000ce2:	7dbb      	ldrb	r3, [r7, #22]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <TransmitCAN+0xa0>
		return ret;
 8000ce8:	7dbb      	ldrb	r3, [r7, #22]
 8000cea:	e005      	b.n	8000cf8 <TransmitCAN+0xac>
	}

	// Update the CAN led
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <TransmitCAN+0xbc>)
 8000cf2:	f002 fd9f 	bl	8003834 <HAL_GPIO_WritePin>
	// ToggleLed(LED_CAN);
	return ret;
 8000cf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200002fc 	.word	0x200002fc
 8000d04:	20000068 	.word	0x20000068
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f001 fba2 	bl	8002458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f82c 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 fb1e 	bl	8001358 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d1c:	f000 f896 	bl	8000e4c <MX_CAN1_Init>
  MX_SPI1_Init();
 8000d20:	f000 f91e 	bl	8000f60 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000d24:	f000 f952 	bl	8000fcc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d28:	f000 f9a0 	bl	800106c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000d2c:	f000 f9ea 	bl	8001104 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d30:	f000 fa36 	bl	80011a0 <MX_TIM5_Init>
  MX_TIM6_Init();
 8000d34:	f000 fa84 	bl	8001240 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d38:	f000 fab6 	bl	80012a8 <MX_TIM7_Init>
  MX_TIM10_Init();
 8000d3c:	f000 faea 	bl	8001314 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim6);
 8000d40:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <main+0x54>)
 8000d42:	f003 fffb 	bl	8004d3c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <main+0x58>)
 8000d48:	f003 fff8 	bl	8004d3c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8000d4c:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <main+0x5c>)
 8000d4e:	f003 fff5 	bl	8004d3c <HAL_TIM_Base_Start_IT>

	current_state = STATE_INIT;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <main+0x60>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ExecuteStateMachine();
 8000d58:	f7ff fbcc 	bl	80004f4 <ExecuteStateMachine>
 8000d5c:	e7fc      	b.n	8000d58 <main+0x4c>
 8000d5e:	bf00      	nop
 8000d60:	20000208 	.word	0x20000208
 8000d64:	20000178 	.word	0x20000178
 8000d68:	20000250 	.word	0x20000250
 8000d6c:	20000330 	.word	0x20000330

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	@ 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2234      	movs	r2, #52	@ 0x34
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 fc06 	bl	8005590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <SystemClock_Config+0xd4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	4a29      	ldr	r2, [pc, #164]	@ (8000e44 <SystemClock_Config+0xd4>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da4:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <SystemClock_Config+0xd4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <SystemClock_Config+0xd8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dbc:	4a22      	ldr	r2, [pc, #136]	@ (8000e48 <SystemClock_Config+0xd8>)
 8000dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <SystemClock_Config+0xd8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000de4:	2308      	movs	r3, #8
 8000de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 fff5 	bl	8003dec <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e08:	f000 fba4 	bl	8001554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2302      	movs	r3, #2
 8000e12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fd4e 	bl	80038cc <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e36:	f000 fb8d 	bl	8001554 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3750      	adds	r7, #80	@ 0x50
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b094      	sub	sp, #80	@ 0x50
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e52:	4b41      	ldr	r3, [pc, #260]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e54:	4a41      	ldr	r2, [pc, #260]	@ (8000f5c <MX_CAN1_Init+0x110>)
 8000e56:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000e58:	4b3f      	ldr	r3, [pc, #252]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8000e64:	4b3c      	ldr	r3, [pc, #240]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e6a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e6e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000e72:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000e74:	4b38      	ldr	r3, [pc, #224]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e76:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000e7a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e7c:	4b36      	ldr	r3, [pc, #216]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e82:	4b35      	ldr	r3, [pc, #212]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e88:	4b33      	ldr	r3, [pc, #204]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e8e:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e94:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ea0:	482d      	ldr	r0, [pc, #180]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000ea2:	f001 fb6f 	bl	8002584 <HAL_CAN_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000eac:	f000 fb52 	bl	8001554 <Error_Handler>
	 }
	 */

	CAN_FilterTypeDef sf_fifo0;
	// All common bits go into the ID register
	sf_fifo0.FilterIdHigh = DRIVEMOTOR_FIFO0_RX_FILTER_ID_HIGH;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sf_fifo0.FilterIdLow = DRIVEMOTOR_FIFO0_RX_FILTER_ID_LOW;
 8000eb4:	2360      	movs	r3, #96	@ 0x60
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Which bits to compare for filter
	sf_fifo0.FilterMaskIdHigh = 0x0000;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
	sf_fifo0.FilterMaskIdLow = (FIFO0_RX_FILTER_MASK_LOW & 0x07FF);
 8000ebc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34

	sf_fifo0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sf_fifo0.FilterBank = 0; // Which filter to use from the assigned ones
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sf_fifo0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	643b      	str	r3, [r7, #64]	@ 0x40
	sf_fifo0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	647b      	str	r3, [r7, #68]	@ 0x44
	sf_fifo0.FilterActivation = CAN_FILTER_ENABLE;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
	sf_fifo0.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8000ed6:	230e      	movs	r3, #14
 8000ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo0) != HAL_OK) {
 8000eda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481d      	ldr	r0, [pc, #116]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000ee2:	f001 fc4b 	bl	800277c <HAL_CAN_ConfigFilter>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_CAN1_Init+0xa4>
		Error_Handler();
 8000eec:	f000 fb32 	bl	8001554 <Error_Handler>
	// All common bits go into the ID register
	//sf_fifo1.FilterIdHigh = 0x0000;
	//sf_fifo1.FilterIdLow = 0x0000;
	//sf_fifo1.FilterMaskIdHigh = 0x0000;
	//sf_fifo1.FilterMaskIdLow = 0x0000;
	sf_fifo1.FilterIdHigh = DRIVEMOTOR_FIFO1_RX_FILTER_ID_HIGH;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	603b      	str	r3, [r7, #0]
	sf_fifo1.FilterIdLow = DRIVEMOTOR_FIFO1_RX_FILTER_ID_LOW;
 8000ef4:	2370      	movs	r3, #112	@ 0x70
 8000ef6:	607b      	str	r3, [r7, #4]

	// Which bits to compare for filter
	sf_fifo1.FilterMaskIdHigh = 0x0000;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
	sf_fifo1.FilterMaskIdLow = (FIFO1_RX_FILTER_MASK_LOW & 0x7FF);
 8000efc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f00:	60fb      	str	r3, [r7, #12]

	sf_fifo1.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	613b      	str	r3, [r7, #16]
	sf_fifo1.FilterBank = 1; // Which filter to use from the assigned ones
 8000f06:	2301      	movs	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
	sf_fifo1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
	sf_fifo1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
	sf_fifo1.FilterActivation = CAN_FILTER_ENABLE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
	sf_fifo1.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8000f16:	230e      	movs	r3, #14
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo1) != HAL_OK) {
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480e      	ldr	r0, [pc, #56]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000f20:	f001 fc2c 	bl	800277c <HAL_CAN_ConfigFilter>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_CAN1_Init+0xe2>
		Error_Handler();
 8000f2a:	f000 fb13 	bl	8001554 <Error_Handler>

	//if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
	//{
	//	  Error_Handler();
	//}
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000f2e:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000f30:	f001 fd02 	bl	8002938 <HAL_CAN_Start>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_CAN1_Init+0xf2>
		Error_Handler();
 8000f3a:	f000 fb0b 	bl	8001554 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 8000f3e:	2112      	movs	r1, #18
 8000f40:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <MX_CAN1_Init+0x10c>)
 8000f42:	f001 ff8c 	bl	8002e5e <HAL_CAN_ActivateNotification>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_CAN1_Init+0x104>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING)
			!= HAL_OK) {
		Error_Handler();
 8000f4c:	f000 fb02 	bl	8001554 <Error_Handler>
	 }
	 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3750      	adds	r7, #80	@ 0x50
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000068 	.word	0x20000068
 8000f5c:	40006400 	.word	0x40006400

08000f60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f64:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f66:	4a18      	ldr	r2, [pc, #96]	@ (8000fc8 <MX_SPI1_Init+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f72:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f94:	2230      	movs	r2, #48	@ 0x30
 8000f96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000fac:	220a      	movs	r2, #10
 8000fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000fb2:	f003 f9b9 	bl	8004328 <HAL_SPI_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fbc:	f000 faca 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000090 	.word	0x20000090
 8000fc8:	40013000 	.word	0x40013000

08000fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8001064 <MX_TIM1_Init+0x98>)
 8000fea:	4a1f      	ldr	r2, [pc, #124]	@ (8001068 <MX_TIM1_Init+0x9c>)
 8000fec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <MX_TIM1_Init+0x98>)
 8000ff0:	2230      	movs	r2, #48	@ 0x30
 8000ff2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <MX_TIM1_Init+0x98>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <MX_TIM1_Init+0x98>)
 8000ffc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001000:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <MX_TIM1_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001008:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <MX_TIM1_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <MX_TIM1_Init+0x98>)
 8001010:	2280      	movs	r2, #128	@ 0x80
 8001012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001014:	4813      	ldr	r0, [pc, #76]	@ (8001064 <MX_TIM1_Init+0x98>)
 8001016:	f003 fdd9 	bl	8004bcc <HAL_TIM_Base_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001020:	f000 fa98 	bl	8001554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	4619      	mov	r1, r3
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <MX_TIM1_Init+0x98>)
 8001032:	f003 ffe3 	bl	8004ffc <HAL_TIM_ConfigClockSource>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800103c:	f000 fa8a 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_TIM1_Init+0x98>)
 800104e:	f004 fa0f 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001058:	f000 fa7c 	bl	8001554 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */

	// HAL_TIM_PWM_Start(&htim1, channel);
  /* USER CODE END TIM1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000e8 	.word	0x200000e8
 8001068:	40010000 	.word	0x40010000

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_TIM2_Init+0x94>)
 800108a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800108e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_TIM2_Init+0x94>)
 8001092:	2230      	movs	r2, #48	@ 0x30
 8001094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_TIM2_Init+0x94>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_TIM2_Init+0x94>)
 800109e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b0:	4813      	ldr	r0, [pc, #76]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010b2:	f003 fd8b 	bl	8004bcc <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010bc:	f000 fa4a 	bl	8001554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010ce:	f003 ff95 	bl	8004ffc <HAL_TIM_ConfigClockSource>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d8:	f000 fa3c 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010ea:	f004 f9c1 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010f4:	f000 fa2e 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000130 	.word	0x20000130

08001104 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001122:	4a1e      	ldr	r2, [pc, #120]	@ (800119c <MX_TIM4_Init+0x98>)
 8001124:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001128:	f240 227f 	movw	r2, #639	@ 0x27f
 800112c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001136:	f241 3287 	movw	r2, #4999	@ 0x1387
 800113a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <MX_TIM4_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	@ (8001198 <MX_TIM4_Init+0x94>)
 800114a:	f003 fd3f 	bl	8004bcc <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001154:	f000 f9fe 	bl	8001554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001166:	f003 ff49 	bl	8004ffc <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f9f0 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001182:	f004 f975 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f9e2 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000178 	.word	0x20000178
 800119c:	40000800 	.word	0x40000800

080011a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <MX_TIM5_Init+0x98>)
 80011be:	4a1f      	ldr	r2, [pc, #124]	@ (800123c <MX_TIM5_Init+0x9c>)
 80011c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <MX_TIM5_Init+0x98>)
 80011c4:	223f      	movs	r2, #63	@ 0x3f
 80011c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <MX_TIM5_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_TIM5_Init+0x98>)
 80011d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <MX_TIM5_Init+0x98>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_TIM5_Init+0x98>)
 80011de:	2280      	movs	r2, #128	@ 0x80
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011e2:	4815      	ldr	r0, [pc, #84]	@ (8001238 <MX_TIM5_Init+0x98>)
 80011e4:	f003 fcf2 	bl	8004bcc <HAL_TIM_Base_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f9b1 	bl	8001554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4619      	mov	r1, r3
 80011fe:	480e      	ldr	r0, [pc, #56]	@ (8001238 <MX_TIM5_Init+0x98>)
 8001200:	f003 fefc 	bl	8004ffc <HAL_TIM_ConfigClockSource>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800120a:	f000 f9a3 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	4619      	mov	r1, r3
 800121a:	4807      	ldr	r0, [pc, #28]	@ (8001238 <MX_TIM5_Init+0x98>)
 800121c:	f004 f928 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001226:	f000 f995 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

	HAL_TIM_Base_Start(&htim5);
 800122a:	4803      	ldr	r0, [pc, #12]	@ (8001238 <MX_TIM5_Init+0x98>)
 800122c:	f003 fd1e 	bl	8004c6c <HAL_TIM_Base_Start>

  /* USER CODE END TIM5_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200001c0 	.word	0x200001c0
 800123c:	40000c00 	.word	0x40000c00

08001240 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_TIM6_Init+0x60>)
 8001250:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <MX_TIM6_Init+0x64>)
 8001252:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_TIM6_Init+0x60>)
 8001256:	223f      	movs	r2, #63	@ 0x3f
 8001258:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_TIM6_Init+0x60>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_TIM6_Init+0x60>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_TIM6_Init+0x60>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <MX_TIM6_Init+0x60>)
 800126e:	f003 fcad 	bl	8004bcc <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001278:	f000 f96c 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_TIM6_Init+0x60>)
 800128a:	f004 f8f1 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001294:	f000 f95e 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000208 	.word	0x20000208
 80012a4:	40001000 	.word	0x40001000

080012a8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_TIM7_Init+0x64>)
 80012b8:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <MX_TIM7_Init+0x68>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 480;
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_TIM7_Init+0x64>)
 80012be:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80012c2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_TIM7_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_TIM7_Init+0x64>)
 80012cc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80012d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_TIM7_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_TIM7_Init+0x64>)
 80012da:	f003 fc77 	bl	8004bcc <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80012e4:	f000 f936 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_TIM7_Init+0x64>)
 80012f6:	f004 f8bb 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001300:	f000 f928 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000250 	.word	0x20000250
 8001310:	40001400 	.word	0x40001400

08001314 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001318:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <MX_TIM10_Init+0x3c>)
 800131a:	4a0e      	ldr	r2, [pc, #56]	@ (8001354 <MX_TIM10_Init+0x40>)
 800131c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 63;
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <MX_TIM10_Init+0x3c>)
 8001320:	223f      	movs	r2, #63	@ 0x3f
 8001322:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <MX_TIM10_Init+0x3c>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2;
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MX_TIM10_Init+0x3c>)
 800132c:	2202      	movs	r2, #2
 800132e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <MX_TIM10_Init+0x3c>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <MX_TIM10_Init+0x3c>)
 8001338:	2280      	movs	r2, #128	@ 0x80
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_TIM10_Init+0x3c>)
 800133e:	f003 fc45 	bl	8004bcc <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8001348:	f000 f904 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000298 	.word	0x20000298
 8001354:	40014400 	.word	0x40014400

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b5f      	ldr	r3, [pc, #380]	@ (80014f0 <MX_GPIO_Init+0x198>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a5e      	ldr	r2, [pc, #376]	@ (80014f0 <MX_GPIO_Init+0x198>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b5c      	ldr	r3, [pc, #368]	@ (80014f0 <MX_GPIO_Init+0x198>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b58      	ldr	r3, [pc, #352]	@ (80014f0 <MX_GPIO_Init+0x198>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a57      	ldr	r2, [pc, #348]	@ (80014f0 <MX_GPIO_Init+0x198>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b55      	ldr	r3, [pc, #340]	@ (80014f0 <MX_GPIO_Init+0x198>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b51      	ldr	r3, [pc, #324]	@ (80014f0 <MX_GPIO_Init+0x198>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a50      	ldr	r2, [pc, #320]	@ (80014f0 <MX_GPIO_Init+0x198>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b4e      	ldr	r3, [pc, #312]	@ (80014f0 <MX_GPIO_Init+0x198>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b4a      	ldr	r3, [pc, #296]	@ (80014f0 <MX_GPIO_Init+0x198>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a49      	ldr	r2, [pc, #292]	@ (80014f0 <MX_GPIO_Init+0x198>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b47      	ldr	r3, [pc, #284]	@ (80014f0 <MX_GPIO_Init+0x198>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b43      	ldr	r3, [pc, #268]	@ (80014f0 <MX_GPIO_Init+0x198>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a42      	ldr	r2, [pc, #264]	@ (80014f0 <MX_GPIO_Init+0x198>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b40      	ldr	r3, [pc, #256]	@ (80014f0 <MX_GPIO_Init+0x198>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FT_RESET_Pin|SPI_CS2_Pin|SPI_CS1_Pin|BIN2_1_Pin
 80013fa:	2200      	movs	r2, #0
 80013fc:	f64f 41e2 	movw	r1, #64738	@ 0xfce2
 8001400:	483c      	ldr	r0, [pc, #240]	@ (80014f4 <MX_GPIO_Init+0x19c>)
 8001402:	f002 fa17 	bl	8003834 <HAL_GPIO_WritePin>
                          |BIN1_1_Pin|DIR1_Pin|STEP1_Pin|RESET1_Pin
                          |nSLEEP1_Pin|STEP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 8001406:	2200      	movs	r2, #0
 8001408:	2137      	movs	r1, #55	@ 0x37
 800140a:	483b      	ldr	r0, [pc, #236]	@ (80014f8 <MX_GPIO_Init+0x1a0>)
 800140c:	f002 fa12 	bl	8003834 <HAL_GPIO_WritePin>
                          |RESET2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 8001410:	2200      	movs	r2, #0
 8001412:	21ff      	movs	r1, #255	@ 0xff
 8001414:	4839      	ldr	r0, [pc, #228]	@ (80014fc <MX_GPIO_Init+0x1a4>)
 8001416:	f002 fa0d 	bl	8003834 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nSTALL2_Pin nFAULT2_Pin */
  GPIO_InitStruct.Pin = nSTALL2_Pin|nFAULT2_Pin;
 800141a:	2318      	movs	r3, #24
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4831      	ldr	r0, [pc, #196]	@ (80014f4 <MX_GPIO_Init+0x19c>)
 800142e:	f002 f855 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : FT_RESET_Pin BIN2_1_Pin BIN1_1_Pin DIR1_Pin
                           STEP1_Pin RESET1_Pin nSLEEP1_Pin STEP2_Pin */
  GPIO_InitStruct.Pin = FT_RESET_Pin|BIN2_1_Pin|BIN1_1_Pin|DIR1_Pin
 8001432:	f64f 4322 	movw	r3, #64546	@ 0xfc22
 8001436:	617b      	str	r3, [r7, #20]
                          |STEP1_Pin|RESET1_Pin|nSLEEP1_Pin|STEP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	482a      	ldr	r0, [pc, #168]	@ (80014f4 <MX_GPIO_Init+0x19c>)
 800144c:	f002 f846 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS2_Pin SPI_CS1_Pin */
  GPIO_InitStruct.Pin = SPI_CS2_Pin|SPI_CS1_Pin;
 8001450:	23c0      	movs	r3, #192	@ 0xc0
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001458:	2302      	movs	r3, #2
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4823      	ldr	r0, [pc, #140]	@ (80014f4 <MX_GPIO_Init+0x19c>)
 8001468:	f002 f838 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_2_Pin BIN1_2_Pin DIR2_Pin nSLEEP2_Pin
                           RESET2_Pin */
  GPIO_InitStruct.Pin = BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 800146c:	2337      	movs	r3, #55	@ 0x37
 800146e:	617b      	str	r3, [r7, #20]
                          |RESET2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	481d      	ldr	r0, [pc, #116]	@ (80014f8 <MX_GPIO_Init+0x1a0>)
 8001484:	f002 f82a 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : nSTALL1_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nSTALL1_Pin|nFAULT1_Pin;
 8001488:	2306      	movs	r3, #6
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4819      	ldr	r0, [pc, #100]	@ (8001500 <MX_GPIO_Init+0x1a8>)
 800149c:	f002 f81e 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin;
 80014a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	480f      	ldr	r0, [pc, #60]	@ (80014f4 <MX_GPIO_Init+0x19c>)
 80014b8:	f002 f810 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_WARNING_Pin LED_ERROR_Pin LED_CANB_Pin LED_CANA_Pin
                           LED1_Pin LED2_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 80014bc:	23ff      	movs	r3, #255	@ 0xff
 80014be:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	480a      	ldr	r0, [pc, #40]	@ (80014fc <MX_GPIO_Init+0x1a4>)
 80014d4:	f002 f802 	bl	80034dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	2101      	movs	r1, #1
 80014dc:	2017      	movs	r0, #23
 80014de:	f001 ffc6 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014e2:	2017      	movs	r0, #23
 80014e4:	f001 ffdf 	bl	80034a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	@ 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40020400 	.word	0x40020400

08001504 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI Line External Interrupt ISR Handler CallBack
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) // PushButton 1
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001514:	d106      	bne.n	8001524 <HAL_GPIO_EXTI_Callback+0x20>
	{
		//HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
		pb1_value = 1;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_GPIO_EXTI_Callback+0x40>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
		pb1_update = 1;
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_GPIO_EXTI_Callback+0x44>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
		pb2_value = 1;
		pb2_update = 1;
	}

}
 8001522:	e009      	b.n	8001538 <HAL_GPIO_EXTI_Callback+0x34>
	else if (GPIO_Pin == GPIO_PIN_8) // PushButton 2
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800152a:	d105      	bne.n	8001538 <HAL_GPIO_EXTI_Callback+0x34>
		pb2_value = 1;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <HAL_GPIO_EXTI_Callback+0x48>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
		pb2_update = 1;
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	20000370 	.word	0x20000370
 8001548:	20000372 	.word	0x20000372
 800154c:	20000371 	.word	0x20000371
 8001550:	20000373 	.word	0x20000373

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <Error_Handler+0x8>

08001560 <InitDrives>:

void InitRegValuesStepperDefault(DRIVE_MOTOR drive_index);

SPI_HandleTypeDef *hspi = &hspi1;

void InitDrives() {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	 pwm_timers[0] = pwm1_timer;
	 pwm_timers[1] = pwm2_timer;
	 pwm_channels[0] = pwm1_channel;
	 pwm_channels[1] = pwm2_channel;
	 */
	UnselectDriveCS();
 8001564:	f000 fa2a 	bl	80019bc <UnselectDriveCS>
	//InitDriveMotor(DRIVE1);
	InitDriveMotor(DRIVE1);
 8001568:	2000      	movs	r0, #0
 800156a:	f000 f803 	bl	8001574 <InitDriveMotor>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <InitDriveMotor>:

void InitDriveMotor(DRIVE_MOTOR drive_index) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	// Reset drive
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	4939      	ldr	r1, [pc, #228]	@ (8001668 <InitDriveMotor+0xf4>)
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	79fa      	ldrb	r2, [r7, #7]
 8001590:	4936      	ldr	r1, [pc, #216]	@ (800166c <InitDriveMotor+0xf8>)
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	440b      	add	r3, r1
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	2201      	movs	r2, #1
 80015a0:	4619      	mov	r1, r3
 80015a2:	f002 f947 	bl	8003834 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_SET);
	HAL_Delay(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f000 ffc8 	bl	800253c <HAL_Delay>
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 80015ac:	79fa      	ldrb	r2, [r7, #7]
 80015ae:	492e      	ldr	r1, [pc, #184]	@ (8001668 <InitDriveMotor+0xf4>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	492b      	ldr	r1, [pc, #172]	@ (800166c <InitDriveMotor+0xf8>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	440b      	add	r3, r1
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	f002 f930 	bl	8003834 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_RESET);

	// Disable sleeping
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_SLEEP],
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	4924      	ldr	r1, [pc, #144]	@ (8001668 <InitDriveMotor+0xf4>)
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3304      	adds	r3, #4
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	79fa      	ldrb	r2, [r7, #7]
 80015e8:	4920      	ldr	r1, [pc, #128]	@ (800166c <InitDriveMotor+0xf8>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	440b      	add	r3, r1
 80015f4:	3302      	adds	r3, #2
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	f002 f91a 	bl	8003834 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_SLEEP], GPIO_PIN_SET);
	HAL_Delay(2);
 8001600:	2002      	movs	r0, #2
 8001602:	f000 ff9b 	bl	800253c <HAL_Delay>
	HAL_Delay(13);
 8001606:	200d      	movs	r0, #13
 8001608:	f000 ff98 	bl	800253c <HAL_Delay>

	// CS à LOW
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 800160c:	79fa      	ldrb	r2, [r7, #7]
 800160e:	4916      	ldr	r1, [pc, #88]	@ (8001668 <InitDriveMotor+0xf4>)
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3308      	adds	r3, #8
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	4912      	ldr	r1, [pc, #72]	@ (800166c <InitDriveMotor+0xf8>)
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	440b      	add	r3, r1
 800162c:	3304      	adds	r3, #4
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	4619      	mov	r1, r3
 8001634:	f002 f8fe 	bl	8003834 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);

	HAL_Delay(100);
 8001638:	2064      	movs	r0, #100	@ 0x64
 800163a:	f000 ff7f 	bl	800253c <HAL_Delay>

	// init register for a stepper motor
	InitRegValuesStepper(drive_index);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fb77 	bl	8001d34 <InitRegValuesStepper>
	//InitRegValuesStepperDefault(drive_index);

	// Send regs over SPI
	SendDriveRegisters(drive_index);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f811 	bl	8001670 <SendDriveRegisters>

	// Verify if chip setup is good
	ReadAndVerifyDriveRegisters(drive_index);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f82f 	bl	80016b4 <ReadAndVerifyDriveRegisters>

	CheckDriveStatusRegister(drive_index);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fa49 	bl	8001af0 <CheckDriveStatusRegister>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	20000028 	.word	0x20000028

08001670 <SendDriveRegisters>:

// Send every register to the drive
void SendDriveRegisters(DRIVE_MOTOR drive_index) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
	// Écrire tous les registres sauf STATUS (registre 0x07)
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) {
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	e010      	b.n	80016a2 <SendDriveRegisters+0x32>
		uint16_t reg_config = ReadRegConfig(drive_index, reg);
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f9c4 	bl	8001a14 <ReadRegConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	81bb      	strh	r3, [r7, #12]
		WriteSPI(drive_index, reg, reg_config);
 8001690:	89ba      	ldrh	r2, [r7, #12]
 8001692:	7bf9      	ldrb	r1, [r7, #15]
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f85a 	bl	8001750 <WriteSPI>
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) {
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	3301      	adds	r3, #1
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d9eb      	bls.n	8001680 <SendDriveRegisters+0x10>
	}
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <ReadAndVerifyDriveRegisters>:

void ReadAndVerifyDriveRegisters(DRIVE_MOTOR drive_index) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	uint8_t error_detected = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 255; i++) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	73bb      	strb	r3, [r7, #14]
 80016c6:	e036      	b.n	8001736 <ReadAndVerifyDriveRegisters+0x82>
		for (uint8_t reg = NUM_DRIVE_REGS - 2; reg < NUM_DRIVE_REGS - 1;
 80016c8:	2306      	movs	r3, #6
 80016ca:	737b      	strb	r3, [r7, #13]
 80016cc:	e02d      	b.n	800172a <ReadAndVerifyDriveRegisters+0x76>
				reg--) { // Skip STATUS (0x07)
			uint16_t received_data = ReadSPI(drive_index, reg);
 80016ce:	7b7a      	ldrb	r2, [r7, #13]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 f868 	bl	80017aa <ReadSPI>
 80016da:	4603      	mov	r3, r0
 80016dc:	813b      	strh	r3, [r7, #8]

			uint16_t expected_data = ReadRegConfig(drive_index, reg);
 80016de:	7b7a      	ldrb	r2, [r7, #13]
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f995 	bl	8001a14 <ReadRegConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	817b      	strh	r3, [r7, #10]
			if ((reg == 1) && (expected_data & 0x0300)) { // datasheet bit 10 on register 1 always return 0
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <ReadAndVerifyDriveRegisters+0x52>
 80016f4:	897b      	ldrh	r3, [r7, #10]
 80016f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <ReadAndVerifyDriveRegisters+0x52>
				expected_data = expected_data & 0xFBFF;
 80016fe:	897b      	ldrh	r3, [r7, #10]
 8001700:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001704:	817b      	strh	r3, [r7, #10]
			}

			if (received_data != expected_data) {
 8001706:	893a      	ldrh	r2, [r7, #8]
 8001708:	897b      	ldrh	r3, [r7, #10]
 800170a:	429a      	cmp	r2, r3
 800170c:	d00a      	beq.n	8001724 <ReadAndVerifyDriveRegisters+0x70>
				HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin,
 800170e:	2201      	movs	r2, #1
 8001710:	2104      	movs	r1, #4
 8001712:	480d      	ldr	r0, [pc, #52]	@ (8001748 <ReadAndVerifyDriveRegisters+0x94>)
 8001714:	f002 f88e 	bl	8003834 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				flag_drive_fault = 1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <ReadAndVerifyDriveRegisters+0x98>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
				error_detected += 1;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	3301      	adds	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
				reg--) { // Skip STATUS (0x07)
 8001724:	7b7b      	ldrb	r3, [r7, #13]
 8001726:	3b01      	subs	r3, #1
 8001728:	737b      	strb	r3, [r7, #13]
		for (uint8_t reg = NUM_DRIVE_REGS - 2; reg < NUM_DRIVE_REGS - 1;
 800172a:	7b7b      	ldrb	r3, [r7, #13]
 800172c:	2b06      	cmp	r3, #6
 800172e:	d9ce      	bls.n	80016ce <ReadAndVerifyDriveRegisters+0x1a>
	for (uint8_t i = 0; i < 255; i++) {
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	3301      	adds	r3, #1
 8001734:	73bb      	strb	r3, [r7, #14]
 8001736:	7bbb      	ldrb	r3, [r7, #14]
 8001738:	2bff      	cmp	r3, #255	@ 0xff
 800173a:	d1c5      	bne.n	80016c8 <ReadAndVerifyDriveRegisters+0x14>
			}
		}
	}
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40020c00 	.word	0x40020c00
 800174c:	200003a1 	.word	0x200003a1

08001750 <WriteSPI>:

void WriteSPI(DRIVE_MOTOR drive_index, uint8_t reg, uint16_t reg_config) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
 800175a:	460b      	mov	r3, r1
 800175c:	71bb      	strb	r3, [r7, #6]
 800175e:	4613      	mov	r3, r2
 8001760:	80bb      	strh	r3, [r7, #4]
	uint16_t data = (reg << 12) & 0x7000; //registre
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	031b      	lsls	r3, r3, #12
 8001766:	b29b      	uxth	r3, r3
 8001768:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800176c:	81fb      	strh	r3, [r7, #14]
	data = data | (reg_config & 0x0FFF); //config
 800176e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001776:	b21a      	sxth	r2, r3
 8001778:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800177c:	4313      	orrs	r3, r2
 800177e:	b21b      	sxth	r3, r3
 8001780:	81fb      	strh	r3, [r7, #14]
	data = data & 0x7FFF; //écriture
 8001782:	89fb      	ldrh	r3, [r7, #14]
 8001784:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001788:	81fb      	strh	r3, [r7, #14]

	TransmitSPI(drive_index, data);
 800178a:	89fa      	ldrh	r2, [r7, #14]
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f829 	bl	80017e8 <TransmitSPI>

	ReadSPI(drive_index, reg);
 8001796:	79ba      	ldrb	r2, [r7, #6]
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f804 	bl	80017aa <ReadSPI>
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <ReadSPI>:

uint16_t ReadSPI(DRIVE_MOTOR drive_index, uint8_t reg) {
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	460a      	mov	r2, r1
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	4613      	mov	r3, r2
 80017b8:	71bb      	strb	r3, [r7, #6]
	// Construire la commande de lecture : bit 15 = 1, reg sur bits 14–12
	uint16_t read_cmd = (1 << 15) | (reg << 12);
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	031b      	lsls	r3, r3, #12
 80017be:	b21b      	sxth	r3, r3
 80017c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	81fb      	strh	r3, [r7, #14]

	uint16_t received_data = TransmitReceiveSPI(drive_index, read_cmd);
 80017cc:	89fa      	ldrh	r2, [r7, #14]
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f83c 	bl	8001850 <TransmitReceiveSPI>
 80017d8:	4603      	mov	r3, r0
 80017da:	81bb      	strh	r3, [r7, #12]

	return received_data;
 80017dc:	89bb      	ldrh	r3, [r7, #12]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <TransmitSPI>:

void TransmitSPI(DRIVE_MOTOR drive_index, uint16_t data) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	4613      	mov	r3, r2
 80017f6:	80bb      	strh	r3, [r7, #4]
	// Convertir en 2 octets MSB-first
	uint8_t tx_data[2] = { (data >> 8) & 0xFF, data & 0xFF };
 80017f8:	88bb      	ldrh	r3, [r7, #4]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	733b      	strb	r3, [r7, #12]
 8001802:	88bb      	ldrh	r3, [r7, #4]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	737b      	strb	r3, [r7, #13]

	//On écrie sur la puce :
	tx_data[0] = tx_data[0] & 0x7F;
 8001808:	7b3b      	ldrb	r3, [r7, #12]
 800180a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800180e:	b2db      	uxtb	r3, r3
 8001810:	733b      	strb	r3, [r7, #12]

	// Sélectionner la puce (CS à HIGH avant la transmission)
	SelectDriveCS(drive_index);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f885 	bl	8001924 <SelectDriveCS>

	// Transmettre le message
	if (HAL_SPI_Transmit(hspi, tx_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <TransmitSPI+0x60>)
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	f107 010c 	add.w	r1, r7, #12
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	2202      	movs	r2, #2
 8001828:	f002 fe07 	bl	800443a <HAL_SPI_Transmit>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <TransmitSPI+0x54>
		// SPI erreur → allumer LED de diagnostic
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 8001832:	2201      	movs	r2, #1
 8001834:	2104      	movs	r1, #4
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <TransmitSPI+0x64>)
 8001838:	f001 fffc 	bl	8003834 <HAL_GPIO_WritePin>
	}

	// Désélectionner les puces (CS à LOW après la transmission)
	UnselectDriveCS();
 800183c:	f000 f8be 	bl	80019bc <UnselectDriveCS>
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2000003c 	.word	0x2000003c
 800184c:	40020c00 	.word	0x40020c00

08001850 <TransmitReceiveSPI>:

uint16_t TransmitReceiveSPI(DRIVE_MOTOR drive_index, uint16_t data) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af02      	add	r7, sp, #8
 8001856:	4603      	mov	r3, r0
 8001858:	460a      	mov	r2, r1
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	4613      	mov	r3, r2
 800185e:	80bb      	strh	r3, [r7, #4]
	// Convertir en 2 octets MSB-first
	uint8_t tx_data[2] = { (data >> 8) & 0xFF, data & 0xFF };
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	b29b      	uxth	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	743b      	strb	r3, [r7, #16]
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	747b      	strb	r3, [r7, #17]

	uint8_t rx_data[2] = { 0 };
 8001870:	2300      	movs	r3, #0
 8001872:	81bb      	strh	r3, [r7, #12]

	// Sélectionner la puce (CS à HIGH avant la transmission)
	SelectDriveCS(drive_index);
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f854 	bl	8001924 <SelectDriveCS>

	// Transmettre le message
	if (HAL_SPI_TransmitReceive(hspi, tx_data, rx_data, 2, HAL_MAX_DELAY)) {
 800187c:	4b27      	ldr	r3, [pc, #156]	@ (800191c <TransmitReceiveSPI+0xcc>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	f107 020c 	add.w	r2, r7, #12
 8001884:	f107 0110 	add.w	r1, r7, #16
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2302      	movs	r3, #2
 8001890:	f002 ff17 	bl	80046c2 <HAL_SPI_TransmitReceive>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <TransmitReceiveSPI+0x54>
		// SPI erreur → allumer LED de diagnostic
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	2104      	movs	r1, #4
 800189e:	4820      	ldr	r0, [pc, #128]	@ (8001920 <TransmitReceiveSPI+0xd0>)
 80018a0:	f001 ffc8 	bl	8003834 <HAL_GPIO_WritePin>
	}

	// Désélectionner les puces (CS à LOW après la transmission)
	UnselectDriveCS();
 80018a4:	f000 f88a 	bl	80019bc <UnselectDriveCS>

	// Reconstruire la valeur lue
	uint16_t received_data = ((uint16_t) rx_data[0] << 8) | rx_data[1];
 80018a8:	7b3b      	ldrb	r3, [r7, #12]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	7b7b      	ldrb	r3, [r7, #13]
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	82bb      	strh	r3, [r7, #20]

	//test vs expected data
	received_data = received_data & 0x0FFF;
 80018b8:	8abb      	ldrh	r3, [r7, #20]
 80018ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018be:	82bb      	strh	r3, [r7, #20]
	uint8_t reg_test = (data & 0x7000) >> 12;
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	131b      	asrs	r3, r3, #12
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	74fb      	strb	r3, [r7, #19]
	uint16_t expected_data_test = ReadRegConfig(drive_index, reg_test);
 80018cc:	7cfa      	ldrb	r2, [r7, #19]
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f89e 	bl	8001a14 <ReadRegConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	82fb      	strh	r3, [r7, #22]
	if ((reg_test == 1) && (expected_data_test & 0x0300)) { // datasheet bit 10 on register 1 always return 0
 80018dc:	7cfb      	ldrb	r3, [r7, #19]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d108      	bne.n	80018f4 <TransmitReceiveSPI+0xa4>
 80018e2:	8afb      	ldrh	r3, [r7, #22]
 80018e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <TransmitReceiveSPI+0xa4>
		expected_data_test = expected_data_test & 0xFBFF;
 80018ec:	8afb      	ldrh	r3, [r7, #22]
 80018ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80018f2:	82fb      	strh	r3, [r7, #22]
	}
	if ((reg_test == 0) && (expected_data_test & 0x0002)) { // datasheet bit 2 on register 0 clear after write
 80018f4:	7cfb      	ldrb	r3, [r7, #19]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <TransmitReceiveSPI+0xbc>
 80018fa:	8afb      	ldrh	r3, [r7, #22]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <TransmitReceiveSPI+0xbc>
		expected_data_test = expected_data_test & 0xFFFD;
 8001904:	8afb      	ldrh	r3, [r7, #22]
 8001906:	f023 0302 	bic.w	r3, r3, #2
 800190a:	82fb      	strh	r3, [r7, #22]
		//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
		//flag_drive_fault = 1;
	}

	// Extraire seulement les 12 bits de data
	return received_data & 0x0FFF;
 800190c:	8abb      	ldrh	r3, [r7, #20]
 800190e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001912:	b29b      	uxth	r3, r3

}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2000003c 	.word	0x2000003c
 8001920:	40020c00 	.word	0x40020c00

08001924 <SelectDriveCS>:

void SelectDriveCS(DRIVE_MOTOR drive_index) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e037      	b.n	80019a4 <SelectDriveCS+0x80>
		if (num != drive_index) {
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	429a      	cmp	r2, r3
 800193a:	d016      	beq.n	800196a <SelectDriveCS+0x46>
			// Désélectionner la puce (CS à LOW après la transmission)
			HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS],
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	491d      	ldr	r1, [pc, #116]	@ (80019b4 <SelectDriveCS+0x90>)
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3308      	adds	r3, #8
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	4919      	ldr	r1, [pc, #100]	@ (80019b8 <SelectDriveCS+0x94>)
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	440b      	add	r3, r1
 800195c:	3304      	adds	r3, #4
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	f001 ff66 	bl	8003834 <HAL_GPIO_WritePin>
 8001968:	e019      	b.n	800199e <SelectDriveCS+0x7a>
					drive_pins[num][DRIVE_CS], GPIO_PIN_RESET);
		} else if (num == drive_index) {
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	429a      	cmp	r2, r3
 8001970:	d115      	bne.n	800199e <SelectDriveCS+0x7a>
			// Sélectionner la puce (CS à HIGH avant la transmission)
			HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS],
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	490f      	ldr	r1, [pc, #60]	@ (80019b4 <SelectDriveCS+0x90>)
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	3308      	adds	r3, #8
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <SelectDriveCS+0x94>)
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	440b      	add	r3, r1
 8001992:	3304      	adds	r3, #4
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	4619      	mov	r1, r3
 800199a:	f001 ff4b 	bl	8003834 <HAL_GPIO_WritePin>
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3301      	adds	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d9c4      	bls.n	8001934 <SelectDriveCS+0x10>
					drive_pins[num][DRIVE_CS], GPIO_PIN_SET);
		}
	}
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000028 	.word	0x20000028

080019bc <UnselectDriveCS>:

void UnselectDriveCS() {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	e018      	b.n	80019fa <UnselectDriveCS+0x3e>
		// Désélectionner la puce (CS à LOW après la transmission)
		HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS], drive_pins[num][DRIVE_CS],
 80019c8:	79fa      	ldrb	r2, [r7, #7]
 80019ca:	4910      	ldr	r1, [pc, #64]	@ (8001a0c <UnselectDriveCS+0x50>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	3308      	adds	r3, #8
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	490c      	ldr	r1, [pc, #48]	@ (8001a10 <UnselectDriveCS+0x54>)
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	440b      	add	r3, r1
 80019e8:	3304      	adds	r3, #4
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	f001 ff20 	bl	8003834 <HAL_GPIO_WritePin>
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	3301      	adds	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d9e3      	bls.n	80019c8 <UnselectDriveCS+0xc>
				GPIO_PIN_RESET);
	}
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000028 	.word	0x20000028

08001a14 <ReadRegConfig>:

uint16_t ReadRegConfig(DRIVE_MOTOR drive_index, uint8_t reg) {
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	4613      	mov	r3, r2
 8001a22:	71bb      	strb	r3, [r7, #6]
	uint16_t reg_data = -1;
 8001a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a28:	81fb      	strh	r3, [r7, #14]

	switch (reg) {
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	2b07      	cmp	r3, #7
 8001a2e:	d852      	bhi.n	8001ad6 <ReadRegConfig+0xc2>
 8001a30:	a201      	add	r2, pc, #4	@ (adr r2, 8001a38 <ReadRegConfig+0x24>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a59 	.word	0x08001a59
 8001a3c:	08001a67 	.word	0x08001a67
 8001a40:	08001a77 	.word	0x08001a77
 8001a44:	08001a87 	.word	0x08001a87
 8001a48:	08001a97 	.word	0x08001a97
 8001a4c:	08001aa7 	.word	0x08001aa7
 8001a50:	08001ab7 	.word	0x08001ab7
 8001a54:	08001ac7 	.word	0x08001ac7
	case 0:
		reg_data = drive_regs[drive_index].ctrl_reg.reg;
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <ReadRegConfig+0xd8>)
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	81fb      	strh	r3, [r7, #14]
		break;
 8001a64:	e03a      	b.n	8001adc <ReadRegConfig+0xc8>
	case 1:
		reg_data = drive_regs[drive_index].torque_reg.reg;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4a20      	ldr	r2, [pc, #128]	@ (8001aec <ReadRegConfig+0xd8>)
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	81fb      	strh	r3, [r7, #14]
		break;
 8001a74:	e032      	b.n	8001adc <ReadRegConfig+0xc8>
	case 2:
		reg_data = drive_regs[drive_index].off_reg.reg;
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <ReadRegConfig+0xd8>)
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3304      	adds	r3, #4
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	81fb      	strh	r3, [r7, #14]
		break;
 8001a84:	e02a      	b.n	8001adc <ReadRegConfig+0xc8>
	case 3:
		reg_data = drive_regs[drive_index].blank_reg.reg;
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	4a18      	ldr	r2, [pc, #96]	@ (8001aec <ReadRegConfig+0xd8>)
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3306      	adds	r3, #6
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	81fb      	strh	r3, [r7, #14]
		break;
 8001a94:	e022      	b.n	8001adc <ReadRegConfig+0xc8>
	case 4:
		reg_data = drive_regs[drive_index].decay_reg.reg;
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4a14      	ldr	r2, [pc, #80]	@ (8001aec <ReadRegConfig+0xd8>)
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	81fb      	strh	r3, [r7, #14]
		break;
 8001aa4:	e01a      	b.n	8001adc <ReadRegConfig+0xc8>
	case 5:
		reg_data = drive_regs[drive_index].stall_reg.reg;
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	4a10      	ldr	r2, [pc, #64]	@ (8001aec <ReadRegConfig+0xd8>)
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	4413      	add	r3, r2
 8001aae:	330a      	adds	r3, #10
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	81fb      	strh	r3, [r7, #14]
		break;
 8001ab4:	e012      	b.n	8001adc <ReadRegConfig+0xc8>
	case 6:
		reg_data = drive_regs[drive_index].drive_reg.reg;
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8001aec <ReadRegConfig+0xd8>)
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	330c      	adds	r3, #12
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	81fb      	strh	r3, [r7, #14]
		break;
 8001ac4:	e00a      	b.n	8001adc <ReadRegConfig+0xc8>
	case 7:
		reg_data = drive_regs[drive_index].status_reg.reg;
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <ReadRegConfig+0xd8>)
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	330e      	adds	r3, #14
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	81fb      	strh	r3, [r7, #14]
		break;
 8001ad4:	e002      	b.n	8001adc <ReadRegConfig+0xc8>
	default:
		reg_data = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	81fb      	strh	r3, [r7, #14]
		break;
 8001ada:	bf00      	nop
	}
	return reg_data;
 8001adc:	89fb      	ldrh	r3, [r7, #14]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000380 	.word	0x20000380

08001af0 <CheckDriveStatusRegister>:
 *   → Bit 15 (OTS) = 1 → surchauffe
 *   → Bit 10 (UVLO) = 1 → tension trop faible
 *   → Tous les autres bits = 0 → pas de défaut détecté sur les ponts A/B
 */
uint8_t flag_drive_fault = 0;
uint16_t CheckDriveStatusRegister(DRIVE_MOTOR drive_index) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
	uint16_t status = ReadSPI(drive_index, 7);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2107      	movs	r1, #7
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe53 	bl	80017aa <ReadSPI>
 8001b04:	4603      	mov	r3, r0
 8001b06:	81fb      	strh	r3, [r7, #14]

	if (status != 0x0000) {
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <CheckDriveStatusRegister+0x28>
		// Une ou plusieurs erreurs détectées → flag drive en faute
		flag_drive_fault = 1;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <CheckDriveStatusRegister+0x38>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
		return 1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e003      	b.n	8001b20 <CheckDriveStatusRegister+0x30>
	} else {
		// Pas d'erreur
		flag_drive_fault = 0;
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <CheckDriveStatusRegister+0x38>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
		return 0;
 8001b1e:	2300      	movs	r3, #0
	}
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200003a1 	.word	0x200003a1

08001b2c <EnableDrive>:

void EnableDrive(DRIVE_MOTOR drive_index) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	if (CheckDriveStatusRegister(drive_index) != 0) {
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ffd9 	bl	8001af0 <CheckDriveStatusRegister>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d124      	bne.n	8001b8e <EnableDrive+0x62>
		return;
	}

	uint16_t reg_config = ReadRegConfig(drive_index, 0);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff63 	bl	8001a14 <ReadRegConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	81fb      	strh	r3, [r7, #14]
	reg_config = reg_config | 0x0001;
 8001b52:	89fb      	ldrh	r3, [r7, #14]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	81fb      	strh	r3, [r7, #14]

	WriteSPI(drive_index, 0, reg_config);
 8001b5a:	89fa      	ldrh	r2, [r7, #14]
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fdf5 	bl	8001750 <WriteSPI>

	if (CheckDriveStatusRegister(drive_index) != 0) {
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ffc1 	bl	8001af0 <CheckDriveStatusRegister>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10e      	bne.n	8001b92 <EnableDrive+0x66>
		return;
	}

	drive_regs[drive_index].ctrl_reg.enbl = 1;
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <EnableDrive+0x70>)
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	441a      	add	r2, r3
 8001b7c:	7813      	ldrb	r3, [r2, #0]
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	7013      	strb	r3, [r2, #0]

	ReadAndVerifyDriveRegisters(drive_index);
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fd94 	bl	80016b4 <ReadAndVerifyDriveRegisters>
 8001b8c:	e002      	b.n	8001b94 <EnableDrive+0x68>
		return;
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <EnableDrive+0x68>
		return;
 8001b92:	bf00      	nop
	//reg_config = ReadRegConfig(drive_index, 0);
	//return;
}
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000380 	.word	0x20000380

08001ba0 <DisableDrive>:

void DisableDrive(DRIVE_MOTOR drive_index) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	if (CheckDriveStatusRegister(drive_index) != 0) {
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff9f 	bl	8001af0 <CheckDriveStatusRegister>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d124      	bne.n	8001c02 <DisableDrive+0x62>
		return;
	}

	uint16_t reg_config = ReadRegConfig(drive_index, 0);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff29 	bl	8001a14 <ReadRegConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	81fb      	strh	r3, [r7, #14]
	reg_config = reg_config & 0xFFFD;
 8001bc6:	89fb      	ldrh	r3, [r7, #14]
 8001bc8:	f023 0302 	bic.w	r3, r3, #2
 8001bcc:	81fb      	strh	r3, [r7, #14]

	WriteSPI(drive_index, 0, reg_config);
 8001bce:	89fa      	ldrh	r2, [r7, #14]
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fdbb 	bl	8001750 <WriteSPI>

	if (CheckDriveStatusRegister(drive_index) != 0) {
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff87 	bl	8001af0 <CheckDriveStatusRegister>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10e      	bne.n	8001c06 <DisableDrive+0x66>
		return;
	}

	drive_regs[drive_index].ctrl_reg.enbl = 0;
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <DisableDrive+0x70>)
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	441a      	add	r2, r3
 8001bf0:	7813      	ldrb	r3, [r2, #0]
 8001bf2:	f36f 0300 	bfc	r3, #0, #1
 8001bf6:	7013      	strb	r3, [r2, #0]

	ReadAndVerifyDriveRegisters(drive_index);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fd5a 	bl	80016b4 <ReadAndVerifyDriveRegisters>
 8001c00:	e002      	b.n	8001c08 <DisableDrive+0x68>
		return;
 8001c02:	bf00      	nop
 8001c04:	e000      	b.n	8001c08 <DisableDrive+0x68>
		return;
 8001c06:	bf00      	nop
	//reg_config = ReadRegConfig(drive_index, 0);
	//return;
}
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000380 	.word	0x20000380

08001c14 <DirectionDrive>:
	if (CheckDriveStatusRegister(drive_index) != 0) {
		return;
	}
}

void DirectionDrive(DRIVE_MOTOR drive_index, uint8_t dir) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	4613      	mov	r3, r2
 8001c22:	71bb      	strb	r3, [r7, #6]
	if (CheckDriveStatusRegister(drive_index) != 0) {
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff62 	bl	8001af0 <CheckDriveStatusRegister>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d137      	bne.n	8001ca2 <DirectionDrive+0x8e>
		return;
	}
	uint16_t reg_config = ReadRegConfig(drive_index, 0);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff feec 	bl	8001a14 <ReadRegConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	81fb      	strh	r3, [r7, #14]

	if (dir == 0) {
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <DirectionDrive+0x4c>
		reg_config = reg_config & 0xFFFD;
 8001c46:	89fb      	ldrh	r3, [r7, #14]
 8001c48:	f023 0302 	bic.w	r3, r3, #2
 8001c4c:	81fb      	strh	r3, [r7, #14]
		drive_regs[drive_index].ctrl_reg.rdir = 0;
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4a18      	ldr	r2, [pc, #96]	@ (8001cb4 <DirectionDrive+0xa0>)
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	441a      	add	r2, r3
 8001c56:	7813      	ldrb	r3, [r2, #0]
 8001c58:	f36f 0341 	bfc	r3, #1, #1
 8001c5c:	7013      	strb	r3, [r2, #0]
 8001c5e:	e00e      	b.n	8001c7e <DirectionDrive+0x6a>
	} else if (dir == 1) {
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d11f      	bne.n	8001ca6 <DirectionDrive+0x92>
		reg_config = reg_config | 0x0002;
 8001c66:	89fb      	ldrh	r3, [r7, #14]
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	81fb      	strh	r3, [r7, #14]
		drive_regs[drive_index].ctrl_reg.rdir = 1;
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	4a10      	ldr	r2, [pc, #64]	@ (8001cb4 <DirectionDrive+0xa0>)
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	441a      	add	r2, r3
 8001c76:	7813      	ldrb	r3, [r2, #0]
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	7013      	strb	r3, [r2, #0]
	} else {
		return;
	}

	WriteSPI(drive_index, 0, reg_config);
 8001c7e:	89fa      	ldrh	r2, [r7, #14]
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fd63 	bl	8001750 <WriteSPI>

	if (CheckDriveStatusRegister(drive_index) != 0) {
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff2f 	bl	8001af0 <CheckDriveStatusRegister>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d108      	bne.n	8001caa <DirectionDrive+0x96>
		return;
	}

	ReadAndVerifyDriveRegisters(drive_index);
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fd0a 	bl	80016b4 <ReadAndVerifyDriveRegisters>
 8001ca0:	e004      	b.n	8001cac <DirectionDrive+0x98>
		return;
 8001ca2:	bf00      	nop
 8001ca4:	e002      	b.n	8001cac <DirectionDrive+0x98>
		return;
 8001ca6:	bf00      	nop
 8001ca8:	e000      	b.n	8001cac <DirectionDrive+0x98>
		return;
 8001caa:	bf00      	nop
}
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000380 	.word	0x20000380

08001cb8 <better_step_function>:
			drive_pins[drive_index][DRIVE_SLEEP], GPIO_PIN_SET);
}

uint32_t counter = 0;
//s'exécute au 1us
void better_step_function() {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	if (counter >= 10000) { //0
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <better_step_function+0x6c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d90f      	bls.n	8001ce8 <better_step_function+0x30>
		counter = 0;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <better_step_function+0x6c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
		if (motor_pitch_on == 1) {
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <better_step_function+0x70>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d123      	bne.n	8001d1e <better_step_function+0x66>
			HAL_GPIO_WritePin(drive_ports[DRIVE1][DRIVE_STEP],
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <better_step_function+0x74>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4a15      	ldr	r2, [pc, #84]	@ (8001d30 <better_step_function+0x78>)
 8001cdc:	88d1      	ldrh	r1, [r2, #6]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 fda7 	bl	8003834 <HAL_GPIO_WritePin>
					drive_pins[DRIVE1][DRIVE_STEP], GPIO_PIN_RESET);
		}
	} else {
		counter++;
	}
}
 8001ce6:	e01a      	b.n	8001d1e <better_step_function+0x66>
	} else if (counter == 3) {
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <better_step_function+0x6c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d111      	bne.n	8001d14 <better_step_function+0x5c>
		counter++;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <better_step_function+0x6c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d24 <better_step_function+0x6c>)
 8001cf8:	6013      	str	r3, [r2, #0]
		if (motor_pitch_on == 1) {
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <better_step_function+0x70>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10d      	bne.n	8001d1e <better_step_function+0x66>
			HAL_GPIO_WritePin(drive_ports[DRIVE1][DRIVE_STEP],
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <better_step_function+0x74>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <better_step_function+0x78>)
 8001d08:	88d1      	ldrh	r1, [r2, #6]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fd91 	bl	8003834 <HAL_GPIO_WritePin>
}
 8001d12:	e004      	b.n	8001d1e <better_step_function+0x66>
		counter++;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <better_step_function+0x6c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a02      	ldr	r2, [pc, #8]	@ (8001d24 <better_step_function+0x6c>)
 8001d1c:	6013      	str	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200003a4 	.word	0x200003a4
 8001d28:	200003a0 	.word	0x200003a0
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000028 	.word	0x20000028

08001d34 <InitRegValuesStepper>:
	drive_regs[drive_index].drive_reg.idrivep = 0b10;
// IDRIVEP : Courant de crête HIGH-SIDE (00 = 20mA, 11 = 150mA)
// Par défaut DRV8711 : 0b10
}

void InitRegValuesStepper(DRIVE_MOTOR drive_index) {
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
//
// ───── CTRL REGISTER (0x00) ─────────────────────────────────────────────
// Contrôle principal du moteur (activation, direction, step, mode de microstep)
//
	drive_regs[drive_index].ctrl_reg.enbl = 0;
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4a6d      	ldr	r2, [pc, #436]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	441a      	add	r2, r3
 8001d46:	7813      	ldrb	r3, [r2, #0]
 8001d48:	f36f 0300 	bfc	r3, #0, #1
 8001d4c:	7013      	strb	r3, [r2, #0]
// ENBL : Active la sortie du driver
// 0 = désactivé (sorties en haute impédance), 1 = activé
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.rdir = 0;
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4a69      	ldr	r2, [pc, #420]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	441a      	add	r2, r3
 8001d56:	7813      	ldrb	r3, [r2, #0]
 8001d58:	f36f 0341 	bfc	r3, #1, #1
 8001d5c:	7013      	strb	r3, [r2, #0]
// RDIR : Direction contrôlée par pin DIR si = 0, sinon inversée
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.rstep = 0;
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	4a65      	ldr	r2, [pc, #404]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	441a      	add	r2, r3
 8001d66:	7813      	ldrb	r3, [r2, #0]
 8001d68:	f36f 0382 	bfc	r3, #2, #1
 8001d6c:	7013      	strb	r3, [r2, #0]
// RSTEP : Step contrôlé par pin STEP si = 0, sinon interne
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.mode = 0b0000;
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	4a61      	ldr	r2, [pc, #388]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	441a      	add	r2, r3
 8001d76:	7813      	ldrb	r3, [r2, #0]
 8001d78:	f36f 03c6 	bfc	r3, #3, #4
 8001d7c:	7013      	strb	r3, [r2, #0]
// MODE : Réglage du microstepping (0 = full step, jusqu’à 0b1111 = 1/256)
// Par défaut DRV8711 : 0b0000 (full step)

	drive_regs[drive_index].ctrl_reg.extstall = 0;
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	441a      	add	r2, r3
 8001d86:	7813      	ldrb	r3, [r2, #0]
 8001d88:	f36f 13c7 	bfc	r3, #7, #1
 8001d8c:	7013      	strb	r3, [r2, #0]
// EXTSTALL : 0 = Stall détecté en interne, 1 = via pin externe
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.isgain = 0b10;
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	4a59      	ldr	r2, [pc, #356]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	441a      	add	r2, r3
 8001d96:	7853      	ldrb	r3, [r2, #1]
 8001d98:	2102      	movs	r1, #2
 8001d9a:	f361 0301 	bfi	r3, r1, #0, #2
 8001d9e:	7053      	strb	r3, [r2, #1]
// ISGAIN : Gain du senseur de courant (00 = 5, 01 = 10, 10 = 20, 11 = 40)
// Par défaut DRV8711 : 0b00 (gain de 5)

	drive_regs[drive_index].ctrl_reg.dtime = 0b11;
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4a55      	ldr	r2, [pc, #340]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	441a      	add	r2, r3
 8001da8:	7853      	ldrb	r3, [r2, #1]
 8001daa:	f043 030c 	orr.w	r3, r3, #12
 8001dae:	7053      	strb	r3, [r2, #1]
//
// ───── TORQUE REGISTER (0x01) ───────────────────────────────────────────
// Détermine le courant de phase appliqué
//
//drive_regs[drive_index].torque_reg.torque = 24; // 100% de puissance avec isgain à 10
	drive_regs[drive_index].torque_reg.torque = 0x50; // 50% de puissance avec isgain à 10
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4a51      	ldr	r2, [pc, #324]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	4413      	add	r3, r2
 8001db8:	3302      	adds	r3, #2
 8001dba:	2250      	movs	r2, #80	@ 0x50
 8001dbc:	701a      	strb	r2, [r3, #0]
// TORQUE : Niveau de couple (0–255), proportionnel au courant de sortie
// Par défaut DRV8711 : 0xFF (255)

	drive_regs[drive_index].torque_reg.smplth = 0b001;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	441a      	add	r2, r3
 8001dc6:	78d3      	ldrb	r3, [r2, #3]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	f361 0302 	bfi	r3, r1, #0, #3
 8001dce:	70d3      	strb	r3, [r2, #3]

//
// ───── OFF REGISTER (0x02) ──────────────────────────────────────────────
// Temps d’arrêt de PWM et mode PWM
//
	drive_regs[drive_index].off_reg.toff = 0x28;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	4a49      	ldr	r2, [pc, #292]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2228      	movs	r2, #40	@ 0x28
 8001ddc:	701a      	strb	r2, [r3, #0]
// TOFF : Temps mort (0 = désactivé, >0 = en pas de 500ns)
// Par défaut DRV8711 : 0x30 (24 = 12 µs)

	drive_regs[drive_index].off_reg.pwmmode = 0;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4a45      	ldr	r2, [pc, #276]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	441a      	add	r2, r3
 8001de6:	7953      	ldrb	r3, [r2, #5]
 8001de8:	f36f 0300 	bfc	r3, #0, #1
 8001dec:	7153      	strb	r3, [r2, #5]

//
// ───── BLANK REGISTER (0x03) ────────────────────────────────────────────
// Temps de masquage de détection de courant après une commutation
//
	drive_regs[drive_index].blank_reg.tblank = 0x80;
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4a41      	ldr	r2, [pc, #260]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	4413      	add	r3, r2
 8001df6:	3306      	adds	r3, #6
 8001df8:	2280      	movs	r2, #128	@ 0x80
 8001dfa:	701a      	strb	r2, [r3, #0]
// TBLANK : Masque de courant (en pas de 20ns) — 0x80 = 2.56 µs
// Par défaut DRV8711 : 0x80

	drive_regs[drive_index].blank_reg.abt = 1;
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	441a      	add	r2, r3
 8001e04:	79d3      	ldrb	r3, [r2, #7]
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	71d3      	strb	r3, [r2, #7]

//
// ───── DECAY REGISTER (0x04) ────────────────────────────────────────────
// Contrôle le mode de "décroissance" du courant moteur
//
	drive_regs[drive_index].decay_reg.tdecay = 0x10; //0x80
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	4a3a      	ldr	r2, [pc, #232]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4413      	add	r3, r2
 8001e14:	3308      	adds	r3, #8
 8001e16:	2210      	movs	r2, #16
 8001e18:	701a      	strb	r2, [r3, #0]
// TDECAY : temps avant transition entre fast et slow decay (500ns steps)
// Par défaut DRV8711 : 0x10 (8 µs)

	drive_regs[drive_index].decay_reg.decmod = 0b100; //0b000
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	f103 0208 	add.w	r2, r3, #8
 8001e26:	7853      	ldrb	r3, [r2, #1]
 8001e28:	2104      	movs	r1, #4
 8001e2a:	f361 0302 	bfi	r3, r1, #0, #3
 8001e2e:	7053      	strb	r3, [r2, #1]

//
// ───── STALL REGISTER (0x05) ────────────────────────────────────────────
// Détection de blocage moteur (optionnel)
//
	drive_regs[drive_index].stall_reg.sdthr = 0xFF; //0xFF
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4a31      	ldr	r2, [pc, #196]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	330a      	adds	r3, #10
 8001e3a:	22ff      	movs	r2, #255	@ 0xff
 8001e3c:	701a      	strb	r2, [r3, #0]
// SDTHR : Seuil de BEMF pour détecter un blocage
// Par défaut DRV8711 : 0x40

	drive_regs[drive_index].stall_reg.sdcnt = 0b10; //0b11
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	4413      	add	r3, r2
 8001e46:	f103 0208 	add.w	r2, r3, #8
 8001e4a:	78d3      	ldrb	r3, [r2, #3]
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	f361 0301 	bfi	r3, r1, #0, #2
 8001e52:	70d3      	strb	r3, [r2, #3]
// SDCNT : nombre de pas requis avant détection (00 = 2, ..., 11 = 8 pas)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].stall_reg.vdiv = 0b00;
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	4a28      	ldr	r2, [pc, #160]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f103 0208 	add.w	r2, r3, #8
 8001e60:	78d3      	ldrb	r3, [r2, #3]
 8001e62:	f36f 0383 	bfc	r3, #2, #2
 8001e66:	70d3      	strb	r3, [r2, #3]

//
// ───── DRIVE REGISTER (0x06) ────────────────────────────────────────────
// Réglage de la puissance des transistors MOSFET (gate drive)
//
	drive_regs[drive_index].drive_reg.ocpth = 0b01;
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	4413      	add	r3, r2
 8001e70:	f103 0208 	add.w	r2, r3, #8
 8001e74:	7913      	ldrb	r3, [r2, #4]
 8001e76:	2101      	movs	r1, #1
 8001e78:	f361 0301 	bfi	r3, r1, #0, #2
 8001e7c:	7113      	strb	r3, [r2, #4]
// OCPTH : Seuil de détection de surintensité (00 = 250mV, 11 = 2000mV)
// Par défaut DRV8711 : 0b01 (500mV)

	drive_regs[drive_index].drive_reg.ocpdeg = 0b10;
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	4413      	add	r3, r2
 8001e86:	f103 0208 	add.w	r2, r3, #8
 8001e8a:	7913      	ldrb	r3, [r2, #4]
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	f361 0383 	bfi	r3, r1, #2, #2
 8001e92:	7113      	strb	r3, [r2, #4]
// OCPDEG : Temps de filtrage de la surintensité (00 = 1 µs, 11 = 8 µs)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].drive_reg.tdriven = 0b01; //0b11
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f103 0208 	add.w	r2, r3, #8
 8001ea0:	7913      	ldrb	r3, [r2, #4]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	f361 1305 	bfi	r3, r1, #4, #2
 8001ea8:	7113      	strb	r3, [r2, #4]
// TDRIVEN : Durée de l’impulsion LOW-SIDE (00 = 250ns, 11 = 500ns)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].drive_reg.tdrivep = 0b01; //0b11
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f103 0208 	add.w	r2, r3, #8
 8001eb6:	7913      	ldrb	r3, [r2, #4]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	f361 1387 	bfi	r3, r1, #6, #2
 8001ebe:	7113      	strb	r3, [r2, #4]
// TDRIVEP : Durée de l’impulsion HIGH-SIDE (00 = 250ns, 11 = 500ns)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].drive_reg.idriven = 0b10; //0b11
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f103 0208 	add.w	r2, r3, #8
 8001ecc:	7953      	ldrb	r3, [r2, #5]
 8001ece:	2102      	movs	r1, #2
 8001ed0:	f361 0301 	bfi	r3, r1, #0, #2
 8001ed4:	7153      	strb	r3, [r2, #5]
// IDRIVEP : Courant de crête HIGH-SIDE (00 = 20mA, 11 = 150mA)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].drive_reg.idrivep = 0b10;
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <InitRegValuesStepper+0x1c4>)
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4413      	add	r3, r2
 8001ede:	f103 0208 	add.w	r2, r3, #8
 8001ee2:	7953      	ldrb	r3, [r2, #5]
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	f361 0383 	bfi	r3, r1, #2, #2
 8001eea:	7153      	strb	r3, [r2, #5]
	// IDRIVEP : Courant de crête HIGH-SIDE (00 = 20mA, 11 = 150mA)
	// Par défaut DRV8711 : 0b10
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	20000380 	.word	0x20000380

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_MspInit+0x90>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	4a20      	ldr	r2, [pc, #128]	@ (8001f8c <HAL_MspInit+0x90>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_MspInit+0x90>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_MspInit+0x90>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <HAL_MspInit+0x90>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2e:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <HAL_MspInit+0x90>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	f06f 000b 	mvn.w	r0, #11
 8001f42:	f001 fa94 	bl	800346e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2101      	movs	r1, #1
 8001f4a:	f06f 000a 	mvn.w	r0, #10
 8001f4e:	f001 fa8e 	bl	800346e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2101      	movs	r1, #1
 8001f56:	f06f 0009 	mvn.w	r0, #9
 8001f5a:	f001 fa88 	bl	800346e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2101      	movs	r1, #1
 8001f62:	f06f 0004 	mvn.w	r0, #4
 8001f66:	f001 fa82 	bl	800346e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	f06f 0003 	mvn.w	r0, #3
 8001f72:	f001 fa7c 	bl	800346e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2102      	movs	r1, #2
 8001f7a:	f06f 0001 	mvn.w	r0, #1
 8001f7e:	f001 fa76 	bl	800346e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	@ 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a21      	ldr	r2, [pc, #132]	@ (8002034 <HAL_CAN_MspInit+0xa4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d13c      	bne.n	800202c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_CAN_MspInit+0xa8>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	4a1f      	ldr	r2, [pc, #124]	@ (8002038 <HAL_CAN_MspInit+0xa8>)
 8001fbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <HAL_CAN_MspInit+0xa8>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <HAL_CAN_MspInit+0xa8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a18      	ldr	r2, [pc, #96]	@ (8002038 <HAL_CAN_MspInit+0xa8>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <HAL_CAN_MspInit+0xa8>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ffc:	2309      	movs	r3, #9
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4619      	mov	r1, r3
 8002006:	480d      	ldr	r0, [pc, #52]	@ (800203c <HAL_CAN_MspInit+0xac>)
 8002008:	f001 fa68 	bl	80034dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2101      	movs	r1, #1
 8002010:	2014      	movs	r0, #20
 8002012:	f001 fa2c 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002016:	2014      	movs	r0, #20
 8002018:	f001 fa45 	bl	80034a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2101      	movs	r1, #1
 8002020:	2015      	movs	r0, #21
 8002022:	f001 fa24 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002026:	2015      	movs	r0, #21
 8002028:	f001 fa3d 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	@ 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40006400 	.word	0x40006400
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000

08002040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	@ 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a21      	ldr	r2, [pc, #132]	@ (80020e4 <HAL_SPI_MspInit+0xa4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d13b      	bne.n	80020da <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_SPI_MspInit+0xa8>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	4a1f      	ldr	r2, [pc, #124]	@ (80020e8 <HAL_SPI_MspInit+0xa8>)
 800206c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002070:	6453      	str	r3, [r2, #68]	@ 0x44
 8002072:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <HAL_SPI_MspInit+0xa8>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_SPI_MspInit+0xa8>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	4a18      	ldr	r2, [pc, #96]	@ (80020e8 <HAL_SPI_MspInit+0xa8>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6313      	str	r3, [r2, #48]	@ 0x30
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_SPI_MspInit+0xa8>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800209a:	23a0      	movs	r3, #160	@ 0xa0
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020aa:	2305      	movs	r3, #5
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	480d      	ldr	r0, [pc, #52]	@ (80020ec <HAL_SPI_MspInit+0xac>)
 80020b6:	f001 fa11 	bl	80034dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020ba:	2340      	movs	r3, #64	@ 0x40
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ca:	2305      	movs	r3, #5
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	@ (80020ec <HAL_SPI_MspInit+0xac>)
 80020d6:	f001 fa01 	bl	80034dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	@ 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40013000 	.word	0x40013000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020000 	.word	0x40020000

080020f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b090      	sub	sp, #64	@ 0x40
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a69      	ldr	r2, [pc, #420]	@ (80022b4 <HAL_TIM_Base_MspInit+0x1c4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d116      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002116:	4b68      	ldr	r3, [pc, #416]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	4a67      	ldr	r2, [pc, #412]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6453      	str	r3, [r2, #68]	@ 0x44
 8002122:	4b65      	ldr	r3, [pc, #404]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800212c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2019      	movs	r0, #25
 8002134:	f001 f99b 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002138:	2019      	movs	r0, #25
 800213a:	f001 f9b4 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800213e:	e0b5      	b.n	80022ac <HAL_TIM_Base_MspInit+0x1bc>
  else if(htim_base->Instance==TIM2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002148:	d12d      	bne.n	80021a6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
 800214e:	4b5a      	ldr	r3, [pc, #360]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	4a59      	ldr	r2, [pc, #356]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
 800215a:	4b57      	ldr	r3, [pc, #348]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	4b53      	ldr	r3, [pc, #332]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a52      	ldr	r2, [pc, #328]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b50      	ldr	r3, [pc, #320]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	623b      	str	r3, [r7, #32]
 8002180:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002194:	2301      	movs	r3, #1
 8002196:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800219c:	4619      	mov	r1, r3
 800219e:	4847      	ldr	r0, [pc, #284]	@ (80022bc <HAL_TIM_Base_MspInit+0x1cc>)
 80021a0:	f001 f99c 	bl	80034dc <HAL_GPIO_Init>
}
 80021a4:	e082      	b.n	80022ac <HAL_TIM_Base_MspInit+0x1bc>
  else if(htim_base->Instance==TIM4)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a45      	ldr	r2, [pc, #276]	@ (80022c0 <HAL_TIM_Base_MspInit+0x1d0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d116      	bne.n	80021de <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	4b40      	ldr	r3, [pc, #256]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	4a3f      	ldr	r2, [pc, #252]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c0:	4b3d      	ldr	r3, [pc, #244]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2101      	movs	r1, #1
 80021d0:	201e      	movs	r0, #30
 80021d2:	f001 f94c 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021d6:	201e      	movs	r0, #30
 80021d8:	f001 f965 	bl	80034a6 <HAL_NVIC_EnableIRQ>
}
 80021dc:	e066      	b.n	80022ac <HAL_TIM_Base_MspInit+0x1bc>
  else if(htim_base->Instance==TIM5)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a38      	ldr	r2, [pc, #224]	@ (80022c4 <HAL_TIM_Base_MspInit+0x1d4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d10e      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	4b32      	ldr	r3, [pc, #200]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	4a31      	ldr	r2, [pc, #196]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 80021f2:	f043 0308 	orr.w	r3, r3, #8
 80021f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f8:	4b2f      	ldr	r3, [pc, #188]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	69bb      	ldr	r3, [r7, #24]
}
 8002204:	e052      	b.n	80022ac <HAL_TIM_Base_MspInit+0x1bc>
  else if(htim_base->Instance==TIM6)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2f      	ldr	r2, [pc, #188]	@ (80022c8 <HAL_TIM_Base_MspInit+0x1d8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d116      	bne.n	800223e <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	4a27      	ldr	r2, [pc, #156]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 800221a:	f043 0310 	orr.w	r3, r3, #16
 800221e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002220:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2036      	movs	r0, #54	@ 0x36
 8002232:	f001 f91c 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002236:	2036      	movs	r0, #54	@ 0x36
 8002238:	f001 f935 	bl	80034a6 <HAL_NVIC_EnableIRQ>
}
 800223c:	e036      	b.n	80022ac <HAL_TIM_Base_MspInit+0x1bc>
  else if(htim_base->Instance==TIM7)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a22      	ldr	r2, [pc, #136]	@ (80022cc <HAL_TIM_Base_MspInit+0x1dc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d116      	bne.n	8002276 <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	4a19      	ldr	r2, [pc, #100]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002252:	f043 0320 	orr.w	r3, r3, #32
 8002256:	6413      	str	r3, [r2, #64]	@ 0x40
 8002258:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2101      	movs	r1, #1
 8002268:	2037      	movs	r0, #55	@ 0x37
 800226a:	f001 f900 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800226e:	2037      	movs	r0, #55	@ 0x37
 8002270:	f001 f919 	bl	80034a6 <HAL_NVIC_EnableIRQ>
}
 8002274:	e01a      	b.n	80022ac <HAL_TIM_Base_MspInit+0x1bc>
  else if(htim_base->Instance==TIM10)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a15      	ldr	r2, [pc, #84]	@ (80022d0 <HAL_TIM_Base_MspInit+0x1e0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d115      	bne.n	80022ac <HAL_TIM_Base_MspInit+0x1bc>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002288:	4a0b      	ldr	r2, [pc, #44]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 800228a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800228e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002290:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2019      	movs	r0, #25
 80022a2:	f001 f8e4 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022a6:	2019      	movs	r0, #25
 80022a8:	f001 f8fd 	bl	80034a6 <HAL_NVIC_EnableIRQ>
}
 80022ac:	bf00      	nop
 80022ae:	3740      	adds	r7, #64	@ 0x40
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	40000c00 	.word	0x40000c00
 80022c8:	40001000 	.word	0x40001000
 80022cc:	40001400 	.word	0x40001400
 80022d0:	40014400 	.word	0x40014400

080022d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <NMI_Handler+0x4>

080022dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <HardFault_Handler+0x4>

080022e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <MemManage_Handler+0x4>

080022ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <BusFault_Handler+0x4>

080022f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <UsageFault_Handler+0x4>

080022fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232a:	f000 f8e7 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002338:	4802      	ldr	r0, [pc, #8]	@ (8002344 <CAN1_RX0_IRQHandler+0x10>)
 800233a:	f000 fdb6 	bl	8002eaa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000068 	.word	0x20000068

08002348 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800234c:	4802      	ldr	r0, [pc, #8]	@ (8002358 <CAN1_RX1_IRQHandler+0x10>)
 800234e:	f000 fdac 	bl	8002eaa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000068 	.word	0x20000068

0800235c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_Pin);
 8002360:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002364:	f001 fa9a 	bl	800389c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_Pin);
 8002368:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800236c:	f001 fa96 	bl	800389c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  // HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}

08002374 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002378:	4803      	ldr	r0, [pc, #12]	@ (8002388 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800237a:	f002 fd4f 	bl	8004e1c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800237e:	4803      	ldr	r0, [pc, #12]	@ (800238c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002380:	f002 fd4c 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200000e8 	.word	0x200000e8
 800238c:	20000298 	.word	0x20000298

08002390 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002394:	4803      	ldr	r0, [pc, #12]	@ (80023a4 <TIM4_IRQHandler+0x14>)
 8002396:	f002 fd41 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  timer50ms_flag = 1;
 800239a:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <TIM4_IRQHandler+0x18>)
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM4_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000178 	.word	0x20000178
 80023a8:	20000375 	.word	0x20000375

080023ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023b0:	4803      	ldr	r0, [pc, #12]	@ (80023c0 <TIM6_DAC_IRQHandler+0x14>)
 80023b2:	f002 fd33 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  better_step_function(); //s'active au 200us
 80023b6:	f7ff fc7f 	bl	8001cb8 <better_step_function>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000208 	.word	0x20000208

080023c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023c8:	4803      	ldr	r0, [pc, #12]	@ (80023d8 <TIM7_IRQHandler+0x14>)
 80023ca:	f002 fd27 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  b_timer250ms_flag = 1;
 80023ce:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <TIM7_IRQHandler+0x18>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000250 	.word	0x20000250
 80023dc:	200002e4 	.word	0x200002e4

080023e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <SystemInit+0x20>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <SystemInit+0x20>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800243c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002408:	480d      	ldr	r0, [pc, #52]	@ (8002440 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800240a:	490e      	ldr	r1, [pc, #56]	@ (8002444 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800240c:	4a0e      	ldr	r2, [pc, #56]	@ (8002448 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0b      	ldr	r2, [pc, #44]	@ (800244c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002420:	4c0b      	ldr	r4, [pc, #44]	@ (8002450 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800242e:	f7ff ffd7 	bl	80023e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002432:	f003 f8b5 	bl	80055a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002436:	f7fe fc69 	bl	8000d0c <main>
  bx  lr    
 800243a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800243c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002444:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002448:	08005620 	.word	0x08005620
  ldr r2, =_sbss
 800244c:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8002450:	200003ac 	.word	0x200003ac

08002454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC_IRQHandler>
	...

08002458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800245c:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0d      	ldr	r2, [pc, #52]	@ (8002498 <HAL_Init+0x40>)
 8002462:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_Init+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <HAL_Init+0x40>)
 800246e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a07      	ldr	r2, [pc, #28]	@ (8002498 <HAL_Init+0x40>)
 800247a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800247e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002480:	2003      	movs	r0, #3
 8002482:	f000 ffe9 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002486:	200f      	movs	r0, #15
 8002488:	f000 f808 	bl	800249c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800248c:	f7ff fd36 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023c00 	.word	0x40023c00

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a4:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_InitTick+0x54>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <HAL_InitTick+0x58>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 f801 	bl	80034c2 <HAL_SYSTICK_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00e      	b.n	80024e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d80a      	bhi.n	80024e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d0:	2200      	movs	r2, #0
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f000 ffc9 	bl	800346e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024dc:	4a06      	ldr	r2, [pc, #24]	@ (80024f8 <HAL_InitTick+0x5c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000040 	.word	0x20000040
 80024f4:	20000048 	.word	0x20000048
 80024f8:	20000044 	.word	0x20000044

080024fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000048 	.word	0x20000048
 8002520:	200003a8 	.word	0x200003a8

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b03      	ldr	r3, [pc, #12]	@ (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	200003a8 	.word	0x200003a8

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff ffee 	bl	8002524 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002562:	bf00      	nop
 8002564:	f7ff ffde 	bl	8002524 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000048 	.word	0x20000048

08002584 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0ed      	b.n	8002772 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fcf4 	bl	8001f90 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b8:	f7ff ffb4 	bl	8002524 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025be:	e012      	b.n	80025e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c0:	f7ff ffb0 	bl	8002524 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b0a      	cmp	r3, #10
 80025cc:	d90b      	bls.n	80025e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0c5      	b.n	8002772 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0e5      	beq.n	80025c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0202 	bic.w	r2, r2, #2
 8002602:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002604:	f7ff ff8e 	bl	8002524 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800260a:	e012      	b.n	8002632 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800260c:	f7ff ff8a 	bl	8002524 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b0a      	cmp	r3, #10
 8002618:	d90b      	bls.n	8002632 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2205      	movs	r2, #5
 800262a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e09f      	b.n	8002772 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e5      	bne.n	800260c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7e1b      	ldrb	r3, [r3, #24]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d108      	bne.n	800265a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e007      	b.n	800266a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7e5b      	ldrb	r3, [r3, #25]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e007      	b.n	8002694 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002692:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7e9b      	ldrb	r3, [r3, #26]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0220 	orr.w	r2, r2, #32
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e007      	b.n	80026be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0220 	bic.w	r2, r2, #32
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	7edb      	ldrb	r3, [r3, #27]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0210 	bic.w	r2, r2, #16
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e007      	b.n	80026e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0210 	orr.w	r2, r2, #16
 80026e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7f1b      	ldrb	r3, [r3, #28]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d108      	bne.n	8002702 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0208 	orr.w	r2, r2, #8
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e007      	b.n	8002712 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0208 	bic.w	r2, r2, #8
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7f5b      	ldrb	r3, [r3, #29]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d108      	bne.n	800272c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0204 	orr.w	r2, r2, #4
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e007      	b.n	800273c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0204 	bic.w	r2, r2, #4
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	ea42 0103 	orr.w	r1, r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d003      	beq.n	800279c <HAL_CAN_ConfigFilter+0x20>
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b02      	cmp	r3, #2
 8002798:	f040 80be 	bne.w	8002918 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800279c:	4b65      	ldr	r3, [pc, #404]	@ (8002934 <HAL_CAN_ConfigFilter+0x1b8>)
 800279e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027b6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	431a      	orrs	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2201      	movs	r2, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d123      	bne.n	8002846 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43db      	mvns	r3, r3
 8002808:	401a      	ands	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002820:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	3248      	adds	r2, #72	@ 0x48
 8002826:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800283a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800283c:	6939      	ldr	r1, [r7, #16]
 800283e:	3348      	adds	r3, #72	@ 0x48
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d122      	bne.n	8002894 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	431a      	orrs	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800286e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	3248      	adds	r2, #72	@ 0x48
 8002874:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002888:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800288a:	6939      	ldr	r1, [r7, #16]
 800288c:	3348      	adds	r3, #72	@ 0x48
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	401a      	ands	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80028ae:	e007      	b.n	80028c0 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	401a      	ands	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80028da:	e007      	b.n	80028ec <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d107      	bne.n	8002904 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800290a:	f023 0201 	bic.w	r2, r3, #1
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e006      	b.n	8002926 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
  }
}
 8002926:	4618      	mov	r0, r3
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40006400 	.word	0x40006400

08002938 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d12e      	bne.n	80029aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002964:	f7ff fdde 	bl	8002524 <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800296a:	e012      	b.n	8002992 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800296c:	f7ff fdda 	bl	8002524 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b0a      	cmp	r3, #10
 8002978:	d90b      	bls.n	8002992 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2205      	movs	r2, #5
 800298a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e012      	b.n	80029b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e5      	bne.n	800296c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e006      	b.n	80029b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	@ 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029de:	7ffb      	ldrb	r3, [r7, #31]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d003      	beq.n	80029ec <HAL_CAN_AddTxMessage+0x2c>
 80029e4:	7ffb      	ldrb	r3, [r7, #31]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f040 80ad 	bne.w	8002b46 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8095 	beq.w	8002b36 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	0e1b      	lsrs	r3, r3, #24
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a16:	2201      	movs	r2, #1
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	6809      	ldr	r1, [r1, #0]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3318      	adds	r3, #24
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	440b      	add	r3, r1
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e00f      	b.n	8002a64 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a54:	68f9      	ldr	r1, [r7, #12]
 8002a56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3318      	adds	r3, #24
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	440b      	add	r3, r1
 8002a62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3318      	adds	r3, #24
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	440b      	add	r3, r1
 8002a74:	3304      	adds	r3, #4
 8002a76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	7d1b      	ldrb	r3, [r3, #20]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d111      	bne.n	8002aa4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3318      	adds	r3, #24
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	6811      	ldr	r1, [r2, #0]
 8002a94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3318      	adds	r3, #24
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3307      	adds	r3, #7
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	061a      	lsls	r2, r3, #24
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3306      	adds	r3, #6
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3305      	adds	r3, #5
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	3204      	adds	r2, #4
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	6811      	ldr	r1, [r2, #0]
 8002acc:	ea43 0200 	orr.w	r2, r3, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002ada:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3303      	adds	r3, #3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	061a      	lsls	r2, r3, #24
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3301      	adds	r3, #1
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	4313      	orrs	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	4610      	mov	r0, r2
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6811      	ldr	r1, [r2, #0]
 8002b02:	ea43 0200 	orr.w	r2, r3, r0
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3318      	adds	r3, #24
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	6811      	ldr	r1, [r2, #0]
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3318      	adds	r3, #24
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	440b      	add	r3, r1
 8002b30:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e00e      	b.n	8002b54 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e006      	b.n	8002b54 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3724      	adds	r7, #36	@ 0x24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b72:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b74:	7afb      	ldrb	r3, [r7, #11]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d002      	beq.n	8002b80 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002b7a:	7afb      	ldrb	r3, [r7, #11]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d11d      	bne.n	8002bbc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3301      	adds	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bde:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d003      	beq.n	8002bee <HAL_CAN_GetRxMessage+0x24>
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	f040 8103 	bne.w	8002df4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10e      	bne.n	8002c12 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0f7      	b.n	8002e02 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0e8      	b.n	8002e02 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	331b      	adds	r3, #27
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	4413      	add	r3, r2
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0204 	and.w	r2, r3, #4
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	331b      	adds	r3, #27
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4413      	add	r3, r2
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0d5b      	lsrs	r3, r3, #21
 8002c5e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	331b      	adds	r3, #27
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	331b      	adds	r3, #27
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0202 	and.w	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	331b      	adds	r3, #27
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	611a      	str	r2, [r3, #16]
 8002cb4:	e00b      	b.n	8002cce <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	331b      	adds	r3, #27
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 020f 	and.w	r2, r3, #15
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	331b      	adds	r3, #27
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	4413      	add	r3, r2
 8002cda:	3304      	adds	r3, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	331b      	adds	r3, #27
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0a1a      	lsrs	r2, r3, #8
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0c1a      	lsrs	r2, r3, #16
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	3302      	adds	r3, #2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e1a      	lsrs	r2, r3, #24
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	3303      	adds	r3, #3
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	3304      	adds	r3, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0a1a      	lsrs	r2, r3, #8
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	3305      	adds	r3, #5
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0c1a      	lsrs	r2, r3, #16
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	3306      	adds	r3, #6
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0e1a      	lsrs	r2, r3, #24
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	3307      	adds	r3, #7
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d108      	bne.n	8002de0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0220 	orr.w	r2, r2, #32
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	e007      	b.n	8002df0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0220 	orr.w	r2, r2, #32
 8002dee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e006      	b.n	8002e02 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
  }
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e22:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e24:	7afb      	ldrb	r3, [r7, #11]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d002      	beq.n	8002e30 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d10f      	bne.n	8002e50 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e005      	b.n	8002e50 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002e50:	68fb      	ldr	r3, [r7, #12]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d002      	beq.n	8002e7c <HAL_CAN_ActivateNotification+0x1e>
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d109      	bne.n	8002e90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6959      	ldr	r1, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e006      	b.n	8002e9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b08a      	sub	sp, #40	@ 0x28
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d07c      	beq.n	8002fea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d023      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f983 	bl	8003218 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f12:	e016      	b.n	8002f42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f26:	e00c      	b.n	8002f42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3a:	e002      	b.n	8002f42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f989 	bl	8003254 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d024      	beq.n	8002f96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f963 	bl	800322c <HAL_CAN_TxMailbox1CompleteCallback>
 8002f66:	e016      	b.n	8002f96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7a:	e00c      	b.n	8002f96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d004      	beq.n	8002f90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8e:	e002      	b.n	8002f96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f969 	bl	8003268 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d024      	beq.n	8002fea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002fa8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f943 	bl	8003240 <HAL_CAN_TxMailbox2CompleteCallback>
 8002fba:	e016      	b.n	8002fea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fce:	e00c      	b.n	8002fea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe2:	e002      	b.n	8002fea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f949 	bl	800327c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00c      	beq.n	800300e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2210      	movs	r2, #16
 800300c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2208      	movs	r2, #8
 8003028:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fdf0 	bl	8000c10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7fd fdc9 	bl	8000be0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00c      	beq.n	8003072 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2210      	movs	r2, #16
 8003070:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2208      	movs	r2, #8
 800308c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd fdc8 	bl	8000c24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd fda3 	bl	8000bf8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d006      	beq.n	80030d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2210      	movs	r2, #16
 80030cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8de 	bl	8003290 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d006      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2208      	movs	r2, #8
 80030ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f8d7 	bl	80032a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d07b      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d072      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003164:	2b00      	cmp	r3, #0
 8003166:	d043      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800316e:	2b00      	cmp	r3, #0
 8003170:	d03e      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003178:	2b60      	cmp	r3, #96	@ 0x60
 800317a:	d02b      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x32a>
 800317c:	2b60      	cmp	r3, #96	@ 0x60
 800317e:	d82e      	bhi.n	80031de <HAL_CAN_IRQHandler+0x334>
 8003180:	2b50      	cmp	r3, #80	@ 0x50
 8003182:	d022      	beq.n	80031ca <HAL_CAN_IRQHandler+0x320>
 8003184:	2b50      	cmp	r3, #80	@ 0x50
 8003186:	d82a      	bhi.n	80031de <HAL_CAN_IRQHandler+0x334>
 8003188:	2b40      	cmp	r3, #64	@ 0x40
 800318a:	d019      	beq.n	80031c0 <HAL_CAN_IRQHandler+0x316>
 800318c:	2b40      	cmp	r3, #64	@ 0x40
 800318e:	d826      	bhi.n	80031de <HAL_CAN_IRQHandler+0x334>
 8003190:	2b30      	cmp	r3, #48	@ 0x30
 8003192:	d010      	beq.n	80031b6 <HAL_CAN_IRQHandler+0x30c>
 8003194:	2b30      	cmp	r3, #48	@ 0x30
 8003196:	d822      	bhi.n	80031de <HAL_CAN_IRQHandler+0x334>
 8003198:	2b10      	cmp	r3, #16
 800319a:	d002      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x2f8>
 800319c:	2b20      	cmp	r3, #32
 800319e:	d005      	beq.n	80031ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031a0:	e01d      	b.n	80031de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	f043 0308 	orr.w	r3, r3, #8
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031aa:	e019      	b.n	80031e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	f043 0310 	orr.w	r3, r3, #16
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031b4:	e014      	b.n	80031e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	f043 0320 	orr.w	r3, r3, #32
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031be:	e00f      	b.n	80031e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031c8:	e00a      	b.n	80031e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031d2:	e005      	b.n	80031e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031dc:	e000      	b.n	80031e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80031de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80031ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2204      	movs	r2, #4
 80031f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fd14 	bl	8000c38 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003210:	bf00      	nop
 8003212:	3728      	adds	r7, #40	@ 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	@ (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	@ (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	@ (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	@ 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	@ 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f7ff ff8e 	bl	8003358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff29 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003480:	f7ff ff3e 	bl	8003300 <__NVIC_GetPriorityGrouping>
 8003484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ff8e 	bl	80033ac <NVIC_EncodePriority>
 8003490:	4602      	mov	r2, r0
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff5d 	bl	8003358 <__NVIC_SetPriority>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff31 	bl	800331c <__NVIC_EnableIRQ>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ffa2 	bl	8003414 <SysTick_Config>
 80034d0:	4603      	mov	r3, r0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	@ 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	e165      	b.n	80037c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f8:	2201      	movs	r2, #1
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	f040 8154 	bne.w	80037be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d005      	beq.n	800352e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352a:	2b02      	cmp	r3, #2
 800352c:	d130      	bne.n	8003590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	2203      	movs	r2, #3
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003564:	2201      	movs	r2, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 0201 	and.w	r2, r3, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b03      	cmp	r3, #3
 800359a:	d017      	beq.n	80035cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	2203      	movs	r2, #3
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d123      	bne.n	8003620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	08da      	lsrs	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3208      	adds	r2, #8
 80035e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	220f      	movs	r2, #15
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	08da      	lsrs	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80ae 	beq.w	80037be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	4b5d      	ldr	r3, [pc, #372]	@ (80037dc <HAL_GPIO_Init+0x300>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	4a5c      	ldr	r2, [pc, #368]	@ (80037dc <HAL_GPIO_Init+0x300>)
 800366c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003670:	6453      	str	r3, [r2, #68]	@ 0x44
 8003672:	4b5a      	ldr	r3, [pc, #360]	@ (80037dc <HAL_GPIO_Init+0x300>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800367e:	4a58      	ldr	r2, [pc, #352]	@ (80037e0 <HAL_GPIO_Init+0x304>)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	089b      	lsrs	r3, r3, #2
 8003684:	3302      	adds	r3, #2
 8003686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4f      	ldr	r2, [pc, #316]	@ (80037e4 <HAL_GPIO_Init+0x308>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d025      	beq.n	80036f6 <HAL_GPIO_Init+0x21a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4e      	ldr	r2, [pc, #312]	@ (80037e8 <HAL_GPIO_Init+0x30c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01f      	beq.n	80036f2 <HAL_GPIO_Init+0x216>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4d      	ldr	r2, [pc, #308]	@ (80037ec <HAL_GPIO_Init+0x310>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d019      	beq.n	80036ee <HAL_GPIO_Init+0x212>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4c      	ldr	r2, [pc, #304]	@ (80037f0 <HAL_GPIO_Init+0x314>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_GPIO_Init+0x20e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4b      	ldr	r2, [pc, #300]	@ (80037f4 <HAL_GPIO_Init+0x318>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00d      	beq.n	80036e6 <HAL_GPIO_Init+0x20a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4a      	ldr	r2, [pc, #296]	@ (80037f8 <HAL_GPIO_Init+0x31c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <HAL_GPIO_Init+0x206>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a49      	ldr	r2, [pc, #292]	@ (80037fc <HAL_GPIO_Init+0x320>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_GPIO_Init+0x202>
 80036da:	2306      	movs	r3, #6
 80036dc:	e00c      	b.n	80036f8 <HAL_GPIO_Init+0x21c>
 80036de:	2307      	movs	r3, #7
 80036e0:	e00a      	b.n	80036f8 <HAL_GPIO_Init+0x21c>
 80036e2:	2305      	movs	r3, #5
 80036e4:	e008      	b.n	80036f8 <HAL_GPIO_Init+0x21c>
 80036e6:	2304      	movs	r3, #4
 80036e8:	e006      	b.n	80036f8 <HAL_GPIO_Init+0x21c>
 80036ea:	2303      	movs	r3, #3
 80036ec:	e004      	b.n	80036f8 <HAL_GPIO_Init+0x21c>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e002      	b.n	80036f8 <HAL_GPIO_Init+0x21c>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_GPIO_Init+0x21c>
 80036f6:	2300      	movs	r3, #0
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f002 0203 	and.w	r2, r2, #3
 80036fe:	0092      	lsls	r2, r2, #2
 8003700:	4093      	lsls	r3, r2
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003708:	4935      	ldr	r1, [pc, #212]	@ (80037e0 <HAL_GPIO_Init+0x304>)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	089b      	lsrs	r3, r3, #2
 800370e:	3302      	adds	r3, #2
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003716:	4b3a      	ldr	r3, [pc, #232]	@ (8003800 <HAL_GPIO_Init+0x324>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800373a:	4a31      	ldr	r2, [pc, #196]	@ (8003800 <HAL_GPIO_Init+0x324>)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003740:	4b2f      	ldr	r3, [pc, #188]	@ (8003800 <HAL_GPIO_Init+0x324>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003764:	4a26      	ldr	r2, [pc, #152]	@ (8003800 <HAL_GPIO_Init+0x324>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800376a:	4b25      	ldr	r3, [pc, #148]	@ (8003800 <HAL_GPIO_Init+0x324>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800378e:	4a1c      	ldr	r2, [pc, #112]	@ (8003800 <HAL_GPIO_Init+0x324>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003794:	4b1a      	ldr	r3, [pc, #104]	@ (8003800 <HAL_GPIO_Init+0x324>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b8:	4a11      	ldr	r2, [pc, #68]	@ (8003800 <HAL_GPIO_Init+0x324>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3301      	adds	r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	f67f ae96 	bls.w	80034f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3724      	adds	r7, #36	@ 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40013800 	.word	0x40013800
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40020400 	.word	0x40020400
 80037ec:	40020800 	.word	0x40020800
 80037f0:	40020c00 	.word	0x40020c00
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40021400 	.word	0x40021400
 80037fc:	40021800 	.word	0x40021800
 8003800:	40013c00 	.word	0x40013c00

08003804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	887b      	ldrh	r3, [r7, #2]
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	e001      	b.n	8003826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	807b      	strh	r3, [r7, #2]
 8003840:	4613      	mov	r3, r2
 8003842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003844:	787b      	ldrb	r3, [r7, #1]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003850:	e003      	b.n	800385a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	041a      	lsls	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	619a      	str	r2, [r3, #24]
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003866:	b480      	push	{r7}
 8003868:	b085      	sub	sp, #20
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003878:	887a      	ldrh	r2, [r7, #2]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4013      	ands	r3, r2
 800387e:	041a      	lsls	r2, r3, #16
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43d9      	mvns	r1, r3
 8003884:	887b      	ldrh	r3, [r7, #2]
 8003886:	400b      	ands	r3, r1
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	619a      	str	r2, [r3, #24]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038a6:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038b2:	4a05      	ldr	r2, [pc, #20]	@ (80038c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd fe22 	bl	8001504 <HAL_GPIO_EXTI_Callback>
  }
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40013c00 	.word	0x40013c00

080038cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0cc      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b68      	ldr	r3, [pc, #416]	@ (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d90c      	bls.n	8003908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b65      	ldr	r3, [pc, #404]	@ (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b63      	ldr	r3, [pc, #396]	@ (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0b8      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d020      	beq.n	8003956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003920:	4b59      	ldr	r3, [pc, #356]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a58      	ldr	r2, [pc, #352]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800392a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003938:	4b53      	ldr	r3, [pc, #332]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a52      	ldr	r2, [pc, #328]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003944:	4b50      	ldr	r3, [pc, #320]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	494d      	ldr	r1, [pc, #308]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d044      	beq.n	80039ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b47      	ldr	r3, [pc, #284]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d119      	bne.n	80039aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e07f      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d003      	beq.n	800398a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003986:	2b03      	cmp	r3, #3
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e06f      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e067      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039aa:	4b37      	ldr	r3, [pc, #220]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4934      	ldr	r1, [pc, #208]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039bc:	f7fe fdb2 	bl	8002524 <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fe fdae 	bl	8002524 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e04f      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	4b2b      	ldr	r3, [pc, #172]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 020c 	and.w	r2, r3, #12
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d1eb      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ec:	4b25      	ldr	r3, [pc, #148]	@ (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d20c      	bcs.n	8003a14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b22      	ldr	r3, [pc, #136]	@ (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a02:	4b20      	ldr	r3, [pc, #128]	@ (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e032      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a20:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4916      	ldr	r1, [pc, #88]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a3e:	4b12      	ldr	r3, [pc, #72]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	490e      	ldr	r1, [pc, #56]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a52:	f000 f821 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003a56:	4602      	mov	r2, r0
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	490a      	ldr	r1, [pc, #40]	@ (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	5ccb      	ldrb	r3, [r1, r3]
 8003a66:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6a:	4a09      	ldr	r2, [pc, #36]	@ (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a6e:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fd12 	bl	800249c <HAL_InitTick>

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023c00 	.word	0x40023c00
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	08005600 	.word	0x08005600
 8003a90:	20000040 	.word	0x20000040
 8003a94:	20000044 	.word	0x20000044

08003a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a9c:	b0a6      	sub	sp, #152	@ 0x98
 8003a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003abe:	4bc8      	ldr	r3, [pc, #800]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	f200 817e 	bhi.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x330>
 8003acc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003b09 	.word	0x08003b09
 8003ad8:	08003dc9 	.word	0x08003dc9
 8003adc:	08003dc9 	.word	0x08003dc9
 8003ae0:	08003dc9 	.word	0x08003dc9
 8003ae4:	08003b11 	.word	0x08003b11
 8003ae8:	08003dc9 	.word	0x08003dc9
 8003aec:	08003dc9 	.word	0x08003dc9
 8003af0:	08003dc9 	.word	0x08003dc9
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003dc9 	.word	0x08003dc9
 8003afc:	08003dc9 	.word	0x08003dc9
 8003b00:	08003dc9 	.word	0x08003dc9
 8003b04:	08003c83 	.word	0x08003c83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4bb6      	ldr	r3, [pc, #728]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b0e:	e15f      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b10:	4bb5      	ldr	r3, [pc, #724]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b16:	e15b      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b18:	4bb1      	ldr	r3, [pc, #708]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b24:	4bae      	ldr	r3, [pc, #696]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d031      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b30:	4bab      	ldr	r3, [pc, #684]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	2200      	movs	r2, #0
 8003b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b44:	2300      	movs	r3, #0
 8003b46:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b48:	4ba7      	ldr	r3, [pc, #668]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b4a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b4e:	462a      	mov	r2, r5
 8003b50:	fb03 f202 	mul.w	r2, r3, r2
 8003b54:	2300      	movs	r3, #0
 8003b56:	4621      	mov	r1, r4
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	4aa2      	ldr	r2, [pc, #648]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b60:	4621      	mov	r1, r4
 8003b62:	fba1 1202 	umull	r1, r2, r1, r2
 8003b66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b68:	460a      	mov	r2, r1
 8003b6a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003b6c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b6e:	4413      	add	r3, r2
 8003b70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b76:	2200      	movs	r2, #0
 8003b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b7a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b80:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003b84:	f7fc fb3e 	bl	8000204 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b92:	e064      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b94:	4b92      	ldr	r3, [pc, #584]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b9e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ba8:	2300      	movs	r3, #0
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	462b      	mov	r3, r5
 8003bb4:	f04f 0000 	mov.w	r0, #0
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	0159      	lsls	r1, r3, #5
 8003bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc2:	0150      	lsls	r0, r2, #5
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4621      	mov	r1, r4
 8003bca:	1a51      	subs	r1, r2, r1
 8003bcc:	6139      	str	r1, [r7, #16]
 8003bce:	4629      	mov	r1, r5
 8003bd0:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be2:	4659      	mov	r1, fp
 8003be4:	018b      	lsls	r3, r1, #6
 8003be6:	4651      	mov	r1, sl
 8003be8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bec:	4651      	mov	r1, sl
 8003bee:	018a      	lsls	r2, r1, #6
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ebb2 0801 	subs.w	r8, r2, r1
 8003bf6:	4659      	mov	r1, fp
 8003bf8:	eb63 0901 	sbc.w	r9, r3, r1
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c10:	4690      	mov	r8, r2
 8003c12:	4699      	mov	r9, r3
 8003c14:	4623      	mov	r3, r4
 8003c16:	eb18 0303 	adds.w	r3, r8, r3
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	eb49 0303 	adc.w	r3, r9, r3
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c30:	4629      	mov	r1, r5
 8003c32:	028b      	lsls	r3, r1, #10
 8003c34:	4621      	mov	r1, r4
 8003c36:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	028a      	lsls	r2, r1, #10
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c46:	2200      	movs	r2, #0
 8003c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c50:	f7fc fad8 	bl	8000204 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c5e:	4b60      	ldr	r3, [pc, #384]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003c70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c80:	e0a6      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c82:	4b57      	ldr	r3, [pc, #348]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8e:	4b54      	ldr	r3, [pc, #336]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d02a      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9a:	4b51      	ldr	r3, [pc, #324]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ca4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cac:	2100      	movs	r1, #0
 8003cae:	4b4e      	ldr	r3, [pc, #312]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cb0:	fb03 f201 	mul.w	r2, r3, r1
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	fb00 f303 	mul.w	r3, r0, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cbe:	fba0 1202 	umull	r1, r2, r0, r2
 8003cc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cc4:	460a      	mov	r2, r1
 8003cc6:	673a      	str	r2, [r7, #112]	@ 0x70
 8003cc8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003cca:	4413      	add	r3, r2
 8003ccc:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cd6:	637a      	str	r2, [r7, #52]	@ 0x34
 8003cd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003cdc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003ce0:	f7fc fa90 	bl	8000204 <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4613      	mov	r3, r2
 8003cea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cee:	e05b      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	2300      	movs	r3, #0
 8003d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	464b      	mov	r3, r9
 8003d10:	f04f 0000 	mov.w	r0, #0
 8003d14:	f04f 0100 	mov.w	r1, #0
 8003d18:	0159      	lsls	r1, r3, #5
 8003d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d1e:	0150      	lsls	r0, r2, #5
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4641      	mov	r1, r8
 8003d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d44:	ebb2 040a 	subs.w	r4, r2, sl
 8003d48:	eb63 050b 	sbc.w	r5, r3, fp
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	00eb      	lsls	r3, r5, #3
 8003d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d5a:	00e2      	lsls	r2, r4, #3
 8003d5c:	4614      	mov	r4, r2
 8003d5e:	461d      	mov	r5, r3
 8003d60:	4643      	mov	r3, r8
 8003d62:	18e3      	adds	r3, r4, r3
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	464b      	mov	r3, r9
 8003d68:	eb45 0303 	adc.w	r3, r5, r3
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	028b      	lsls	r3, r1, #10
 8003d7e:	4621      	mov	r1, r4
 8003d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d84:	4621      	mov	r1, r4
 8003d86:	028a      	lsls	r2, r1, #10
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d90:	2200      	movs	r2, #0
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	61fa      	str	r2, [r7, #28]
 8003d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d9a:	f7fc fa33 	bl	8000204 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4613      	mov	r3, r2
 8003da4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003da8:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	0f1b      	lsrs	r3, r3, #28
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003dca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003dce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3798      	adds	r7, #152	@ 0x98
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	00f42400 	.word	0x00f42400
 8003de8:	017d7840 	.word	0x017d7840

08003dec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e28d      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8083 	beq.w	8003f12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e0c:	4b94      	ldr	r3, [pc, #592]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d019      	beq.n	8003e4c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e18:	4b91      	ldr	r3, [pc, #580]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e24:	4b8e      	ldr	r3, [pc, #568]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e30:	d00c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e32:	4b8b      	ldr	r3, [pc, #556]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	d112      	bne.n	8003e64 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3e:	4b88      	ldr	r3, [pc, #544]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	4b84      	ldr	r3, [pc, #528]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05b      	beq.n	8003f10 <HAL_RCC_OscConfig+0x124>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d157      	bne.n	8003f10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e25a      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_OscConfig+0x90>
 8003e6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7b      	ldr	r2, [pc, #492]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e01d      	b.n	8003eb8 <HAL_RCC_OscConfig+0xcc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xb4>
 8003e86:	4b76      	ldr	r3, [pc, #472]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a75      	ldr	r2, [pc, #468]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b73      	ldr	r3, [pc, #460]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a72      	ldr	r2, [pc, #456]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0xcc>
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a6e      	ldr	r2, [pc, #440]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b6c      	ldr	r3, [pc, #432]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6b      	ldr	r2, [pc, #428]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d013      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fb30 	bl	8002524 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fb2c 	bl	8002524 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	@ 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e21f      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	4b61      	ldr	r3, [pc, #388]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0xdc>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fb1c 	bl	8002524 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fb18 	bl	8002524 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	@ 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e20b      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	4b57      	ldr	r3, [pc, #348]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x104>
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d06f      	beq.n	8003ffe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f1e:	4b50      	ldr	r3, [pc, #320]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d017      	beq.n	8003f5a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f2a:	4b4d      	ldr	r3, [pc, #308]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f36:	4b4a      	ldr	r3, [pc, #296]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f42:	4b47      	ldr	r3, [pc, #284]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d11c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4e:	4b44      	ldr	r3, [pc, #272]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5a:	4b41      	ldr	r3, [pc, #260]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_RCC_OscConfig+0x186>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e1d3      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f72:	4b3b      	ldr	r3, [pc, #236]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4937      	ldr	r1, [pc, #220]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f86:	e03a      	b.n	8003ffe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d020      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f90:	4b34      	ldr	r3, [pc, #208]	@ (8004064 <HAL_RCC_OscConfig+0x278>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fe fac5 	bl	8002524 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9e:	f7fe fac1 	bl	8002524 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e1b4      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b28      	ldr	r3, [pc, #160]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4925      	ldr	r1, [pc, #148]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	600b      	str	r3, [r1, #0]
 8003fd0:	e015      	b.n	8003ffe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd2:	4b24      	ldr	r3, [pc, #144]	@ (8004064 <HAL_RCC_OscConfig+0x278>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fe faa4 	bl	8002524 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe0:	f7fe faa0 	bl	8002524 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e193      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d036      	beq.n	8004078 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004012:	4b15      	ldr	r3, [pc, #84]	@ (8004068 <HAL_RCC_OscConfig+0x27c>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fe fa84 	bl	8002524 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004020:	f7fe fa80 	bl	8002524 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e173      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004032:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <HAL_RCC_OscConfig+0x274>)
 8004034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x234>
 800403e:	e01b      	b.n	8004078 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004040:	4b09      	ldr	r3, [pc, #36]	@ (8004068 <HAL_RCC_OscConfig+0x27c>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004046:	f7fe fa6d 	bl	8002524 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404c:	e00e      	b.n	800406c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404e:	f7fe fa69 	bl	8002524 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d907      	bls.n	800406c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e15c      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
 8004060:	40023800 	.word	0x40023800
 8004064:	42470000 	.word	0x42470000
 8004068:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406c:	4b8a      	ldr	r3, [pc, #552]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800406e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1ea      	bne.n	800404e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8097 	beq.w	80041b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408a:	4b83      	ldr	r3, [pc, #524]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10f      	bne.n	80040b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	4b7f      	ldr	r3, [pc, #508]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	4a7e      	ldr	r2, [pc, #504]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a6:	4b7c      	ldr	r3, [pc, #496]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b2:	2301      	movs	r3, #1
 80040b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b6:	4b79      	ldr	r3, [pc, #484]	@ (800429c <HAL_RCC_OscConfig+0x4b0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d118      	bne.n	80040f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c2:	4b76      	ldr	r3, [pc, #472]	@ (800429c <HAL_RCC_OscConfig+0x4b0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a75      	ldr	r2, [pc, #468]	@ (800429c <HAL_RCC_OscConfig+0x4b0>)
 80040c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ce:	f7fe fa29 	bl	8002524 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d6:	f7fe fa25 	bl	8002524 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e118      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e8:	4b6c      	ldr	r3, [pc, #432]	@ (800429c <HAL_RCC_OscConfig+0x4b0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d106      	bne.n	800410a <HAL_RCC_OscConfig+0x31e>
 80040fc:	4b66      	ldr	r3, [pc, #408]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004100:	4a65      	ldr	r2, [pc, #404]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	@ 0x70
 8004108:	e01c      	b.n	8004144 <HAL_RCC_OscConfig+0x358>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b05      	cmp	r3, #5
 8004110:	d10c      	bne.n	800412c <HAL_RCC_OscConfig+0x340>
 8004112:	4b61      	ldr	r3, [pc, #388]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004116:	4a60      	ldr	r2, [pc, #384]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	6713      	str	r3, [r2, #112]	@ 0x70
 800411e:	4b5e      	ldr	r3, [pc, #376]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004122:	4a5d      	ldr	r2, [pc, #372]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6713      	str	r3, [r2, #112]	@ 0x70
 800412a:	e00b      	b.n	8004144 <HAL_RCC_OscConfig+0x358>
 800412c:	4b5a      	ldr	r3, [pc, #360]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004130:	4a59      	ldr	r2, [pc, #356]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	@ 0x70
 8004138:	4b57      	ldr	r3, [pc, #348]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	4a56      	ldr	r2, [pc, #344]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	f023 0304 	bic.w	r3, r3, #4
 8004142:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fe f9ea 	bl	8002524 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004152:	e00a      	b.n	800416a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004154:	f7fe f9e6 	bl	8002524 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e0d7      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	4b4b      	ldr	r3, [pc, #300]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ee      	beq.n	8004154 <HAL_RCC_OscConfig+0x368>
 8004176:	e014      	b.n	80041a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fe f9d4 	bl	8002524 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004180:	f7fe f9d0 	bl	8002524 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e0c1      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004196:	4b40      	ldr	r3, [pc, #256]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ee      	bne.n	8004180 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80041ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80ad 	beq.w	8004318 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041be:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d060      	beq.n	800428c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d145      	bne.n	800425e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b33      	ldr	r3, [pc, #204]	@ (80042a0 <HAL_RCC_OscConfig+0x4b4>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fe f9a4 	bl	8002524 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fe f9a0 	bl	8002524 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e093      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	4b29      	ldr	r3, [pc, #164]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	019b      	lsls	r3, r3, #6
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	3b01      	subs	r3, #1
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	071b      	lsls	r3, r3, #28
 800422a:	491b      	ldr	r1, [pc, #108]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004230:	4b1b      	ldr	r3, [pc, #108]	@ (80042a0 <HAL_RCC_OscConfig+0x4b4>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fe f975 	bl	8002524 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423e:	f7fe f971 	bl	8002524 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e064      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004250:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x452>
 800425c:	e05c      	b.n	8004318 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425e:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <HAL_RCC_OscConfig+0x4b4>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fe f95e 	bl	8002524 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426c:	f7fe f95a 	bl	8002524 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e04d      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x480>
 800428a:	e045      	b.n	8004318 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e040      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000
 80042a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004324 <HAL_RCC_OscConfig+0x538>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d030      	beq.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d129      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d122      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042d4:	4013      	ands	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042dc:	4293      	cmp	r3, r2
 80042de:	d119      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	3b01      	subs	r3, #1
 80042ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d10f      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d107      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e07b      	b.n	8004432 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800434a:	d009      	beq.n	8004360 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	61da      	str	r2, [r3, #28]
 8004352:	e005      	b.n	8004360 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fd fe60 	bl	8002040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004396:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e4:	ea42 0103 	orr.w	r1, r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	f003 0104 	and.w	r1, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	f003 0210 	and.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004420:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b088      	sub	sp, #32
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800444a:	f7fe f86b 	bl	8002524 <HAL_GetTick>
 800444e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d001      	beq.n	8004464 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
 8004462:	e12a      	b.n	80046ba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_SPI_Transmit+0x36>
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e122      	b.n	80046ba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_SPI_Transmit+0x48>
 800447e:	2302      	movs	r3, #2
 8004480:	e11b      	b.n	80046ba <HAL_SPI_Transmit+0x280>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2203      	movs	r2, #3
 800448e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	88fa      	ldrh	r2, [r7, #6]
 80044a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044d0:	d10f      	bne.n	80044f2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fc:	2b40      	cmp	r3, #64	@ 0x40
 80044fe:	d007      	beq.n	8004510 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800450e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004518:	d152      	bne.n	80045c0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_SPI_Transmit+0xee>
 8004522:	8b7b      	ldrh	r3, [r7, #26]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d145      	bne.n	80045b4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452c:	881a      	ldrh	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	1c9a      	adds	r2, r3, #2
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800454c:	e032      	b.n	80045b4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d112      	bne.n	8004582 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004560:	881a      	ldrh	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456c:	1c9a      	adds	r2, r3, #2
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004580:	e018      	b.n	80045b4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004582:	f7fd ffcf 	bl	8002524 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d803      	bhi.n	800459a <HAL_SPI_Transmit+0x160>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d102      	bne.n	80045a0 <HAL_SPI_Transmit+0x166>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e082      	b.n	80046ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1c7      	bne.n	800454e <HAL_SPI_Transmit+0x114>
 80045be:	e053      	b.n	8004668 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SPI_Transmit+0x194>
 80045c8:	8b7b      	ldrh	r3, [r7, #26]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d147      	bne.n	800465e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	7812      	ldrb	r2, [r2, #0]
 80045da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045f4:	e033      	b.n	800465e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b02      	cmp	r3, #2
 8004602:	d113      	bne.n	800462c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	7812      	ldrb	r2, [r2, #0]
 8004610:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	86da      	strh	r2, [r3, #54]	@ 0x36
 800462a:	e018      	b.n	800465e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462c:	f7fd ff7a 	bl	8002524 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d803      	bhi.n	8004644 <HAL_SPI_Transmit+0x20a>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d102      	bne.n	800464a <HAL_SPI_Transmit+0x210>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e02d      	b.n	80046ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1c6      	bne.n	80045f6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	6839      	ldr	r1, [r7, #0]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 fa59 	bl	8004b24 <SPI_EndRxTxTransaction>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b08a      	sub	sp, #40	@ 0x28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046d0:	2301      	movs	r3, #1
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046d4:	f7fd ff26 	bl	8002524 <HAL_GetTick>
 80046d8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046e0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046ec:	7ffb      	ldrb	r3, [r7, #31]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d00c      	beq.n	800470c <HAL_SPI_TransmitReceive+0x4a>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046f8:	d106      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x46>
 8004702:	7ffb      	ldrb	r3, [r7, #31]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d001      	beq.n	800470c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
 800470a:	e17f      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_SPI_TransmitReceive+0x5c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_SPI_TransmitReceive+0x5c>
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e174      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_SPI_TransmitReceive+0x6e>
 800472c:	2302      	movs	r3, #2
 800472e:	e16d      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x34a>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b04      	cmp	r3, #4
 8004742:	d003      	beq.n	800474c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2205      	movs	r2, #5
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	887a      	ldrh	r2, [r7, #2]
 8004762:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	887a      	ldrh	r2, [r7, #2]
 800476e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	d007      	beq.n	80047a0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800479e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a8:	d17e      	bne.n	80048a8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_SPI_TransmitReceive+0xf6>
 80047b2:	8afb      	ldrh	r3, [r7, #22]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d16c      	bne.n	8004892 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	881a      	ldrh	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c8:	1c9a      	adds	r2, r3, #2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047dc:	e059      	b.n	8004892 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d11b      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x162>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d016      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x162>
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d113      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004800:	881a      	ldrh	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	1c9a      	adds	r2, r3, #2
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	d119      	bne.n	8004866 <HAL_SPI_TransmitReceive+0x1a4>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d014      	beq.n	8004866 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	b292      	uxth	r2, r2
 8004848:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484e:	1c9a      	adds	r2, r3, #2
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004862:	2301      	movs	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004866:	f7fd fe5d 	bl	8002524 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004872:	429a      	cmp	r2, r3
 8004874:	d80d      	bhi.n	8004892 <HAL_SPI_TransmitReceive+0x1d0>
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d009      	beq.n	8004892 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e0bc      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1a0      	bne.n	80047de <HAL_SPI_TransmitReceive+0x11c>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d19b      	bne.n	80047de <HAL_SPI_TransmitReceive+0x11c>
 80048a6:	e082      	b.n	80049ae <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_SPI_TransmitReceive+0x1f4>
 80048b0:	8afb      	ldrh	r3, [r7, #22]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d171      	bne.n	800499a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048dc:	e05d      	b.n	800499a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d11c      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x264>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d017      	beq.n	8004926 <HAL_SPI_TransmitReceive+0x264>
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d114      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d119      	bne.n	8004968 <HAL_SPI_TransmitReceive+0x2a6>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d014      	beq.n	8004968 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004964:	2301      	movs	r3, #1
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004968:	f7fd fddc 	bl	8002524 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004974:	429a      	cmp	r2, r3
 8004976:	d803      	bhi.n	8004980 <HAL_SPI_TransmitReceive+0x2be>
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d102      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x2c4>
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e038      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d19c      	bne.n	80048de <HAL_SPI_TransmitReceive+0x21c>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d197      	bne.n	80048de <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ae:	6a3a      	ldr	r2, [r7, #32]
 80049b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f8b6 	bl	8004b24 <SPI_EndRxTxTransaction>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e01d      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
  }
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3728      	adds	r7, #40	@ 0x28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	4613      	mov	r3, r2
 8004a22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a24:	f7fd fd7e 	bl	8002524 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	4413      	add	r3, r2
 8004a32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a34:	f7fd fd76 	bl	8002524 <HAL_GetTick>
 8004a38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a3a:	4b39      	ldr	r3, [pc, #228]	@ (8004b20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	015b      	lsls	r3, r3, #5
 8004a40:	0d1b      	lsrs	r3, r3, #20
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	fb02 f303 	mul.w	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a4a:	e055      	b.n	8004af8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a52:	d051      	beq.n	8004af8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a54:	f7fd fd66 	bl	8002524 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d902      	bls.n	8004a6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d13d      	bne.n	8004ae6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a82:	d111      	bne.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a8c:	d004      	beq.n	8004a98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a96:	d107      	bne.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab0:	d10f      	bne.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ad0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e018      	b.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	e002      	b.n	8004af8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d19a      	bne.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000040 	.word	0x20000040

08004b24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2201      	movs	r2, #1
 8004b38:	2102      	movs	r1, #2
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f7ff ff6a 	bl	8004a14 <SPI_WaitFlagStateUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e032      	b.n	8004bbc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b56:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <SPI_EndRxTxTransaction+0xa0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc8 <SPI_EndRxTxTransaction+0xa4>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	0d5b      	lsrs	r3, r3, #21
 8004b62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b66:	fb02 f303 	mul.w	r3, r2, r3
 8004b6a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b74:	d112      	bne.n	8004b9c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2180      	movs	r1, #128	@ 0x80
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff ff47 	bl	8004a14 <SPI_WaitFlagStateUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d016      	beq.n	8004bba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e00f      	b.n	8004bbc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb2:	2b80      	cmp	r3, #128	@ 0x80
 8004bb4:	d0f2      	beq.n	8004b9c <SPI_EndRxTxTransaction+0x78>
 8004bb6:	e000      	b.n	8004bba <SPI_EndRxTxTransaction+0x96>
        break;
 8004bb8:	bf00      	nop
  }

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000040 	.word	0x20000040
 8004bc8:	165e9f81 	.word	0x165e9f81

08004bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e041      	b.n	8004c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd fa7c 	bl	80020f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f000 faf0 	bl	80051f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d001      	beq.n	8004c84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e046      	b.n	8004d12 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a23      	ldr	r2, [pc, #140]	@ (8004d20 <HAL_TIM_Base_Start+0xb4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d022      	beq.n	8004cdc <HAL_TIM_Base_Start+0x70>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c9e:	d01d      	beq.n	8004cdc <HAL_TIM_Base_Start+0x70>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d24 <HAL_TIM_Base_Start+0xb8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d018      	beq.n	8004cdc <HAL_TIM_Base_Start+0x70>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1e      	ldr	r2, [pc, #120]	@ (8004d28 <HAL_TIM_Base_Start+0xbc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <HAL_TIM_Base_Start+0x70>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d2c <HAL_TIM_Base_Start+0xc0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_TIM_Base_Start+0x70>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d30 <HAL_TIM_Base_Start+0xc4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIM_Base_Start+0x70>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a19      	ldr	r2, [pc, #100]	@ (8004d34 <HAL_TIM_Base_Start+0xc8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIM_Base_Start+0x70>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a18      	ldr	r2, [pc, #96]	@ (8004d38 <HAL_TIM_Base_Start+0xcc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d111      	bne.n	8004d00 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d010      	beq.n	8004d10 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	e007      	b.n	8004d10 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40010400 	.word	0x40010400
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40001800 	.word	0x40001800

08004d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04e      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a23      	ldr	r2, [pc, #140]	@ (8004e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d022      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7e:	d01d      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d111      	bne.n	8004de0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d010      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	e007      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40010400 	.word	0x40010400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40001800 	.word	0x40001800

08004e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d020      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01b      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0202 	mvn.w	r2, #2
 8004e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f9a3 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f995 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f9a6 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d020      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01b      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0204 	mvn.w	r2, #4
 8004e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f97d 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004eb8:	e005      	b.n	8004ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f96f 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f980 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d020      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01b      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0208 	mvn.w	r2, #8
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f957 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f949 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f95a 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0210 	mvn.w	r2, #16
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f931 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f923 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f934 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0201 	mvn.w	r2, #1
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f901 	bl	800518a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fae8 	bl	800557c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f905 	bl	80051da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0220 	mvn.w	r2, #32
 8004fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 faba 	bl	8005568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_TIM_ConfigClockSource+0x1c>
 8005014:	2302      	movs	r3, #2
 8005016:	e0b4      	b.n	8005182 <HAL_TIM_ConfigClockSource+0x186>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800503e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005050:	d03e      	beq.n	80050d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005056:	f200 8087 	bhi.w	8005168 <HAL_TIM_ConfigClockSource+0x16c>
 800505a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505e:	f000 8086 	beq.w	800516e <HAL_TIM_ConfigClockSource+0x172>
 8005062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005066:	d87f      	bhi.n	8005168 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b70      	cmp	r3, #112	@ 0x70
 800506a:	d01a      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0xa6>
 800506c:	2b70      	cmp	r3, #112	@ 0x70
 800506e:	d87b      	bhi.n	8005168 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b60      	cmp	r3, #96	@ 0x60
 8005072:	d050      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x11a>
 8005074:	2b60      	cmp	r3, #96	@ 0x60
 8005076:	d877      	bhi.n	8005168 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b50      	cmp	r3, #80	@ 0x50
 800507a:	d03c      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0xfa>
 800507c:	2b50      	cmp	r3, #80	@ 0x50
 800507e:	d873      	bhi.n	8005168 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	d058      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x13a>
 8005084:	2b40      	cmp	r3, #64	@ 0x40
 8005086:	d86f      	bhi.n	8005168 <HAL_TIM_ConfigClockSource+0x16c>
 8005088:	2b30      	cmp	r3, #48	@ 0x30
 800508a:	d064      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0x15a>
 800508c:	2b30      	cmp	r3, #48	@ 0x30
 800508e:	d86b      	bhi.n	8005168 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b20      	cmp	r3, #32
 8005092:	d060      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0x15a>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d867      	bhi.n	8005168 <HAL_TIM_ConfigClockSource+0x16c>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d05c      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0x15a>
 800509c:	2b10      	cmp	r3, #16
 800509e:	d05a      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0x15a>
 80050a0:	e062      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050b2:	f000 f9bd 	bl	8005430 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	609a      	str	r2, [r3, #8]
      break;
 80050ce:	e04f      	b.n	8005170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050e0:	f000 f9a6 	bl	8005430 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050f2:	609a      	str	r2, [r3, #8]
      break;
 80050f4:	e03c      	b.n	8005170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	461a      	mov	r2, r3
 8005104:	f000 f91a 	bl	800533c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2150      	movs	r1, #80	@ 0x50
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f973 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005114:	e02c      	b.n	8005170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005122:	461a      	mov	r2, r3
 8005124:	f000 f939 	bl	800539a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2160      	movs	r1, #96	@ 0x60
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f963 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005134:	e01c      	b.n	8005170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005142:	461a      	mov	r2, r3
 8005144:	f000 f8fa 	bl	800533c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2140      	movs	r1, #64	@ 0x40
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f953 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005154:	e00c      	b.n	8005170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f000 f94a 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005166:	e003      	b.n	8005170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
      break;
 800516c:	e000      	b.n	8005170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800516e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a43      	ldr	r2, [pc, #268]	@ (8005310 <TIM_Base_SetConfig+0x120>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520e:	d00f      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a40      	ldr	r2, [pc, #256]	@ (8005314 <TIM_Base_SetConfig+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3f      	ldr	r2, [pc, #252]	@ (8005318 <TIM_Base_SetConfig+0x128>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a3e      	ldr	r2, [pc, #248]	@ (800531c <TIM_Base_SetConfig+0x12c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a3d      	ldr	r2, [pc, #244]	@ (8005320 <TIM_Base_SetConfig+0x130>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d108      	bne.n	8005242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a32      	ldr	r2, [pc, #200]	@ (8005310 <TIM_Base_SetConfig+0x120>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d02b      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005250:	d027      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2f      	ldr	r2, [pc, #188]	@ (8005314 <TIM_Base_SetConfig+0x124>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d023      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2e      	ldr	r2, [pc, #184]	@ (8005318 <TIM_Base_SetConfig+0x128>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01f      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2d      	ldr	r2, [pc, #180]	@ (800531c <TIM_Base_SetConfig+0x12c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01b      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2c      	ldr	r2, [pc, #176]	@ (8005320 <TIM_Base_SetConfig+0x130>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d017      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2b      	ldr	r2, [pc, #172]	@ (8005324 <TIM_Base_SetConfig+0x134>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2a      	ldr	r2, [pc, #168]	@ (8005328 <TIM_Base_SetConfig+0x138>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00f      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a29      	ldr	r2, [pc, #164]	@ (800532c <TIM_Base_SetConfig+0x13c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00b      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a28      	ldr	r2, [pc, #160]	@ (8005330 <TIM_Base_SetConfig+0x140>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d007      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a27      	ldr	r2, [pc, #156]	@ (8005334 <TIM_Base_SetConfig+0x144>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d003      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a26      	ldr	r2, [pc, #152]	@ (8005338 <TIM_Base_SetConfig+0x148>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d108      	bne.n	80052b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005310 <TIM_Base_SetConfig+0x120>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_Base_SetConfig+0xf2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a10      	ldr	r2, [pc, #64]	@ (8005320 <TIM_Base_SetConfig+0x130>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d103      	bne.n	80052ea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f043 0204 	orr.w	r2, r3, #4
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	601a      	str	r2, [r3, #0]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40010000 	.word	0x40010000
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40010400 	.word	0x40010400
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800
 8005330:	40001800 	.word	0x40001800
 8005334:	40001c00 	.word	0x40001c00
 8005338:	40002000 	.word	0x40002000

0800533c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0201 	bic.w	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f023 030a 	bic.w	r3, r3, #10
 8005378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f023 0210 	bic.w	r2, r3, #16
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	031b      	lsls	r3, r3, #12
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	f043 0307 	orr.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800544a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	021a      	lsls	r2, r3, #8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	431a      	orrs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e05a      	b.n	800553e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a21      	ldr	r2, [pc, #132]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d4:	d01d      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a18      	ldr	r2, [pc, #96]	@ (800555c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a17      	ldr	r2, [pc, #92]	@ (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a15      	ldr	r2, [pc, #84]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d10c      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4313      	orrs	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40001800 	.word	0x40001800

08005568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <memset>:
 8005590:	4402      	add	r2, r0
 8005592:	4603      	mov	r3, r0
 8005594:	4293      	cmp	r3, r2
 8005596:	d100      	bne.n	800559a <memset+0xa>
 8005598:	4770      	bx	lr
 800559a:	f803 1b01 	strb.w	r1, [r3], #1
 800559e:	e7f9      	b.n	8005594 <memset+0x4>

080055a0 <__libc_init_array>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	4d0d      	ldr	r5, [pc, #52]	@ (80055d8 <__libc_init_array+0x38>)
 80055a4:	4c0d      	ldr	r4, [pc, #52]	@ (80055dc <__libc_init_array+0x3c>)
 80055a6:	1b64      	subs	r4, r4, r5
 80055a8:	10a4      	asrs	r4, r4, #2
 80055aa:	2600      	movs	r6, #0
 80055ac:	42a6      	cmp	r6, r4
 80055ae:	d109      	bne.n	80055c4 <__libc_init_array+0x24>
 80055b0:	4d0b      	ldr	r5, [pc, #44]	@ (80055e0 <__libc_init_array+0x40>)
 80055b2:	4c0c      	ldr	r4, [pc, #48]	@ (80055e4 <__libc_init_array+0x44>)
 80055b4:	f000 f818 	bl	80055e8 <_init>
 80055b8:	1b64      	subs	r4, r4, r5
 80055ba:	10a4      	asrs	r4, r4, #2
 80055bc:	2600      	movs	r6, #0
 80055be:	42a6      	cmp	r6, r4
 80055c0:	d105      	bne.n	80055ce <__libc_init_array+0x2e>
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c8:	4798      	blx	r3
 80055ca:	3601      	adds	r6, #1
 80055cc:	e7ee      	b.n	80055ac <__libc_init_array+0xc>
 80055ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d2:	4798      	blx	r3
 80055d4:	3601      	adds	r6, #1
 80055d6:	e7f2      	b.n	80055be <__libc_init_array+0x1e>
 80055d8:	08005618 	.word	0x08005618
 80055dc:	08005618 	.word	0x08005618
 80055e0:	08005618 	.word	0x08005618
 80055e4:	0800561c 	.word	0x0800561c

080055e8 <_init>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr

080055f4 <_fini>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr
