
DriveMoteurC10_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005258  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800541c  0800541c  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800542c  0800542c  0000704c  2**0
                  CONTENTS
  4 .ARM          00000008  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005434  08005434  0000704c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005434  08005434  00006434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005438  08005438  00006438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800543c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000004c  08005488  0000704c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005488  00007364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f240  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b4  00000000  00000000  000162bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00018670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bad  00000000  00000000  00019578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022830  00000000  00000000  0001a125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010480  00000000  00000000  0003c955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4104  00000000  00000000  0004cdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120ed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd0  00000000  00000000  00120f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00124eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000004c 	.word	0x2000004c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005404 	.word	0x08005404

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000050 	.word	0x20000050
 8000200:	08005404 	.word	0x08005404

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ExecuteStateMachine>:
uint8_t timer50ms_flag = 0;
uint8_t timer250ms_counter = 0;
uint8_t timer500ms_counter = 0;

void ExecuteStateMachine()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	// Check timers
	if (timer500ms_counter >= 10)
 80004f8:	4b4e      	ldr	r3, [pc, #312]	@ (8000634 <ExecuteStateMachine+0x140>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b09      	cmp	r3, #9
 80004fe:	d902      	bls.n	8000506 <ExecuteStateMachine+0x12>
	{

		timer500ms_counter = 0;
 8000500:	4b4c      	ldr	r3, [pc, #304]	@ (8000634 <ExecuteStateMachine+0x140>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);

		printf("Echo SPI : %02X %02X\n", rx[0], rx[1]);
		*/
	}
	if (timer50ms_flag)
 8000506:	4b4c      	ldr	r3, [pc, #304]	@ (8000638 <ExecuteStateMachine+0x144>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d01a      	beq.n	8000544 <ExecuteStateMachine+0x50>
	{
		timer50ms_flag = 0;
 800050e:	4b4a      	ldr	r3, [pc, #296]	@ (8000638 <ExecuteStateMachine+0x144>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
		timer250ms_counter++;
 8000514:	4b49      	ldr	r3, [pc, #292]	@ (800063c <ExecuteStateMachine+0x148>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b47      	ldr	r3, [pc, #284]	@ (800063c <ExecuteStateMachine+0x148>)
 800051e:	701a      	strb	r2, [r3, #0]
		timer500ms_counter++;
 8000520:	4b44      	ldr	r3, [pc, #272]	@ (8000634 <ExecuteStateMachine+0x140>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b42      	ldr	r3, [pc, #264]	@ (8000634 <ExecuteStateMachine+0x140>)
 800052a:	701a      	strb	r2, [r3, #0]

		flag_buttons = 1;
 800052c:	4b44      	ldr	r3, [pc, #272]	@ (8000640 <ExecuteStateMachine+0x14c>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
		flag_can_tx_send = 1;
 8000532:	4b44      	ldr	r3, [pc, #272]	@ (8000644 <ExecuteStateMachine+0x150>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
		flag_pitch_control = 1;
 8000538:	4b43      	ldr	r3, [pc, #268]	@ (8000648 <ExecuteStateMachine+0x154>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
		flag_mast_control = 1;
 800053e:	4b43      	ldr	r3, [pc, #268]	@ (800064c <ExecuteStateMachine+0x158>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
	}
	if (timer250ms_counter >= 5)
 8000544:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <ExecuteStateMachine+0x148>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b04      	cmp	r3, #4
 800054a:	d910      	bls.n	800056e <ExecuteStateMachine+0x7a>
	{
		timer250ms_counter = 0;
 800054c:	4b3b      	ldr	r3, [pc, #236]	@ (800063c <ExecuteStateMachine+0x148>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]

		//flag_can_tx_send = 1;

		flag_send_drive_pitch_config = 1;
 8000552:	4b3f      	ldr	r3, [pc, #252]	@ (8000650 <ExecuteStateMachine+0x15c>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
		flag_send_drive_mast_config = 1;
 8000558:	4b3e      	ldr	r3, [pc, #248]	@ (8000654 <ExecuteStateMachine+0x160>)
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]

		if (flag_drive_fault == 1) {
 800055e:	4b3e      	ldr	r3, [pc, #248]	@ (8000658 <ExecuteStateMachine+0x164>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d103      	bne.n	800056e <ExecuteStateMachine+0x7a>
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 8000566:	2108      	movs	r1, #8
 8000568:	483c      	ldr	r0, [pc, #240]	@ (800065c <ExecuteStateMachine+0x168>)
 800056a:	f003 f88a 	bl	8003682 <HAL_GPIO_TogglePin>
		}
	}

	// Check for ROPS or emergency stop flags
	if (b_rops)
 800056e:	4b3c      	ldr	r3, [pc, #240]	@ (8000660 <ExecuteStateMachine+0x16c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <ExecuteStateMachine+0x88>
	{
		current_state = STATE_ROPS;
 8000576:	4b3b      	ldr	r3, [pc, #236]	@ (8000664 <ExecuteStateMachine+0x170>)
 8000578:	2205      	movs	r2, #5
 800057a:	601a      	str	r2, [r3, #0]
	}
	if (b_emergency_stop)
 800057c:	4b3a      	ldr	r3, [pc, #232]	@ (8000668 <ExecuteStateMachine+0x174>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <ExecuteStateMachine+0x96>
	{
		current_state = STATE_EMERGENCY_STOP;
 8000584:	4b37      	ldr	r3, [pc, #220]	@ (8000664 <ExecuteStateMachine+0x170>)
 8000586:	2206      	movs	r2, #6
 8000588:	601a      	str	r2, [r3, #0]
	}

	switch (current_state)
 800058a:	4b36      	ldr	r3, [pc, #216]	@ (8000664 <ExecuteStateMachine+0x170>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b06      	cmp	r3, #6
 8000590:	d812      	bhi.n	80005b8 <ExecuteStateMachine+0xc4>
 8000592:	2b06      	cmp	r3, #6
 8000594:	d845      	bhi.n	8000622 <ExecuteStateMachine+0x12e>
 8000596:	a201      	add	r2, pc, #4	@ (adr r2, 800059c <ExecuteStateMachine+0xa8>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	080005bf 	.word	0x080005bf
 80005a0:	080005cb 	.word	0x080005cb
 80005a4:	080005d7 	.word	0x080005d7
 80005a8:	080005e3 	.word	0x080005e3
 80005ac:	080005ef 	.word	0x080005ef
 80005b0:	080005fb 	.word	0x080005fb
 80005b4:	08000607 	.word	0x08000607
 80005b8:	2bff      	cmp	r3, #255	@ 0xff
 80005ba:	d02a      	beq.n	8000612 <ExecuteStateMachine+0x11e>
 80005bc:	e031      	b.n	8000622 <ExecuteStateMachine+0x12e>
	{
	case STATE_INIT:
		current_state = DoStateInit();
 80005be:	f000 f855 	bl	800066c <DoStateInit>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a27      	ldr	r2, [pc, #156]	@ (8000664 <ExecuteStateMachine+0x170>)
 80005c6:	6013      	str	r3, [r2, #0]
		break;
 80005c8:	e031      	b.n	800062e <ExecuteStateMachine+0x13a>

	case STATE_ASSESS_PUSH_BUTTONS:
		current_state = DoStateAssessPushButtons();
 80005ca:	f000 f8c3 	bl	8000754 <DoStateAssessPushButtons>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a24      	ldr	r2, [pc, #144]	@ (8000664 <ExecuteStateMachine+0x170>)
 80005d2:	6013      	str	r3, [r2, #0]
		break;
 80005d4:	e02b      	b.n	800062e <ExecuteStateMachine+0x13a>

	case STATE_PITCH_CONTROL:
		current_state = DoStatePitchControl();
 80005d6:	f000 f931 	bl	800083c <DoStatePitchControl>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <ExecuteStateMachine+0x170>)
 80005de:	6013      	str	r3, [r2, #0]
		break;
 80005e0:	e025      	b.n	800062e <ExecuteStateMachine+0x13a>

	case STATE_MAST_CONTROL:
		current_state = DoStateMastControl();
 80005e2:	f000 f933 	bl	800084c <DoStateMastControl>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000664 <ExecuteStateMachine+0x170>)
 80005ea:	6013      	str	r3, [r2, #0]
		break;
 80005ec:	e01f      	b.n	800062e <ExecuteStateMachine+0x13a>

	case STATE_CAN:
		current_state = DoStateCAN();
 80005ee:	f000 f935 	bl	800085c <DoStateCAN>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <ExecuteStateMachine+0x170>)
 80005f6:	6013      	str	r3, [r2, #0]
		break;
 80005f8:	e019      	b.n	800062e <ExecuteStateMachine+0x13a>

	case STATE_ROPS:
		current_state = DoStateROPS();
 80005fa:	f000 f981 	bl	8000900 <DoStateROPS>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a18      	ldr	r2, [pc, #96]	@ (8000664 <ExecuteStateMachine+0x170>)
 8000602:	6013      	str	r3, [r2, #0]
		break;
 8000604:	e013      	b.n	800062e <ExecuteStateMachine+0x13a>

	case STATE_EMERGENCY_STOP:
		current_state = DoStateEmergencyStop();
 8000606:	f000 f9bf 	bl	8000988 <DoStateEmergencyStop>
 800060a:	4603      	mov	r3, r0
 800060c:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <ExecuteStateMachine+0x170>)
 800060e:	6013      	str	r3, [r2, #0]
		break;
 8000610:	e00d      	b.n	800062e <ExecuteStateMachine+0x13a>

	case STATE_ERROR:
		DoStateError();
 8000612:	f000 f9c9 	bl	80009a8 <DoStateError>
		// In case we exit error handler, restart the state machine
		current_state = DoStateInit();
 8000616:	f000 f829 	bl	800066c <DoStateInit>
 800061a:	4603      	mov	r3, r0
 800061c:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <ExecuteStateMachine+0x170>)
 800061e:	6013      	str	r3, [r2, #0]
		break;
 8000620:	e005      	b.n	800062e <ExecuteStateMachine+0x13a>

	default:
		current_state = DoStateInit();
 8000622:	f000 f823 	bl	800066c <DoStateInit>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <ExecuteStateMachine+0x170>)
 800062a:	6013      	str	r3, [r2, #0]
		break;
 800062c:	bf00      	nop
	};
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000032f 	.word	0x2000032f
 8000638:	2000032d 	.word	0x2000032d
 800063c:	2000032e 	.word	0x2000032e
 8000640:	2000032c 	.word	0x2000032c
 8000644:	2000029d 	.word	0x2000029d
 8000648:	2000029e 	.word	0x2000029e
 800064c:	2000029f 	.word	0x2000029f
 8000650:	200002a0 	.word	0x200002a0
 8000654:	200002a1 	.word	0x200002a1
 8000658:	2000035c 	.word	0x2000035c
 800065c:	40020c00 	.word	0x40020c00
 8000660:	20000298 	.word	0x20000298
 8000664:	200002e8 	.word	0x200002e8
 8000668:	20000299 	.word	0x20000299

0800066c <DoStateInit>:

uint32_t DoStateInit()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	b_rops = 0;
 8000670:	4b2e      	ldr	r3, [pc, #184]	@ (800072c <DoStateInit+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	b_emergency_stop = 0;
 8000676:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <DoStateInit+0xc4>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

	b_timer500ms_flag = 0;
 800067c:	4b2d      	ldr	r3, [pc, #180]	@ (8000734 <DoStateInit+0xc8>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
	b_timer50ms_flag = 0;
 8000682:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <DoStateInit+0xcc>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	flag_can_tx_send = 0;
 8000688:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <DoStateInit+0xd0>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]

	can1_recv_flag = 0;
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <DoStateInit+0xd4>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
	flag_can_tx_send = 0;
 8000694:	4b29      	ldr	r3, [pc, #164]	@ (800073c <DoStateInit+0xd0>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]

	flag_send_drive_pitch_config = 0;
 800069a:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <DoStateInit+0xd8>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	flag_send_drive_mast_config = 0;
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <DoStateInit+0xdc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]

	memset(&can_tx_data, 0, sizeof(CAN_TX_Data));
 80006a6:	221c      	movs	r2, #28
 80006a8:	2100      	movs	r1, #0
 80006aa:	4828      	ldr	r0, [pc, #160]	@ (800074c <DoStateInit+0xe0>)
 80006ac:	f004 fe7e 	bl	80053ac <memset>

	InitDrives();
 80006b0:	f000 ff2a 	bl	8001508 <InitDrives>

	// Initialize the motor control values
	motorss.motors[DRIVE1].enabled = 0;
 80006b4:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <DoStateInit+0xe4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
	motorss.motors[DRIVE1].request_enable = 0;
 80006ba:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <DoStateInit+0xe4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	705a      	strb	r2, [r3, #1]
	motorss.motors[DRIVE1].request_disable = 0;
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <DoStateInit+0xe4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	709a      	strb	r2, [r3, #2]
	motorss.motors[DRIVE1].mode = MODE_MANUAL;
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <DoStateInit+0xe4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	70da      	strb	r2, [r3, #3]
	motorss.motors[DRIVE1].auto_command = 0;
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <DoStateInit+0xe4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
	motorss.motors[DRIVE1].manual_command = 0;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <DoStateInit+0xe4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
	motorss.motors[DRIVE1].direction = DIR_STOP;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <DoStateInit+0xe4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	711a      	strb	r2, [r3, #4]
	motorss.motors[DRIVE1].prev_direction = DIR_STOP;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <DoStateInit+0xe4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	715a      	strb	r2, [r3, #5]

	motorss.motors[DRIVE2].enabled = 0;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <DoStateInit+0xe4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	741a      	strb	r2, [r3, #16]
	motorss.motors[DRIVE2].request_enable = 0;
 80006ea:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <DoStateInit+0xe4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	745a      	strb	r2, [r3, #17]
	motorss.motors[DRIVE2].request_disable = 0;
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <DoStateInit+0xe4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	749a      	strb	r2, [r3, #18]
	motorss.motors[DRIVE2].mode = MODE_MANUAL;
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <DoStateInit+0xe4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	74da      	strb	r2, [r3, #19]
	motorss.motors[DRIVE2].auto_command = 0;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <DoStateInit+0xe4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
	motorss.motors[DRIVE2].manual_command = 0;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <DoStateInit+0xe4>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
	motorss.motors[DRIVE2].direction = DIR_STOP;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <DoStateInit+0xe4>)
 800070a:	2200      	movs	r2, #0
 800070c:	751a      	strb	r2, [r3, #20]
	motorss.motors[DRIVE2].prev_direction = DIR_STOP;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <DoStateInit+0xe4>)
 8000710:	2200      	movs	r2, #0
 8000712:	755a      	strb	r2, [r3, #21]
	// HAL_GPIO_WritePin(TEST_BIN2_GPIO_Port, TEST_BIN2_Pin, GPIO_PIN_SET);

	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);

	motorss.motors[DRIVE1].enabled = 0;
 8000714:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <DoStateInit+0xe4>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

	//SetDirection(DRIVE_PITCH, motors.pitch_motor.manual_direction);
	//delay_us(10);
	DisableDrive(DRIVE1);
 800071a:	2000      	movs	r0, #0
 800071c:	f001 f9ae 	bl	8001a7c <DisableDrive>
	//delay_us(10);
	DisableDrive(DRIVE2);
 8000720:	2001      	movs	r0, #1
 8000722:	f001 f9ab 	bl	8001a7c <DisableDrive>

	//delay_us(10);
	//ResetStatusRegisters(DRIVE_PITCH);
	//delay_us(10);

	return STATE_ASSESS_PUSH_BUTTONS;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000298 	.word	0x20000298
 8000730:	20000299 	.word	0x20000299
 8000734:	2000029a 	.word	0x2000029a
 8000738:	2000029b 	.word	0x2000029b
 800073c:	2000029d 	.word	0x2000029d
 8000740:	200002b0 	.word	0x200002b0
 8000744:	200002a0 	.word	0x200002a0
 8000748:	200002a1 	.word	0x200002a1
 800074c:	200002ec 	.word	0x200002ec
 8000750:	20000308 	.word	0x20000308

08000754 <DoStateAssessPushButtons>:

uint32_t DoStateAssessPushButtons()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	if (flag_buttons == 1) {
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <DoStateAssessPushButtons+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d122      	bne.n	80007a6 <DoStateAssessPushButtons+0x52>
		flag_buttons = 0;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <DoStateAssessPushButtons+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) == GPIO_PIN_RESET) {
 8000766:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076a:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <DoStateAssessPushButtons+0x5c>)
 800076c:	f002 ff58 	bl	8003620 <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10c      	bne.n	8000790 <DoStateAssessPushButtons+0x3c>
			speed_stepper_motor_pitch = 100;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <DoStateAssessPushButtons+0x60>)
 8000778:	2264      	movs	r2, #100	@ 0x64
 800077a:	601a      	str	r2, [r3, #0]
			motorss.motors[DRIVE2].request_enable = 1;
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <DoStateAssessPushButtons+0x64>)
 800077e:	2201      	movs	r2, #1
 8000780:	745a      	strb	r2, [r3, #17]
			motorss.motors[DRIVE2].direction = DIR_LEFT;
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <DoStateAssessPushButtons+0x64>)
 8000784:	2201      	movs	r2, #1
 8000786:	751a      	strb	r2, [r3, #20]
			motor_pitch_on = 1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <DoStateAssessPushButtons+0x68>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e00a      	b.n	80007a6 <DoStateAssessPushButtons+0x52>

		}
		else if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin) == GPIO_PIN_RESET) {
 8000790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000794:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <DoStateAssessPushButtons+0x5c>)
 8000796:	f002 ff43 	bl	8003620 <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <DoStateAssessPushButtons+0x52>
			ResetDrive(DRIVE2);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f001 f9af 	bl	8001b04 <ResetDrive>
				speed_stepper_motor_pitch--;
			}
		}*/
	}

	return STATE_PITCH_CONTROL;
 80007a6:	2302      	movs	r3, #2
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000032c 	.word	0x2000032c
 80007b0:	40021000 	.word	0x40021000
 80007b4:	200002a4 	.word	0x200002a4
 80007b8:	20000308 	.word	0x20000308
 80007bc:	20000330 	.word	0x20000330

080007c0 <CheckChangeDirectionMotor>:

	return 0; // Indicates nothing changed
}

uint8_t CheckChangeDirectionMotor(DRIVE_MOTOR motor)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	if (motor != DRIVE1 && motor != DRIVE2)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <CheckChangeDirectionMotor+0x1a>
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d001      	beq.n	80007da <CheckChangeDirectionMotor+0x1a>
		return 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e029      	b.n	800082e <CheckChangeDirectionMotor+0x6e>


	// Check for change of direction
	if (motorss.motors[motor].direction != motorss.motors[motor].prev_direction)
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <CheckChangeDirectionMotor+0x78>)
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	4413      	add	r3, r2
 80007e2:	3304      	adds	r3, #4
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4913      	ldr	r1, [pc, #76]	@ (8000838 <CheckChangeDirectionMotor+0x78>)
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	440b      	add	r3, r1
 80007ee:	3305      	adds	r3, #5
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d01a      	beq.n	800082c <CheckChangeDirectionMotor+0x6c>
	{
		SetDirection(motor, motorss.motors[motor].direction);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000838 <CheckChangeDirectionMotor+0x78>)
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	4413      	add	r3, r2
 80007fe:	3304      	adds	r3, #4
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f001 f9b3 	bl	8001b74 <SetDirection>
		//delay_us(20);

		motorss.motors[motor].prev_direction = motorss.motors[motor].direction;
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4909      	ldr	r1, [pc, #36]	@ (8000838 <CheckChangeDirectionMotor+0x78>)
 8000814:	0112      	lsls	r2, r2, #4
 8000816:	440a      	add	r2, r1
 8000818:	3204      	adds	r2, #4
 800081a:	7811      	ldrb	r1, [r2, #0]
 800081c:	4a06      	ldr	r2, [pc, #24]	@ (8000838 <CheckChangeDirectionMotor+0x78>)
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	4413      	add	r3, r2
 8000822:	3305      	adds	r3, #5
 8000824:	460a      	mov	r2, r1
 8000826:	701a      	strb	r2, [r3, #0]

		return 1; // Indicates direction changed
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <CheckChangeDirectionMotor+0x6e>
	}

	return 0; // Indicates direction did not change
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000308 	.word	0x20000308

0800083c <DoStatePitchControl>:


uint8_t motor_pitch_on = 0;
uint32_t DoStatePitchControl()
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	return STATE_MAST_CONTROL;
 8000840:	2303      	movs	r3, #3
	{
		ResetStatusRegisters(DRIVE2); //nul
	}

	return STATE_MAST_CONTROL;
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DoStateMastControl>:

uint32_t DoStateMastControl()
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	return STATE_CAN;
 8000850:	2304      	movs	r3, #4
	{
		ResetStatusRegisters(DRIVE1); //nul
	}

	return STATE_CAN;
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DoStateCAN>:

uint32_t DoStateCAN()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
	if (flag_can_tx_send) // Sent every 50ms
 8000862:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <DoStateCAN+0x94>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d03d      	beq.n	80008e6 <DoStateCAN+0x8a>
	{
		flag_can_tx_send = 0;
 800086a:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <DoStateCAN+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]


		uint32_t pitch_mode = can_tx_data.pitch_motor_mode_feedback;
 8000870:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <DoStateCAN+0x98>)
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	60fb      	str	r3, [r7, #12]
		uint32_t pitch_mode_msg = ((pitch_mode == MODE_MANUAL) ? MOTOR_MODE_MANUAL : MOTOR_MODE_AUTOMATIC);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <DoStateCAN+0x24>
 800087c:	2300      	movs	r3, #0
 800087e:	e000      	b.n	8000882 <DoStateCAN+0x26>
 8000880:	2302      	movs	r3, #2
 8000882:	607b      	str	r3, [r7, #4]
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_PITCH_MODE, (uint8_t*)&pitch_mode_msg, 4, 0);
 8000884:	1d39      	adds	r1, r7, #4
 8000886:	2300      	movs	r3, #0
 8000888:	2204      	movs	r2, #4
 800088a:	2021      	movs	r0, #33	@ 0x21
 800088c:	f000 f9d6 	bl	8000c3c <TransmitCAN>

		uint32_t mast_mode = can_tx_data.mast_motor_mode_feedback;
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <DoStateCAN+0x98>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	60bb      	str	r3, [r7, #8]
		uint32_t mast_mode_msg = ((mast_mode == MODE_MANUAL) ? MOTOR_MODE_MANUAL : MOTOR_MODE_AUTOMATIC);
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d101      	bne.n	80008a0 <DoStateCAN+0x44>
 800089c:	2300      	movs	r3, #0
 800089e:	e000      	b.n	80008a2 <DoStateCAN+0x46>
 80008a0:	2302      	movs	r3, #2
 80008a2:	603b      	str	r3, [r7, #0]
		TransmitCAN(CAN_ID_STATE_DRIVEMOTOR_MAST_MODE, (uint8_t*)&mast_mode_msg, 4, 0);
 80008a4:	4639      	mov	r1, r7
 80008a6:	2300      	movs	r3, #0
 80008a8:	2204      	movs	r2, #4
 80008aa:	2022      	movs	r0, #34	@ 0x22
 80008ac:	f000 f9c6 	bl	8000c3c <TransmitCAN>

		static float test = 0;
		static float debug_log_4_value = 0;
		debug_log_4_value = debug_log_4_value + test;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <DoStateCAN+0x9c>)
 80008b2:	ed93 7a00 	vldr	s14, [r3]
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <DoStateCAN+0xa0>)
 80008b8:	edd3 7a00 	vldr	s15, [r3]
 80008bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <DoStateCAN+0x9c>)
 80008c2:	edc3 7a00 	vstr	s15, [r3]
		TransmitCAN(CAN_ID_MARIO_VAL_DEBUG_LOG_4, (uint8_t*)&debug_log_4_value, 4, 0);
 80008c6:	2300      	movs	r3, #0
 80008c8:	2204      	movs	r2, #4
 80008ca:	490b      	ldr	r1, [pc, #44]	@ (80008f8 <DoStateCAN+0x9c>)
 80008cc:	204f      	movs	r0, #79	@ 0x4f
 80008ce:	f000 f9b5 	bl	8000c3c <TransmitCAN>
		test++;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <DoStateCAN+0xa0>)
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80008dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <DoStateCAN+0xa0>)
 80008e2:	edc3 7a00 	vstr	s15, [r3]
		*/

	}

	// return STATE_PITCH_CONTROL;
	return STATE_ASSESS_PUSH_BUTTONS;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000029d 	.word	0x2000029d
 80008f4:	200002ec 	.word	0x200002ec
 80008f8:	20000334 	.word	0x20000334
 80008fc:	20000338 	.word	0x20000338

08000900 <DoStateROPS>:

uint32_t DoStateROPS()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	while (b_rops)
 8000904:	e029      	b.n	800095a <DoStateROPS+0x5a>
	{
		//delay_us(10);

		// Check timers
		if (b_timer500ms_flag)
 8000906:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <DoStateROPS+0x68>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d006      	beq.n	800091c <DoStateROPS+0x1c>
		{
			b_timer500ms_flag = 0;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <DoStateROPS+0x68>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 8000914:	2108      	movs	r1, #8
 8000916:	4815      	ldr	r0, [pc, #84]	@ (800096c <DoStateROPS+0x6c>)
 8000918:	f002 feb3 	bl	8003682 <HAL_GPIO_TogglePin>
		}
		if (b_timer50ms_flag)
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <DoStateROPS+0x70>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d008      	beq.n	8000936 <DoStateROPS+0x36>
		{
			b_timer50ms_flag = 0;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <DoStateROPS+0x70>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
			flag_pitch_control = 1;
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <DoStateROPS+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
			flag_mast_control = 1;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <DoStateROPS+0x78>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
			// flag_can_tx_send = 1;
		}
		if (b_timer250ms_flag)
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <DoStateROPS+0x7c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d005      	beq.n	800094a <DoStateROPS+0x4a>
		{
			b_timer250ms_flag = 0;
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <DoStateROPS+0x7c>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]

			flag_can_tx_send = 1;
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <DoStateROPS+0x80>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
		// Safety check, if we have a command from MARIO, make sure drive is enabled
		//if (motors.motors[DRIVE_PITCH].auto_command && !motors.motors[DRIVE_PITCH].enabled)
		//	motors.motors[DRIVE_PITCH].request_enable = 1;
		//motors.motors[DRIVE_PITCH].mode = MODE_AUTOMATIC;

		DoStateAssessPushButtons();
 800094a:	f7ff ff03 	bl	8000754 <DoStateAssessPushButtons>
		DoStatePitchControl();
 800094e:	f7ff ff75 	bl	800083c <DoStatePitchControl>
		DoStateMastControl();
 8000952:	f7ff ff7b 	bl	800084c <DoStateMastControl>
		DoStateCAN();
 8000956:	f7ff ff81 	bl	800085c <DoStateCAN>
	while (b_rops)
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <DoStateROPS+0x84>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1d1      	bne.n	8000906 <DoStateROPS+0x6>
	}

	return STATE_PITCH_CONTROL;
 8000962:	2302      	movs	r3, #2
}
 8000964:	4618      	mov	r0, r3
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000029a 	.word	0x2000029a
 800096c:	40020c00 	.word	0x40020c00
 8000970:	2000029b 	.word	0x2000029b
 8000974:	2000029e 	.word	0x2000029e
 8000978:	2000029f 	.word	0x2000029f
 800097c:	2000029c 	.word	0x2000029c
 8000980:	2000029d 	.word	0x2000029d
 8000984:	20000298 	.word	0x20000298

08000988 <DoStateEmergencyStop>:

uint32_t DoStateEmergencyStop()
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
	while (b_emergency_stop)
 800098c:	bf00      	nop
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <DoStateEmergencyStop+0x1c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1fb      	bne.n	800098e <DoStateEmergencyStop+0x6>
	{

	}

	return STATE_PITCH_CONTROL;
 8000996:	2302      	movs	r3, #2
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000299 	.word	0x20000299

080009a8 <DoStateError>:

void DoStateError()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	Error_Handler();
 80009ac:	f000 fda6 	bl	80014fc <Error_Handler>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SetMotorMode>:

//uint16_t test_debug_log_can_message[200] = {0};
//uint8_t test_debug_log_can_message_counter = 0;
void SetMotorMode(DRIVE_MOTOR motor, uint32_t can_value)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	603b      	str	r3, [r7, #0]
	} else {
		test_debug_log_can_message_counter++;
	}
	test_debug_log_can_message[test_debug_log_can_message_counter] = can_value; */

	uint32_t motor_mode = MODE_MANUAL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_MODE_MANUAL) {
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <SetMotorMode+0x22>
		motor_mode = MODE_MANUAL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e004      	b.n	80009e0 <SetMotorMode+0x2c>
	}
	else if (can_value == MOTOR_MODE_AUTOMATIC) {
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d10b      	bne.n	80009f4 <SetMotorMode+0x40>
		motor_mode = MODE_AUTOMATIC;
 80009dc:	2301      	movs	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
	}
	else {
		return; // Do not set motor mode if mode value from CAN is invalid
	}

	motorss.motors[motor].mode = motor_mode;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	b2d1      	uxtb	r1, r2
 80009e6:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <SetMotorMode+0x4c>)
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	4413      	add	r3, r2
 80009ec:	3303      	adds	r3, #3
 80009ee:	460a      	mov	r2, r1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e000      	b.n	80009f6 <SetMotorMode+0x42>
		return; // Do not set motor mode if mode value from CAN is invalid
 80009f4:	bf00      	nop
}
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	20000308 	.word	0x20000308

08000a04 <SetMotorDirection>:


void SetMotorDirection(DRIVE_MOTOR motor, int32_t can_value)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
	can_value = (can_value & 0xFF); //SUPER IMPORTANT
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	603b      	str	r3, [r7, #0]
	} else {
		test_debug_log_can_message_counter++;
	}
	test_debug_log_can_message[test_debug_log_can_message_counter] = can_value;*/

	uint32_t motor_direction = DIR_INVALID;
 8000a16:	2303      	movs	r3, #3
 8000a18:	60fb      	str	r3, [r7, #12]
	if (can_value == MOTOR_DIRECTION_STOP)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d102      	bne.n	8000a26 <SetMotorDirection+0x22>
		motor_direction = DIR_STOP;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e00a      	b.n	8000a3c <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_LEFT)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <SetMotorDirection+0x2e>
		motor_direction = DIR_LEFT;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	e004      	b.n	8000a3c <SetMotorDirection+0x38>
	else if (can_value == MOTOR_DIRECTION_RIGHT)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d10f      	bne.n	8000a58 <SetMotorDirection+0x54>
		motor_direction = DIR_RIGHT;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
	else
		return;

	motorss.motors[motor].direction = motor_direction;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	b2d1      	uxtb	r1, r2
 8000a42:	4a07      	ldr	r2, [pc, #28]	@ (8000a60 <SetMotorDirection+0x5c>)
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	4413      	add	r3, r2
 8000a48:	3304      	adds	r3, #4
 8000a4a:	460a      	mov	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]

	// Check change of direction
	CheckChangeDirectionMotor(motor);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff feb5 	bl	80007c0 <CheckChangeDirectionMotor>
 8000a56:	e000      	b.n	8000a5a <SetMotorDirection+0x56>
		return;
 8000a58:	bf00      	nop
}
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000308 	.word	0x20000308

08000a64 <ProcessCanMessage>:

void ProcessCanMessage()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin) == GPIO_PIN_RESET) {
 8000a6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a6e:	483c      	ldr	r0, [pc, #240]	@ (8000b60 <ProcessCanMessage+0xfc>)
 8000a70:	f002 fdd6 	bl	8003620 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d06b      	beq.n	8000b52 <ProcessCanMessage+0xee>
		return 0;
	}
	if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin) == GPIO_PIN_RESET) {
 8000a7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a7e:	4838      	ldr	r0, [pc, #224]	@ (8000b60 <ProcessCanMessage+0xfc>)
 8000a80:	f002 fdce 	bl	8003620 <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d065      	beq.n	8000b56 <ProcessCanMessage+0xf2>
	} BytesToType;
	static BytesToType bytesToType;

	// Technically CAN data can be 8 bytes but we only send 4-bytes data to the motor driver
	// uint32_t upper_can_data = rxData[4] | (rxData[5] << 8) | (rxData[6] << 16) | (rxData[7] << 24);
	uint32_t can_data = rxData[0] | (rxData[1] << 8) | (rxData[2] << 16) | (rxData[3] << 24);
 8000a8a:	4b36      	ldr	r3, [pc, #216]	@ (8000b64 <ProcessCanMessage+0x100>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b34      	ldr	r3, [pc, #208]	@ (8000b64 <ProcessCanMessage+0x100>)
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	431a      	orrs	r2, r3
 8000a98:	4b32      	ldr	r3, [pc, #200]	@ (8000b64 <ProcessCanMessage+0x100>)
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	041b      	lsls	r3, r3, #16
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	4b30      	ldr	r3, [pc, #192]	@ (8000b64 <ProcessCanMessage+0x100>)
 8000aa2:	78db      	ldrb	r3, [r3, #3]
 8000aa4:	061b      	lsls	r3, r3, #24
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	607b      	str	r3, [r7, #4]

	//
	// Motor Modes
	//
	// TODO: (Marc) Should one have precedence over the other ? What if steering wheel sets mode that is then overwritten by mario ?
	if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_MODE)
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000b68 <ProcessCanMessage+0x104>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b11      	cmp	r3, #17
 8000ab0:	d104      	bne.n	8000abc <ProcessCanMessage+0x58>
	{
		SetMotorMode(DRIVE2, can_data);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff ff7d 	bl	80009b4 <SetMotorMode>
 8000aba:	e04d      	b.n	8000b58 <ProcessCanMessage+0xf4>
	}
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_MODE)
 8000abc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <ProcessCanMessage+0x104>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b12      	cmp	r3, #18
 8000ac2:	d104      	bne.n	8000ace <ProcessCanMessage+0x6a>
	{
		SetMotorMode(DRIVE1, can_data);
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff ff74 	bl	80009b4 <SetMotorMode>
 8000acc:	e044      	b.n	8000b58 <ProcessCanMessage+0xf4>
	}
	//
	// MARIO Manual motor commands
	//
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_DIRECTION)
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <ProcessCanMessage+0x104>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b13      	cmp	r3, #19
 8000ad4:	d110      	bne.n	8000af8 <ProcessCanMessage+0x94>
	{
		SetMotorDirection(DRIVE1, can_data);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff ff92 	bl	8000a04 <SetMotorDirection>

		if (motorss.motors[DRIVE1].direction != DIR_STOP) {
 8000ae0:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <ProcessCanMessage+0x108>)
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <ProcessCanMessage+0x8c>
			motor_pitch_on = 1;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <ProcessCanMessage+0x10c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	e033      	b.n	8000b58 <ProcessCanMessage+0xf4>
		} else {
			motor_pitch_on = 0;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <ProcessCanMessage+0x10c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e02f      	b.n	8000b58 <ProcessCanMessage+0xf4>
		}
	}
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_MAST_DIRECTION)
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <ProcessCanMessage+0x104>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b14      	cmp	r3, #20
 8000afe:	d105      	bne.n	8000b0c <ProcessCanMessage+0xa8>
	{
		SetMotorDirection(DRIVE1, can_data);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4619      	mov	r1, r3
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff ff7d 	bl	8000a04 <SetMotorDirection>
 8000b0a:	e025      	b.n	8000b58 <ProcessCanMessage+0xf4>
	}
	//
	// MARIO Automatic motor commands
	//
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_PITCH_SPEED)
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <ProcessCanMessage+0x104>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b15      	cmp	r3, #21
 8000b12:	d106      	bne.n	8000b22 <ProcessCanMessage+0xbe>
	{
		can_data = (can_data & 0xFF); //SUPER IMPORTANT
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	607b      	str	r3, [r7, #4]

		//speed_stepper_motor_pitch = 100;
		speed_stepper_motor_pitch = can_data;
 8000b1a:	4a16      	ldr	r2, [pc, #88]	@ (8000b74 <ProcessCanMessage+0x110>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e01a      	b.n	8000b58 <ProcessCanMessage+0xf4>
		motors.pitch_motor.request_disable = 1;
		motors.mast_motor.request_disable = 1;

		DoStateInit();
	}*/
	else if (pRxHeader.StdId == CAN_ID_CMD_MARIO_ROPS)
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <ProcessCanMessage+0x104>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d116      	bne.n	8000b58 <ProcessCanMessage+0xf4>
	{
		uint8_t rops_data = (can_data & 0xFF);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	70fb      	strb	r3, [r7, #3]
		if (rops_data == ROPS_ENABLE)
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d103      	bne.n	8000b3c <ProcessCanMessage+0xd8>
			b_rops = 1;
 8000b34:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <ProcessCanMessage+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e00d      	b.n	8000b58 <ProcessCanMessage+0xf4>
		else if (rops_data == ROPS_DISABLE)
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <ProcessCanMessage+0xe6>
			b_rops = 0;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <ProcessCanMessage+0x114>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e006      	b.n	8000b58 <ProcessCanMessage+0xf4>
		else
		{
			// Unknown value for ROPS command, assume cmd was to activate ROPS
			b_rops = 1;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <ProcessCanMessage+0x114>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e002      	b.n	8000b58 <ProcessCanMessage+0xf4>
		return 0;
 8000b52:	bf00      	nop
 8000b54:	e000      	b.n	8000b58 <ProcessCanMessage+0xf4>
		return 0;
 8000b56:	bf00      	nop
	}
	else
	{
		// Unknown CAN ID
	}
}
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	200002a8 	.word	0x200002a8
 8000b68:	200002cc 	.word	0x200002cc
 8000b6c:	20000308 	.word	0x20000308
 8000b70:	20000330 	.word	0x20000330
 8000b74:	200002a4 	.word	0x200002a4
 8000b78:	20000298 	.word	0x20000298

08000b7c <CAN_ReceiveFifoCallback>:

void CAN_ReceiveFifoCallback(CAN_HandleTypeDef* hcan, uint32_t fifo)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]

	uint32_t num_messages = HAL_CAN_GetRxFifoFillLevel(hcan, fifo);
 8000b86:	6839      	ldr	r1, [r7, #0]
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f002 f84e 	bl	8002c2a <HAL_CAN_GetRxFifoFillLevel>
 8000b8e:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < num_messages; ++i)
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	e00f      	b.n	8000bb6 <CAN_ReceiveFifoCallback+0x3a>
	{
		if (HAL_CAN_GetRxMessage(hcan, fifo, &pRxHeader, rxData) != HAL_OK)
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <CAN_ReceiveFifoCallback+0x4c>)
 8000b98:	4a0c      	ldr	r2, [pc, #48]	@ (8000bcc <CAN_ReceiveFifoCallback+0x50>)
 8000b9a:	6839      	ldr	r1, [r7, #0]
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f001 ff22 	bl	80029e6 <HAL_CAN_GetRxMessage>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <CAN_ReceiveFifoCallback+0x30>
		{
			Error_Handler();
 8000ba8:	f000 fca8 	bl	80014fc <Error_Handler>
		}

		ProcessCanMessage();
 8000bac:	f7ff ff5a 	bl	8000a64 <ProcessCanMessage>
	for (int i = 0; i < num_messages; ++i)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d8eb      	bhi.n	8000b96 <CAN_ReceiveFifoCallback+0x1a>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200002a8 	.word	0x200002a8
 8000bcc:	200002cc 	.word	0x200002cc

08000bd0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffce 	bl	8000b7c <CAN_ReceiveFifoCallback>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
	CAN_ReceiveFifoCallback(hcan, CAN_RX_FIFO1);
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffc2 	bl	8000b7c <CAN_ReceiveFifoCallback>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_CAN_RxFifo0FullCallback>:


// CAN error callbacks
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef* hcan)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <HAL_CAN_RxFifo1FullCallback>:

void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef* hcan)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	// TODO: (Marc) Error detection/handling
	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <TransmitCAN>:


HAL_StatusTypeDef TransmitCAN(uint32_t id, uint8_t* buf, uint8_t size, uint8_t with_priority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	71bb      	strb	r3, [r7, #6]
	// CAN_TxHeaderTypeDef msg;
	pTxHeader.StdId = id;
 8000c52:	4a27      	ldr	r2, [pc, #156]	@ (8000cf0 <TransmitCAN+0xb4>)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6013      	str	r3, [r2, #0]
	pTxHeader.IDE = CAN_ID_STD;
 8000c58:	4b25      	ldr	r3, [pc, #148]	@ (8000cf0 <TransmitCAN+0xb4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR = CAN_RTR_DATA;
 8000c5e:	4b24      	ldr	r3, [pc, #144]	@ (8000cf0 <TransmitCAN+0xb4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
	pTxHeader.DLC = size; // Number of bytes to send
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4a22      	ldr	r2, [pc, #136]	@ (8000cf0 <TransmitCAN+0xb4>)
 8000c68:	6113      	str	r3, [r2, #16]
	pTxHeader.TransmitGlobalTime = DISABLE;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <TransmitCAN+0xb4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	751a      	strb	r2, [r3, #20]

	uint8_t found_mailbox = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 10; ++i)
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	e00b      	b.n	8000c92 <TransmitCAN+0x56>
	{
		// Check that mailbox is available for tx
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)
 8000c7a:	481e      	ldr	r0, [pc, #120]	@ (8000cf4 <TransmitCAN+0xb8>)
 8000c7c:	f001 fe7e 	bl	800297c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <TransmitCAN+0x50>
		{
			found_mailbox = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	75fb      	strb	r3, [r7, #23]
			break;
 8000c8a:	e005      	b.n	8000c98 <TransmitCAN+0x5c>
	for (int i = 0; i < 10; ++i)
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	2b09      	cmp	r3, #9
 8000c96:	ddf0      	ble.n	8000c7a <TransmitCAN+0x3e>
	{
		// TODO: (Marc) Should really be the error led once it's been soldered
		//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
	}

	if (with_priority)
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d010      	beq.n	8000cc0 <TransmitCAN+0x84>
	{
		// If message is important, make sure no other messages are queud to ensure it will be sent after any other
		// values that could override it.
		for (int i = 0; i < 10; ++i)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	e008      	b.n	8000cb6 <TransmitCAN+0x7a>
		{
			// Check that all 3 mailboxes are empty
			if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 3)
 8000ca4:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <TransmitCAN+0xb8>)
 8000ca6:	f001 fe69 	bl	800297c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d006      	beq.n	8000cbe <TransmitCAN+0x82>
		for (int i = 0; i < 10; ++i)
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	2b09      	cmp	r3, #9
 8000cba:	ddf3      	ble.n	8000ca4 <TransmitCAN+0x68>
 8000cbc:	e000      	b.n	8000cc0 <TransmitCAN+0x84>
				break;
 8000cbe:	bf00      	nop
			//delay_us(50);
		}
	}

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, buf, &mb);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	490a      	ldr	r1, [pc, #40]	@ (8000cf0 <TransmitCAN+0xb4>)
 8000cc8:	480a      	ldr	r0, [pc, #40]	@ (8000cf4 <TransmitCAN+0xb8>)
 8000cca:	f001 fd87 	bl	80027dc <HAL_CAN_AddTxMessage>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK)
 8000cd2:	7dbb      	ldrb	r3, [r7, #22]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <TransmitCAN+0xa0>
	{
		return ret;
 8000cd8:	7dbb      	ldrb	r3, [r7, #22]
 8000cda:	e005      	b.n	8000ce8 <TransmitCAN+0xac>
	}

	// Update the CAN led
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <TransmitCAN+0xbc>)
 8000ce2:	f002 fcb5 	bl	8003650 <HAL_GPIO_WritePin>
	// ToggleLed(LED_CAN);
	return ret;
 8000ce6:	7dbb      	ldrb	r3, [r7, #22]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200002b4 	.word	0x200002b4
 8000cf4:	20000068 	.word	0x20000068
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d00:	f001 fab8 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f82a 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d08:	f000 fafa 	bl	8001300 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d0c:	f000 f894 	bl	8000e38 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000d10:	f000 f91c 	bl	8000f4c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000d14:	f000 f950 	bl	8000fb8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d18:	f000 f99e 	bl	8001058 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000d1c:	f000 f9e8 	bl	80010f0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d20:	f000 fa34 	bl	800118c <MX_TIM5_Init>
  MX_TIM6_Init();
 8000d24:	f000 fa82 	bl	800122c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d28:	f000 fab4 	bl	8001294 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000d2c:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <main+0x50>)
 8000d2e:	f003 ff13 	bl	8004b58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d32:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <main+0x54>)
 8000d34:	f003 ff10 	bl	8004b58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d38:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <main+0x58>)
 8000d3a:	f003 ff0d 	bl	8004b58 <HAL_TIM_Base_Start_IT>

  current_state = STATE_INIT;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <main+0x5c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ExecuteStateMachine();
 8000d44:	f7ff fbd6 	bl	80004f4 <ExecuteStateMachine>
 8000d48:	e7fc      	b.n	8000d44 <main+0x48>
 8000d4a:	bf00      	nop
 8000d4c:	20000208 	.word	0x20000208
 8000d50:	20000178 	.word	0x20000178
 8000d54:	20000250 	.word	0x20000250
 8000d58:	200002e8 	.word	0x200002e8

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b094      	sub	sp, #80	@ 0x50
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2234      	movs	r2, #52	@ 0x34
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f004 fb1e 	bl	80053ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <SystemClock_Config+0xd4>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	4a29      	ldr	r2, [pc, #164]	@ (8000e30 <SystemClock_Config+0xd4>)
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <SystemClock_Config+0xd4>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	4b24      	ldr	r3, [pc, #144]	@ (8000e34 <SystemClock_Config+0xd8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000da8:	4a22      	ldr	r2, [pc, #136]	@ (8000e34 <SystemClock_Config+0xd8>)
 8000daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b20      	ldr	r3, [pc, #128]	@ (8000e34 <SystemClock_Config+0xd8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000dd4:	2380      	movs	r3, #128	@ 0x80
 8000dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 ff0d 	bl	8003c08 <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000df4:	f000 fb82 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	230f      	movs	r3, #15
 8000dfa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2104      	movs	r1, #4
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fc66 	bl	80036e8 <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e22:	f000 fb6b 	bl	80014fc <Error_Handler>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3750      	adds	r7, #80	@ 0x50
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40007000 	.word	0x40007000

08000e38 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	@ 0x50
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e3e:	4b41      	ldr	r3, [pc, #260]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e40:	4a41      	ldr	r2, [pc, #260]	@ (8000f48 <MX_CAN1_Init+0x110>)
 8000e42:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000e44:	4b3f      	ldr	r3, [pc, #252]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8000e50:	4b3c      	ldr	r3, [pc, #240]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e56:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000e58:	4b3a      	ldr	r3, [pc, #232]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e5a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000e5e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000e60:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e62:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000e66:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e68:	4b36      	ldr	r3, [pc, #216]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e6e:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e74:	4b33      	ldr	r3, [pc, #204]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e7a:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e80:	4b30      	ldr	r3, [pc, #192]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e86:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e8c:	482d      	ldr	r0, [pc, #180]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000e8e:	f001 fa87 	bl	80023a0 <HAL_CAN_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000e98:	f000 fb30 	bl	80014fc <Error_Handler>
*/


	CAN_FilterTypeDef sf_fifo0;
	// All common bits go into the ID register
	sf_fifo0.FilterIdHigh = DRIVEMOTOR_FIFO0_RX_FILTER_ID_HIGH;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sf_fifo0.FilterIdLow = DRIVEMOTOR_FIFO0_RX_FILTER_ID_LOW;
 8000ea0:	2360      	movs	r3, #96	@ 0x60
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Which bits to compare for filter
	sf_fifo0.FilterMaskIdHigh = 0x0000;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
	sf_fifo0.FilterMaskIdLow = (FIFO0_RX_FILTER_MASK_LOW & 0x07FF);
 8000ea8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34

	sf_fifo0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sf_fifo0.FilterBank = 0; // Which filter to use from the assigned ones
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sf_fifo0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	643b      	str	r3, [r7, #64]	@ 0x40
	sf_fifo0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	647b      	str	r3, [r7, #68]	@ 0x44
	sf_fifo0.FilterActivation = CAN_FILTER_ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
	sf_fifo0.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8000ec2:	230e      	movs	r3, #14
 8000ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo0) != HAL_OK)
 8000ec6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	481d      	ldr	r0, [pc, #116]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000ece:	f001 fb63 	bl	8002598 <HAL_CAN_ConfigFilter>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_CAN1_Init+0xa4>
	{
	  Error_Handler();
 8000ed8:	f000 fb10 	bl	80014fc <Error_Handler>
	// All common bits go into the ID register
	//sf_fifo1.FilterIdHigh = 0x0000;
	//sf_fifo1.FilterIdLow = 0x0000;
	//sf_fifo1.FilterMaskIdHigh = 0x0000;
	//sf_fifo1.FilterMaskIdLow = 0x0000;
	sf_fifo1.FilterIdHigh = DRIVEMOTOR_FIFO1_RX_FILTER_ID_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
	sf_fifo1.FilterIdLow = DRIVEMOTOR_FIFO1_RX_FILTER_ID_LOW;
 8000ee0:	2370      	movs	r3, #112	@ 0x70
 8000ee2:	607b      	str	r3, [r7, #4]

	// Which bits to compare for filter
	sf_fifo1.FilterMaskIdHigh = 0x0000;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
	sf_fifo1.FilterMaskIdLow = (FIFO1_RX_FILTER_MASK_LOW & 0x7FF);
 8000ee8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000eec:	60fb      	str	r3, [r7, #12]

	sf_fifo1.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
	sf_fifo1.FilterBank = 1; // Which filter to use from the assigned ones
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
	sf_fifo1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
	sf_fifo1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
	sf_fifo1.FilterActivation = CAN_FILTER_ENABLE;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
	sf_fifo1.SlaveStartFilterBank = 14; // How many filters to assign to CAN1
 8000f02:	230e      	movs	r3, #14
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sf_fifo1) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480e      	ldr	r0, [pc, #56]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000f0c:	f001 fb44 	bl	8002598 <HAL_CAN_ConfigFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_CAN1_Init+0xe2>
	{
	  Error_Handler();
 8000f16:	f000 faf1 	bl	80014fc <Error_Handler>

	//if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
	//{
	//	  Error_Handler();
	//}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000f1a:	480a      	ldr	r0, [pc, #40]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000f1c:	f001 fc1a 	bl	8002754 <HAL_CAN_Start>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_CAN1_Init+0xf2>
	{
		Error_Handler();
 8000f26:	f000 fae9 	bl	80014fc <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000f2a:	2112      	movs	r1, #18
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_CAN1_Init+0x10c>)
 8000f2e:	f001 fea4 	bl	8002c7a <HAL_CAN_ActivateNotification>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_CAN1_Init+0x104>
	{
		Error_Handler();
 8000f38:	f000 fae0 	bl	80014fc <Error_Handler>
	}
	*/

  /* USER CODE END CAN1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3750      	adds	r7, #80	@ 0x50
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000068 	.word	0x20000068
 8000f48:	40006400 	.word	0x40006400

08000f4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f50:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <MX_SPI1_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f80:	2230      	movs	r2, #48	@ 0x30
 8000f82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f90:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f98:	220a      	movs	r2, #10
 8000f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <MX_SPI1_Init+0x64>)
 8000f9e:	f003 f8d1 	bl	8004144 <HAL_SPI_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fa8:	f000 faa8 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000090 	.word	0x20000090
 8000fb4:	40013000 	.word	0x40013000

08000fb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <MX_TIM1_Init+0x98>)
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001054 <MX_TIM1_Init+0x9c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <MX_TIM1_Init+0x98>)
 8000fdc:	2230      	movs	r2, #48	@ 0x30
 8000fde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <MX_TIM1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <MX_TIM1_Init+0x98>)
 8000fe8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_TIM1_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <MX_TIM1_Init+0x98>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_TIM1_Init+0x98>)
 8000ffc:	2280      	movs	r2, #128	@ 0x80
 8000ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001000:	4813      	ldr	r0, [pc, #76]	@ (8001050 <MX_TIM1_Init+0x98>)
 8001002:	f003 fcf1 	bl	80049e8 <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800100c:	f000 fa76 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4619      	mov	r1, r3
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <MX_TIM1_Init+0x98>)
 800101e:	f003 fefb 	bl	8004e18 <HAL_TIM_ConfigClockSource>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001028:	f000 fa68 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_TIM1_Init+0x98>)
 800103a:	f004 f927 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001044:	f000 fa5a 	bl	80014fc <Error_Handler>

  // HAL_TIM_PWM_Start(&htim1, channel);

  /* USER CODE END TIM1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200000e8 	.word	0x200000e8
 8001054:	40010000 	.word	0x40010000

08001058 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001074:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <MX_TIM2_Init+0x94>)
 8001076:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 800107c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <MX_TIM2_Init+0x94>)
 800107e:	2230      	movs	r2, #48	@ 0x30
 8001080:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_TIM2_Init+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MX_TIM2_Init+0x94>)
 800108a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800108e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_TIM2_Init+0x94>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <MX_TIM2_Init+0x94>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <MX_TIM2_Init+0x94>)
 800109e:	f003 fca3 	bl	80049e8 <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010a8:	f000 fa28 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	4619      	mov	r1, r3
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <MX_TIM2_Init+0x94>)
 80010ba:	f003 fead 	bl	8004e18 <HAL_TIM_ConfigClockSource>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010c4:	f000 fa1a 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_TIM2_Init+0x94>)
 80010d6:	f004 f8d9 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e0:	f000 fa0c 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000130 	.word	0x20000130

080010f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800110c:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <MX_TIM4_Init+0x94>)
 800110e:	4a1e      	ldr	r2, [pc, #120]	@ (8001188 <MX_TIM4_Init+0x98>)
 8001110:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8001112:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_TIM4_Init+0x94>)
 8001114:	f240 227f 	movw	r2, #639	@ 0x27f
 8001118:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_TIM4_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_TIM4_Init+0x94>)
 8001122:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001126:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_TIM4_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_TIM4_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001134:	4813      	ldr	r0, [pc, #76]	@ (8001184 <MX_TIM4_Init+0x94>)
 8001136:	f003 fc57 	bl	80049e8 <HAL_TIM_Base_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001140:	f000 f9dc 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001144:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001148:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4619      	mov	r1, r3
 8001150:	480c      	ldr	r0, [pc, #48]	@ (8001184 <MX_TIM4_Init+0x94>)
 8001152:	f003 fe61 	bl	8004e18 <HAL_TIM_ConfigClockSource>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800115c:	f000 f9ce 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_TIM4_Init+0x94>)
 800116e:	f004 f88d 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001178:	f000 f9c0 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000178 	.word	0x20000178
 8001188:	40000800 	.word	0x40000800

0800118c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_TIM5_Init+0x98>)
 80011aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001228 <MX_TIM5_Init+0x9c>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <MX_TIM5_Init+0x98>)
 80011b0:	222f      	movs	r2, #47	@ 0x2f
 80011b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_TIM5_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65000;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_TIM5_Init+0x98>)
 80011bc:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80011c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_TIM5_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_TIM5_Init+0x98>)
 80011ca:	2280      	movs	r2, #128	@ 0x80
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011ce:	4815      	ldr	r0, [pc, #84]	@ (8001224 <MX_TIM5_Init+0x98>)
 80011d0:	f003 fc0a 	bl	80049e8 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80011da:	f000 f98f 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4619      	mov	r1, r3
 80011ea:	480e      	ldr	r0, [pc, #56]	@ (8001224 <MX_TIM5_Init+0x98>)
 80011ec:	f003 fe14 	bl	8004e18 <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f000 f981 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	4619      	mov	r1, r3
 8001206:	4807      	ldr	r0, [pc, #28]	@ (8001224 <MX_TIM5_Init+0x98>)
 8001208:	f004 f840 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001212:	f000 f973 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  HAL_TIM_Base_Start(&htim5);
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <MX_TIM5_Init+0x98>)
 8001218:	f003 fc36 	bl	8004a88 <HAL_TIM_Base_Start>

  /* USER CODE END TIM5_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200001c0 	.word	0x200001c0
 8001228:	40000c00 	.word	0x40000c00

0800122c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <MX_TIM6_Init+0x60>)
 800123c:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <MX_TIM6_Init+0x64>)
 800123e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_TIM6_Init+0x60>)
 8001242:	2263      	movs	r2, #99	@ 0x63
 8001244:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_TIM6_Init+0x60>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 31;
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_TIM6_Init+0x60>)
 800124e:	221f      	movs	r2, #31
 8001250:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_TIM6_Init+0x60>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <MX_TIM6_Init+0x60>)
 800125a:	f003 fbc5 	bl	80049e8 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001264:	f000 f94a 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_TIM6_Init+0x60>)
 8001276:	f004 f809 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001280:	f000 f93c 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000208 	.word	0x20000208
 8001290:	40001000 	.word	0x40001000

08001294 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <MX_TIM7_Init+0x64>)
 80012a4:	4a15      	ldr	r2, [pc, #84]	@ (80012fc <MX_TIM7_Init+0x68>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 480;
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <MX_TIM7_Init+0x64>)
 80012aa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80012ae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_TIM7_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <MX_TIM7_Init+0x64>)
 80012b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80012bc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_TIM7_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <MX_TIM7_Init+0x64>)
 80012c6:	f003 fb8f 	bl	80049e8 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80012d0:	f000 f914 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_TIM7_Init+0x64>)
 80012e2:	f003 ffd3 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80012ec:	f000 f906 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000250 	.word	0x20000250
 80012fc:	40001400 	.word	0x40001400

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b5f      	ldr	r3, [pc, #380]	@ (8001498 <MX_GPIO_Init+0x198>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a5e      	ldr	r2, [pc, #376]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b5c      	ldr	r3, [pc, #368]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b58      	ldr	r3, [pc, #352]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a57      	ldr	r2, [pc, #348]	@ (8001498 <MX_GPIO_Init+0x198>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b55      	ldr	r3, [pc, #340]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b51      	ldr	r3, [pc, #324]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a50      	ldr	r2, [pc, #320]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b4e      	ldr	r3, [pc, #312]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b4a      	ldr	r3, [pc, #296]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a49      	ldr	r2, [pc, #292]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b47      	ldr	r3, [pc, #284]	@ (8001498 <MX_GPIO_Init+0x198>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b43      	ldr	r3, [pc, #268]	@ (8001498 <MX_GPIO_Init+0x198>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a42      	ldr	r2, [pc, #264]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b40      	ldr	r3, [pc, #256]	@ (8001498 <MX_GPIO_Init+0x198>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FT_RESET_Pin|SPI_CS2_Pin|SPI_CS1_Pin|BIN2_1_Pin
 80013a2:	2200      	movs	r2, #0
 80013a4:	f64f 41e2 	movw	r1, #64738	@ 0xfce2
 80013a8:	483c      	ldr	r0, [pc, #240]	@ (800149c <MX_GPIO_Init+0x19c>)
 80013aa:	f002 f951 	bl	8003650 <HAL_GPIO_WritePin>
                          |BIN1_1_Pin|DIR1_Pin|STEP1_Pin|RESET1_Pin
                          |nSLEEP1_Pin|STEP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 80013ae:	2200      	movs	r2, #0
 80013b0:	2137      	movs	r1, #55	@ 0x37
 80013b2:	483b      	ldr	r0, [pc, #236]	@ (80014a0 <MX_GPIO_Init+0x1a0>)
 80013b4:	f002 f94c 	bl	8003650 <HAL_GPIO_WritePin>
                          |RESET2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 80013b8:	2200      	movs	r2, #0
 80013ba:	21ff      	movs	r1, #255	@ 0xff
 80013bc:	4839      	ldr	r0, [pc, #228]	@ (80014a4 <MX_GPIO_Init+0x1a4>)
 80013be:	f002 f947 	bl	8003650 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : nSTALL2_Pin nFAULT2_Pin */
  GPIO_InitStruct.Pin = nSTALL2_Pin|nFAULT2_Pin;
 80013c2:	2318      	movs	r3, #24
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4831      	ldr	r0, [pc, #196]	@ (800149c <MX_GPIO_Init+0x19c>)
 80013d6:	f001 ff8f 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FT_RESET_Pin BIN2_1_Pin BIN1_1_Pin DIR1_Pin
                           STEP1_Pin RESET1_Pin nSLEEP1_Pin STEP2_Pin */
  GPIO_InitStruct.Pin = FT_RESET_Pin|BIN2_1_Pin|BIN1_1_Pin|DIR1_Pin
 80013da:	f64f 4322 	movw	r3, #64546	@ 0xfc22
 80013de:	617b      	str	r3, [r7, #20]
                          |STEP1_Pin|RESET1_Pin|nSLEEP1_Pin|STEP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	482a      	ldr	r0, [pc, #168]	@ (800149c <MX_GPIO_Init+0x19c>)
 80013f4:	f001 ff80 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS2_Pin SPI_CS1_Pin */
  GPIO_InitStruct.Pin = SPI_CS2_Pin|SPI_CS1_Pin;
 80013f8:	23c0      	movs	r3, #192	@ 0xc0
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001400:	2302      	movs	r3, #2
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4823      	ldr	r0, [pc, #140]	@ (800149c <MX_GPIO_Init+0x19c>)
 8001410:	f001 ff72 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_2_Pin BIN1_2_Pin DIR2_Pin nSLEEP2_Pin
                           RESET2_Pin */
  GPIO_InitStruct.Pin = BIN2_2_Pin|BIN1_2_Pin|DIR2_Pin|nSLEEP2_Pin
 8001414:	2337      	movs	r3, #55	@ 0x37
 8001416:	617b      	str	r3, [r7, #20]
                          |RESET2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	481d      	ldr	r0, [pc, #116]	@ (80014a0 <MX_GPIO_Init+0x1a0>)
 800142c:	f001 ff64 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : nSTALL1_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nSTALL1_Pin|nFAULT1_Pin;
 8001430:	2306      	movs	r3, #6
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4819      	ldr	r0, [pc, #100]	@ (80014a8 <MX_GPIO_Init+0x1a8>)
 8001444:	f001 ff58 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin;
 8001448:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800144e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480f      	ldr	r0, [pc, #60]	@ (800149c <MX_GPIO_Init+0x19c>)
 8001460:	f001 ff4a 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_WARNING_Pin LED_ERROR_Pin LED_CANB_Pin LED_CANA_Pin
                           LED1_Pin LED2_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED_WARNING_Pin|LED_ERROR_Pin|LED_CANB_Pin|LED_CANA_Pin
 8001464:	23ff      	movs	r3, #255	@ 0xff
 8001466:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	480a      	ldr	r0, [pc, #40]	@ (80014a4 <MX_GPIO_Init+0x1a4>)
 800147c:	f001 ff3c 	bl	80032f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	2017      	movs	r0, #23
 8001486:	f001 ff00 	bl	800328a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800148a:	2017      	movs	r0, #23
 800148c:	f001 ff19 	bl	80032c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	@ 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40021000 	.word	0x40021000
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40020400 	.word	0x40020400

080014ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI Line External Interrupt ISR Handler CallBack
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // PushButton 1
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014bc:	d106      	bne.n	80014cc <HAL_GPIO_EXTI_Callback+0x20>
    {
    	//HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
    	pb1_value = 1;
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <HAL_GPIO_EXTI_Callback+0x40>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
    	pb1_update = 1;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_GPIO_EXTI_Callback+0x44>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(LED_CANB_GPIO_Port, LED_CANB_Pin);
    	pb2_value = 1;
    	pb2_update = 1;
    }

}
 80014ca:	e009      	b.n	80014e0 <HAL_GPIO_EXTI_Callback+0x34>
    else if (GPIO_Pin == GPIO_PIN_8) // PushButton 2
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014d2:	d105      	bne.n	80014e0 <HAL_GPIO_EXTI_Callback+0x34>
    	pb2_value = 1;
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <HAL_GPIO_EXTI_Callback+0x48>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
    	pb2_update = 1;
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	20000328 	.word	0x20000328
 80014f0:	2000032a 	.word	0x2000032a
 80014f4:	20000329 	.word	0x20000329
 80014f8:	2000032b 	.word	0x2000032b

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <Error_Handler+0x8>

08001508 <InitDrives>:

void InitRegValuesStepperDefault(DRIVE_MOTOR drive_index);

SPI_HandleTypeDef *hspi = &hspi1;

void InitDrives() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	 pwm_timers[0] = pwm1_timer;
	 pwm_timers[1] = pwm2_timer;
	 pwm_channels[0] = pwm1_channel;
	 pwm_channels[1] = pwm2_channel;
	 */
	UnselectDriveCS();
 800150c:	f000 fa1c 	bl	8001948 <UnselectDriveCS>
	//InitDriveMotor(DRIVE1);
	InitDriveMotor(DRIVE1);
 8001510:	2000      	movs	r0, #0
 8001512:	f000 f803 	bl	800151c <InitDriveMotor>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <InitDriveMotor>:

void InitDriveMotor(DRIVE_MOTOR drive_index) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	// Reset drive
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	4932      	ldr	r1, [pc, #200]	@ (80015f4 <InitDriveMotor+0xd8>)
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	79fa      	ldrb	r2, [r7, #7]
 8001538:	492f      	ldr	r1, [pc, #188]	@ (80015f8 <InitDriveMotor+0xdc>)
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	440b      	add	r3, r1
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f002 f881 	bl	8003650 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_SET);
	HAL_Delay(10);
 800154e:	200a      	movs	r0, #10
 8001550:	f000 ff02 	bl	8002358 <HAL_Delay>
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	4927      	ldr	r1, [pc, #156]	@ (80015f4 <InitDriveMotor+0xd8>)
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	4924      	ldr	r1, [pc, #144]	@ (80015f8 <InitDriveMotor+0xdc>)
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	440b      	add	r3, r1
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	4619      	mov	r1, r3
 8001578:	f002 f86a 	bl	8003650 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_RESET);

	// Disable sleeping
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_SLEEP],
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	491d      	ldr	r1, [pc, #116]	@ (80015f4 <InitDriveMotor+0xd8>)
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3304      	adds	r3, #4
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	79fa      	ldrb	r2, [r7, #7]
 8001590:	4919      	ldr	r1, [pc, #100]	@ (80015f8 <InitDriveMotor+0xdc>)
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	440b      	add	r3, r1
 800159c:	3302      	adds	r3, #2
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4619      	mov	r1, r3
 80015a4:	f002 f854 	bl	8003650 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_SLEEP], GPIO_PIN_SET);

	// CS à LOW
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	4912      	ldr	r1, [pc, #72]	@ (80015f4 <InitDriveMotor+0xd8>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3308      	adds	r3, #8
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	490e      	ldr	r1, [pc, #56]	@ (80015f8 <InitDriveMotor+0xdc>)
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	440b      	add	r3, r1
 80015c8:	3304      	adds	r3, #4
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	f002 f83e 	bl	8003650 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_CS], GPIO_PIN_RESET);

	// init register for a stepper motor
	InitRegValuesStepper(drive_index);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fb00 	bl	8001bdc <InitRegValuesStepper>
	//InitRegValuesStepperDefault(drive_index);

	// Send regs over SPI
	SendDriveRegisters(drive_index);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f80c 	bl	80015fc <SendDriveRegisters>

	// Verify if chip setup is good
	ReadAndVerifyDriveRegisters(drive_index);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f822 	bl	8001630 <ReadAndVerifyDriveRegisters>

}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000028 	.word	0x20000028

080015fc <SendDriveRegisters>:

// Send every register to the drive
void SendDriveRegisters(DRIVE_MOTOR drive_index) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	// Écrire tous les registres sauf STATUS (registre 0x07)
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) {
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e008      	b.n	800161e <SendDriveRegisters+0x22>
		WriteSPI(drive_index, reg);
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f85a 	bl	80016cc <WriteSPI>
	for (uint8_t reg = 0; reg < NUM_DRIVE_REGS - 1; reg++) {
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3301      	adds	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2b06      	cmp	r3, #6
 8001622:	d9f3      	bls.n	800160c <SendDriveRegisters+0x10>
	}
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <ReadAndVerifyDriveRegisters>:

void ReadAndVerifyDriveRegisters(DRIVE_MOTOR drive_index) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	uint8_t error_detected = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 255; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	73bb      	strb	r3, [r7, #14]
 8001642:	e036      	b.n	80016b2 <ReadAndVerifyDriveRegisters+0x82>
		for (uint8_t reg = NUM_DRIVE_REGS - 2; reg < NUM_DRIVE_REGS - 1;
 8001644:	2306      	movs	r3, #6
 8001646:	737b      	strb	r3, [r7, #13]
 8001648:	e02d      	b.n	80016a6 <ReadAndVerifyDriveRegisters+0x76>
				reg--) { // Skip STATUS (0x07)
			uint16_t received_data = ReadSPI(drive_index, reg);
 800164a:	7b7a      	ldrb	r2, [r7, #13]
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f86f 	bl	8001734 <ReadSPI>
 8001656:	4603      	mov	r3, r0
 8001658:	813b      	strh	r3, [r7, #8]

			uint16_t expected_data = ReadRegConfig(drive_index, reg);
 800165a:	7b7a      	ldrb	r2, [r7, #13]
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f99d 	bl	80019a0 <ReadRegConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	817b      	strh	r3, [r7, #10]
			if ((reg == 1) && (expected_data & 0x0300)) { // datasheet bit 10 on register 1 always return 0
 800166a:	7b7b      	ldrb	r3, [r7, #13]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <ReadAndVerifyDriveRegisters+0x52>
 8001670:	897b      	ldrh	r3, [r7, #10]
 8001672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <ReadAndVerifyDriveRegisters+0x52>
				expected_data = expected_data &0xFBFF;
 800167a:	897b      	ldrh	r3, [r7, #10]
 800167c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001680:	817b      	strh	r3, [r7, #10]
			}

			if (received_data != expected_data) {
 8001682:	893a      	ldrh	r2, [r7, #8]
 8001684:	897b      	ldrh	r3, [r7, #10]
 8001686:	429a      	cmp	r2, r3
 8001688:	d00a      	beq.n	80016a0 <ReadAndVerifyDriveRegisters+0x70>
				HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin,
 800168a:	2201      	movs	r2, #1
 800168c:	2104      	movs	r1, #4
 800168e:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <ReadAndVerifyDriveRegisters+0x94>)
 8001690:	f001 ffde 	bl	8003650 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				flag_drive_fault = 1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <ReadAndVerifyDriveRegisters+0x98>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
				error_detected += 1;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	3301      	adds	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
				reg--) { // Skip STATUS (0x07)
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	737b      	strb	r3, [r7, #13]
		for (uint8_t reg = NUM_DRIVE_REGS - 2; reg < NUM_DRIVE_REGS - 1;
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	d9ce      	bls.n	800164a <ReadAndVerifyDriveRegisters+0x1a>
	for (uint8_t i = 0; i < 255; i++) {
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	3301      	adds	r3, #1
 80016b0:	73bb      	strb	r3, [r7, #14]
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	2bff      	cmp	r3, #255	@ 0xff
 80016b6:	d1c5      	bne.n	8001644 <ReadAndVerifyDriveRegisters+0x14>
			}
		}
	}
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	2000035c 	.word	0x2000035c

080016cc <WriteSPI>:

void WriteSPI(DRIVE_MOTOR drive_index, uint8_t reg) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	460a      	mov	r2, r1
 80016d6:	71fb      	strb	r3, [r7, #7]
 80016d8:	4613      	mov	r3, r2
 80016da:	71bb      	strb	r3, [r7, #6]
	uint16_t reg_config = ReadRegConfig(drive_index, reg);
 80016dc:	79ba      	ldrb	r2, [r7, #6]
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f95c 	bl	80019a0 <ReadRegConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	81fb      	strh	r3, [r7, #14]

	uint16_t data = (reg << 12) & 0x7000; //registre
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	031b      	lsls	r3, r3, #12
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80016f6:	81bb      	strh	r3, [r7, #12]
	data = data | (reg_config & 0x0FFF); //config
 80016f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001700:	b21a      	sxth	r2, r3
 8001702:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	b21b      	sxth	r3, r3
 800170a:	81bb      	strh	r3, [r7, #12]
	data = data & 0x7FFF; //écriture
 800170c:	89bb      	ldrh	r3, [r7, #12]
 800170e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001712:	81bb      	strh	r3, [r7, #12]

	TransmitSPI(drive_index, data);
 8001714:	89ba      	ldrh	r2, [r7, #12]
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f828 	bl	8001770 <TransmitSPI>

	ReadSPI(drive_index, reg);
 8001720:	79ba      	ldrb	r2, [r7, #6]
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f804 	bl	8001734 <ReadSPI>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <ReadSPI>:

uint16_t ReadSPI(DRIVE_MOTOR drive_index, uint8_t reg) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	460a      	mov	r2, r1
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	4613      	mov	r3, r2
 8001742:	71bb      	strb	r3, [r7, #6]
	// Construire la commande de lecture : bit 15 = 1, reg sur bits 14–12
	uint16_t read_cmd = (1 << 15) | (reg << 12);
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	b21b      	sxth	r3, r3
 800174a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800174e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001752:	b21b      	sxth	r3, r3
 8001754:	81fb      	strh	r3, [r7, #14]

	uint16_t received_data = TransmitReceiveSPI(drive_index, read_cmd);
 8001756:	89fa      	ldrh	r2, [r7, #14]
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f000 f83b 	bl	80017d8 <TransmitReceiveSPI>
 8001762:	4603      	mov	r3, r0
 8001764:	81bb      	strh	r3, [r7, #12]

	return received_data;
 8001766:	89bb      	ldrh	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <TransmitSPI>:

void TransmitSPI(DRIVE_MOTOR drive_index, uint16_t data) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	80bb      	strh	r3, [r7, #4]
	// Convertir en 2 octets MSB-first
	uint8_t tx_data[2] = { (data >> 8) & 0xFF, data & 0xFF };
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b29b      	uxth	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	733b      	strb	r3, [r7, #12]
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	737b      	strb	r3, [r7, #13]

	//On écrie sur la puce :
	tx_data[0] = tx_data[0] & 0x7F;
 8001790:	7b3b      	ldrb	r3, [r7, #12]
 8001792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001796:	b2db      	uxtb	r3, r3
 8001798:	733b      	strb	r3, [r7, #12]

	// Sélectionner la puce (CS à HIGH avant la transmission)
	SelectDriveCS(drive_index);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f887 	bl	80018b0 <SelectDriveCS>

	// Transmettre le message
	if (HAL_SPI_Transmit(hspi, tx_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <TransmitSPI+0x60>)
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	f107 010c 	add.w	r1, r7, #12
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	2202      	movs	r2, #2
 80017b0:	f002 fd51 	bl	8004256 <HAL_SPI_Transmit>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d004      	beq.n	80017c4 <TransmitSPI+0x54>
		// SPI erreur → allumer LED de diagnostic
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2104      	movs	r1, #4
 80017be:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <TransmitSPI+0x64>)
 80017c0:	f001 ff46 	bl	8003650 <HAL_GPIO_WritePin>
	}

	// Désélectionner les puces (CS à LOW après la transmission)
	UnselectDriveCS();
 80017c4:	f000 f8c0 	bl	8001948 <UnselectDriveCS>
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2000003c 	.word	0x2000003c
 80017d4:	40020c00 	.word	0x40020c00

080017d8 <TransmitReceiveSPI>:

uint16_t TransmitReceiveSPI(DRIVE_MOTOR drive_index, uint16_t data) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	460a      	mov	r2, r1
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	80bb      	strh	r3, [r7, #4]
	// Convertir en 2 octets MSB-first
	uint8_t tx_data[2] = { (data >> 8) & 0xFF, data & 0xFF };
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	743b      	strb	r3, [r7, #16]
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	747b      	strb	r3, [r7, #17]

	uint8_t rx_data[2] = { 0 };
 80017f8:	2300      	movs	r3, #0
 80017fa:	81bb      	strh	r3, [r7, #12]

	// Sélectionner la puce (CS à HIGH avant la transmission)
	SelectDriveCS(drive_index);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f856 	bl	80018b0 <SelectDriveCS>

	// Transmettre le message
	if (HAL_SPI_TransmitReceive(hspi, tx_data, rx_data, 2, HAL_MAX_DELAY)) {
 8001804:	4b27      	ldr	r3, [pc, #156]	@ (80018a4 <TransmitReceiveSPI+0xcc>)
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	f107 020c 	add.w	r2, r7, #12
 800180c:	f107 0110 	add.w	r1, r7, #16
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2302      	movs	r3, #2
 8001818:	f002 fe61 	bl	80044de <HAL_SPI_TransmitReceive>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <TransmitReceiveSPI+0x54>
		// SPI erreur → allumer LED de diagnostic
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	2104      	movs	r1, #4
 8001826:	4820      	ldr	r0, [pc, #128]	@ (80018a8 <TransmitReceiveSPI+0xd0>)
 8001828:	f001 ff12 	bl	8003650 <HAL_GPIO_WritePin>
	}

	// Désélectionner les puces (CS à LOW après la transmission)
	UnselectDriveCS();
 800182c:	f000 f88c 	bl	8001948 <UnselectDriveCS>

	// Reconstruire la valeur lue
	uint16_t received_data = ((uint16_t) rx_data[0] << 8) | rx_data[1];
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	b21a      	sxth	r2, r3
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	82bb      	strh	r3, [r7, #20]

	//test vs expected data
	received_data = received_data & 0x0FFF;
 8001840:	8abb      	ldrh	r3, [r7, #20]
 8001842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001846:	82bb      	strh	r3, [r7, #20]
	uint8_t reg_test = (data & 0x7000) >> 12;
 8001848:	88bb      	ldrh	r3, [r7, #4]
 800184a:	131b      	asrs	r3, r3, #12
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	74fb      	strb	r3, [r7, #19]
	uint16_t expected_data_test = ReadRegConfig(drive_index, reg_test);
 8001854:	7cfa      	ldrb	r2, [r7, #19]
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f8a0 	bl	80019a0 <ReadRegConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	82fb      	strh	r3, [r7, #22]
	if ((reg_test == 1) && (expected_data_test & 0x0300)) { // datasheet bit 10 on register 1 always return 0
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d108      	bne.n	800187c <TransmitReceiveSPI+0xa4>
 800186a:	8afb      	ldrh	r3, [r7, #22]
 800186c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <TransmitReceiveSPI+0xa4>
		expected_data_test = expected_data_test &0xFBFF;
 8001874:	8afb      	ldrh	r3, [r7, #22]
 8001876:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800187a:	82fb      	strh	r3, [r7, #22]
	}

	if (received_data != expected_data_test) {
 800187c:	8aba      	ldrh	r2, [r7, #20]
 800187e:	8afb      	ldrh	r3, [r7, #22]
 8001880:	429a      	cmp	r2, r3
 8001882:	d007      	beq.n	8001894 <TransmitReceiveSPI+0xbc>
		HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	2104      	movs	r1, #4
 8001888:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <TransmitReceiveSPI+0xd0>)
 800188a:	f001 fee1 	bl	8003650 <HAL_GPIO_WritePin>
		flag_drive_fault = 1;
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <TransmitReceiveSPI+0xd4>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
	}

	// Extraire seulement les 12 bits de data
	return received_data & 0x0FFF;
 8001894:	8abb      	ldrh	r3, [r7, #20]
 8001896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189a:	b29b      	uxth	r3, r3

}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000003c 	.word	0x2000003c
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	2000035c 	.word	0x2000035c

080018b0 <SelectDriveCS>:

void SelectDriveCS(DRIVE_MOTOR drive_index) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e037      	b.n	8001930 <SelectDriveCS+0x80>
		if (num != drive_index) {
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d016      	beq.n	80018f6 <SelectDriveCS+0x46>
			// Désélectionner la puce (CS à LOW après la transmission)
			HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS],
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	491d      	ldr	r1, [pc, #116]	@ (8001940 <SelectDriveCS+0x90>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3308      	adds	r3, #8
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	4919      	ldr	r1, [pc, #100]	@ (8001944 <SelectDriveCS+0x94>)
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	440b      	add	r3, r1
 80018e8:	3304      	adds	r3, #4
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	4619      	mov	r1, r3
 80018f0:	f001 feae 	bl	8003650 <HAL_GPIO_WritePin>
 80018f4:	e019      	b.n	800192a <SelectDriveCS+0x7a>
					drive_pins[num][DRIVE_CS], GPIO_PIN_RESET);
		} else if (num == drive_index) {
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d115      	bne.n	800192a <SelectDriveCS+0x7a>
			// Sélectionner la puce (CS à HIGH avant la transmission)
			HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS],
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	490f      	ldr	r1, [pc, #60]	@ (8001940 <SelectDriveCS+0x90>)
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3308      	adds	r3, #8
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	490c      	ldr	r1, [pc, #48]	@ (8001944 <SelectDriveCS+0x94>)
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	440b      	add	r3, r1
 800191e:	3304      	adds	r3, #4
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	4619      	mov	r1, r3
 8001926:	f001 fe93 	bl	8003650 <HAL_GPIO_WritePin>
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	3301      	adds	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d9c4      	bls.n	80018c0 <SelectDriveCS+0x10>
					drive_pins[num][DRIVE_CS], GPIO_PIN_SET);
		}
	}
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000000 	.word	0x20000000
 8001944:	20000028 	.word	0x20000028

08001948 <UnselectDriveCS>:

void UnselectDriveCS() {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 800194e:	2300      	movs	r3, #0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	e018      	b.n	8001986 <UnselectDriveCS+0x3e>
		// Désélectionner la puce (CS à LOW après la transmission)
		HAL_GPIO_WritePin(drive_ports[num][DRIVE_CS], drive_pins[num][DRIVE_CS],
 8001954:	79fa      	ldrb	r2, [r7, #7]
 8001956:	4910      	ldr	r1, [pc, #64]	@ (8001998 <UnselectDriveCS+0x50>)
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	3308      	adds	r3, #8
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	79fa      	ldrb	r2, [r7, #7]
 8001968:	490c      	ldr	r1, [pc, #48]	@ (800199c <UnselectDriveCS+0x54>)
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	440b      	add	r3, r1
 8001974:	3304      	adds	r3, #4
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	f001 fe68 	bl	8003650 <HAL_GPIO_WritePin>
	for (uint8_t num = 0; num < DRIVE_MOTOR_NUM; num++) {
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	3301      	adds	r3, #1
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d9e3      	bls.n	8001954 <UnselectDriveCS+0xc>
				GPIO_PIN_RESET);
	}
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000000 	.word	0x20000000
 800199c:	20000028 	.word	0x20000028

080019a0 <ReadRegConfig>:

uint16_t ReadRegConfig(DRIVE_MOTOR drive_index, uint8_t reg) {
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	460a      	mov	r2, r1
 80019aa:	71fb      	strb	r3, [r7, #7]
 80019ac:	4613      	mov	r3, r2
 80019ae:	71bb      	strb	r3, [r7, #6]
	uint16_t reg_data = -1;
 80019b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019b4:	81fb      	strh	r3, [r7, #14]

	switch (reg) {
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d852      	bhi.n	8001a62 <ReadRegConfig+0xc2>
 80019bc:	a201      	add	r2, pc, #4	@ (adr r2, 80019c4 <ReadRegConfig+0x24>)
 80019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	080019e5 	.word	0x080019e5
 80019c8:	080019f3 	.word	0x080019f3
 80019cc:	08001a03 	.word	0x08001a03
 80019d0:	08001a13 	.word	0x08001a13
 80019d4:	08001a23 	.word	0x08001a23
 80019d8:	08001a33 	.word	0x08001a33
 80019dc:	08001a43 	.word	0x08001a43
 80019e0:	08001a53 	.word	0x08001a53
	case 0:
		reg_data = drive_regs[drive_index].ctrl_reg.reg;
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4a24      	ldr	r2, [pc, #144]	@ (8001a78 <ReadRegConfig+0xd8>)
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	81fb      	strh	r3, [r7, #14]
		break;
 80019f0:	e03a      	b.n	8001a68 <ReadRegConfig+0xc8>
	case 1:
		reg_data = drive_regs[drive_index].torque_reg.reg;
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	4a20      	ldr	r2, [pc, #128]	@ (8001a78 <ReadRegConfig+0xd8>)
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	3302      	adds	r3, #2
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	81fb      	strh	r3, [r7, #14]
		break;
 8001a00:	e032      	b.n	8001a68 <ReadRegConfig+0xc8>
	case 2:
		reg_data = drive_regs[drive_index].off_reg.reg;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	4a1c      	ldr	r2, [pc, #112]	@ (8001a78 <ReadRegConfig+0xd8>)
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	81fb      	strh	r3, [r7, #14]
		break;
 8001a10:	e02a      	b.n	8001a68 <ReadRegConfig+0xc8>
	case 3:
		reg_data = drive_regs[drive_index].blank_reg.reg;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	4a18      	ldr	r2, [pc, #96]	@ (8001a78 <ReadRegConfig+0xd8>)
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	3306      	adds	r3, #6
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	81fb      	strh	r3, [r7, #14]
		break;
 8001a20:	e022      	b.n	8001a68 <ReadRegConfig+0xc8>
	case 4:
		reg_data = drive_regs[drive_index].decay_reg.reg;
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	4a14      	ldr	r2, [pc, #80]	@ (8001a78 <ReadRegConfig+0xd8>)
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	81fb      	strh	r3, [r7, #14]
		break;
 8001a30:	e01a      	b.n	8001a68 <ReadRegConfig+0xc8>
	case 5:
		reg_data = drive_regs[drive_index].stall_reg.reg;
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4a10      	ldr	r2, [pc, #64]	@ (8001a78 <ReadRegConfig+0xd8>)
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	4413      	add	r3, r2
 8001a3a:	330a      	adds	r3, #10
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	81fb      	strh	r3, [r7, #14]
		break;
 8001a40:	e012      	b.n	8001a68 <ReadRegConfig+0xc8>
	case 6:
		reg_data = drive_regs[drive_index].drive_reg.reg;
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <ReadRegConfig+0xd8>)
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	330c      	adds	r3, #12
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	81fb      	strh	r3, [r7, #14]
		break;
 8001a50:	e00a      	b.n	8001a68 <ReadRegConfig+0xc8>
	case 7:
		reg_data = drive_regs[drive_index].status_reg.reg;
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	4a08      	ldr	r2, [pc, #32]	@ (8001a78 <ReadRegConfig+0xd8>)
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4413      	add	r3, r2
 8001a5a:	330e      	adds	r3, #14
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	81fb      	strh	r3, [r7, #14]
		break;
 8001a60:	e002      	b.n	8001a68 <ReadRegConfig+0xc8>
	default:
		reg_data = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	81fb      	strh	r3, [r7, #14]
		break;
 8001a66:	bf00      	nop
	}
	return reg_data;
 8001a68:	89fb      	ldrh	r3, [r7, #14]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000033c 	.word	0x2000033c

08001a7c <DisableDrive>:
// CS à HIGH après la transmission
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
			drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);
}

void DisableDrive(DRIVE_MOTOR drive_index) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
// Désactive l'étage de puissance logiciellement
	drive_regs[drive_index].ctrl_reg.enbl = 0;
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <DisableDrive+0x7c>)
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	441a      	add	r2, r3
 8001a8e:	7813      	ldrb	r3, [r2, #0]
 8001a90:	f36f 0300 	bfc	r3, #0, #1
 8001a94:	7013      	strb	r3, [r2, #0]

// Activer la communication SPI (CS = LOW)
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	4918      	ldr	r1, [pc, #96]	@ (8001afc <DisableDrive+0x80>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3308      	adds	r3, #8
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	79fa      	ldrb	r2, [r7, #7]
 8001aaa:	4915      	ldr	r1, [pc, #84]	@ (8001b00 <DisableDrive+0x84>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	4619      	mov	r1, r3
 8001abe:	f001 fdc7 	bl	8003650 <HAL_GPIO_WritePin>

// Envoyer le registre CTRL avec ENBL = 0
//TransmitMotorSPI(drive_index, DRV8711_CTRL_REG);

// Terminer la communication SPI (CS = HIGH)
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_CS],
 8001ac2:	79fa      	ldrb	r2, [r7, #7]
 8001ac4:	490d      	ldr	r1, [pc, #52]	@ (8001afc <DisableDrive+0x80>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	490a      	ldr	r1, [pc, #40]	@ (8001b00 <DisableDrive+0x84>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f001 fdb1 	bl	8003650 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_CS], GPIO_PIN_SET);
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000033c 	.word	0x2000033c
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000028 	.word	0x20000028

08001b04 <ResetDrive>:

void ResetDrive(DRIVE_MOTOR drive_index) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8001b0e:	79fa      	ldrb	r2, [r7, #7]
 8001b10:	4916      	ldr	r1, [pc, #88]	@ (8001b6c <ResetDrive+0x68>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	4913      	ldr	r1, [pc, #76]	@ (8001b70 <ResetDrive+0x6c>)
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	440b      	add	r3, r1
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4619      	mov	r1, r3
 8001b32:	f001 fd8d 	bl	8003650 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_SET);
	HAL_Delay(10);
 8001b36:	200a      	movs	r0, #10
 8001b38:	f000 fc0e 	bl	8002358 <HAL_Delay>
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_RESET],
 8001b3c:	79fa      	ldrb	r2, [r7, #7]
 8001b3e:	490b      	ldr	r1, [pc, #44]	@ (8001b6c <ResetDrive+0x68>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	79fa      	ldrb	r2, [r7, #7]
 8001b4e:	4908      	ldr	r1, [pc, #32]	@ (8001b70 <ResetDrive+0x6c>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	440b      	add	r3, r1
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f001 fd76 	bl	8003650 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_RESET], GPIO_PIN_RESET);
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000028 	.word	0x20000028

08001b74 <SetDirection>:

uint32_t IsDriveAwake(DRIVE_MOTOR drive_index) {
	return drive_status[drive_index];
}

void SetDirection(DRIVE_MOTOR drive_index, uint32_t direction) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState state = (direction == DIR_LEFT) ? 1 : 0;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(drive_ports[drive_index][DRIVE_DIR],
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	490c      	ldr	r1, [pc, #48]	@ (8001bc4 <SetDirection+0x50>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3310      	adds	r3, #16
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	79fa      	ldrb	r2, [r7, #7]
 8001ba2:	4909      	ldr	r1, [pc, #36]	@ (8001bc8 <SetDirection+0x54>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	440b      	add	r3, r1
 8001bae:	3308      	adds	r3, #8
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f001 fd4b 	bl	8003650 <HAL_GPIO_WritePin>
			drive_pins[drive_index][DRIVE_DIR], state);
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000028 	.word	0x20000028

08001bcc <better_step_function>:
uint32_t speed_stepper_motor_pitch_int_converted = 40; //in multiple of 50us
uint8_t gpio_pin_value = 0;
//fonctionne avec un timer d'un multiple de la vitesse maximale
//better_step_function() s'exécute tous les 2ms
//vitesse max 500kHz, soit multiplicator_slowing_motor > stepper_motor_pitch où stepper_motor_pitch = 40 (50us*40=2ms)
void better_step_function() {
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	return 0;
 8001bd0:	bf00      	nop
				HAL_GPIO_WritePin(drive_ports[DRIVE2][DRIVE_STEP],
						drive_pins[DRIVE2][DRIVE_STEP], GPIO_PIN_RESET);
			}
		}
	}
}
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <InitRegValuesStepper>:
	drive_regs[drive_index].drive_reg.idrivep = 0b10;
// IDRIVEP : Courant de crête HIGH-SIDE (00 = 20mA, 11 = 150mA)
// Par défaut DRV8711 : 0b10
}

void InitRegValuesStepper(DRIVE_MOTOR drive_index) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
//
// ───── CTRL REGISTER (0x00) ─────────────────────────────────────────────
// Contrôle principal du moteur (activation, direction, step, mode de microstep)
//
	drive_regs[drive_index].ctrl_reg.enbl = 0;
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4a64      	ldr	r2, [pc, #400]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	441a      	add	r2, r3
 8001bee:	7813      	ldrb	r3, [r2, #0]
 8001bf0:	f36f 0300 	bfc	r3, #0, #1
 8001bf4:	7013      	strb	r3, [r2, #0]
// ENBL : Active la sortie du driver
// 0 = désactivé (sorties en haute impédance), 1 = activé
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.rdir = 0;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4a60      	ldr	r2, [pc, #384]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	441a      	add	r2, r3
 8001bfe:	7813      	ldrb	r3, [r2, #0]
 8001c00:	f36f 0341 	bfc	r3, #1, #1
 8001c04:	7013      	strb	r3, [r2, #0]
// RDIR : Direction contrôlée par pin DIR si = 0, sinon inversée
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.rstep = 0;
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	4a5c      	ldr	r2, [pc, #368]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	441a      	add	r2, r3
 8001c0e:	7813      	ldrb	r3, [r2, #0]
 8001c10:	f36f 0382 	bfc	r3, #2, #1
 8001c14:	7013      	strb	r3, [r2, #0]
// RSTEP : Step contrôlé par pin STEP si = 0, sinon interne
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.mode = 0b0000;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4a58      	ldr	r2, [pc, #352]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	441a      	add	r2, r3
 8001c1e:	7813      	ldrb	r3, [r2, #0]
 8001c20:	f36f 03c6 	bfc	r3, #3, #4
 8001c24:	7013      	strb	r3, [r2, #0]
// MODE : Réglage du microstepping (0 = full step, jusqu’à 0b1111 = 1/256)
// Par défaut DRV8711 : 0b0000 (full step)

	drive_regs[drive_index].ctrl_reg.extstall = 0;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	4a54      	ldr	r2, [pc, #336]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	441a      	add	r2, r3
 8001c2e:	7813      	ldrb	r3, [r2, #0]
 8001c30:	f36f 13c7 	bfc	r3, #7, #1
 8001c34:	7013      	strb	r3, [r2, #0]
// EXTSTALL : 0 = Stall détecté en interne, 1 = via pin externe
// Par défaut DRV8711 : 0

	drive_regs[drive_index].ctrl_reg.isgain = 0b01;
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	4a50      	ldr	r2, [pc, #320]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	441a      	add	r2, r3
 8001c3e:	7853      	ldrb	r3, [r2, #1]
 8001c40:	2101      	movs	r1, #1
 8001c42:	f361 0301 	bfi	r3, r1, #0, #2
 8001c46:	7053      	strb	r3, [r2, #1]
// ISGAIN : Gain du senseur de courant (00 = 5, 01 = 10, 10 = 20, 11 = 40)
// Par défaut DRV8711 : 0b00 (gain de 5)

	drive_regs[drive_index].ctrl_reg.dtime = 0b00;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	441a      	add	r2, r3
 8001c50:	7853      	ldrb	r3, [r2, #1]
 8001c52:	f36f 0383 	bfc	r3, #2, #2
 8001c56:	7053      	strb	r3, [r2, #1]
//
// ───── TORQUE REGISTER (0x01) ───────────────────────────────────────────
// Détermine le courant de phase appliqué
//
//drive_regs[drive_index].torque_reg.torque = 24; // 100% de puissance avec isgain à 10
	drive_regs[drive_index].torque_reg.torque = 12; // 50% de puissance avec isgain à 10
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4a48      	ldr	r2, [pc, #288]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4413      	add	r3, r2
 8001c60:	3302      	adds	r3, #2
 8001c62:	220c      	movs	r2, #12
 8001c64:	701a      	strb	r2, [r3, #0]
// TORQUE : Niveau de couple (0–255), proportionnel au courant de sortie
// Par défaut DRV8711 : 0xFF (255)

	drive_regs[drive_index].torque_reg.smplth = 0b111;
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4a44      	ldr	r2, [pc, #272]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	441a      	add	r2, r3
 8001c6e:	78d3      	ldrb	r3, [r2, #3]
 8001c70:	f043 0307 	orr.w	r3, r3, #7
 8001c74:	70d3      	strb	r3, [r2, #3]

//
// ───── OFF REGISTER (0x02) ──────────────────────────────────────────────
// Temps d’arrêt de PWM et mode PWM
//
	drive_regs[drive_index].off_reg.toff = 0x80;
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	4a40      	ldr	r2, [pc, #256]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3304      	adds	r3, #4
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	701a      	strb	r2, [r3, #0]
// TOFF : Temps mort (0 = désactivé, >0 = en pas de 500ns)
// Par défaut DRV8711 : 0x30 (24 = 12 µs)

	drive_regs[drive_index].off_reg.pwmmode = 1;
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4a3d      	ldr	r2, [pc, #244]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	441a      	add	r2, r3
 8001c8c:	7953      	ldrb	r3, [r2, #5]
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	7153      	strb	r3, [r2, #5]

//
// ───── BLANK REGISTER (0x03) ────────────────────────────────────────────
// Temps de masquage de détection de courant après une commutation
//
	drive_regs[drive_index].blank_reg.tblank = 0x80;
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4a39      	ldr	r2, [pc, #228]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	2280      	movs	r2, #128	@ 0x80
 8001ca0:	701a      	strb	r2, [r3, #0]
// TBLANK : Masque de courant (en pas de 20ns) — 0x80 = 2.56 µs
// Par défaut DRV8711 : 0x80

	drive_regs[drive_index].blank_reg.abt = 0;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	4a35      	ldr	r2, [pc, #212]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	441a      	add	r2, r3
 8001caa:	79d3      	ldrb	r3, [r2, #7]
 8001cac:	f36f 0300 	bfc	r3, #0, #1
 8001cb0:	71d3      	strb	r3, [r2, #7]

//
// ───── DECAY REGISTER (0x04) ────────────────────────────────────────────
// Contrôle le mode de "décroissance" du courant moteur
//
	drive_regs[drive_index].decay_reg.tdecay = 0x80;
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	4a31      	ldr	r2, [pc, #196]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4413      	add	r3, r2
 8001cba:	3308      	adds	r3, #8
 8001cbc:	2280      	movs	r2, #128	@ 0x80
 8001cbe:	701a      	strb	r2, [r3, #0]
// TDECAY : temps avant transition entre fast et slow decay (500ns steps)
// Par défaut DRV8711 : 0x10 (8 µs)

	drive_regs[drive_index].decay_reg.decmod = 0b000;
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f103 0208 	add.w	r2, r3, #8
 8001ccc:	7853      	ldrb	r3, [r2, #1]
 8001cce:	f36f 0302 	bfc	r3, #0, #3
 8001cd2:	7053      	strb	r3, [r2, #1]

//
// ───── STALL REGISTER (0x05) ────────────────────────────────────────────
// Détection de blocage moteur (optionnel)
//
	drive_regs[drive_index].stall_reg.sdthr = 0xFF;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4a29      	ldr	r2, [pc, #164]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	330a      	adds	r3, #10
 8001cde:	22ff      	movs	r2, #255	@ 0xff
 8001ce0:	701a      	strb	r2, [r3, #0]
// SDTHR : Seuil de BEMF pour détecter un blocage
// Par défaut DRV8711 : 0x40

	drive_regs[drive_index].stall_reg.sdcnt = 0b11;
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	4a25      	ldr	r2, [pc, #148]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	4413      	add	r3, r2
 8001cea:	f103 0208 	add.w	r2, r3, #8
 8001cee:	78d3      	ldrb	r3, [r2, #3]
 8001cf0:	f043 0303 	orr.w	r3, r3, #3
 8001cf4:	70d3      	strb	r3, [r2, #3]
// SDCNT : nombre de pas requis avant détection (00 = 2, ..., 11 = 8 pas)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].stall_reg.vdiv = 0b00;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4a20      	ldr	r2, [pc, #128]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f103 0208 	add.w	r2, r3, #8
 8001d02:	78d3      	ldrb	r3, [r2, #3]
 8001d04:	f36f 0383 	bfc	r3, #2, #2
 8001d08:	70d3      	strb	r3, [r2, #3]

//
// ───── DRIVE REGISTER (0x06) ────────────────────────────────────────────
// Réglage de la puissance des transistors MOSFET (gate drive)
//
	drive_regs[drive_index].drive_reg.ocpth = 0b11;
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	4413      	add	r3, r2
 8001d12:	f103 0208 	add.w	r2, r3, #8
 8001d16:	7913      	ldrb	r3, [r2, #4]
 8001d18:	f043 0303 	orr.w	r3, r3, #3
 8001d1c:	7113      	strb	r3, [r2, #4]
// OCPTH : Seuil de détection de surintensité (00 = 250mV, 11 = 2000mV)
// Par défaut DRV8711 : 0b01 (500mV)

	drive_regs[drive_index].drive_reg.ocpdeg = 0b11;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	4a16      	ldr	r2, [pc, #88]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	f103 0208 	add.w	r2, r3, #8
 8001d2a:	7913      	ldrb	r3, [r2, #4]
 8001d2c:	f043 030c 	orr.w	r3, r3, #12
 8001d30:	7113      	strb	r3, [r2, #4]
// OCPDEG : Temps de filtrage de la surintensité (00 = 1 µs, 11 = 8 µs)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].drive_reg.tdriven = 0b11;
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	4413      	add	r3, r2
 8001d3a:	f103 0208 	add.w	r2, r3, #8
 8001d3e:	7913      	ldrb	r3, [r2, #4]
 8001d40:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001d44:	7113      	strb	r3, [r2, #4]
// TDRIVEN : Durée de l’impulsion LOW-SIDE (00 = 250ns, 11 = 500ns)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].drive_reg.tdrivep = 0b11;
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4a0c      	ldr	r2, [pc, #48]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f103 0208 	add.w	r2, r3, #8
 8001d52:	7913      	ldrb	r3, [r2, #4]
 8001d54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d58:	7113      	strb	r3, [r2, #4]
// TDRIVEP : Durée de l’impulsion HIGH-SIDE (00 = 250ns, 11 = 500ns)
// Par défaut DRV8711 : 0b00

	drive_regs[drive_index].drive_reg.idriven = 0b11;
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <InitRegValuesStepper+0x1a0>)
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	f103 0208 	add.w	r2, r3, #8
 8001d66:	7953      	ldrb	r3, [r2, #5]
 8001d68:	f043 0303 	orr.w	r3, r3, #3
 8001d6c:	7153      	strb	r3, [r2, #5]
// IDRIVEP : Courant de crête HIGH-SIDE (00 = 20mA, 11 = 150mA)
// Par défaut DRV8711 : 0b00
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000033c 	.word	0x2000033c

08001d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <HAL_MspInit+0x90>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	4a20      	ldr	r2, [pc, #128]	@ (8001e10 <HAL_MspInit+0x90>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d96:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <HAL_MspInit+0x90>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_MspInit+0x90>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_MspInit+0x90>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <HAL_MspInit+0x90>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	f06f 000b 	mvn.w	r0, #11
 8001dc6:	f001 fa60 	bl	800328a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2101      	movs	r1, #1
 8001dce:	f06f 000a 	mvn.w	r0, #10
 8001dd2:	f001 fa5a 	bl	800328a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2101      	movs	r1, #1
 8001dda:	f06f 0009 	mvn.w	r0, #9
 8001dde:	f001 fa54 	bl	800328a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2101      	movs	r1, #1
 8001de6:	f06f 0004 	mvn.w	r0, #4
 8001dea:	f001 fa4e 	bl	800328a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2101      	movs	r1, #1
 8001df2:	f06f 0003 	mvn.w	r0, #3
 8001df6:	f001 fa48 	bl	800328a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	f06f 0001 	mvn.w	r0, #1
 8001e02:	f001 fa42 	bl	800328a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	@ 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a21      	ldr	r2, [pc, #132]	@ (8001eb8 <HAL_CAN_MspInit+0xa4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d13c      	bne.n	8001eb0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_CAN_MspInit+0xa8>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ebc <HAL_CAN_MspInit+0xa8>)
 8001e40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e46:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <HAL_CAN_MspInit+0xa8>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_CAN_MspInit+0xa8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a18      	ldr	r2, [pc, #96]	@ (8001ebc <HAL_CAN_MspInit+0xa8>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_CAN_MspInit+0xa8>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e80:	2309      	movs	r3, #9
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480d      	ldr	r0, [pc, #52]	@ (8001ec0 <HAL_CAN_MspInit+0xac>)
 8001e8c:	f001 fa34 	bl	80032f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2101      	movs	r1, #1
 8001e94:	2014      	movs	r0, #20
 8001e96:	f001 f9f8 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e9a:	2014      	movs	r0, #20
 8001e9c:	f001 fa11 	bl	80032c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	2015      	movs	r0, #21
 8001ea6:	f001 f9f0 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001eaa:	2015      	movs	r0, #21
 8001eac:	f001 fa09 	bl	80032c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	@ 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40006400 	.word	0x40006400
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a21      	ldr	r2, [pc, #132]	@ (8001f68 <HAL_SPI_MspInit+0xa4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d13b      	bne.n	8001f5e <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_SPI_MspInit+0xa8>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	4a1f      	ldr	r2, [pc, #124]	@ (8001f6c <HAL_SPI_MspInit+0xa8>)
 8001ef0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <HAL_SPI_MspInit+0xa8>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <HAL_SPI_MspInit+0xa8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a18      	ldr	r2, [pc, #96]	@ (8001f6c <HAL_SPI_MspInit+0xa8>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <HAL_SPI_MspInit+0xa8>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f1e:	23a0      	movs	r3, #160	@ 0xa0
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f2e:	2305      	movs	r3, #5
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	480d      	ldr	r0, [pc, #52]	@ (8001f70 <HAL_SPI_MspInit+0xac>)
 8001f3a:	f001 f9dd 	bl	80032f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f3e:	2340      	movs	r3, #64	@ 0x40
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f4e:	2305      	movs	r3, #5
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <HAL_SPI_MspInit+0xac>)
 8001f5a:	f001 f9cd 	bl	80032f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	@ 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40013000 	.word	0x40013000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	@ 0x38
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a57      	ldr	r2, [pc, #348]	@ (80020f0 <HAL_TIM_Base_MspInit+0x17c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	4b56      	ldr	r3, [pc, #344]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	4a55      	ldr	r2, [pc, #340]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa6:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	623b      	str	r3, [r7, #32]
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001fb2:	e099      	b.n	80020e8 <HAL_TIM_Base_MspInit+0x174>
  else if(htim_base->Instance==TIM2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbc:	d12d      	bne.n	800201a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	4a4b      	ldr	r2, [pc, #300]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fce:	4b49      	ldr	r3, [pc, #292]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	4b45      	ldr	r3, [pc, #276]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a44      	ldr	r2, [pc, #272]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b42      	ldr	r3, [pc, #264]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002008:	2301      	movs	r3, #1
 800200a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	4839      	ldr	r0, [pc, #228]	@ (80020f8 <HAL_TIM_Base_MspInit+0x184>)
 8002014:	f001 f970 	bl	80032f8 <HAL_GPIO_Init>
}
 8002018:	e066      	b.n	80020e8 <HAL_TIM_Base_MspInit+0x174>
  else if(htim_base->Instance==TIM4)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a37      	ldr	r2, [pc, #220]	@ (80020fc <HAL_TIM_Base_MspInit+0x188>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d116      	bne.n	8002052 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	4a31      	ldr	r2, [pc, #196]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6413      	str	r3, [r2, #64]	@ 0x40
 8002034:	4b2f      	ldr	r3, [pc, #188]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2101      	movs	r1, #1
 8002044:	201e      	movs	r0, #30
 8002046:	f001 f920 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800204a:	201e      	movs	r0, #30
 800204c:	f001 f939 	bl	80032c2 <HAL_NVIC_EnableIRQ>
}
 8002050:	e04a      	b.n	80020e8 <HAL_TIM_Base_MspInit+0x174>
  else if(htim_base->Instance==TIM5)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2a      	ldr	r2, [pc, #168]	@ (8002100 <HAL_TIM_Base_MspInit+0x18c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d10e      	bne.n	800207a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	4a23      	ldr	r2, [pc, #140]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	6413      	str	r3, [r2, #64]	@ 0x40
 800206c:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]
}
 8002078:	e036      	b.n	80020e8 <HAL_TIM_Base_MspInit+0x174>
  else if(htim_base->Instance==TIM6)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a21      	ldr	r2, [pc, #132]	@ (8002104 <HAL_TIM_Base_MspInit+0x190>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d116      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	4a19      	ldr	r2, [pc, #100]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 800208e:	f043 0310 	orr.w	r3, r3, #16
 8002092:	6413      	str	r3, [r2, #64]	@ 0x40
 8002094:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	2036      	movs	r0, #54	@ 0x36
 80020a6:	f001 f8f0 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020aa:	2036      	movs	r0, #54	@ 0x36
 80020ac:	f001 f909 	bl	80032c2 <HAL_NVIC_EnableIRQ>
}
 80020b0:	e01a      	b.n	80020e8 <HAL_TIM_Base_MspInit+0x174>
  else if(htim_base->Instance==TIM7)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a14      	ldr	r2, [pc, #80]	@ (8002108 <HAL_TIM_Base_MspInit+0x194>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d115      	bne.n	80020e8 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	4a0b      	ldr	r2, [pc, #44]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 80020c6:	f043 0320 	orr.w	r3, r3, #32
 80020ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80020cc:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_TIM_Base_MspInit+0x180>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2101      	movs	r1, #1
 80020dc:	2037      	movs	r0, #55	@ 0x37
 80020de:	f001 f8d4 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020e2:	2037      	movs	r0, #55	@ 0x37
 80020e4:	f001 f8ed 	bl	80032c2 <HAL_NVIC_EnableIRQ>
}
 80020e8:	bf00      	nop
 80020ea:	3738      	adds	r7, #56	@ 0x38
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40000800 	.word	0x40000800
 8002100:	40000c00 	.word	0x40000c00
 8002104:	40001000 	.word	0x40001000
 8002108:	40001400 	.word	0x40001400

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <NMI_Handler+0x4>

08002114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <MemManage_Handler+0x4>

08002124 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <UsageFault_Handler+0x4>

08002134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002162:	f000 f8d9 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002170:	4802      	ldr	r0, [pc, #8]	@ (800217c <CAN1_RX0_IRQHandler+0x10>)
 8002172:	f000 fda8 	bl	8002cc6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000068 	.word	0x20000068

08002180 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	//HAL_GPIO_WritePin(LED_CANB_GPIO_Port, LED_CANB_Pin, GPIO_PIN_SET);

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <CAN1_RX1_IRQHandler+0x10>)
 8002186:	f000 fd9e 	bl	8002cc6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000068 	.word	0x20000068

08002194 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_Pin);
 8002198:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800219c:	f001 fa8c 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_Pin);
 80021a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021a4:	f001 fa88 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  // HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021b0:	4803      	ldr	r0, [pc, #12]	@ (80021c0 <TIM4_IRQHandler+0x14>)
 80021b2:	f002 fd41 	bl	8004c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  timer50ms_flag = 1;
 80021b6:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <TIM4_IRQHandler+0x18>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM4_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000178 	.word	0x20000178
 80021c4:	2000032d 	.word	0x2000032d

080021c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021cc:	4803      	ldr	r0, [pc, #12]	@ (80021dc <TIM6_DAC_IRQHandler+0x14>)
 80021ce:	f002 fd33 	bl	8004c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  better_step_function(); //s'active au 200us
 80021d2:	f7ff fcfb 	bl	8001bcc <better_step_function>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000208 	.word	0x20000208

080021e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021e4:	4803      	ldr	r0, [pc, #12]	@ (80021f4 <TIM7_IRQHandler+0x14>)
 80021e6:	f002 fd27 	bl	8004c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  b_timer250ms_flag = 1;
 80021ea:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <TIM7_IRQHandler+0x18>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000250 	.word	0x20000250
 80021f8:	2000029c 	.word	0x2000029c

080021fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <SystemInit+0x20>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	4a05      	ldr	r2, [pc, #20]	@ (800221c <SystemInit+0x20>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	@ (800225c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	@ (8002260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	@ (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	@ (8002268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	@ (800226c <LoopFillZerobss+0x26>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800224a:	f7ff ffd7 	bl	80021fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f003 f8b5 	bl	80053bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7fe fd53 	bl	8000cfc <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002264:	0800543c 	.word	0x0800543c
  ldr r2, =_sbss
 8002268:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800226c:	20000364 	.word	0x20000364

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0d      	ldr	r2, [pc, #52]	@ (80022b4 <HAL_Init+0x40>)
 800227e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <HAL_Init+0x40>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002290:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a07      	ldr	r2, [pc, #28]	@ (80022b4 <HAL_Init+0x40>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f000 ffe9 	bl	8003274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a2:	200f      	movs	r0, #15
 80022a4:	f000 f808 	bl	80022b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fd6a 	bl	8001d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c0:	4b12      	ldr	r3, [pc, #72]	@ (800230c <HAL_InitTick+0x54>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_InitTick+0x58>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 f801 	bl	80032de <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 ffc9 	bl	800328a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	@ (8002314 <HAL_InitTick+0x5c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000040 	.word	0x20000040
 8002310:	20000048 	.word	0x20000048
 8002314:	20000044 	.word	0x20000044

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	@ (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000048 	.word	0x20000048
 800233c:	20000360 	.word	0x20000360

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	@ (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000360 	.word	0x20000360

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffde 	bl	8002340 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000048 	.word	0x20000048

080023a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0ed      	b.n	800258e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fd28 	bl	8001e14 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d4:	f7ff ffb4 	bl	8002340 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023da:	e012      	b.n	8002402 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023dc:	f7ff ffb0 	bl	8002340 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b0a      	cmp	r3, #10
 80023e8:	d90b      	bls.n	8002402 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0c5      	b.n	800258e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0e5      	beq.n	80023dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0202 	bic.w	r2, r2, #2
 800241e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002420:	f7ff ff8e 	bl	8002340 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002426:	e012      	b.n	800244e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002428:	f7ff ff8a 	bl	8002340 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b0a      	cmp	r3, #10
 8002434:	d90b      	bls.n	800244e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2205      	movs	r2, #5
 8002446:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e09f      	b.n	800258e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e5      	bne.n	8002428 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7e1b      	ldrb	r3, [r3, #24]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d108      	bne.n	8002476 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e007      	b.n	8002486 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7e5b      	ldrb	r3, [r3, #25]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d108      	bne.n	80024a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e007      	b.n	80024b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7e9b      	ldrb	r3, [r3, #26]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d108      	bne.n	80024ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0220 	orr.w	r2, r2, #32
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e007      	b.n	80024da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0220 	bic.w	r2, r2, #32
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7edb      	ldrb	r3, [r3, #27]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0210 	bic.w	r2, r2, #16
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e007      	b.n	8002504 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0210 	orr.w	r2, r2, #16
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7f1b      	ldrb	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d108      	bne.n	800251e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0208 	orr.w	r2, r2, #8
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e007      	b.n	800252e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0208 	bic.w	r2, r2, #8
 800252c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7f5b      	ldrb	r3, [r3, #29]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d108      	bne.n	8002548 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0204 	orr.w	r2, r2, #4
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e007      	b.n	8002558 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0204 	bic.w	r2, r2, #4
 8002556:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	ea42 0103 	orr.w	r1, r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d003      	beq.n	80025b8 <HAL_CAN_ConfigFilter+0x20>
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	f040 80be 	bne.w	8002734 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80025b8:	4b65      	ldr	r3, [pc, #404]	@ (8002750 <HAL_CAN_ConfigFilter+0x1b8>)
 80025ba:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80025d2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	431a      	orrs	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2201      	movs	r2, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43db      	mvns	r3, r3
 800260a:	401a      	ands	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d123      	bne.n	8002662 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	401a      	ands	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800263c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3248      	adds	r2, #72	@ 0x48
 8002642:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002656:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002658:	6939      	ldr	r1, [r7, #16]
 800265a:	3348      	adds	r3, #72	@ 0x48
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d122      	bne.n	80026b0 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	431a      	orrs	r2, r3
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800268a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	3248      	adds	r2, #72	@ 0x48
 8002690:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026a6:	6939      	ldr	r1, [r7, #16]
 80026a8:	3348      	adds	r3, #72	@ 0x48
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d109      	bne.n	80026cc <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	401a      	ands	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80026ca:	e007      	b.n	80026dc <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	401a      	ands	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80026f6:	e007      	b.n	8002708 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	431a      	orrs	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	431a      	orrs	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002726:	f023 0201 	bic.w	r2, r3, #1
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e006      	b.n	8002742 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40006400 	.word	0x40006400

08002754 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d12e      	bne.n	80027c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002780:	f7ff fdde 	bl	8002340 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002786:	e012      	b.n	80027ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002788:	f7ff fdda 	bl	8002340 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b0a      	cmp	r3, #10
 8002794:	d90b      	bls.n	80027ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2205      	movs	r2, #5
 80027a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e012      	b.n	80027d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e5      	bne.n	8002788 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e006      	b.n	80027d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
  }
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	@ 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027fa:	7ffb      	ldrb	r3, [r7, #31]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d003      	beq.n	8002808 <HAL_CAN_AddTxMessage+0x2c>
 8002800:	7ffb      	ldrb	r3, [r7, #31]
 8002802:	2b02      	cmp	r3, #2
 8002804:	f040 80ad 	bne.w	8002962 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8095 	beq.w	8002952 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	0e1b      	lsrs	r3, r3, #24
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002832:	2201      	movs	r2, #1
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10d      	bne.n	8002860 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800284e:	68f9      	ldr	r1, [r7, #12]
 8002850:	6809      	ldr	r1, [r1, #0]
 8002852:	431a      	orrs	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3318      	adds	r3, #24
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	440b      	add	r3, r1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e00f      	b.n	8002880 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800286a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002874:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3318      	adds	r3, #24
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	440b      	add	r3, r1
 800287e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3318      	adds	r3, #24
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	440b      	add	r3, r1
 8002890:	3304      	adds	r3, #4
 8002892:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	7d1b      	ldrb	r3, [r3, #20]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d111      	bne.n	80028c0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3318      	adds	r3, #24
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	4413      	add	r3, r2
 80028a8:	3304      	adds	r3, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	6811      	ldr	r1, [r2, #0]
 80028b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3318      	adds	r3, #24
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	440b      	add	r3, r1
 80028bc:	3304      	adds	r3, #4
 80028be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3307      	adds	r3, #7
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	061a      	lsls	r2, r3, #24
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3306      	adds	r3, #6
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	041b      	lsls	r3, r3, #16
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3305      	adds	r3, #5
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	4313      	orrs	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	3204      	adds	r2, #4
 80028e0:	7812      	ldrb	r2, [r2, #0]
 80028e2:	4610      	mov	r0, r2
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	6811      	ldr	r1, [r2, #0]
 80028e8:	ea43 0200 	orr.w	r2, r3, r0
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	440b      	add	r3, r1
 80028f2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80028f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3303      	adds	r3, #3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	061a      	lsls	r2, r3, #24
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3302      	adds	r3, #2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3301      	adds	r3, #1
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	4313      	orrs	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	4610      	mov	r0, r2
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	6811      	ldr	r1, [r2, #0]
 800291e:	ea43 0200 	orr.w	r2, r3, r0
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	440b      	add	r3, r1
 8002928:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800292c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3318      	adds	r3, #24
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	4413      	add	r3, r2
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	6811      	ldr	r1, [r2, #0]
 8002940:	f043 0201 	orr.w	r2, r3, #1
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3318      	adds	r3, #24
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	440b      	add	r3, r1
 800294c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e00e      	b.n	8002970 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e006      	b.n	8002970 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3724      	adds	r7, #36	@ 0x24
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002990:	7afb      	ldrb	r3, [r7, #11]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d002      	beq.n	800299c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002996:	7afb      	ldrb	r3, [r7, #11]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d11d      	bne.n	80029d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3301      	adds	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3301      	adds	r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3301      	adds	r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80029d8:	68fb      	ldr	r3, [r7, #12]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80029e6:	b480      	push	{r7}
 80029e8:	b087      	sub	sp, #28
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d003      	beq.n	8002a0a <HAL_CAN_GetRxMessage+0x24>
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	f040 8103 	bne.w	8002c10 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10e      	bne.n	8002a2e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0f7      	b.n	8002c1e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0e8      	b.n	8002c1e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	331b      	adds	r3, #27
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	4413      	add	r3, r2
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0204 	and.w	r2, r3, #4
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	331b      	adds	r3, #27
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	4413      	add	r3, r2
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0d5b      	lsrs	r3, r3, #21
 8002a7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e00b      	b.n	8002a9c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	331b      	adds	r3, #27
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	4413      	add	r3, r2
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	08db      	lsrs	r3, r3, #3
 8002a94:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	331b      	adds	r3, #27
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0202 	and.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	331b      	adds	r3, #27
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	4413      	add	r3, r2
 8002abe:	3304      	adds	r3, #4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2208      	movs	r2, #8
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	e00b      	b.n	8002aea <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	331b      	adds	r3, #27
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 020f 	and.w	r2, r3, #15
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	331b      	adds	r3, #27
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	4413      	add	r3, r2
 8002af6:	3304      	adds	r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	331b      	adds	r3, #27
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3304      	adds	r3, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0a1a      	lsrs	r2, r3, #8
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0c1a      	lsrs	r2, r3, #16
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	3302      	adds	r3, #2
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0e1a      	lsrs	r2, r3, #24
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	3303      	adds	r3, #3
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	3304      	adds	r3, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	0a1a      	lsrs	r2, r3, #8
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	3305      	adds	r3, #5
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0c1a      	lsrs	r2, r3, #16
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	3306      	adds	r3, #6
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e1a      	lsrs	r2, r3, #24
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	3307      	adds	r3, #7
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0220 	orr.w	r2, r2, #32
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	e007      	b.n	8002c0c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0220 	orr.w	r2, r2, #32
 8002c0a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e006      	b.n	8002c1e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c3e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c40:	7afb      	ldrb	r3, [r7, #11]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d002      	beq.n	8002c4c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002c46:	7afb      	ldrb	r3, [r7, #11]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d10f      	bne.n	8002c6c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e005      	b.n	8002c6c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c8a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d002      	beq.n	8002c98 <HAL_CAN_ActivateNotification+0x1e>
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d109      	bne.n	8002cac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6959      	ldr	r1, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e006      	b.n	8002cba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b08a      	sub	sp, #40	@ 0x28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d07c      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f983 	bl	8003034 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d2e:	e016      	b.n	8002d5e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d42:	e00c      	b.n	8002d5e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d56:	e002      	b.n	8002d5e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f989 	bl	8003070 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d024      	beq.n	8002db2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f963 	bl	8003048 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d82:	e016      	b.n	8002db2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d96:	e00c      	b.n	8002db2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002daa:	e002      	b.n	8002db2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f969 	bl	8003084 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d024      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002dc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f943 	bl	800305c <HAL_CAN_TxMailbox2CompleteCallback>
 8002dd6:	e016      	b.n	8002e06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dea:	e00c      	b.n	8002e06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d004      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfe:	e002      	b.n	8002e06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f949 	bl	8003098 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00c      	beq.n	8002e2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2210      	movs	r2, #16
 8002e28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2208      	movs	r2, #8
 8002e44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd feda 	bl	8000c00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fd feb3 	bl	8000bd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd feb2 	bl	8000c14 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7fd fe8d 	bl	8000be8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8de 	bl	80030ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f8d7 	bl	80030c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d07b      	beq.n	8003014 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d072      	beq.n	800300c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d043      	beq.n	800300c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d03e      	beq.n	800300c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f94:	2b60      	cmp	r3, #96	@ 0x60
 8002f96:	d02b      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x32a>
 8002f98:	2b60      	cmp	r3, #96	@ 0x60
 8002f9a:	d82e      	bhi.n	8002ffa <HAL_CAN_IRQHandler+0x334>
 8002f9c:	2b50      	cmp	r3, #80	@ 0x50
 8002f9e:	d022      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x320>
 8002fa0:	2b50      	cmp	r3, #80	@ 0x50
 8002fa2:	d82a      	bhi.n	8002ffa <HAL_CAN_IRQHandler+0x334>
 8002fa4:	2b40      	cmp	r3, #64	@ 0x40
 8002fa6:	d019      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x316>
 8002fa8:	2b40      	cmp	r3, #64	@ 0x40
 8002faa:	d826      	bhi.n	8002ffa <HAL_CAN_IRQHandler+0x334>
 8002fac:	2b30      	cmp	r3, #48	@ 0x30
 8002fae:	d010      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0x30c>
 8002fb0:	2b30      	cmp	r3, #48	@ 0x30
 8002fb2:	d822      	bhi.n	8002ffa <HAL_CAN_IRQHandler+0x334>
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d002      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x2f8>
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d005      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002fbc:	e01d      	b.n	8002ffa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	f043 0308 	orr.w	r3, r3, #8
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fc6:	e019      	b.n	8002ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	f043 0310 	orr.w	r3, r3, #16
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fd0:	e014      	b.n	8002ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	f043 0320 	orr.w	r3, r3, #32
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fda:	e00f      	b.n	8002ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fe4:	e00a      	b.n	8002ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fee:	e005      	b.n	8002ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ff8:	e000      	b.n	8002ffc <HAL_CAN_IRQHandler+0x336>
            break;
 8002ffa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800300a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2204      	movs	r2, #4
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fdfe 	bl	8000c28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800302c:	bf00      	nop
 800302e:	3728      	adds	r7, #40	@ 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003106:	4a04      	ldr	r2, [pc, #16]	@ (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	60d3      	str	r3, [r2, #12]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003120:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <__NVIC_GetPriorityGrouping+0x18>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0307 	and.w	r3, r3, #7
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	2b00      	cmp	r3, #0
 8003148:	db0b      	blt.n	8003162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	4907      	ldr	r1, [pc, #28]	@ (8003170 <__NVIC_EnableIRQ+0x38>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2001      	movs	r0, #1
 800315a:	fa00 f202 	lsl.w	r2, r0, r2
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e100 	.word	0xe000e100

08003174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	6039      	str	r1, [r7, #0]
 800317e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	2b00      	cmp	r3, #0
 8003186:	db0a      	blt.n	800319e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	490c      	ldr	r1, [pc, #48]	@ (80031c0 <__NVIC_SetPriority+0x4c>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	0112      	lsls	r2, r2, #4
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	440b      	add	r3, r1
 8003198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800319c:	e00a      	b.n	80031b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4908      	ldr	r1, [pc, #32]	@ (80031c4 <__NVIC_SetPriority+0x50>)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	3b04      	subs	r3, #4
 80031ac:	0112      	lsls	r2, r2, #4
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	440b      	add	r3, r1
 80031b2:	761a      	strb	r2, [r3, #24]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000e100 	.word	0xe000e100
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	@ 0x24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f1c3 0307 	rsb	r3, r3, #7
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	bf28      	it	cs
 80031e6:	2304      	movcs	r3, #4
 80031e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d902      	bls.n	80031f8 <NVIC_EncodePriority+0x30>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3b03      	subs	r3, #3
 80031f6:	e000      	b.n	80031fa <NVIC_EncodePriority+0x32>
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	401a      	ands	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003210:	f04f 31ff 	mov.w	r1, #4294967295
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	43d9      	mvns	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	4313      	orrs	r3, r2
         );
}
 8003222:	4618      	mov	r0, r3
 8003224:	3724      	adds	r7, #36	@ 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003240:	d301      	bcc.n	8003246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003242:	2301      	movs	r3, #1
 8003244:	e00f      	b.n	8003266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003246:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <SysTick_Config+0x40>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324e:	210f      	movs	r1, #15
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	f7ff ff8e 	bl	8003174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <SysTick_Config+0x40>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325e:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <SysTick_Config+0x40>)
 8003260:	2207      	movs	r2, #7
 8003262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	e000e010 	.word	0xe000e010

08003274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff29 	bl	80030d4 <__NVIC_SetPriorityGrouping>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	4603      	mov	r3, r0
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800329c:	f7ff ff3e 	bl	800311c <__NVIC_GetPriorityGrouping>
 80032a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f7ff ff8e 	bl	80031c8 <NVIC_EncodePriority>
 80032ac:	4602      	mov	r2, r0
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff5d 	bl	8003174 <__NVIC_SetPriority>
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff31 	bl	8003138 <__NVIC_EnableIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ffa2 	bl	8003230 <SysTick_Config>
 80032ec:	4603      	mov	r3, r0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	@ 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e165      	b.n	80035e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003314:	2201      	movs	r2, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	429a      	cmp	r2, r3
 800332e:	f040 8154 	bne.w	80035da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d005      	beq.n	800334a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003346:	2b02      	cmp	r3, #2
 8003348:	d130      	bne.n	80033ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003380:	2201      	movs	r2, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 0201 	and.w	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d017      	beq.n	80033e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d123      	bne.n	800343c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80ae 	beq.w	80035da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	4b5d      	ldr	r3, [pc, #372]	@ (80035f8 <HAL_GPIO_Init+0x300>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	4a5c      	ldr	r2, [pc, #368]	@ (80035f8 <HAL_GPIO_Init+0x300>)
 8003488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800348c:	6453      	str	r3, [r2, #68]	@ 0x44
 800348e:	4b5a      	ldr	r3, [pc, #360]	@ (80035f8 <HAL_GPIO_Init+0x300>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800349a:	4a58      	ldr	r2, [pc, #352]	@ (80035fc <HAL_GPIO_Init+0x304>)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003600 <HAL_GPIO_Init+0x308>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d025      	beq.n	8003512 <HAL_GPIO_Init+0x21a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003604 <HAL_GPIO_Init+0x30c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01f      	beq.n	800350e <HAL_GPIO_Init+0x216>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003608 <HAL_GPIO_Init+0x310>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d019      	beq.n	800350a <HAL_GPIO_Init+0x212>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4c      	ldr	r2, [pc, #304]	@ (800360c <HAL_GPIO_Init+0x314>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_GPIO_Init+0x20e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003610 <HAL_GPIO_Init+0x318>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00d      	beq.n	8003502 <HAL_GPIO_Init+0x20a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003614 <HAL_GPIO_Init+0x31c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <HAL_GPIO_Init+0x206>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a49      	ldr	r2, [pc, #292]	@ (8003618 <HAL_GPIO_Init+0x320>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_GPIO_Init+0x202>
 80034f6:	2306      	movs	r3, #6
 80034f8:	e00c      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 80034fa:	2307      	movs	r3, #7
 80034fc:	e00a      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 80034fe:	2305      	movs	r3, #5
 8003500:	e008      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 8003502:	2304      	movs	r3, #4
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 8003506:	2303      	movs	r3, #3
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 8003512:	2300      	movs	r3, #0
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003524:	4935      	ldr	r1, [pc, #212]	@ (80035fc <HAL_GPIO_Init+0x304>)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003532:	4b3a      	ldr	r3, [pc, #232]	@ (800361c <HAL_GPIO_Init+0x324>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003556:	4a31      	ldr	r2, [pc, #196]	@ (800361c <HAL_GPIO_Init+0x324>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800355c:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <HAL_GPIO_Init+0x324>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003580:	4a26      	ldr	r2, [pc, #152]	@ (800361c <HAL_GPIO_Init+0x324>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003586:	4b25      	ldr	r3, [pc, #148]	@ (800361c <HAL_GPIO_Init+0x324>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035aa:	4a1c      	ldr	r2, [pc, #112]	@ (800361c <HAL_GPIO_Init+0x324>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	@ (800361c <HAL_GPIO_Init+0x324>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d4:	4a11      	ldr	r2, [pc, #68]	@ (800361c <HAL_GPIO_Init+0x324>)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3301      	adds	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b0f      	cmp	r3, #15
 80035e4:	f67f ae96 	bls.w	8003314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3724      	adds	r7, #36	@ 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40013800 	.word	0x40013800
 8003600:	40020000 	.word	0x40020000
 8003604:	40020400 	.word	0x40020400
 8003608:	40020800 	.word	0x40020800
 800360c:	40020c00 	.word	0x40020c00
 8003610:	40021000 	.word	0x40021000
 8003614:	40021400 	.word	0x40021400
 8003618:	40021800 	.word	0x40021800
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e001      	b.n	8003642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	807b      	strh	r3, [r7, #2]
 800365c:	4613      	mov	r3, r2
 800365e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003660:	787b      	ldrb	r3, [r7, #1]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800366c:	e003      	b.n	8003676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800366e:	887b      	ldrh	r3, [r7, #2]
 8003670:	041a      	lsls	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	619a      	str	r2, [r3, #24]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003694:	887a      	ldrh	r2, [r7, #2]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	041a      	lsls	r2, r3, #16
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43d9      	mvns	r1, r3
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	400b      	ands	r3, r1
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	619a      	str	r2, [r3, #24]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036c2:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ce:	4a05      	ldr	r2, [pc, #20]	@ (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fee8 	bl	80014ac <HAL_GPIO_EXTI_Callback>
  }
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0cc      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b68      	ldr	r3, [pc, #416]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d90c      	bls.n	8003724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b65      	ldr	r3, [pc, #404]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b63      	ldr	r3, [pc, #396]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0b8      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d020      	beq.n	8003772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800373c:	4b59      	ldr	r3, [pc, #356]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a58      	ldr	r2, [pc, #352]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003746:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003754:	4b53      	ldr	r3, [pc, #332]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4a52      	ldr	r2, [pc, #328]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800375e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b50      	ldr	r3, [pc, #320]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	494d      	ldr	r1, [pc, #308]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d044      	beq.n	8003808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b47      	ldr	r3, [pc, #284]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d119      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e07f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d003      	beq.n	80037a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	4b3f      	ldr	r3, [pc, #252]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e06f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	4b3b      	ldr	r3, [pc, #236]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e067      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4b37      	ldr	r3, [pc, #220]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4934      	ldr	r1, [pc, #208]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d8:	f7fe fdb2 	bl	8002340 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fe fdae 	bl	8002340 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e04f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b2b      	ldr	r3, [pc, #172]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 020c 	and.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d1eb      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003808:	4b25      	ldr	r3, [pc, #148]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d20c      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b22      	ldr	r3, [pc, #136]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b20      	ldr	r3, [pc, #128]	@ (80038a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e032      	b.n	8003896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383c:	4b19      	ldr	r3, [pc, #100]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4916      	ldr	r1, [pc, #88]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385a:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	490e      	ldr	r1, [pc, #56]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800386e:	f000 f821 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	490a      	ldr	r1, [pc, #40]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	fa22 f303 	lsr.w	r3, r2, r3
 8003886:	4a09      	ldr	r2, [pc, #36]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800388a:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fd12 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023c00 	.word	0x40023c00
 80038a4:	40023800 	.word	0x40023800
 80038a8:	0800541c 	.word	0x0800541c
 80038ac:	20000040 	.word	0x20000040
 80038b0:	20000044 	.word	0x20000044

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b8:	b0a6      	sub	sp, #152	@ 0x98
 80038ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038da:	4bc8      	ldr	r3, [pc, #800]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	f200 817e 	bhi.w	8003be4 <HAL_RCC_GetSysClockFreq+0x330>
 80038e8:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003925 	.word	0x08003925
 80038f4:	08003be5 	.word	0x08003be5
 80038f8:	08003be5 	.word	0x08003be5
 80038fc:	08003be5 	.word	0x08003be5
 8003900:	0800392d 	.word	0x0800392d
 8003904:	08003be5 	.word	0x08003be5
 8003908:	08003be5 	.word	0x08003be5
 800390c:	08003be5 	.word	0x08003be5
 8003910:	08003935 	.word	0x08003935
 8003914:	08003be5 	.word	0x08003be5
 8003918:	08003be5 	.word	0x08003be5
 800391c:	08003be5 	.word	0x08003be5
 8003920:	08003a9f 	.word	0x08003a9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4bb6      	ldr	r3, [pc, #728]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800392a:	e15f      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800392c:	4bb5      	ldr	r3, [pc, #724]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x350>)
 800392e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003932:	e15b      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003934:	4bb1      	ldr	r3, [pc, #708]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800393c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003940:	4bae      	ldr	r3, [pc, #696]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d031      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394c:	4bab      	ldr	r3, [pc, #684]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	2200      	movs	r2, #0
 8003954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003956:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800395a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003960:	2300      	movs	r3, #0
 8003962:	667b      	str	r3, [r7, #100]	@ 0x64
 8003964:	4ba7      	ldr	r3, [pc, #668]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x350>)
 8003966:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800396a:	462a      	mov	r2, r5
 800396c:	fb03 f202 	mul.w	r2, r3, r2
 8003970:	2300      	movs	r3, #0
 8003972:	4621      	mov	r1, r4
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	4413      	add	r3, r2
 800397a:	4aa2      	ldr	r2, [pc, #648]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x350>)
 800397c:	4621      	mov	r1, r4
 800397e:	fba1 1202 	umull	r1, r2, r1, r2
 8003982:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003984:	460a      	mov	r2, r1
 8003986:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003988:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800398a:	4413      	add	r3, r2
 800398c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800398e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003992:	2200      	movs	r2, #0
 8003994:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003996:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003998:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800399c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80039a0:	f7fc fc30 	bl	8000204 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039ae:	e064      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b0:	4b92      	ldr	r3, [pc, #584]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	2200      	movs	r2, #0
 80039b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80039bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c4:	2300      	movs	r3, #0
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80039cc:	4622      	mov	r2, r4
 80039ce:	462b      	mov	r3, r5
 80039d0:	f04f 0000 	mov.w	r0, #0
 80039d4:	f04f 0100 	mov.w	r1, #0
 80039d8:	0159      	lsls	r1, r3, #5
 80039da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039de:	0150      	lsls	r0, r2, #5
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4621      	mov	r1, r4
 80039e6:	1a51      	subs	r1, r2, r1
 80039e8:	6139      	str	r1, [r7, #16]
 80039ea:	4629      	mov	r1, r5
 80039ec:	eb63 0301 	sbc.w	r3, r3, r1
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039fe:	4659      	mov	r1, fp
 8003a00:	018b      	lsls	r3, r1, #6
 8003a02:	4651      	mov	r1, sl
 8003a04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a08:	4651      	mov	r1, sl
 8003a0a:	018a      	lsls	r2, r1, #6
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ebb2 0801 	subs.w	r8, r2, r1
 8003a12:	4659      	mov	r1, fp
 8003a14:	eb63 0901 	sbc.w	r9, r3, r1
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2c:	4690      	mov	r8, r2
 8003a2e:	4699      	mov	r9, r3
 8003a30:	4623      	mov	r3, r4
 8003a32:	eb18 0303 	adds.w	r3, r8, r3
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	462b      	mov	r3, r5
 8003a3a:	eb49 0303 	adc.w	r3, r9, r3
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	028b      	lsls	r3, r1, #10
 8003a50:	4621      	mov	r1, r4
 8003a52:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a56:	4621      	mov	r1, r4
 8003a58:	028a      	lsls	r2, r1, #10
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a62:	2200      	movs	r2, #0
 8003a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a66:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a6c:	f7fc fbca 	bl	8000204 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4613      	mov	r3, r2
 8003a76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a7a:	4b60      	ldr	r3, [pc, #384]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	3301      	adds	r3, #1
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003a8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a9c:	e0a6      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a9e:	4b57      	ldr	r3, [pc, #348]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aaa:	4b54      	ldr	r3, [pc, #336]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d02a      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab6:	4b51      	ldr	r3, [pc, #324]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	099b      	lsrs	r3, r3, #6
 8003abc:	2200      	movs	r2, #0
 8003abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4b4e      	ldr	r3, [pc, #312]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x350>)
 8003acc:	fb03 f201 	mul.w	r2, r3, r1
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	fb00 f303 	mul.w	r3, r0, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ada:	fba0 1202 	umull	r1, r2, r0, r2
 8003ade:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	673a      	str	r2, [r7, #112]	@ 0x70
 8003ae4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003ae6:	4413      	add	r3, r2
 8003ae8:	677b      	str	r3, [r7, #116]	@ 0x74
 8003aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aee:	2200      	movs	r2, #0
 8003af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af2:	637a      	str	r2, [r7, #52]	@ 0x34
 8003af4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003af8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003afc:	f7fc fb82 	bl	8000204 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4613      	mov	r3, r2
 8003b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b0a:	e05b      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	2200      	movs	r2, #0
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b28:	4642      	mov	r2, r8
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	f04f 0000 	mov.w	r0, #0
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	0159      	lsls	r1, r3, #5
 8003b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b3a:	0150      	lsls	r0, r2, #5
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4641      	mov	r1, r8
 8003b42:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b46:	4649      	mov	r1, r9
 8003b48:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b60:	ebb2 040a 	subs.w	r4, r2, sl
 8003b64:	eb63 050b 	sbc.w	r5, r3, fp
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	00eb      	lsls	r3, r5, #3
 8003b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b76:	00e2      	lsls	r2, r4, #3
 8003b78:	4614      	mov	r4, r2
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	4643      	mov	r3, r8
 8003b7e:	18e3      	adds	r3, r4, r3
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	464b      	mov	r3, r9
 8003b84:	eb45 0303 	adc.w	r3, r5, r3
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b96:	4629      	mov	r1, r5
 8003b98:	028b      	lsls	r3, r1, #10
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	028a      	lsls	r2, r1, #10
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bac:	2200      	movs	r2, #0
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	61fa      	str	r2, [r7, #28]
 8003bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb6:	f7fc fb25 	bl	8000204 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0f1b      	lsrs	r3, r3, #28
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003bd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003be2:	e003      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003bea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3798      	adds	r7, #152	@ 0x98
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	017d7840 	.word	0x017d7840

08003c08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e28d      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8083 	beq.w	8003d2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c28:	4b94      	ldr	r3, [pc, #592]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d019      	beq.n	8003c68 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c34:	4b91      	ldr	r3, [pc, #580]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
        || \
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c40:	4b8e      	ldr	r3, [pc, #568]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c4c:	d00c      	beq.n	8003c68 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	d112      	bne.n	8003c80 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5a:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c66:	d10b      	bne.n	8003c80 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	4b84      	ldr	r3, [pc, #528]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d05b      	beq.n	8003d2c <HAL_RCC_OscConfig+0x124>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d157      	bne.n	8003d2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e25a      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c88:	d106      	bne.n	8003c98 <HAL_RCC_OscConfig+0x90>
 8003c8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a7b      	ldr	r2, [pc, #492]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0xcc>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0xb4>
 8003ca2:	4b76      	ldr	r3, [pc, #472]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a75      	ldr	r2, [pc, #468]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b73      	ldr	r3, [pc, #460]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a72      	ldr	r2, [pc, #456]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xcc>
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fb30 	bl	8002340 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fe fb2c 	bl	8002340 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e21f      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b61      	ldr	r3, [pc, #388]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xdc>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe fb1c 	bl	8002340 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fe fb18 	bl	8002340 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	@ 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e20b      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	4b57      	ldr	r3, [pc, #348]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x104>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d06f      	beq.n	8003e1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d3a:	4b50      	ldr	r3, [pc, #320]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d017      	beq.n	8003d76 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d46:	4b4d      	ldr	r3, [pc, #308]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d105      	bne.n	8003d5e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d52:	4b4a      	ldr	r3, [pc, #296]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5e:	4b47      	ldr	r3, [pc, #284]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d11c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6a:	4b44      	ldr	r3, [pc, #272]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d116      	bne.n	8003da4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_OscConfig+0x186>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d001      	beq.n	8003d8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e1d3      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4937      	ldr	r1, [pc, #220]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da2:	e03a      	b.n	8003e1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dac:	4b34      	ldr	r3, [pc, #208]	@ (8003e80 <HAL_RCC_OscConfig+0x278>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db2:	f7fe fac5 	bl	8002340 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dba:	f7fe fac1 	bl	8002340 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1b4      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd8:	4b28      	ldr	r3, [pc, #160]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4925      	ldr	r1, [pc, #148]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]
 8003dec:	e015      	b.n	8003e1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dee:	4b24      	ldr	r3, [pc, #144]	@ (8003e80 <HAL_RCC_OscConfig+0x278>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe faa4 	bl	8002340 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfc:	f7fe faa0 	bl	8002340 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e193      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d036      	beq.n	8003e94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d016      	beq.n	8003e5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2e:	4b15      	ldr	r3, [pc, #84]	@ (8003e84 <HAL_RCC_OscConfig+0x27c>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e34:	f7fe fa84 	bl	8002340 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3c:	f7fe fa80 	bl	8002340 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e173      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x234>
 8003e5a:	e01b      	b.n	8003e94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e5c:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <HAL_RCC_OscConfig+0x27c>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fe fa6d 	bl	8002340 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e68:	e00e      	b.n	8003e88 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6a:	f7fe fa69 	bl	8002340 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d907      	bls.n	8003e88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e15c      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	42470000 	.word	0x42470000
 8003e84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e88:	4b8a      	ldr	r3, [pc, #552]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ea      	bne.n	8003e6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8097 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea6:	4b83      	ldr	r3, [pc, #524]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	4a7e      	ldr	r2, [pc, #504]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed2:	4b79      	ldr	r3, [pc, #484]	@ (80040b8 <HAL_RCC_OscConfig+0x4b0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d118      	bne.n	8003f10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ede:	4b76      	ldr	r3, [pc, #472]	@ (80040b8 <HAL_RCC_OscConfig+0x4b0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a75      	ldr	r2, [pc, #468]	@ (80040b8 <HAL_RCC_OscConfig+0x4b0>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eea:	f7fe fa29 	bl	8002340 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef2:	f7fe fa25 	bl	8002340 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e118      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	4b6c      	ldr	r3, [pc, #432]	@ (80040b8 <HAL_RCC_OscConfig+0x4b0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d106      	bne.n	8003f26 <HAL_RCC_OscConfig+0x31e>
 8003f18:	4b66      	ldr	r3, [pc, #408]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1c:	4a65      	ldr	r2, [pc, #404]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f24:	e01c      	b.n	8003f60 <HAL_RCC_OscConfig+0x358>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x340>
 8003f2e:	4b61      	ldr	r3, [pc, #388]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f32:	4a60      	ldr	r2, [pc, #384]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f34:	f043 0304 	orr.w	r3, r3, #4
 8003f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f3a:	4b5e      	ldr	r3, [pc, #376]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3e:	4a5d      	ldr	r2, [pc, #372]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f46:	e00b      	b.n	8003f60 <HAL_RCC_OscConfig+0x358>
 8003f48:	4b5a      	ldr	r3, [pc, #360]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4a59      	ldr	r2, [pc, #356]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f54:	4b57      	ldr	r3, [pc, #348]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f58:	4a56      	ldr	r2, [pc, #344]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f5a:	f023 0304 	bic.w	r3, r3, #4
 8003f5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d015      	beq.n	8003f94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f68:	f7fe f9ea 	bl	8002340 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f7fe f9e6 	bl	8002340 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e0d7      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f86:	4b4b      	ldr	r3, [pc, #300]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0ee      	beq.n	8003f70 <HAL_RCC_OscConfig+0x368>
 8003f92:	e014      	b.n	8003fbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fe f9d4 	bl	8002340 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9c:	f7fe f9d0 	bl	8002340 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e0c1      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb2:	4b40      	ldr	r3, [pc, #256]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1ee      	bne.n	8003f9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d105      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	4a3a      	ldr	r2, [pc, #232]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80ad 	beq.w	8004134 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fda:	4b36      	ldr	r3, [pc, #216]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d060      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d145      	bne.n	800407a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fee:	4b33      	ldr	r3, [pc, #204]	@ (80040bc <HAL_RCC_OscConfig+0x4b4>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe f9a4 	bl	8002340 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe f9a0 	bl	8002340 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e093      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	4b29      	ldr	r3, [pc, #164]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	019b      	lsls	r3, r3, #6
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	085b      	lsrs	r3, r3, #1
 8004032:	3b01      	subs	r3, #1
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403c:	061b      	lsls	r3, r3, #24
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004044:	071b      	lsls	r3, r3, #28
 8004046:	491b      	ldr	r1, [pc, #108]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800404c:	4b1b      	ldr	r3, [pc, #108]	@ (80040bc <HAL_RCC_OscConfig+0x4b4>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fe f975 	bl	8002340 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405a:	f7fe f971 	bl	8002340 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e064      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406c:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x452>
 8004078:	e05c      	b.n	8004134 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <HAL_RCC_OscConfig+0x4b4>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fe f95e 	bl	8002340 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004088:	f7fe f95a 	bl	8002340 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e04d      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <HAL_RCC_OscConfig+0x4ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x480>
 80040a6:	e045      	b.n	8004134 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e040      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40007000 	.word	0x40007000
 80040bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <HAL_RCC_OscConfig+0x538>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d030      	beq.n	8004130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d129      	bne.n	8004130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d122      	bne.n	8004130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040f0:	4013      	ands	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d119      	bne.n	8004130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	3b01      	subs	r3, #1
 800410a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d10f      	bne.n	8004130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d107      	bne.n	8004130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023800 	.word	0x40023800

08004144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07b      	b.n	800424e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d108      	bne.n	8004170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004166:	d009      	beq.n	800417c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	61da      	str	r2, [r3, #28]
 800416e:	e005      	b.n	800417c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fe94 	bl	8001ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	ea42 0103 	orr.w	r1, r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	f003 0104 	and.w	r1, r3, #4
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	f003 0210 	and.w	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800423c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b088      	sub	sp, #32
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004266:	f7fe f86b 	bl	8002340 <HAL_GetTick>
 800426a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d001      	beq.n	8004280 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
 800427e:	e12a      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_SPI_Transmit+0x36>
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e122      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_SPI_Transmit+0x48>
 800429a:	2302      	movs	r3, #2
 800429c:	e11b      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2203      	movs	r2, #3
 80042aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	88fa      	ldrh	r2, [r7, #6]
 80042be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ec:	d10f      	bne.n	800430e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800430c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d007      	beq.n	800432c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800432a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004334:	d152      	bne.n	80043dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_SPI_Transmit+0xee>
 800433e:	8b7b      	ldrh	r3, [r7, #26]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d145      	bne.n	80043d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004368:	e032      	b.n	80043d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d112      	bne.n	800439e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437c:	881a      	ldrh	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	1c9a      	adds	r2, r3, #2
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800439c:	e018      	b.n	80043d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800439e:	f7fd ffcf 	bl	8002340 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d803      	bhi.n	80043b6 <HAL_SPI_Transmit+0x160>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d102      	bne.n	80043bc <HAL_SPI_Transmit+0x166>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e082      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1c7      	bne.n	800436a <HAL_SPI_Transmit+0x114>
 80043da:	e053      	b.n	8004484 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0x194>
 80043e4:	8b7b      	ldrh	r3, [r7, #26]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d147      	bne.n	800447a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004410:	e033      	b.n	800447a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d113      	bne.n	8004448 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004446:	e018      	b.n	800447a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004448:	f7fd ff7a 	bl	8002340 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d803      	bhi.n	8004460 <HAL_SPI_Transmit+0x20a>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d102      	bne.n	8004466 <HAL_SPI_Transmit+0x210>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e02d      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1c6      	bne.n	8004412 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fa59 	bl	8004940 <SPI_EndRxTxTransaction>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b08a      	sub	sp, #40	@ 0x28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044ec:	2301      	movs	r3, #1
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f0:	f7fd ff26 	bl	8002340 <HAL_GetTick>
 80044f4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044fc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004504:	887b      	ldrh	r3, [r7, #2]
 8004506:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004508:	7ffb      	ldrb	r3, [r7, #31]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d00c      	beq.n	8004528 <HAL_SPI_TransmitReceive+0x4a>
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004514:	d106      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x46>
 800451e:	7ffb      	ldrb	r3, [r7, #31]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d001      	beq.n	8004528 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
 8004526:	e17f      	b.n	8004828 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_SPI_TransmitReceive+0x5c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_SPI_TransmitReceive+0x5c>
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e174      	b.n	8004828 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_SPI_TransmitReceive+0x6e>
 8004548:	2302      	movs	r3, #2
 800454a:	e16d      	b.n	8004828 <HAL_SPI_TransmitReceive+0x34a>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b04      	cmp	r3, #4
 800455e:	d003      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2205      	movs	r2, #5
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	887a      	ldrh	r2, [r7, #2]
 8004578:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	887a      	ldrh	r2, [r7, #2]
 800457e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a8:	2b40      	cmp	r3, #64	@ 0x40
 80045aa:	d007      	beq.n	80045bc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c4:	d17e      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0xf6>
 80045ce:	8afb      	ldrh	r3, [r7, #22]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d16c      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d8:	881a      	ldrh	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	1c9a      	adds	r2, r3, #2
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f8:	e059      	b.n	80046ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b02      	cmp	r3, #2
 8004606:	d11b      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x162>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d016      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x162>
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	2b01      	cmp	r3, #1
 8004616:	d113      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461c:	881a      	ldrh	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d119      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x1a4>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d014      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004662:	b292      	uxth	r2, r2
 8004664:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466a:	1c9a      	adds	r2, r3, #2
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800467e:	2301      	movs	r3, #1
 8004680:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004682:	f7fd fe5d 	bl	8002340 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468e:	429a      	cmp	r2, r3
 8004690:	d80d      	bhi.n	80046ae <HAL_SPI_TransmitReceive+0x1d0>
 8004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d009      	beq.n	80046ae <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e0bc      	b.n	8004828 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1a0      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x11c>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d19b      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x11c>
 80046c2:	e082      	b.n	80047ca <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x1f4>
 80046cc:	8afb      	ldrh	r3, [r7, #22]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d171      	bne.n	80047b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f8:	e05d      	b.n	80047b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d11c      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x264>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d017      	beq.n	8004742 <HAL_SPI_TransmitReceive+0x264>
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	2b01      	cmp	r3, #1
 8004716:	d114      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	7812      	ldrb	r2, [r2, #0]
 8004724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d119      	bne.n	8004784 <HAL_SPI_TransmitReceive+0x2a6>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d014      	beq.n	8004784 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004780:	2301      	movs	r3, #1
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004784:	f7fd fddc 	bl	8002340 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004790:	429a      	cmp	r2, r3
 8004792:	d803      	bhi.n	800479c <HAL_SPI_TransmitReceive+0x2be>
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d102      	bne.n	80047a2 <HAL_SPI_TransmitReceive+0x2c4>
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e038      	b.n	8004828 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d19c      	bne.n	80046fa <HAL_SPI_TransmitReceive+0x21c>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d197      	bne.n	80046fa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f8b6 	bl	8004940 <SPI_EndRxTxTransaction>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e01d      	b.n	8004828 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004826:	2300      	movs	r3, #0
  }
}
 8004828:	4618      	mov	r0, r3
 800482a:	3728      	adds	r7, #40	@ 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004840:	f7fd fd7e 	bl	8002340 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4413      	add	r3, r2
 800484e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004850:	f7fd fd76 	bl	8002340 <HAL_GetTick>
 8004854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004856:	4b39      	ldr	r3, [pc, #228]	@ (800493c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	015b      	lsls	r3, r3, #5
 800485c:	0d1b      	lsrs	r3, r3, #20
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	fb02 f303 	mul.w	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004866:	e055      	b.n	8004914 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d051      	beq.n	8004914 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004870:	f7fd fd66 	bl	8002340 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	429a      	cmp	r2, r3
 800487e:	d902      	bls.n	8004886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d13d      	bne.n	8004902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800489e:	d111      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a8:	d004      	beq.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b2:	d107      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048cc:	d10f      	bne.n	80048ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e018      	b.n	8004934 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	e002      	b.n	8004914 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	3b01      	subs	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4013      	ands	r3, r2
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	429a      	cmp	r2, r3
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	429a      	cmp	r2, r3
 8004930:	d19a      	bne.n	8004868 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000040 	.word	0x20000040

08004940 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2201      	movs	r2, #1
 8004954:	2102      	movs	r1, #2
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff ff6a 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e032      	b.n	80049d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004972:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <SPI_EndRxTxTransaction+0xa0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1b      	ldr	r2, [pc, #108]	@ (80049e4 <SPI_EndRxTxTransaction+0xa4>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	0d5b      	lsrs	r3, r3, #21
 800497e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004990:	d112      	bne.n	80049b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2200      	movs	r2, #0
 800499a:	2180      	movs	r1, #128	@ 0x80
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff ff47 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d016      	beq.n	80049d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e00f      	b.n	80049d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ce:	2b80      	cmp	r3, #128	@ 0x80
 80049d0:	d0f2      	beq.n	80049b8 <SPI_EndRxTxTransaction+0x78>
 80049d2:	e000      	b.n	80049d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80049d4:	bf00      	nop
  }

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000040 	.word	0x20000040
 80049e4:	165e9f81 	.word	0x165e9f81

080049e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e041      	b.n	8004a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fd fab0 	bl	8001f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f000 faf0 	bl	800500c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d001      	beq.n	8004aa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e046      	b.n	8004b2e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a23      	ldr	r2, [pc, #140]	@ (8004b3c <HAL_TIM_Base_Start+0xb4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aba:	d01d      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <HAL_TIM_Base_Start+0xb8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	@ (8004b44 <HAL_TIM_Base_Start+0xbc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b48 <HAL_TIM_Base_Start+0xc0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	@ (8004b4c <HAL_TIM_Base_Start+0xc4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	@ (8004b50 <HAL_TIM_Base_Start+0xc8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	@ (8004b54 <HAL_TIM_Base_Start+0xcc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d111      	bne.n	8004b1c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d010      	beq.n	8004b2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1a:	e007      	b.n	8004b2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40001800 	.word	0x40001800

08004b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d001      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e04e      	b.n	8004c0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a23      	ldr	r2, [pc, #140]	@ (8004c1c <HAL_TIM_Base_Start_IT+0xc4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c20 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1e      	ldr	r2, [pc, #120]	@ (8004c24 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_TIM_Base_Start_IT+0x80>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a18      	ldr	r2, [pc, #96]	@ (8004c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d111      	bne.n	8004bfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d010      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfa:	e007      	b.n	8004c0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40010400 	.word	0x40010400
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40001800 	.word	0x40001800

08004c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d020      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0202 	mvn.w	r2, #2
 8004c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f9a3 	bl	8004fce <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f995 	bl	8004fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f9a6 	bl	8004fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d020      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0204 	mvn.w	r2, #4
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f97d 	bl	8004fce <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f96f 	bl	8004fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f980 	bl	8004fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d020      	beq.n	8004d34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01b      	beq.n	8004d34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0208 	mvn.w	r2, #8
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2204      	movs	r2, #4
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f957 	bl	8004fce <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f949 	bl	8004fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f95a 	bl	8004fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d020      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01b      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0210 	mvn.w	r2, #16
 8004d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2208      	movs	r2, #8
 8004d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f931 	bl	8004fce <HAL_TIM_IC_CaptureCallback>
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f923 	bl	8004fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f934 	bl	8004fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00c      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0201 	mvn.w	r2, #1
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f901 	bl	8004fa6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fae8 	bl	8005398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f905 	bl	8004ff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00c      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0220 	mvn.w	r2, #32
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 faba 	bl	8005384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_TIM_ConfigClockSource+0x1c>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e0b4      	b.n	8004f9e <HAL_TIM_ConfigClockSource+0x186>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6c:	d03e      	beq.n	8004eec <HAL_TIM_ConfigClockSource+0xd4>
 8004e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e72:	f200 8087 	bhi.w	8004f84 <HAL_TIM_ConfigClockSource+0x16c>
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7a:	f000 8086 	beq.w	8004f8a <HAL_TIM_ConfigClockSource+0x172>
 8004e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e82:	d87f      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b70      	cmp	r3, #112	@ 0x70
 8004e86:	d01a      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0xa6>
 8004e88:	2b70      	cmp	r3, #112	@ 0x70
 8004e8a:	d87b      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b60      	cmp	r3, #96	@ 0x60
 8004e8e:	d050      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x11a>
 8004e90:	2b60      	cmp	r3, #96	@ 0x60
 8004e92:	d877      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x16c>
 8004e94:	2b50      	cmp	r3, #80	@ 0x50
 8004e96:	d03c      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0xfa>
 8004e98:	2b50      	cmp	r3, #80	@ 0x50
 8004e9a:	d873      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x16c>
 8004e9c:	2b40      	cmp	r3, #64	@ 0x40
 8004e9e:	d058      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x13a>
 8004ea0:	2b40      	cmp	r3, #64	@ 0x40
 8004ea2:	d86f      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea4:	2b30      	cmp	r3, #48	@ 0x30
 8004ea6:	d064      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea8:	2b30      	cmp	r3, #48	@ 0x30
 8004eaa:	d86b      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x16c>
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d060      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x15a>
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d867      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d05c      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x15a>
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d05a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x15a>
 8004ebc:	e062      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ece:	f000 f9bd 	bl	800524c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ee0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	609a      	str	r2, [r3, #8]
      break;
 8004eea:	e04f      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004efc:	f000 f9a6 	bl	800524c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f0e:	609a      	str	r2, [r3, #8]
      break;
 8004f10:	e03c      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 f91a 	bl	8005158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2150      	movs	r1, #80	@ 0x50
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f973 	bl	8005216 <TIM_ITRx_SetConfig>
      break;
 8004f30:	e02c      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f000 f939 	bl	80051b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2160      	movs	r1, #96	@ 0x60
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f963 	bl	8005216 <TIM_ITRx_SetConfig>
      break;
 8004f50:	e01c      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f000 f8fa 	bl	8005158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2140      	movs	r1, #64	@ 0x40
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f953 	bl	8005216 <TIM_ITRx_SetConfig>
      break;
 8004f70:	e00c      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f000 f94a 	bl	8005216 <TIM_ITRx_SetConfig>
      break;
 8004f82:	e003      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
      break;
 8004f88:	e000      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a43      	ldr	r2, [pc, #268]	@ (800512c <TIM_Base_SetConfig+0x120>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800502a:	d00f      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a40      	ldr	r2, [pc, #256]	@ (8005130 <TIM_Base_SetConfig+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00b      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a3f      	ldr	r2, [pc, #252]	@ (8005134 <TIM_Base_SetConfig+0x128>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d007      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a3e      	ldr	r2, [pc, #248]	@ (8005138 <TIM_Base_SetConfig+0x12c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3d      	ldr	r2, [pc, #244]	@ (800513c <TIM_Base_SetConfig+0x130>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d108      	bne.n	800505e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a32      	ldr	r2, [pc, #200]	@ (800512c <TIM_Base_SetConfig+0x120>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d02b      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506c:	d027      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2f      	ldr	r2, [pc, #188]	@ (8005130 <TIM_Base_SetConfig+0x124>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d023      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2e      	ldr	r2, [pc, #184]	@ (8005134 <TIM_Base_SetConfig+0x128>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01f      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2d      	ldr	r2, [pc, #180]	@ (8005138 <TIM_Base_SetConfig+0x12c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01b      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2c      	ldr	r2, [pc, #176]	@ (800513c <TIM_Base_SetConfig+0x130>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d017      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a2b      	ldr	r2, [pc, #172]	@ (8005140 <TIM_Base_SetConfig+0x134>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2a      	ldr	r2, [pc, #168]	@ (8005144 <TIM_Base_SetConfig+0x138>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00f      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a29      	ldr	r2, [pc, #164]	@ (8005148 <TIM_Base_SetConfig+0x13c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00b      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a28      	ldr	r2, [pc, #160]	@ (800514c <TIM_Base_SetConfig+0x140>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a27      	ldr	r2, [pc, #156]	@ (8005150 <TIM_Base_SetConfig+0x144>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a26      	ldr	r2, [pc, #152]	@ (8005154 <TIM_Base_SetConfig+0x148>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d108      	bne.n	80050d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a0e      	ldr	r2, [pc, #56]	@ (800512c <TIM_Base_SetConfig+0x120>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_Base_SetConfig+0xf2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a10      	ldr	r2, [pc, #64]	@ (800513c <TIM_Base_SetConfig+0x130>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d103      	bne.n	8005106 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f043 0204 	orr.w	r2, r3, #4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	601a      	str	r2, [r3, #0]
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40014400 	.word	0x40014400
 8005148:	40014800 	.word	0x40014800
 800514c:	40001800 	.word	0x40001800
 8005150:	40001c00 	.word	0x40001c00
 8005154:	40002000 	.word	0x40002000

08005158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f023 030a 	bic.w	r3, r3, #10
 8005194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	621a      	str	r2, [r3, #32]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b087      	sub	sp, #28
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f023 0210 	bic.w	r2, r3, #16
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	031b      	lsls	r3, r3, #12
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	f043 0307 	orr.w	r3, r3, #7
 8005238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	609a      	str	r2, [r3, #8]
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	021a      	lsls	r2, r3, #8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	431a      	orrs	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4313      	orrs	r3, r2
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	609a      	str	r2, [r3, #8]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e05a      	b.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a21      	ldr	r2, [pc, #132]	@ (8005368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d022      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f0:	d01d      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1d      	ldr	r2, [pc, #116]	@ (800536c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d018      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1b      	ldr	r2, [pc, #108]	@ (8005370 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1a      	ldr	r2, [pc, #104]	@ (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00e      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a18      	ldr	r2, [pc, #96]	@ (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a17      	ldr	r2, [pc, #92]	@ (800537c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a15      	ldr	r2, [pc, #84]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d10c      	bne.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	4313      	orrs	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40010000 	.word	0x40010000
 800536c:	40000400 	.word	0x40000400
 8005370:	40000800 	.word	0x40000800
 8005374:	40000c00 	.word	0x40000c00
 8005378:	40010400 	.word	0x40010400
 800537c:	40014000 	.word	0x40014000
 8005380:	40001800 	.word	0x40001800

08005384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <memset>:
 80053ac:	4402      	add	r2, r0
 80053ae:	4603      	mov	r3, r0
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d100      	bne.n	80053b6 <memset+0xa>
 80053b4:	4770      	bx	lr
 80053b6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ba:	e7f9      	b.n	80053b0 <memset+0x4>

080053bc <__libc_init_array>:
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	4d0d      	ldr	r5, [pc, #52]	@ (80053f4 <__libc_init_array+0x38>)
 80053c0:	4c0d      	ldr	r4, [pc, #52]	@ (80053f8 <__libc_init_array+0x3c>)
 80053c2:	1b64      	subs	r4, r4, r5
 80053c4:	10a4      	asrs	r4, r4, #2
 80053c6:	2600      	movs	r6, #0
 80053c8:	42a6      	cmp	r6, r4
 80053ca:	d109      	bne.n	80053e0 <__libc_init_array+0x24>
 80053cc:	4d0b      	ldr	r5, [pc, #44]	@ (80053fc <__libc_init_array+0x40>)
 80053ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005400 <__libc_init_array+0x44>)
 80053d0:	f000 f818 	bl	8005404 <_init>
 80053d4:	1b64      	subs	r4, r4, r5
 80053d6:	10a4      	asrs	r4, r4, #2
 80053d8:	2600      	movs	r6, #0
 80053da:	42a6      	cmp	r6, r4
 80053dc:	d105      	bne.n	80053ea <__libc_init_array+0x2e>
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e4:	4798      	blx	r3
 80053e6:	3601      	adds	r6, #1
 80053e8:	e7ee      	b.n	80053c8 <__libc_init_array+0xc>
 80053ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ee:	4798      	blx	r3
 80053f0:	3601      	adds	r6, #1
 80053f2:	e7f2      	b.n	80053da <__libc_init_array+0x1e>
 80053f4:	08005434 	.word	0x08005434
 80053f8:	08005434 	.word	0x08005434
 80053fc:	08005434 	.word	0x08005434
 8005400:	08005438 	.word	0x08005438

08005404 <_init>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr

08005410 <_fini>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr
